/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  *	@Title IMU_Gyro
  *
  *	@Will Armentrout
  *	@version 1.0
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  /* MPU Loop Variables */
      	  /* Slave Address of the MPU-6050 */
      	  uint16_t mpuAddress = 0xD0; /* MPU-6050 Address */

      	  /* MPU-6050 Register Addresses */
      	  uint8_t regAddress_PWR_MGMT1 = 0x6B; /* Power Configuration */
      	  uint8_t regAddress_PWR_MGMT2 = 0x6C; /* Power Sample Rate Configuration */
      	  uint8_t regAddress_CONFIG = 0x1A; /* System Configuration */
      	  uint8_t regAddress_GYRO_CONFIG = 0x1B; /* Gyro Configuration */
      	  uint8_t regAddress_ACCEL_CONFIG = 0x1C; /* Accelerometer Configuration */
      	  uint8_t regAddress_ACCEL_XOUTH = 0x3B; /* X Acceleration Data High Byte */
      	  uint8_t regAddress_ACCEL_XOUTL = 0x3C; /* X Acceleration Data Low Byte */
      	  uint8_t regAddress_ACCEL_YOUTH = 0x3D; /* Y Acceleration Data High Byte */
      	  uint8_t regAddress_ACCEL_YOUTL = 0x3E; /* Y Acceleration Data Low Byte */
      	  uint8_t regAddress_ACCEL_ZOUTH = 0x3F; /* Z Acceleration Data High Byte */
      	  uint8_t regAddress_ACCEL_ZOUTL = 0x40; /* Z Acceleration Data Low Byte */
      	  uint8_t regAddress_TEMP_OUTH = 0x41; /* Temperature Data High Byte */
      	  uint8_t regAddress_TEMP_OUTL = 0x42; /* Temperature Data Low Byte */
      	  uint8_t regAddress_GYRO_XOUTH = 0x43; /* X Gyro Data High Byte */
      	  uint8_t regAddress_GYRO_XOUTL = 0x44; /* X Gyro Data Low Byte */
      	  uint8_t regAddress_GYRO_YOUTH = 0x45; /* Y Gyro Data High Byte */
      	  uint8_t regAddress_GYRO_YOUTL = 0x46; /* Y Gyro Data Low Byte */
      	  uint8_t regAddress_GYRO_ZOUTH = 0x47; /* Z Gyro Data High Byte */
      	  uint8_t regAddress_GYRO_ZOUTL = 0x48; /* Z Gyro Data Low Byte */
      	  uint8_t regAddress_WHO_AM_I = 0x75; /* Verify the Identity of the Device */
      	  uint8_t regAddress_SMPLRT_DIV = 0x19; /* Set Data Rate */

      	  /* Mode Settings */
      	  uint8_t regPWR_MGMT_1_Val = 0x00; /* Power 1 Configurations Device Reset = 0, Sleep = 0, Cycle = 0, Temp_Disable = 0, CLKSEL = 000 */
      	  uint8_t regPWR_MGMT_2_Val = 0xC0; /* Power 2 Configurations Cycle Frequency = 3, Standby = 000000 */
      	  uint8_t regCONFIG_Val = 0x00; /* System Configuration, Highest Frequency filtering on all registers */
      	  uint8_t regGYRO_CONFIG_Val = 0x00; /* Setting the full range of the Gyro to +/- 250 deg/s */
      	  uint8_t regACCEL_CONFIG_Val = 0x00; /* Setting the full range of the Acceleration to +/- 2g */
      	  uint8_t regSMPLRT_DIV_Val = 0x07; /* Data rate of 1 kHz */
      	  float gyroScale = 131.072; /* Scaling Factor for the Gyro */
      	  float accelScale = 16384.0; /* Scaling Factor for the Accelerometer */

      	  /* Output Buffers */
      	  uint8_t dataReg_Accel_X[2]; /* Buffer for reading the X Acceleration register */
      	  uint8_t dataReg_Accel_Y[2]; /* Buffer for reading the Y Acceleration register */
      	  uint8_t dataReg_Accel_Z[2]; /* Buffer for reading the Z Acceleration register */
      	  uint8_t dataReg_Gyro_X[2]; /* Buffer for reading the X Gyro register */
      	  uint8_t dataReg_Gyro_Y[2]; /* Buffer for reading the Y Gyro register */
      	  uint8_t dataReg_Gyro_Z[2]; /* Buffer for reading the Z Gyro register */
      	  uint8_t dataReg_Temp_MPU[2]; /* Buffer for reading the temperature from the MPU */
      	  int16_t accelX; /* Full 16 bit data from the X Acceleration register */
      	  int16_t accelY; /* Full 16 bit data from the Y Acceleration register */
      	  int16_t accelZ; /* Full 16 bit data from the Z Acceleration register */
      	  int16_t gyroX; /* Full 16 bit data from the X Gyro register */
      	  int16_t gyroY; /* Full 16 bit data from the Y Gyro register */
      	  int16_t gyroZ; /* Full 16 bit data from the Z Gyro register */
      	  uint16_t tempMPU; /* Full 16 bit data from the temperature sensor on the MPU-6050 */
      	  float gyroXVal; /* Decimal X Angular Velocity */
      	  float gyroYVal; /* Decimal Y Angular Velocity */
      	  float gyroZVal; /* Decimal Z Angular Velocity */
      	  float accelXVal; /* Decimal X Acceleration Velocity */
      	  float accelYVal; /* Decimal Y Acceleration Velocity */
      	  float accelZVal; /* Decimal Z Acceleration Velocity */
      	  char accelerationX[64]; /* String where to store the serial port output */
      	  char accelerationY[64]; /* String where to store the serial port output */
      	  char accelerationZ[64]; /* String where to store the serial port output */
      	  char acceleration[128]; /* String for Acceleration serial port output */
      	  char angvelX[64]; /* String where to store the serial port output */
      	  char angvelY[64]; /* String where to store the serial port output */
      	  char angvelZ[64]; /* String where to store the serial port output */
      	  char temperatureMPU[64]; /* String where to store the serial port output */

      	  /* Initializing MPU-6050 for Measurement */
      	  HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_PWR_MGMT1, I2C_MEMADD_SIZE_8BIT, &regPWR_MGMT_1_Val, 1, 2000u); /* Writing the Device Reset and Cycle */
      	  //HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_PWR_MGMT2, I2C_MEMADD_SIZE_8BIT, &regPWR_MGMT_2_Val, 1, 2000u); /* Writing the Cycle Frequency */
      	  HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &regSMPLRT_DIV_Val, 1, 2000u); /* Writing the data rate */
      	  //HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_CONFIG, I2C_MEMADD_SIZE_8BIT, &regCONFIG_Val, 1, 2000u); /* Writing the System Configuration */
      	  HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &regGYRO_CONFIG_Val, 1, 2000u); /* Writing the Gyro full range */
      	  HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &regACCEL_CONFIG_Val, 1, 2000u); /* Writing the Accelerometer full range */

      	  uint16_t lead1;
      	  uint16_t lead2;
      	  uint16_t lead3;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* MPU-6050 on  I2C 2 */
	  	  /* Read the Gyro in X */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_XOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_X[0], 1, 2000u);
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_XOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_X[1], 1, 2000u);

	  	  /* Compose the register content, regardless of the endianess */
	  	  gyroX = (((int16_t)dataReg_Gyro_X[0] << 8) | dataReg_Gyro_X[1]);

	  	  /* Read the Gyro in Y */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_YOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_Y[0], 1, 2000u);
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_YOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_Y[1], 1, 2000u);

	  	  /* Compose the register content, regardless of the endianess */
	  	  gyroY = (((int16_t)dataReg_Gyro_Y[0] << 8) | dataReg_Gyro_Y[1]);

	  	  /* Read the Gyro in Z */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_ZOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_Z[0], 1, 2000u);
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_ZOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_Z[1], 1, 2000u);

	  	  /* Compose the register content, regardless of the endianess */
	  	  gyroZ = (((int16_t)dataReg_Gyro_Z[0] << 8) | dataReg_Gyro_Z[1]);

	  	  /* Read the Accelerometer in X */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_XOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_X[0], 1, 2000u);
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_XOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_X[1], 1, 2000u);

	  	  /* Compose the register content, regardles of the endianess */
	  	  accelX = (((int16_t)dataReg_Accel_X[0] << 8) | dataReg_Accel_X[1]);

	  	  /* Read the Accelerometer in Y */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_XOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_Y[0], 1, 2000u);
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_XOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_Y[1], 1, 2000u);

	  	  /* Compose the register content, regardles of the endianess */
	  	  accelY = (((int16_t)dataReg_Accel_Y[0] << 8) | dataReg_Accel_Y[1]);

	  	  /* Read the Accelerometer in Z */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_ZOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_Z[0], 1, 2000u);
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_ZOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_Z[1], 1, 2000u);

	  	  /* Compose the register content, regardles of the endianess */
	  	  accelZ = (((int16_t)dataReg_Accel_Z[0] << 8) | dataReg_Accel_Z[1]);

	  	  /* Convert to decimal and scale */
	  	  gyroXVal = ((float)gyroX) / gyroScale;
	  	  gyroYVal = ((float)gyroY) / gyroScale;
	  	  gyroZVal = ((float)gyroZ) / gyroScale;
	  	  accelXVal = ((float)accelX) / accelScale;
	  	  accelYVal = ((float)accelY) / accelScale;
	  	  accelZVal = ((float)accelZ) / accelScale;

	  	  /* Getting 2's Complement for all Acceleration Values */
//	  	  lead1 = __builtin_clz(accelX);
//	  	  if (lead1 - 16 == 0) {
//	  		  /* Number is Negative */
//	  		  accelX = ~accelX + 1;
//	  		  accelXVal = ((float)accelX * -1) / accelScale;
//	  	  }
//	  	  else {
//	  		  accelXVal = ((float)accelX) / accelScale;
//	  	  }
//
//	  	  lead2 = __builtin_clz(accelY);
//	  	  if (lead2 - 16 == 0) {
//			  /* Number is Negative */
//			  accelY = ~accelY + 1;
//			  accelYVal = ((float)accelY * -1) / accelScale;
//		  }
//		  else {
//			  accelYVal = ((float)accelY) / accelScale;
//		  }
//
//	  	  lead3 = __builtin_clz(accelZ);
//	  	  if (lead3 - 16 == 0) {
//	  		  /* Number is Negative */
//			  accelZ = ~accelZ + 1;
//			  accelZVal = ((float)accelZ * -1) / accelScale;
//	  	  }
//	  	  else {
//	  		  accelZVal = ((float)accelZ) / accelScale;
//	  	  }




	  	  /* Prepare a formatted string, with the temperature value */
	  	  sprintf(angvelX, "Angular Velocity in X is %f deg/s\r\n", gyroXVal);
	  	  sprintf(angvelY, "Angular Velocity in Y is %f deg/s\r\n", gyroYVal);
	  	  sprintf(angvelZ, "Angular Velocity in Z is %f deg/s\r\n", gyroZVal);
	  	  sprintf(acceleration, "Acceleration in X: %f g, Y: %f g, Z: %f g\r\n", accelXVal, accelYVal, accelZVal);

	  	  /* Transmit the message over UART */
	  	  //HAL_UART_Transmit(&huart2, angvelX, strlen(angvelX), 1000u);
	  	  //HAL_UART_Transmit(&huart2, angvelY, strlen(angvelY), 1000u);
	  	  //HAL_UART_Transmit(&huart2, angvelZ, strlen(angvelZ), 1000u);
	  	  HAL_UART_Transmit(&huart2, acceleration, strlen(acceleration), 1000u);

	  	  /* Add a newline */
	  	  HAL_UART_Transmit(&huart2, '\n', strlen('\n'), 1000u);

	  	  /* Wait half a second */
	  	  HAL_Delay(500);
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x0010020A;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
//static float twos_Complement(uint16_t binaryInput)
//{
//	int lead = __builtin_clz(binaryInput);
//	float out;
//	if (lead == 0) {
//		/* Number is Negative */
//		binaryInput = ~binaryInput + 1;
//		out = (float)binaryInput * -1;
//	}
//	else {
//		out = (float)binaryInput;
//	}
//	return out;
//}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
