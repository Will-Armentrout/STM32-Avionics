
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003980  08003980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b8  080039b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039b8  080039b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039b8  080039b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000130  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a868  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ab7  00000000  00000000  0002a8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000760  00000000  00000000  0002c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005a6  00000000  00000000  0002cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f080  00000000  00000000  0002d0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000af42  00000000  00000000  0004c126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc5d4  00000000  00000000  00057068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ca8  00000000  00000000  0011363c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001152e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003968 	.word	0x08003968

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003968 	.word	0x08003968

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b09c      	sub	sp, #112	; 0x70
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fa7d 	bl	80006e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f83d 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 f8fb 	bl	80003ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f6:	f000 f8c9 	bl	800038c <MX_USART2_UART_Init>
  MX_UART4_Init();
 80001fa:	f000 f897 	bl	800032c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* GPS Loop Variables */
  char buffer[100]; /* Buffer to store the GPS Sentences */
  char lastChar; /* Variable for the last piece of data */
  int i = 0; /* Buffer Index */
 80001fe:	2300      	movs	r3, #0
 8000200:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart4, &lastChar, 1, 2000u);
 8000202:	1cf9      	adds	r1, r7, #3
 8000204:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000208:	2201      	movs	r2, #1
 800020a:	4816      	ldr	r0, [pc, #88]	; (8000264 <main+0x80>)
 800020c:	f002 fb7c 	bl	8002908 <HAL_UART_Receive>
	  buffer[i] = lastChar;
 8000210:	78f9      	ldrb	r1, [r7, #3]
 8000212:	1d3a      	adds	r2, r7, #4
 8000214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000216:	4413      	add	r3, r2
 8000218:	460a      	mov	r2, r1
 800021a:	701a      	strb	r2, [r3, #0]

	  if (lastChar == '\n') {
 800021c:	78fb      	ldrb	r3, [r7, #3]
 800021e:	2b0a      	cmp	r3, #10
 8000220:	d11c      	bne.n	800025c <main+0x78>
		  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000u);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f7ff ffd5 	bl	80001d4 <strlen>
 800022a:	4603      	mov	r3, r0
 800022c:	b29a      	uxth	r2, r3
 800022e:	1d39      	adds	r1, r7, #4
 8000230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <main+0x84>)
 8000236:	f002 fadd 	bl	80027f4 <HAL_UART_Transmit>
		  int j = i;
 800023a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800023c:	66bb      	str	r3, [r7, #104]	; 0x68
		  i = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	66fb      	str	r3, [r7, #108]	; 0x6c

		  while (j > 0) {
 8000242:	e007      	b.n	8000254 <main+0x70>
			  buffer[j] = 0;
 8000244:	1d3a      	adds	r2, r7, #4
 8000246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000248:	4413      	add	r3, r2
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
			  j--;
 800024e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000250:	3b01      	subs	r3, #1
 8000252:	66bb      	str	r3, [r7, #104]	; 0x68
		  while (j > 0) {
 8000254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000256:	2b00      	cmp	r3, #0
 8000258:	dcf4      	bgt.n	8000244 <main+0x60>
 800025a:	e7d2      	b.n	8000202 <main+0x1e>
		  }

	  } else {
		  i++;
 800025c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800025e:	3301      	adds	r3, #1
 8000260:	66fb      	str	r3, [r7, #108]	; 0x6c
	  HAL_UART_Receive(&huart4, &lastChar, 1, 2000u);
 8000262:	e7ce      	b.n	8000202 <main+0x1e>
 8000264:	20000028 	.word	0x20000028
 8000268:	200000b0 	.word	0x200000b0

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b0a6      	sub	sp, #152	; 0x98
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f003 fb47 	bl	800390e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2258      	movs	r2, #88	; 0x58
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f003 fb39 	bl	800390e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029c:	2302      	movs	r3, #2
 800029e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	2310      	movs	r3, #16
 80002a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002aa:	2302      	movs	r3, #2
 80002ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fd9c 	bl	8000e08 <HAL_RCC_OscConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f8ef 	bl	80004b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	230f      	movs	r3, #15
 80002dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002de:	2302      	movs	r3, #2
 80002e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002f4:	2102      	movs	r1, #2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fdda 	bl	8001eb0 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000302:	f000 f8d9 	bl	80004b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4;
 8000306:	230a      	movs	r3, #10
 8000308:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800030e:	2300      	movs	r3, #0
 8000310:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f002 f801 	bl	800231c <HAL_RCCEx_PeriphCLKConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000320:	f000 f8ca 	bl	80004b8 <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3798      	adds	r7, #152	; 0x98
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_UART4_Init+0x58>)
 8000332:	4a15      	ldr	r2, [pc, #84]	; (8000388 <MX_UART4_Init+0x5c>)
 8000334:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <MX_UART4_Init+0x58>)
 8000338:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800033c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_UART4_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_UART4_Init+0x58>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_UART4_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_UART4_Init+0x58>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_UART4_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_UART4_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_UART4_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_UART4_Init+0x58>)
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_UART4_Init+0x58>)
 8000370:	f002 f9f2 	bl	8002758 <HAL_UART_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800037a:	f000 f89d 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028
 8000388:	40004c00 	.word	0x40004c00

0800038c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 8000392:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <MX_USART2_UART_Init+0x5c>)
 8000394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 8000398:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800039c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003d0:	f002 f9c2 	bl	8002758 <HAL_UART_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003da:	f000 f86d 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200000b0 	.word	0x200000b0
 80003e8:	40004400 	.word	0x40004400

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	; 0x28
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000402:	4b2b      	ldr	r3, [pc, #172]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a2a      	ldr	r2, [pc, #168]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041a:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a24      	ldr	r2, [pc, #144]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a1e      	ldr	r2, [pc, #120]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_GPIO_Init+0xc4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2120      	movs	r1, #32
 8000466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046a:	f000 fcb5 	bl	8000dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800046e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000474:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	4619      	mov	r1, r3
 8000484:	480b      	ldr	r0, [pc, #44]	; (80004b4 <MX_GPIO_Init+0xc8>)
 8000486:	f000 fb1d 	bl	8000ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800048a:	2320      	movs	r3, #32
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2300      	movs	r3, #0
 8000498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f000 fb0e 	bl	8000ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a8:	bf00      	nop
 80004aa:	3728      	adds	r7, #40	; 0x28
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000800 	.word	0x48000800

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <Error_Handler+0x8>
	...

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x44>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x44>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_MspInit+0x44>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <HAL_MspInit+0x44>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_MspInit+0x44>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004fa:	2007      	movs	r0, #7
 80004fc:	f000 fa2a 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000

0800050c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08c      	sub	sp, #48	; 0x30
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a33      	ldr	r2, [pc, #204]	; (80005f8 <HAL_UART_MspInit+0xec>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d131      	bne.n	8000592 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800052e:	4b33      	ldr	r3, [pc, #204]	; (80005fc <HAL_UART_MspInit+0xf0>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a32      	ldr	r2, [pc, #200]	; (80005fc <HAL_UART_MspInit+0xf0>)
 8000534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b30      	ldr	r3, [pc, #192]	; (80005fc <HAL_UART_MspInit+0xf0>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <HAL_UART_MspInit+0xf0>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a2c      	ldr	r2, [pc, #176]	; (80005fc <HAL_UART_MspInit+0xf0>)
 800054c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <HAL_UART_MspInit+0xf0>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800055e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000564:	2302      	movs	r3, #2
 8000566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056c:	2303      	movs	r3, #3
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000570:	2305      	movs	r3, #5
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000574:	f107 031c 	add.w	r3, r7, #28
 8000578:	4619      	mov	r1, r3
 800057a:	4821      	ldr	r0, [pc, #132]	; (8000600 <HAL_UART_MspInit+0xf4>)
 800057c:	f000 faa2 	bl	8000ac4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2034      	movs	r0, #52	; 0x34
 8000586:	f000 f9f0 	bl	800096a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800058a:	2034      	movs	r0, #52	; 0x34
 800058c:	f000 fa09 	bl	80009a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000590:	e02d      	b.n	80005ee <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART2)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <HAL_UART_MspInit+0xf8>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d128      	bne.n	80005ee <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_UART_MspInit+0xf0>)
 800059e:	69db      	ldr	r3, [r3, #28]
 80005a0:	4a16      	ldr	r2, [pc, #88]	; (80005fc <HAL_UART_MspInit+0xf0>)
 80005a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a6:	61d3      	str	r3, [r2, #28]
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_UART_MspInit+0xf0>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_UART_MspInit+0xf0>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <HAL_UART_MspInit+0xf0>)
 80005ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005be:	6153      	str	r3, [r2, #20]
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_UART_MspInit+0xf0>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005cc:	230c      	movs	r3, #12
 80005ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005dc:	2307      	movs	r3, #7
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4619      	mov	r1, r3
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f000 fa6b 	bl	8000ac4 <HAL_GPIO_Init>
}
 80005ee:	bf00      	nop
 80005f0:	3730      	adds	r7, #48	; 0x30
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40004c00 	.word	0x40004c00
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000800 	.word	0x48000800
 8000604:	40004400 	.word	0x40004400

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800060c:	e7fe      	b.n	800060c <NMI_Handler+0x4>

0800060e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <HardFault_Handler+0x4>

08000614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <MemManage_Handler+0x4>

0800061a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <UsageFault_Handler+0x4>

08000626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000654:	f000 f88e 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <UART4_IRQHandler+0x10>)
 8000662:	f002 fa1b 	bl	8002a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028

08000670 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <SystemInit+0x20>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <SystemInit+0x20>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000698:	f7ff ffea 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800069e:	490d      	ldr	r1, [pc, #52]	; (80006d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <LoopForever+0xe>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b4:	4c0a      	ldr	r4, [pc, #40]	; (80006e0 <LoopForever+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c2:	f003 f92d 	bl	8003920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006c6:	f7ff fd8d 	bl	80001e4 <main>

080006ca <LoopForever>:

LoopForever:
    b LoopForever
 80006ca:	e7fe      	b.n	80006ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d8:	080039c0 	.word	0x080039c0
  ldr r2, =_sbss
 80006dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006e0:	2000013c 	.word	0x2000013c

080006e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC1_2_IRQHandler>
	...

080006e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_Init+0x28>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_Init+0x28>)
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 f92b 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f808 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000704:	f7ff fede 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40022000 	.word	0x40022000

08000714 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x54>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x58>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f943 	bl	80009be <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e00e      	b.n	8000760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d80a      	bhi.n	800075e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f000 f90b 	bl	800096a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_InitTick+0x5c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000000 	.word	0x20000000
 800076c:	20000008 	.word	0x20000008
 8000770:	20000004 	.word	0x20000004

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x20>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_IncTick+0x24>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_IncTick+0x24>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000008 	.word	0x20000008
 8000798:	20000138 	.word	0x20000138

0800079c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;  
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <HAL_GetTick+0x14>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000138 	.word	0x20000138

080007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e6:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	60d3      	str	r3, [r2, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <__NVIC_GetPriorityGrouping+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	f003 0307 	and.w	r3, r3, #7
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	2b00      	cmp	r3, #0
 8000828:	db0b      	blt.n	8000842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f003 021f 	and.w	r2, r3, #31
 8000830:	4907      	ldr	r1, [pc, #28]	; (8000850 <__NVIC_EnableIRQ+0x38>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	2001      	movs	r0, #1
 800083a:	fa00 f202 	lsl.w	r2, r0, r2
 800083e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e100 	.word	0xe000e100

08000854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	db0a      	blt.n	800087e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	490c      	ldr	r1, [pc, #48]	; (80008a0 <__NVIC_SetPriority+0x4c>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	440b      	add	r3, r1
 8000878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800087c:	e00a      	b.n	8000894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4908      	ldr	r1, [pc, #32]	; (80008a4 <__NVIC_SetPriority+0x50>)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	3b04      	subs	r3, #4
 800088c:	0112      	lsls	r2, r2, #4
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	440b      	add	r3, r1
 8000892:	761a      	strb	r2, [r3, #24]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000e100 	.word	0xe000e100
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b089      	sub	sp, #36	; 0x24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f1c3 0307 	rsb	r3, r3, #7
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	bf28      	it	cs
 80008c6:	2304      	movcs	r3, #4
 80008c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3304      	adds	r3, #4
 80008ce:	2b06      	cmp	r3, #6
 80008d0:	d902      	bls.n	80008d8 <NVIC_EncodePriority+0x30>
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3b03      	subs	r3, #3
 80008d6:	e000      	b.n	80008da <NVIC_EncodePriority+0x32>
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43da      	mvns	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	401a      	ands	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f0:	f04f 31ff 	mov.w	r1, #4294967295
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	43d9      	mvns	r1, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	4313      	orrs	r3, r2
         );
}
 8000902:	4618      	mov	r0, r3
 8000904:	3724      	adds	r7, #36	; 0x24
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000920:	d301      	bcc.n	8000926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000922:	2301      	movs	r3, #1
 8000924:	e00f      	b.n	8000946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <SysTick_Config+0x40>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092e:	210f      	movs	r1, #15
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f7ff ff8e 	bl	8000854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <SysTick_Config+0x40>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SysTick_Config+0x40>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	e000e010 	.word	0xe000e010

08000954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ff29 	bl	80007b4 <__NVIC_SetPriorityGrouping>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800097c:	f7ff ff3e 	bl	80007fc <__NVIC_GetPriorityGrouping>
 8000980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	6978      	ldr	r0, [r7, #20]
 8000988:	f7ff ff8e 	bl	80008a8 <NVIC_EncodePriority>
 800098c:	4602      	mov	r2, r0
 800098e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff5d 	bl	8000854 <__NVIC_SetPriority>
}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff31 	bl	8000818 <__NVIC_EnableIRQ>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ffa2 	bl	8000910 <SysTick_Config>
 80009cc:	4603      	mov	r3, r0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d008      	beq.n	80009fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2204      	movs	r2, #4
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e020      	b.n	8000a3c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f022 020e 	bic.w	r2, r2, #14
 8000a08:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 0201 	bic.w	r2, r2, #1
 8000a18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a22:	2101      	movs	r1, #1
 8000a24:	fa01 f202 	lsl.w	r2, r1, r2
 8000a28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d005      	beq.n	8000a6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2204      	movs	r2, #4
 8000a62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e027      	b.n	8000aba <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 020e 	bic.w	r2, r2, #14
 8000a78:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f022 0201 	bic.w	r2, r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a92:	2101      	movs	r1, #1
 8000a94:	fa01 f202 	lsl.w	r2, r1, r2
 8000a98:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	4798      	blx	r3
    } 
  }
  return status;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad2:	e160      	b.n	8000d96 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 8152 	beq.w	8000d90 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d005      	beq.n	8000b04 <HAL_GPIO_Init+0x40>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 0201 	and.w	r2, r3, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d017      	beq.n	8000ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	6939      	ldr	r1, [r7, #16]
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0203 	and.w	r2, r3, #3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 80ac 	beq.w	8000d90 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c38:	4b5e      	ldr	r3, [pc, #376]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a5d      	ldr	r2, [pc, #372]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b5b      	ldr	r3, [pc, #364]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c50:	4a59      	ldr	r2, [pc, #356]	; (8000db8 <HAL_GPIO_Init+0x2f4>)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c7a:	d025      	beq.n	8000cc8 <HAL_GPIO_Init+0x204>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a4f      	ldr	r2, [pc, #316]	; (8000dbc <HAL_GPIO_Init+0x2f8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d01f      	beq.n	8000cc4 <HAL_GPIO_Init+0x200>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a4e      	ldr	r2, [pc, #312]	; (8000dc0 <HAL_GPIO_Init+0x2fc>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d019      	beq.n	8000cc0 <HAL_GPIO_Init+0x1fc>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a4d      	ldr	r2, [pc, #308]	; (8000dc4 <HAL_GPIO_Init+0x300>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d013      	beq.n	8000cbc <HAL_GPIO_Init+0x1f8>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a4c      	ldr	r2, [pc, #304]	; (8000dc8 <HAL_GPIO_Init+0x304>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d00d      	beq.n	8000cb8 <HAL_GPIO_Init+0x1f4>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a4b      	ldr	r2, [pc, #300]	; (8000dcc <HAL_GPIO_Init+0x308>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d007      	beq.n	8000cb4 <HAL_GPIO_Init+0x1f0>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a4a      	ldr	r2, [pc, #296]	; (8000dd0 <HAL_GPIO_Init+0x30c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d101      	bne.n	8000cb0 <HAL_GPIO_Init+0x1ec>
 8000cac:	2306      	movs	r3, #6
 8000cae:	e00c      	b.n	8000cca <HAL_GPIO_Init+0x206>
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	e00a      	b.n	8000cca <HAL_GPIO_Init+0x206>
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	e008      	b.n	8000cca <HAL_GPIO_Init+0x206>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	e006      	b.n	8000cca <HAL_GPIO_Init+0x206>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e004      	b.n	8000cca <HAL_GPIO_Init+0x206>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e002      	b.n	8000cca <HAL_GPIO_Init+0x206>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e000      	b.n	8000cca <HAL_GPIO_Init+0x206>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	f002 0203 	and.w	r2, r2, #3
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	4093      	lsls	r3, r2
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cda:	4937      	ldr	r1, [pc, #220]	; (8000db8 <HAL_GPIO_Init+0x2f4>)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ce8:	4b3a      	ldr	r3, [pc, #232]	; (8000dd4 <HAL_GPIO_Init+0x310>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d0c:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <HAL_GPIO_Init+0x310>)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d12:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <HAL_GPIO_Init+0x310>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d36:	4a27      	ldr	r2, [pc, #156]	; (8000dd4 <HAL_GPIO_Init+0x310>)
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <HAL_GPIO_Init+0x310>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d60:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <HAL_GPIO_Init+0x310>)
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_GPIO_Init+0x310>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <HAL_GPIO_Init+0x310>)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f47f ae97 	bne.w	8000ad4 <HAL_GPIO_Init+0x10>
  }
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010000 	.word	0x40010000
 8000dbc:	48000400 	.word	0x48000400
 8000dc0:	48000800 	.word	0x48000800
 8000dc4:	48000c00 	.word	0x48000c00
 8000dc8:	48001000 	.word	0x48001000
 8000dcc:	48001400 	.word	0x48001400
 8000dd0:	48001800 	.word	0x48001800
 8000dd4:	40010400 	.word	0x40010400

08000dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
 8000de4:	4613      	mov	r3, r2
 8000de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000de8:	787b      	ldrb	r3, [r7, #1]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dee:	887a      	ldrh	r2, [r7, #2]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000df6:	887a      	ldrh	r2, [r7, #2]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e18:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	f001 b83a 	b.w	8001ea2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 816f 	beq.w	8001122 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e44:	4bb5      	ldr	r3, [pc, #724]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d00c      	beq.n	8000e6a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e50:	4bb2      	ldr	r3, [pc, #712]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d15c      	bne.n	8000f16 <HAL_RCC_OscConfig+0x10e>
 8000e5c:	4baf      	ldr	r3, [pc, #700]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e68:	d155      	bne.n	8000f16 <HAL_RCC_OscConfig+0x10e>
 8000e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e82:	fab3 f383 	clz	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	095b      	lsrs	r3, r3, #5
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d102      	bne.n	8000e9c <HAL_RCC_OscConfig+0x94>
 8000e96:	4ba1      	ldr	r3, [pc, #644]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	e015      	b.n	8000ec8 <HAL_RCC_OscConfig+0xc0>
 8000e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000ea8:	fa93 f3a3 	rbit	r3, r3
 8000eac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000eb8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000ebc:	fa93 f3a3 	rbit	r3, r3
 8000ec0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ec4:	4b95      	ldr	r3, [pc, #596]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ecc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000ed0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000ed4:	fa92 f2a2 	rbit	r2, r2
 8000ed8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000edc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	f042 0220 	orr.w	r2, r2, #32
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	f002 021f 	and.w	r2, r2, #31
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 8111 	beq.w	8001120 <HAL_RCC_OscConfig+0x318>
 8000efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 8108 	bne.w	8001120 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	f000 bfc6 	b.w	8001ea2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f26:	d106      	bne.n	8000f36 <HAL_RCC_OscConfig+0x12e>
 8000f28:	4b7c      	ldr	r3, [pc, #496]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a7b      	ldr	r2, [pc, #492]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e036      	b.n	8000fa4 <HAL_RCC_OscConfig+0x19c>
 8000f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x158>
 8000f46:	4b75      	ldr	r3, [pc, #468]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a74      	ldr	r2, [pc, #464]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b72      	ldr	r3, [pc, #456]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a71      	ldr	r2, [pc, #452]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e021      	b.n	8000fa4 <HAL_RCC_OscConfig+0x19c>
 8000f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x184>
 8000f72:	4b6a      	ldr	r3, [pc, #424]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a69      	ldr	r2, [pc, #420]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b67      	ldr	r3, [pc, #412]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a66      	ldr	r2, [pc, #408]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e00b      	b.n	8000fa4 <HAL_RCC_OscConfig+0x19c>
 8000f8c:	4b63      	ldr	r3, [pc, #396]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a62      	ldr	r2, [pc, #392]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b60      	ldr	r3, [pc, #384]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a5f      	ldr	r2, [pc, #380]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8000f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d059      	beq.n	8001068 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fbf2 	bl	800079c <HAL_GetTick>
 8000fb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fbed 	bl	800079c <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	; 0x64
 8000fcc:	d902      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f000 bf67 	b.w	8001ea2 <HAL_RCC_OscConfig+0x109a>
 8000fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fdc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000fe0:	fa93 f3a3 	rbit	r3, r3
 8000fe4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000fe8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fec:	fab3 f383 	clz	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d102      	bne.n	8001006 <HAL_RCC_OscConfig+0x1fe>
 8001000:	4b46      	ldr	r3, [pc, #280]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	e015      	b.n	8001032 <HAL_RCC_OscConfig+0x22a>
 8001006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800101a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001022:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800102e:	4b3b      	ldr	r3, [pc, #236]	; (800111c <HAL_RCC_OscConfig+0x314>)
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001036:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800103a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800103e:	fa92 f2a2 	rbit	r2, r2
 8001042:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001046:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800104a:	fab2 f282 	clz	r2, r2
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	f042 0220 	orr.w	r2, r2, #32
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	f002 021f 	and.w	r2, r2, #31
 800105a:	2101      	movs	r1, #1
 800105c:	fa01 f202 	lsl.w	r2, r1, r2
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0ab      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1b6>
 8001066:	e05c      	b.n	8001122 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fb98 	bl	800079c <HAL_GetTick>
 800106c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001070:	e00a      	b.n	8001088 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001072:	f7ff fb93 	bl	800079c <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	; 0x64
 8001080:	d902      	bls.n	8001088 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	f000 bf0d 	b.w	8001ea2 <HAL_RCC_OscConfig+0x109a>
 8001088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800108c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001090:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800109c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a0:	fab3 f383 	clz	r3, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d102      	bne.n	80010ba <HAL_RCC_OscConfig+0x2b2>
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_RCC_OscConfig+0x314>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	e015      	b.n	80010e6 <HAL_RCC_OscConfig+0x2de>
 80010ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80010ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_RCC_OscConfig+0x314>)
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010ea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80010ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80010f2:	fa92 f2a2 	rbit	r2, r2
 80010f6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80010fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010fe:	fab2 f282 	clz	r2, r2
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	f042 0220 	orr.w	r2, r2, #32
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	f002 021f 	and.w	r2, r2, #31
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	4013      	ands	r3, r2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1ab      	bne.n	8001072 <HAL_RCC_OscConfig+0x26a>
 800111a:	e002      	b.n	8001122 <HAL_RCC_OscConfig+0x31a>
 800111c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001126:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 817f 	beq.w	8001436 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001138:	4ba7      	ldr	r3, [pc, #668]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00c      	beq.n	800115e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001144:	4ba4      	ldr	r3, [pc, #656]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b08      	cmp	r3, #8
 800114e:	d173      	bne.n	8001238 <HAL_RCC_OscConfig+0x430>
 8001150:	4ba1      	ldr	r3, [pc, #644]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800115c:	d16c      	bne.n	8001238 <HAL_RCC_OscConfig+0x430>
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001170:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001174:	fab3 f383 	clz	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b01      	cmp	r3, #1
 8001186:	d102      	bne.n	800118e <HAL_RCC_OscConfig+0x386>
 8001188:	4b93      	ldr	r3, [pc, #588]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	e013      	b.n	80011b6 <HAL_RCC_OscConfig+0x3ae>
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001198:	fa93 f3a3 	rbit	r3, r3
 800119c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011b2:	4b89      	ldr	r3, [pc, #548]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	2202      	movs	r2, #2
 80011b8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80011bc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80011c0:	fa92 f2a2 	rbit	r2, r2
 80011c4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80011c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011cc:	fab2 f282 	clz	r2, r2
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	f042 0220 	orr.w	r2, r2, #32
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	f002 021f 	and.w	r2, r2, #31
 80011dc:	2101      	movs	r1, #1
 80011de:	fa01 f202 	lsl.w	r2, r1, r2
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00a      	beq.n	80011fe <HAL_RCC_OscConfig+0x3f6>
 80011e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d002      	beq.n	80011fe <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f000 be52 	b.w	8001ea2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b76      	ldr	r3, [pc, #472]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800120a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	21f8      	movs	r1, #248	; 0xf8
 8001214:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800121c:	fa91 f1a1 	rbit	r1, r1
 8001220:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001224:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001228:	fab1 f181 	clz	r1, r1
 800122c:	b2c9      	uxtb	r1, r1
 800122e:	408b      	lsls	r3, r1
 8001230:	4969      	ldr	r1, [pc, #420]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	e0fe      	b.n	8001436 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800123c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8088 	beq.w	800135a <HAL_RCC_OscConfig+0x552>
 800124a:	2301      	movs	r3, #1
 800124c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800125c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800126a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	461a      	mov	r2, r3
 8001272:	2301      	movs	r3, #1
 8001274:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fa91 	bl	800079c <HAL_GetTick>
 800127a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	e00a      	b.n	8001296 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fa8c 	bl	800079c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d902      	bls.n	8001296 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	f000 be06 	b.w	8001ea2 <HAL_RCC_OscConfig+0x109a>
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80012a8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d102      	bne.n	80012c6 <HAL_RCC_OscConfig+0x4be>
 80012c0:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	e013      	b.n	80012ee <HAL_RCC_OscConfig+0x4e6>
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80012d8:	2302      	movs	r3, #2
 80012da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012de:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	2202      	movs	r2, #2
 80012f0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80012f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80012f8:	fa92 f2a2 	rbit	r2, r2
 80012fc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001300:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001304:	fab2 f282 	clz	r2, r2
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f042 0220 	orr.w	r2, r2, #32
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	f002 021f 	and.w	r2, r2, #31
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0af      	beq.n	8001280 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800132c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	21f8      	movs	r1, #248	; 0xf8
 8001336:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800133e:	fa91 f1a1 	rbit	r1, r1
 8001342:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001346:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800134a:	fab1 f181 	clz	r1, r1
 800134e:	b2c9      	uxtb	r1, r1
 8001350:	408b      	lsls	r3, r1
 8001352:	4921      	ldr	r1, [pc, #132]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
 8001358:	e06d      	b.n	8001436 <HAL_RCC_OscConfig+0x62e>
 800135a:	2301      	movs	r3, #1
 800135c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800136c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800137a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	461a      	mov	r2, r3
 8001382:	2300      	movs	r3, #0
 8001384:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fa09 	bl	800079c <HAL_GetTick>
 800138a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fa04 	bl	800079c <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d902      	bls.n	80013a6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	f000 bd7e 	b.w	8001ea2 <HAL_RCC_OscConfig+0x109a>
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80013b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013bc:	fab3 f383 	clz	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d105      	bne.n	80013dc <HAL_RCC_OscConfig+0x5d4>
 80013d0:	4b01      	ldr	r3, [pc, #4]	; (80013d8 <HAL_RCC_OscConfig+0x5d0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	e016      	b.n	8001404 <HAL_RCC_OscConfig+0x5fc>
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013f8:	fa93 f3a3 	rbit	r3, r3
 80013fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001400:	4bbf      	ldr	r3, [pc, #764]	; (8001700 <HAL_RCC_OscConfig+0x8f8>)
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	2202      	movs	r2, #2
 8001406:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800140a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800140e:	fa92 f2a2 	rbit	r2, r2
 8001412:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001416:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800141a:	fab2 f282 	clz	r2, r2
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	f042 0220 	orr.w	r2, r2, #32
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	f002 021f 	and.w	r2, r2, #31
 800142a:	2101      	movs	r1, #1
 800142c:	fa01 f202 	lsl.w	r2, r1, r2
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1ac      	bne.n	8001390 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800143a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8113 	beq.w	8001672 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001450:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d07c      	beq.n	8001556 <HAL_RCC_OscConfig+0x74e>
 800145c:	2301      	movs	r3, #1
 800145e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800146e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001472:	fab3 f383 	clz	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4ba2      	ldr	r3, [pc, #648]	; (8001704 <HAL_RCC_OscConfig+0x8fc>)
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	461a      	mov	r2, r3
 8001482:	2301      	movs	r3, #1
 8001484:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff f989 	bl	800079c <HAL_GetTick>
 800148a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e00a      	b.n	80014a6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff f984 	bl	800079c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d902      	bls.n	80014a6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f000 bcfe 	b.w	8001ea2 <HAL_RCC_OscConfig+0x109a>
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014b0:	fa93 f2a3 	rbit	r2, r3
 80014b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014c6:	2202      	movs	r2, #2
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014ea:	2202      	movs	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f2a3 	rbit	r2, r3
 80014fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001500:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001504:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <HAL_RCC_OscConfig+0x8f8>)
 8001508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001512:	2102      	movs	r1, #2
 8001514:	6019      	str	r1, [r3, #0]
 8001516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	fa93 f1a3 	rbit	r1, r3
 8001524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001528:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800152c:	6019      	str	r1, [r3, #0]
  return result;
 800152e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001532:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d09d      	beq.n	8001490 <HAL_RCC_OscConfig+0x688>
 8001554:	e08d      	b.n	8001672 <HAL_RCC_OscConfig+0x86a>
 8001556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001566:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fa93 f2a3 	rbit	r2, r3
 8001570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001574:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001578:	601a      	str	r2, [r3, #0]
  return result;
 800157a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001582:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001584:	fab3 f383 	clz	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <HAL_RCC_OscConfig+0x8fc>)
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	461a      	mov	r2, r3
 8001594:	2300      	movs	r3, #0
 8001596:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7ff f900 	bl	800079c <HAL_GetTick>
 800159c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff f8fb 	bl	800079c <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d902      	bls.n	80015b8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	f000 bc75 	b.w	8001ea2 <HAL_RCC_OscConfig+0x109a>
 80015b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015c0:	2202      	movs	r2, #2
 80015c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fa93 f2a3 	rbit	r2, r3
 80015d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015e4:	2202      	movs	r2, #2
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001604:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001608:	2202      	movs	r2, #2
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001610:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800161e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001622:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_RCC_OscConfig+0x8f8>)
 8001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001630:	2102      	movs	r1, #2
 8001632:	6019      	str	r1, [r3, #0]
 8001634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001638:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	fa93 f1a3 	rbit	r1, r3
 8001642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001646:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800164a:	6019      	str	r1, [r3, #0]
  return result;
 800164c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001650:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d197      	bne.n	80015a2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001676:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 81a5 	beq.w	80019d2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_RCC_OscConfig+0x8f8>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d116      	bne.n	80016c8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_RCC_OscConfig+0x8f8>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <HAL_RCC_OscConfig+0x8f8>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_RCC_OscConfig+0x8f8>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_RCC_OscConfig+0x900>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d121      	bne.n	8001718 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_RCC_OscConfig+0x900>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x900>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e0:	f7ff f85c 	bl	800079c <HAL_GetTick>
 80016e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	e010      	b.n	800170c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ea:	f7ff f857 	bl	800079c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d908      	bls.n	800170c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e3d1      	b.n	8001ea2 <HAL_RCC_OscConfig+0x109a>
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	10908120 	.word	0x10908120
 8001708:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170c:	4b8d      	ldr	r3, [pc, #564]	; (8001944 <HAL_RCC_OscConfig+0xb3c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0e8      	beq.n	80016ea <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x92e>
 8001728:	4b87      	ldr	r3, [pc, #540]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a86      	ldr	r2, [pc, #536]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e035      	b.n	80017a2 <HAL_RCC_OscConfig+0x99a>
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x958>
 8001746:	4b80      	ldr	r3, [pc, #512]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4a7f      	ldr	r2, [pc, #508]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	4b7d      	ldr	r3, [pc, #500]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a7c      	ldr	r2, [pc, #496]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 8001758:	f023 0304 	bic.w	r3, r3, #4
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	e020      	b.n	80017a2 <HAL_RCC_OscConfig+0x99a>
 8001760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001764:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x982>
 8001770:	4b75      	ldr	r3, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a74      	ldr	r2, [pc, #464]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	4b72      	ldr	r3, [pc, #456]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a71      	ldr	r2, [pc, #452]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6213      	str	r3, [r2, #32]
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0x99a>
 800178a:	4b6f      	ldr	r3, [pc, #444]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	4b6c      	ldr	r3, [pc, #432]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a6b      	ldr	r2, [pc, #428]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8081 	beq.w	80018b6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7fe fff2 	bl	800079c <HAL_GetTick>
 80017b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7fe ffed 	bl	800079c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e365      	b.n	8001ea2 <HAL_RCC_OscConfig+0x109a>
 80017d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017de:	2202      	movs	r2, #2
 80017e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001802:	2202      	movs	r2, #2
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f2a3 	rbit	r2, r3
 8001814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001818:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800181c:	601a      	str	r2, [r3, #0]
  return result;
 800181e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001822:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001826:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d102      	bne.n	8001842 <HAL_RCC_OscConfig+0xa3a>
 800183c:	4b42      	ldr	r3, [pc, #264]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	e013      	b.n	800186a <HAL_RCC_OscConfig+0xa62>
 8001842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001846:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800184a:	2202      	movs	r2, #2
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001852:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001860:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800186e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001872:	2102      	movs	r1, #2
 8001874:	6011      	str	r1, [r2, #0]
 8001876:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800187a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	fa92 f1a2 	rbit	r1, r2
 8001884:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001888:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800188c:	6011      	str	r1, [r2, #0]
  return result;
 800188e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001892:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	fab2 f282 	clz	r2, r2
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	f002 021f 	and.w	r2, r2, #31
 80018a8:	2101      	movs	r1, #1
 80018aa:	fa01 f202 	lsl.w	r2, r1, r2
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d084      	beq.n	80017be <HAL_RCC_OscConfig+0x9b6>
 80018b4:	e083      	b.n	80019be <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7fe ff71 	bl	800079c <HAL_GetTick>
 80018ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7fe ff6c 	bl	800079c <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e2e4      	b.n	8001ea2 <HAL_RCC_OscConfig+0x109a>
 80018d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018e0:	2202      	movs	r2, #2
 80018e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001900:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001904:	2202      	movs	r2, #2
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	fa93 f2a3 	rbit	r2, r3
 8001916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800191e:	601a      	str	r2, [r3, #0]
  return result;
 8001920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001924:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001928:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	095b      	lsrs	r3, r3, #5
 8001932:	b2db      	uxtb	r3, r3
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0xb44>
 800193e:	4b02      	ldr	r3, [pc, #8]	; (8001948 <HAL_RCC_OscConfig+0xb40>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	e017      	b.n	8001974 <HAL_RCC_OscConfig+0xb6c>
 8001944:	40007000 	.word	0x40007000
 8001948:	40021000 	.word	0x40021000
 800194c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001950:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001954:	2202      	movs	r2, #2
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	4bb3      	ldr	r3, [pc, #716]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001978:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800197c:	2102      	movs	r1, #2
 800197e:	6011      	str	r1, [r2, #0]
 8001980:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001984:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	fa92 f1a2 	rbit	r1, r2
 800198e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001992:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001996:	6011      	str	r1, [r2, #0]
  return result;
 8001998:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800199c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	fab2 f282 	clz	r2, r2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f002 021f 	and.w	r2, r2, #31
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d180      	bne.n	80018c0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019be:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d105      	bne.n	80019d2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c6:	4b9e      	ldr	r3, [pc, #632]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a9d      	ldr	r2, [pc, #628]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 80019cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 825e 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e4:	4b96      	ldr	r3, [pc, #600]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	f000 821f 	beq.w	8001e30 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	f040 8170 	bne.w	8001ce4 <HAL_RCC_OscConfig+0xedc>
 8001a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a08:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a16:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa93 f2a3 	rbit	r2, r3
 8001a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a24:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a28:	601a      	str	r2, [r3, #0]
  return result;
 8001a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a32:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	461a      	mov	r2, r3
 8001a46:	2300      	movs	r3, #0
 8001a48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7fe fea7 	bl	800079c <HAL_GetTick>
 8001a4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	e009      	b.n	8001a68 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a54:	f7fe fea2 	bl	800079c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e21c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x109a>
 8001a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	fa93 f2a3 	rbit	r2, r3
 8001a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a88:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a8c:	601a      	str	r2, [r3, #0]
  return result;
 8001a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a92:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0xcaa>
 8001aac:	4b64      	ldr	r3, [pc, #400]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	e027      	b.n	8001b02 <HAL_RCC_OscConfig+0xcfa>
 8001ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001adc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aea:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b06:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b0a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b0e:	6011      	str	r1, [r2, #0]
 8001b10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b14:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	fa92 f1a2 	rbit	r1, r2
 8001b1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b22:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001b26:	6011      	str	r1, [r2, #0]
  return result;
 8001b28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b2c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	fab2 f282 	clz	r2, r2
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f042 0220 	orr.w	r2, r2, #32
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f002 021f 	and.w	r2, r2, #31
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f202 	lsl.w	r2, r1, r2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d182      	bne.n	8001a54 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4e:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	f023 020f 	bic.w	r2, r3, #15
 8001b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	4937      	ldr	r1, [pc, #220]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a19      	ldr	r1, [r3, #32]
 8001b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	492d      	ldr	r1, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
 8001b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b94:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bb4:	601a      	str	r2, [r3, #0]
  return result;
 8001bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bbe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7fe fde1 	bl	800079c <HAL_GetTick>
 8001bda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bde:	e009      	b.n	8001bf4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7fe fddc 	bl	800079c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e156      	b.n	8001ea2 <HAL_RCC_OscConfig+0x109a>
 8001bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c06:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f2a3 	rbit	r2, r3
 8001c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c14:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c18:	601a      	str	r2, [r3, #0]
  return result;
 8001c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0xe3c>
 8001c38:	4b01      	ldr	r3, [pc, #4]	; (8001c40 <HAL_RCC_OscConfig+0xe38>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	e02a      	b.n	8001c94 <HAL_RCC_OscConfig+0xe8c>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c56:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	4b86      	ldr	r3, [pc, #536]	; (8001eac <HAL_RCC_OscConfig+0x10a4>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c98:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca0:	6011      	str	r1, [r2, #0]
 8001ca2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ca6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	fa92 f1a2 	rbit	r1, r2
 8001cb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cb4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001cb8:	6011      	str	r1, [r2, #0]
  return result;
 8001cba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cbe:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f042 0220 	orr.w	r2, r2, #32
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f43f af7f 	beq.w	8001be0 <HAL_RCC_OscConfig+0xdd8>
 8001ce2:	e0dd      	b.n	8001ea0 <HAL_RCC_OscConfig+0x1098>
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	fa93 f2a3 	rbit	r2, r3
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d08:	601a      	str	r2, [r3, #0]
  return result;
 8001d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d12:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	461a      	mov	r2, r3
 8001d26:	2300      	movs	r3, #0
 8001d28:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fd37 	bl	800079c <HAL_GetTick>
 8001d2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	e009      	b.n	8001d48 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d34:	f7fe fd32 	bl	800079c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0ac      	b.n	8001ea2 <HAL_RCC_OscConfig+0x109a>
 8001d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	fa93 f2a3 	rbit	r2, r3
 8001d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d68:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d6c:	601a      	str	r2, [r3, #0]
  return result;
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_OscConfig+0xf8a>
 8001d8c:	4b47      	ldr	r3, [pc, #284]	; (8001eac <HAL_RCC_OscConfig+0x10a4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	e027      	b.n	8001de2 <HAL_RCC_OscConfig+0xfda>
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fa93 f2a3 	rbit	r2, r3
 8001dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	4b33      	ldr	r3, [pc, #204]	; (8001eac <HAL_RCC_OscConfig+0x10a4>)
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001de6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dee:	6011      	str	r1, [r2, #0]
 8001df0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001df4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	fa92 f1a2 	rbit	r1, r2
 8001dfe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e02:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001e06:	6011      	str	r1, [r2, #0]
  return result;
 8001e08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e0c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	fab2 f282 	clz	r2, r2
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f042 0220 	orr.w	r2, r2, #32
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	f002 021f 	and.w	r2, r2, #31
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f202 	lsl.w	r2, r1, r2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d182      	bne.n	8001d34 <HAL_RCC_OscConfig+0xf2c>
 8001e2e:	e037      	b.n	8001ea0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e02e      	b.n	8001ea2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCC_OscConfig+0x10a4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_RCC_OscConfig+0x10a4>)
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e58:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d117      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e70:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b09e      	sub	sp, #120	; 0x78
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e162      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b90      	ldr	r3, [pc, #576]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d910      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b8d      	ldr	r3, [pc, #564]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	498b      	ldr	r1, [pc, #556]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b89      	ldr	r3, [pc, #548]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e14a      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b82      	ldr	r3, [pc, #520]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	497f      	ldr	r1, [pc, #508]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80dc 	beq.w	80020dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d13c      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xf6>
 8001f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xa6>
 8001f50:	4b6f      	ldr	r3, [pc, #444]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	e00f      	b.n	8001f76 <HAL_RCC_ClockConfig+0xc6>
 8001f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	667b      	str	r3, [r7, #100]	; 0x64
 8001f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f68:	663b      	str	r3, [r7, #96]	; 0x60
 8001f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f72:	4b67      	ldr	r3, [pc, #412]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f002 021f 	and.w	r2, r2, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d17b      	bne.n	800209a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0f3      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d13c      	bne.n	8002028 <HAL_RCC_ClockConfig+0x178>
 8001fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	095b      	lsrs	r3, r3, #5
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d102      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x128>
 8001fd2:	4b4f      	ldr	r3, [pc, #316]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	e00f      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x148>
 8001fd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8001fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fea:	643b      	str	r3, [r7, #64]	; 0x40
 8001fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff4:	4b46      	ldr	r3, [pc, #280]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002000:	fa92 f2a2 	rbit	r2, r2
 8002004:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002008:	fab2 f282 	clz	r2, r2
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f042 0220 	orr.w	r2, r2, #32
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f002 021f 	and.w	r2, r2, #31
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f202 	lsl.w	r2, r1, r2
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d13a      	bne.n	800209a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0b2      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
 8002028:	2302      	movs	r3, #2
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_RCC_ClockConfig+0x1a0>
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	e00d      	b.n	800206c <HAL_RCC_ClockConfig+0x1bc>
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
 800205c:	2302      	movs	r3, #2
 800205e:	623b      	str	r3, [r7, #32]
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2202      	movs	r2, #2
 800206e:	61ba      	str	r2, [r7, #24]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	fa92 f2a2 	rbit	r2, r2
 8002076:	617a      	str	r2, [r7, #20]
  return result;
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	fab2 f282 	clz	r2, r2
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	f042 0220 	orr.w	r2, r2, #32
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	f002 021f 	and.w	r2, r2, #31
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f202 	lsl.w	r2, r1, r2
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e079      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	491a      	ldr	r1, [pc, #104]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7fe fb76 	bl	800079c <HAL_GetTick>
 80020b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7fe fb72 	bl	800079c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e061      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d214      	bcs.n	8002114 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	4906      	ldr	r1, [pc, #24]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e040      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
 800210c:	40022000 	.word	0x40022000
 8002110:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_ClockConfig+0x2e8>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	491a      	ldr	r1, [pc, #104]	; (8002198 <HAL_RCC_ClockConfig+0x2e8>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x2e8>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4912      	ldr	r1, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x2e8>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002152:	f000 f829 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002156:	4601      	mov	r1, r0
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_RCC_ClockConfig+0x2e8>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002160:	22f0      	movs	r2, #240	; 0xf0
 8002162:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	fa92 f2a2 	rbit	r2, r2
 800216a:	60fa      	str	r2, [r7, #12]
  return result;
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	fab2 f282 	clz	r2, r2
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	40d3      	lsrs	r3, r2
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x2ec>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	fa21 f303 	lsr.w	r3, r1, r3
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_RCC_ClockConfig+0x2f0>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_ClockConfig+0x2f4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fac4 	bl	8000714 <HAL_InitTick>
  
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3778      	adds	r7, #120	; 0x78
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	08003980 	.word	0x08003980
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b08b      	sub	sp, #44	; 0x2c
 80021ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x30>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x36>
 80021d6:	e03f      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	e03f      	b.n	800225e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	fa92 f2a2 	rbit	r2, r2
 80021f0:	607a      	str	r2, [r7, #4]
  return result;
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	fab2 f282 	clz	r2, r2
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	40d3      	lsrs	r3, r2
 80021fc:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021fe:	5cd3      	ldrb	r3, [r2, r3]
 8002200:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	220f      	movs	r2, #15
 800220c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	fa92 f2a2 	rbit	r2, r2
 8002214:	60fa      	str	r2, [r7, #12]
  return result;
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	40d3      	lsrs	r3, r2
 8002220:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	fbb2 f2f3 	udiv	r2, r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
 8002240:	e007      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fbb2 f2f3 	udiv	r2, r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	623b      	str	r3, [r7, #32]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetSysClockFreq+0xc8>)
 800225a:	623b      	str	r3, [r7, #32]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	6a3b      	ldr	r3, [r7, #32]
}
 8002260:	4618      	mov	r0, r3
 8002262:	372c      	adds	r7, #44	; 0x2c
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40021000 	.word	0x40021000
 8002270:	007a1200 	.word	0x007a1200
 8002274:	08003998 	.word	0x08003998
 8002278:	080039a8 	.word	0x080039a8

0800227c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_RCC_GetHCLKFreq+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000000 	.word	0x20000000

08002294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800229a:	f7ff ffef 	bl	800227c <HAL_RCC_GetHCLKFreq>
 800229e:	4601      	mov	r1, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	fa92 f2a2 	rbit	r2, r2
 80022b4:	603a      	str	r2, [r7, #0]
  return result;
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	40d3      	lsrs	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08003990 	.word	0x08003990

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022de:	f7ff ffcd 	bl	800227c <HAL_RCC_GetHCLKFreq>
 80022e2:	4601      	mov	r1, r0
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	fa92 f2a2 	rbit	r2, r2
 80022f8:	603a      	str	r2, [r7, #0]
  return result;
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	fab2 f282 	clz	r2, r2
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	40d3      	lsrs	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	08003990 	.word	0x08003990

0800231c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b092      	sub	sp, #72	; 0x48
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80d4 	beq.w	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002340:	4b4e      	ldr	r3, [pc, #312]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10e      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b4b      	ldr	r3, [pc, #300]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a4a      	ldr	r2, [pc, #296]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	61d3      	str	r3, [r2, #28]
 8002358:	4b48      	ldr	r3, [pc, #288]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b45      	ldr	r3, [pc, #276]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d118      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002376:	4b42      	ldr	r3, [pc, #264]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a41      	ldr	r2, [pc, #260]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002382:	f7fe fa0b 	bl	800079c <HAL_GetTick>
 8002386:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	e008      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7fe fa07 	bl	800079c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d901      	bls.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e1d6      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b38      	ldr	r3, [pc, #224]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8084 	beq.w	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d07c      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023c8:	4b2c      	ldr	r3, [pc, #176]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	461a      	mov	r2, r3
 80023f2:	2301      	movs	r3, #1
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	461a      	mov	r2, r3
 8002416:	2300      	movs	r3, #0
 8002418:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800241a:	4a18      	ldr	r2, [pc, #96]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d04b      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe f9b7 	bl	800079c <HAL_GetTick>
 800242e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe f9b3 	bl	800079c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e180      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002448:	2302      	movs	r3, #2
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	2302      	movs	r3, #2
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	61fb      	str	r3, [r7, #28]
  return result;
 8002460:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d108      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002476:	4b01      	ldr	r3, [pc, #4]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	e00d      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800247c:	40021000 	.word	0x40021000
 8002480:	40007000 	.word	0x40007000
 8002484:	10908100 	.word	0x10908100
 8002488:	2302      	movs	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	4b9a      	ldr	r3, [pc, #616]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	2202      	movs	r2, #2
 800249a:	613a      	str	r2, [r7, #16]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	fa92 f2a2 	rbit	r2, r2
 80024a2:	60fa      	str	r2, [r7, #12]
  return result;
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	fab2 f282 	clz	r2, r2
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f002 021f 	and.w	r2, r2, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f202 	lsl.w	r2, r1, r2
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0b7      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024c2:	4b8f      	ldr	r3, [pc, #572]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	498c      	ldr	r1, [pc, #560]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b88      	ldr	r3, [pc, #544]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4a87      	ldr	r2, [pc, #540]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f4:	4b82      	ldr	r3, [pc, #520]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f023 0203 	bic.w	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	497f      	ldr	r1, [pc, #508]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002512:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4978      	ldr	r1, [pc, #480]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002530:	4b73      	ldr	r3, [pc, #460]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	4970      	ldr	r1, [pc, #448]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800254e:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f023 0210 	bic.w	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4969      	ldr	r1, [pc, #420]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800256c:	4b64      	ldr	r3, [pc, #400]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	4961      	ldr	r1, [pc, #388]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800258a:	4b5d      	ldr	r3, [pc, #372]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f023 0220 	bic.w	r2, r3, #32
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	495a      	ldr	r1, [pc, #360]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a8:	4b55      	ldr	r3, [pc, #340]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	4952      	ldr	r1, [pc, #328]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025c6:	4b4e      	ldr	r3, [pc, #312]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	494b      	ldr	r1, [pc, #300]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025e4:	4b46      	ldr	r3, [pc, #280]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4943      	ldr	r1, [pc, #268]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002602:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	493c      	ldr	r1, [pc, #240]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002620:	4b37      	ldr	r3, [pc, #220]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	4934      	ldr	r1, [pc, #208]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	492d      	ldr	r1, [pc, #180]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800265c:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002668:	4925      	ldr	r1, [pc, #148]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	491e      	ldr	r1, [pc, #120]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	4916      	ldr	r1, [pc, #88]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	490f      	ldr	r1, [pc, #60]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80026f2:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	e002      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002706:	4913      	ldr	r1, [pc, #76]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002708:	4313      	orrs	r3, r2
 800270a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002724:	490b      	ldr	r1, [pc, #44]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002726:	4313      	orrs	r3, r2
 8002728:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002742:	4904      	ldr	r1, [pc, #16]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002744:	4313      	orrs	r3, r2
 8002746:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3748      	adds	r7, #72	; 0x48
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000

08002758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e040      	b.n	80027ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fd fec6 	bl	800050c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2224      	movs	r2, #36	; 0x24
 8002784:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fc86 	bl	80030a8 <UART_SetConfig>
 800279c:	4603      	mov	r3, r0
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e022      	b.n	80027ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fe4e 	bl	8003450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fed5 	bl	8003594 <UART_CheckIdleState>
 80027ea:	4603      	mov	r3, r0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002808:	2b20      	cmp	r3, #32
 800280a:	d178      	bne.n	80028fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_UART_Transmit+0x24>
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e071      	b.n	8002900 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2221      	movs	r2, #33	; 0x21
 8002828:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282a:	f7fd ffb7 	bl	800079c <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	88fa      	ldrh	r2, [r7, #6]
 800283c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002848:	d108      	bne.n	800285c <HAL_UART_Transmit+0x68>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d104      	bne.n	800285c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	e003      	b.n	8002864 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002864:	e030      	b.n	80028c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2200      	movs	r2, #0
 800286e:	2180      	movs	r1, #128	; 0x80
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 ff37 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e03c      	b.n	8002900 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10b      	bne.n	80028a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	881a      	ldrh	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	b292      	uxth	r2, r2
 800289a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	3302      	adds	r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	e008      	b.n	80028b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	b292      	uxth	r2, r2
 80028ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	3301      	adds	r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1c8      	bne.n	8002866 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2200      	movs	r2, #0
 80028dc:	2140      	movs	r1, #64	; 0x40
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 ff00 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d004      	beq.n	80028f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e005      	b.n	8002900 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
  }
}
 8002900:	4618      	mov	r0, r3
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800291e:	2b20      	cmp	r3, #32
 8002920:	f040 80b6 	bne.w	8002a90 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_UART_Receive+0x28>
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0ae      	b.n	8002a92 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2222      	movs	r2, #34	; 0x22
 8002940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800294a:	f7fd ff27 	bl	800079c <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	88fa      	ldrh	r2, [r7, #6]
 8002954:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	88fa      	ldrh	r2, [r7, #6]
 800295c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002968:	d10e      	bne.n	8002988 <HAL_UART_Receive+0x80>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_UART_Receive+0x76>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800297c:	e02d      	b.n	80029da <HAL_UART_Receive+0xd2>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	22ff      	movs	r2, #255	; 0xff
 8002982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002986:	e028      	b.n	80029da <HAL_UART_Receive+0xd2>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <HAL_UART_Receive+0xa4>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <HAL_UART_Receive+0x9a>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	22ff      	movs	r2, #255	; 0xff
 800299c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029a0:	e01b      	b.n	80029da <HAL_UART_Receive+0xd2>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	227f      	movs	r2, #127	; 0x7f
 80029a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029aa:	e016      	b.n	80029da <HAL_UART_Receive+0xd2>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029b4:	d10d      	bne.n	80029d2 <HAL_UART_Receive+0xca>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_UART_Receive+0xc0>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	227f      	movs	r2, #127	; 0x7f
 80029c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029c6:	e008      	b.n	80029da <HAL_UART_Receive+0xd2>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	223f      	movs	r2, #63	; 0x3f
 80029cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029d0:	e003      	b.n	80029da <HAL_UART_Receive+0xd2>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80029e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d108      	bne.n	80029fe <HAL_UART_Receive+0xf6>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	e003      	b.n	8002a06 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a06:	e037      	b.n	8002a78 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2120      	movs	r1, #32
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fe66 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e033      	b.n	8002a92 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10c      	bne.n	8002a4a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	8a7b      	ldrh	r3, [r7, #18]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	3302      	adds	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	e00d      	b.n	8002a66 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	8a7b      	ldrh	r3, [r7, #18]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	3301      	adds	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1c1      	bne.n	8002a08 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3720      	adds	r7, #32
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b0ba      	sub	sp, #232	; 0xe8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ac2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ac6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002aca:	4013      	ands	r3, r2
 8002acc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d115      	bne.n	8002b04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00f      	beq.n	8002b04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 82ab 	beq.w	8003050 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
      }
      return;
 8002b02:	e2a5      	b.n	8003050 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8117 	beq.w	8002d3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b1e:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <HAL_UART_IRQHandler+0x298>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 810a 	beq.w	8002d3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d011      	beq.n	8002b58 <HAL_UART_IRQHandler+0xbc>
 8002b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2201      	movs	r2, #1
 8002b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d011      	beq.n	8002b88 <HAL_UART_IRQHandler+0xec>
 8002b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2202      	movs	r2, #2
 8002b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7e:	f043 0204 	orr.w	r2, r3, #4
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d011      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x11c>
 8002b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bae:	f043 0202 	orr.w	r2, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d017      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2208      	movs	r2, #8
 8002be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bea:	f043 0208 	orr.w	r2, r3, #8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d012      	beq.n	8002c26 <HAL_UART_IRQHandler+0x18a>
 8002c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00c      	beq.n	8002c26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8211 	beq.w	8003054 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d005      	beq.n	8002c7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d04f      	beq.n	8002d1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fd97 	bl	80037b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d141      	bne.n	8002d16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3308      	adds	r3, #8
 8002c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3308      	adds	r3, #8
 8002cba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1d9      	bne.n	8002c92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d013      	beq.n	8002d0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <HAL_UART_IRQHandler+0x29c>)
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fea8 	bl	8000a48 <HAL_DMA_Abort_IT>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d017      	beq.n	8002d2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0c:	e00f      	b.n	8002d2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f9b4 	bl	800307c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	e00b      	b.n	8002d2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f9b0 	bl	800307c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	e007      	b.n	8002d2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9ac 	bl	800307c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002d2c:	e192      	b.n	8003054 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2e:	bf00      	nop
    return;
 8002d30:	e190      	b.n	8003054 <HAL_UART_IRQHandler+0x5b8>
 8002d32:	bf00      	nop
 8002d34:	04000120 	.word	0x04000120
 8002d38:	0800387b 	.word	0x0800387b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	f040 814b 	bne.w	8002fdc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 8144 	beq.w	8002fdc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 813d 	beq.w	8002fdc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2210      	movs	r2, #16
 8002d68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	f040 80b5 	bne.w	8002ee4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8164 	beq.w	8003058 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	f080 815c 	bcs.w	8003058 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002da6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	f000 8086 	beq.w	8002ec2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dc2:	e853 3f00 	ldrex	r3, [r3]
 8002dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002de0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002de4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1da      	bne.n	8002db6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3308      	adds	r3, #8
 8002e06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3308      	adds	r3, #8
 8002e20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e30:	e841 2300 	strex	r3, r2, [r1]
 8002e34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e1      	bne.n	8002e00 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3308      	adds	r3, #8
 8002e42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e3      	bne.n	8002e3c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8a:	e853 3f00 	ldrex	r3, [r3]
 8002e8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e92:	f023 0310 	bic.w	r3, r3, #16
 8002e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ea4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ea6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e4      	bne.n	8002e82 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd fd8a 	bl	80009d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	4619      	mov	r1, r3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f8d7 	bl	8003090 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ee2:	e0b9      	b.n	8003058 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80ab 	beq.w	800305c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002f06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80a6 	beq.w	800305c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f32:	647b      	str	r3, [r7, #68]	; 0x44
 8002f34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e4      	bne.n	8002f10 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	623b      	str	r3, [r7, #32]
   return(result);
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3308      	adds	r3, #8
 8002f66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f6a:	633a      	str	r2, [r7, #48]	; 0x30
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f72:	e841 2300 	strex	r3, r2, [r1]
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e3      	bne.n	8002f46 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0310 	bic.w	r3, r3, #16
 8002fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e4      	bne.n	8002f92 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f85b 	bl	8003090 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fda:	e03f      	b.n	800305c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00e      	beq.n	8003006 <HAL_UART_IRQHandler+0x56a>
 8002fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ffc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fc7b 	bl	80038fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003004:	e02d      	b.n	8003062 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00e      	beq.n	8003030 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01c      	beq.n	8003060 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
    }
    return;
 800302e:	e017      	b.n	8003060 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d012      	beq.n	8003062 <HAL_UART_IRQHandler+0x5c6>
 800303c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00c      	beq.n	8003062 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fc2c 	bl	80038a6 <UART_EndTransmit_IT>
    return;
 800304e:	e008      	b.n	8003062 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003050:	bf00      	nop
 8003052:	e006      	b.n	8003062 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003054:	bf00      	nop
 8003056:	e004      	b.n	8003062 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003058:	bf00      	nop
 800305a:	e002      	b.n	8003062 <HAL_UART_IRQHandler+0x5c6>
      return;
 800305c:	bf00      	nop
 800305e:	e000      	b.n	8003062 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003060:	bf00      	nop
  }

}
 8003062:	37e8      	adds	r7, #232	; 0xe8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4b92      	ldr	r3, [pc, #584]	; (800331c <UART_SetConfig+0x274>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	430a      	orrs	r2, r1
 8003118:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a80      	ldr	r2, [pc, #512]	; (8003320 <UART_SetConfig+0x278>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d120      	bne.n	8003166 <UART_SetConfig+0xbe>
 8003124:	4b7f      	ldr	r3, [pc, #508]	; (8003324 <UART_SetConfig+0x27c>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b03      	cmp	r3, #3
 800312e:	d817      	bhi.n	8003160 <UART_SetConfig+0xb8>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <UART_SetConfig+0x90>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003149 	.word	0x08003149
 800313c:	08003155 	.word	0x08003155
 8003140:	0800315b 	.word	0x0800315b
 8003144:	0800314f 	.word	0x0800314f
 8003148:	2301      	movs	r3, #1
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e0b5      	b.n	80032ba <UART_SetConfig+0x212>
 800314e:	2302      	movs	r3, #2
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e0b2      	b.n	80032ba <UART_SetConfig+0x212>
 8003154:	2304      	movs	r3, #4
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e0af      	b.n	80032ba <UART_SetConfig+0x212>
 800315a:	2308      	movs	r3, #8
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e0ac      	b.n	80032ba <UART_SetConfig+0x212>
 8003160:	2310      	movs	r3, #16
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e0a9      	b.n	80032ba <UART_SetConfig+0x212>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6f      	ldr	r2, [pc, #444]	; (8003328 <UART_SetConfig+0x280>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d124      	bne.n	80031ba <UART_SetConfig+0x112>
 8003170:	4b6c      	ldr	r3, [pc, #432]	; (8003324 <UART_SetConfig+0x27c>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003178:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800317c:	d011      	beq.n	80031a2 <UART_SetConfig+0xfa>
 800317e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003182:	d817      	bhi.n	80031b4 <UART_SetConfig+0x10c>
 8003184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003188:	d011      	beq.n	80031ae <UART_SetConfig+0x106>
 800318a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800318e:	d811      	bhi.n	80031b4 <UART_SetConfig+0x10c>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <UART_SetConfig+0xf4>
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d006      	beq.n	80031a8 <UART_SetConfig+0x100>
 800319a:	e00b      	b.n	80031b4 <UART_SetConfig+0x10c>
 800319c:	2300      	movs	r3, #0
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e08b      	b.n	80032ba <UART_SetConfig+0x212>
 80031a2:	2302      	movs	r3, #2
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	e088      	b.n	80032ba <UART_SetConfig+0x212>
 80031a8:	2304      	movs	r3, #4
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e085      	b.n	80032ba <UART_SetConfig+0x212>
 80031ae:	2308      	movs	r3, #8
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e082      	b.n	80032ba <UART_SetConfig+0x212>
 80031b4:	2310      	movs	r3, #16
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e07f      	b.n	80032ba <UART_SetConfig+0x212>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5b      	ldr	r2, [pc, #364]	; (800332c <UART_SetConfig+0x284>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d124      	bne.n	800320e <UART_SetConfig+0x166>
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x27c>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80031cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031d0:	d011      	beq.n	80031f6 <UART_SetConfig+0x14e>
 80031d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031d6:	d817      	bhi.n	8003208 <UART_SetConfig+0x160>
 80031d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031dc:	d011      	beq.n	8003202 <UART_SetConfig+0x15a>
 80031de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031e2:	d811      	bhi.n	8003208 <UART_SetConfig+0x160>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <UART_SetConfig+0x148>
 80031e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031ec:	d006      	beq.n	80031fc <UART_SetConfig+0x154>
 80031ee:	e00b      	b.n	8003208 <UART_SetConfig+0x160>
 80031f0:	2300      	movs	r3, #0
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e061      	b.n	80032ba <UART_SetConfig+0x212>
 80031f6:	2302      	movs	r3, #2
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e05e      	b.n	80032ba <UART_SetConfig+0x212>
 80031fc:	2304      	movs	r3, #4
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e05b      	b.n	80032ba <UART_SetConfig+0x212>
 8003202:	2308      	movs	r3, #8
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e058      	b.n	80032ba <UART_SetConfig+0x212>
 8003208:	2310      	movs	r3, #16
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e055      	b.n	80032ba <UART_SetConfig+0x212>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a47      	ldr	r2, [pc, #284]	; (8003330 <UART_SetConfig+0x288>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d124      	bne.n	8003262 <UART_SetConfig+0x1ba>
 8003218:	4b42      	ldr	r3, [pc, #264]	; (8003324 <UART_SetConfig+0x27c>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003220:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003224:	d011      	beq.n	800324a <UART_SetConfig+0x1a2>
 8003226:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800322a:	d817      	bhi.n	800325c <UART_SetConfig+0x1b4>
 800322c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003230:	d011      	beq.n	8003256 <UART_SetConfig+0x1ae>
 8003232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003236:	d811      	bhi.n	800325c <UART_SetConfig+0x1b4>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <UART_SetConfig+0x19c>
 800323c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003240:	d006      	beq.n	8003250 <UART_SetConfig+0x1a8>
 8003242:	e00b      	b.n	800325c <UART_SetConfig+0x1b4>
 8003244:	2300      	movs	r3, #0
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	e037      	b.n	80032ba <UART_SetConfig+0x212>
 800324a:	2302      	movs	r3, #2
 800324c:	77fb      	strb	r3, [r7, #31]
 800324e:	e034      	b.n	80032ba <UART_SetConfig+0x212>
 8003250:	2304      	movs	r3, #4
 8003252:	77fb      	strb	r3, [r7, #31]
 8003254:	e031      	b.n	80032ba <UART_SetConfig+0x212>
 8003256:	2308      	movs	r3, #8
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e02e      	b.n	80032ba <UART_SetConfig+0x212>
 800325c:	2310      	movs	r3, #16
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e02b      	b.n	80032ba <UART_SetConfig+0x212>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a33      	ldr	r2, [pc, #204]	; (8003334 <UART_SetConfig+0x28c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d124      	bne.n	80032b6 <UART_SetConfig+0x20e>
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <UART_SetConfig+0x27c>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003274:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003278:	d011      	beq.n	800329e <UART_SetConfig+0x1f6>
 800327a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800327e:	d817      	bhi.n	80032b0 <UART_SetConfig+0x208>
 8003280:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003284:	d011      	beq.n	80032aa <UART_SetConfig+0x202>
 8003286:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800328a:	d811      	bhi.n	80032b0 <UART_SetConfig+0x208>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <UART_SetConfig+0x1f0>
 8003290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003294:	d006      	beq.n	80032a4 <UART_SetConfig+0x1fc>
 8003296:	e00b      	b.n	80032b0 <UART_SetConfig+0x208>
 8003298:	2300      	movs	r3, #0
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e00d      	b.n	80032ba <UART_SetConfig+0x212>
 800329e:	2302      	movs	r3, #2
 80032a0:	77fb      	strb	r3, [r7, #31]
 80032a2:	e00a      	b.n	80032ba <UART_SetConfig+0x212>
 80032a4:	2304      	movs	r3, #4
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e007      	b.n	80032ba <UART_SetConfig+0x212>
 80032aa:	2308      	movs	r3, #8
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e004      	b.n	80032ba <UART_SetConfig+0x212>
 80032b0:	2310      	movs	r3, #16
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e001      	b.n	80032ba <UART_SetConfig+0x212>
 80032b6:	2310      	movs	r3, #16
 80032b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c2:	d16b      	bne.n	800339c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d838      	bhi.n	800333c <UART_SetConfig+0x294>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x228>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
 80032dc:	0800333d 	.word	0x0800333d
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800333d 	.word	0x0800333d
 80032e8:	0800333d 	.word	0x0800333d
 80032ec:	0800333d 	.word	0x0800333d
 80032f0:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f4:	f7fe ffce 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 80032f8:	61b8      	str	r0, [r7, #24]
        break;
 80032fa:	e024      	b.n	8003346 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7fe ffec 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8003300:	61b8      	str	r0, [r7, #24]
        break;
 8003302:	e020      	b.n	8003346 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <UART_SetConfig+0x290>)
 8003306:	61bb      	str	r3, [r7, #24]
        break;
 8003308:	e01d      	b.n	8003346 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330a:	f7fe ff4d 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 800330e:	61b8      	str	r0, [r7, #24]
        break;
 8003310:	e019      	b.n	8003346 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003316:	61bb      	str	r3, [r7, #24]
        break;
 8003318:	e015      	b.n	8003346 <UART_SetConfig+0x29e>
 800331a:	bf00      	nop
 800331c:	efff69f3 	.word	0xefff69f3
 8003320:	40013800 	.word	0x40013800
 8003324:	40021000 	.word	0x40021000
 8003328:	40004400 	.word	0x40004400
 800332c:	40004800 	.word	0x40004800
 8003330:	40004c00 	.word	0x40004c00
 8003334:	40005000 	.word	0x40005000
 8003338:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	77bb      	strb	r3, [r7, #30]
        break;
 8003344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d073      	beq.n	8003434 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	005a      	lsls	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	441a      	add	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d916      	bls.n	8003396 <UART_SetConfig+0x2ee>
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336e:	d212      	bcs.n	8003396 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	b29b      	uxth	r3, r3
 8003374:	f023 030f 	bic.w	r3, r3, #15
 8003378:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	b29a      	uxth	r2, r3
 8003386:	89fb      	ldrh	r3, [r7, #14]
 8003388:	4313      	orrs	r3, r2
 800338a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	89fa      	ldrh	r2, [r7, #14]
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	e04e      	b.n	8003434 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	77bb      	strb	r3, [r7, #30]
 800339a:	e04b      	b.n	8003434 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800339c:	7ffb      	ldrb	r3, [r7, #31]
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d827      	bhi.n	80033f2 <UART_SetConfig+0x34a>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <UART_SetConfig+0x300>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033cd 	.word	0x080033cd
 80033ac:	080033d5 	.word	0x080033d5
 80033b0:	080033dd 	.word	0x080033dd
 80033b4:	080033f3 	.word	0x080033f3
 80033b8:	080033e3 	.word	0x080033e3
 80033bc:	080033f3 	.word	0x080033f3
 80033c0:	080033f3 	.word	0x080033f3
 80033c4:	080033f3 	.word	0x080033f3
 80033c8:	080033eb 	.word	0x080033eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033cc:	f7fe ff62 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 80033d0:	61b8      	str	r0, [r7, #24]
        break;
 80033d2:	e013      	b.n	80033fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d4:	f7fe ff80 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 80033d8:	61b8      	str	r0, [r7, #24]
        break;
 80033da:	e00f      	b.n	80033fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033dc:	4b1b      	ldr	r3, [pc, #108]	; (800344c <UART_SetConfig+0x3a4>)
 80033de:	61bb      	str	r3, [r7, #24]
        break;
 80033e0:	e00c      	b.n	80033fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e2:	f7fe fee1 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 80033e6:	61b8      	str	r0, [r7, #24]
        break;
 80033e8:	e008      	b.n	80033fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ee:	61bb      	str	r3, [r7, #24]
        break;
 80033f0:	e004      	b.n	80033fc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	77bb      	strb	r3, [r7, #30]
        break;
 80033fa:	bf00      	nop
    }

    if (pclk != 0U)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d018      	beq.n	8003434 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	085a      	lsrs	r2, r3, #1
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	441a      	add	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b0f      	cmp	r3, #15
 800341a:	d909      	bls.n	8003430 <UART_SetConfig+0x388>
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003422:	d205      	bcs.n	8003430 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	b29a      	uxth	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	e001      	b.n	8003434 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003440:	7fbb      	ldrb	r3, [r7, #30]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	007a1200 	.word	0x007a1200

08003450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354e:	d10a      	bne.n	8003566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  }
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b098      	sub	sp, #96	; 0x60
 8003598:	af02      	add	r7, sp, #8
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035a4:	f7fd f8fa 	bl	800079c <HAL_GetTick>
 80035a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d12e      	bne.n	8003616 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c0:	2200      	movs	r2, #0
 80035c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f88c 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d021      	beq.n	8003616 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e6:	653b      	str	r3, [r7, #80]	; 0x50
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
 80035f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e6      	bne.n	80035d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e062      	b.n	80036dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d149      	bne.n	80036b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003624:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f856 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d03c      	beq.n	80036b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	623b      	str	r3, [r7, #32]
   return(result);
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
 800365e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e6      	bne.n	800363e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3308      	adds	r3, #8
 8003676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3308      	adds	r3, #8
 800368e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003690:	61fa      	str	r2, [r7, #28]
 8003692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	69b9      	ldr	r1, [r7, #24]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	617b      	str	r3, [r7, #20]
   return(result);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e5      	bne.n	8003670 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e011      	b.n	80036dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3758      	adds	r7, #88	; 0x58
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f4:	e049      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d045      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fd f84d 	bl	800079c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <UART_WaitOnFlagUntilTimeout+0x30>
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e048      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d031      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b08      	cmp	r3, #8
 8003732:	d110      	bne.n	8003756 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2208      	movs	r2, #8
 800373a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f838 	bl	80037b2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2208      	movs	r2, #8
 8003746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e029      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003764:	d111      	bne.n	800378a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800376e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f81e 	bl	80037b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e00f      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4013      	ands	r3, r2
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	bf0c      	ite	eq
 800379a:	2301      	moveq	r3, #1
 800379c:	2300      	movne	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d0a6      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b095      	sub	sp, #84	; 0x54
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d8:	643b      	str	r3, [r7, #64]	; 0x40
 80037da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e6      	bne.n	80037ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3308      	adds	r3, #8
 80037f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3308      	adds	r3, #8
 800380a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800380c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003824:	2b01      	cmp	r3, #1
 8003826:	d118      	bne.n	800385a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	60bb      	str	r3, [r7, #8]
   return(result);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f023 0310 	bic.w	r3, r3, #16
 800383c:	647b      	str	r3, [r7, #68]	; 0x44
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	613b      	str	r3, [r7, #16]
   return(result);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e6      	bne.n	8003828 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800386e:	bf00      	nop
 8003870:	3754      	adds	r7, #84	; 0x54
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff fbef 	bl	800307c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b088      	sub	sp, #32
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6979      	ldr	r1, [r7, #20]
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	613b      	str	r3, [r7, #16]
   return(result);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e6      	bne.n	80038ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fbbb 	bl	8003068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038f2:	bf00      	nop
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <memset>:
 800390e:	4402      	add	r2, r0
 8003910:	4603      	mov	r3, r0
 8003912:	4293      	cmp	r3, r2
 8003914:	d100      	bne.n	8003918 <memset+0xa>
 8003916:	4770      	bx	lr
 8003918:	f803 1b01 	strb.w	r1, [r3], #1
 800391c:	e7f9      	b.n	8003912 <memset+0x4>
	...

08003920 <__libc_init_array>:
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	4d0d      	ldr	r5, [pc, #52]	; (8003958 <__libc_init_array+0x38>)
 8003924:	4c0d      	ldr	r4, [pc, #52]	; (800395c <__libc_init_array+0x3c>)
 8003926:	1b64      	subs	r4, r4, r5
 8003928:	10a4      	asrs	r4, r4, #2
 800392a:	2600      	movs	r6, #0
 800392c:	42a6      	cmp	r6, r4
 800392e:	d109      	bne.n	8003944 <__libc_init_array+0x24>
 8003930:	4d0b      	ldr	r5, [pc, #44]	; (8003960 <__libc_init_array+0x40>)
 8003932:	4c0c      	ldr	r4, [pc, #48]	; (8003964 <__libc_init_array+0x44>)
 8003934:	f000 f818 	bl	8003968 <_init>
 8003938:	1b64      	subs	r4, r4, r5
 800393a:	10a4      	asrs	r4, r4, #2
 800393c:	2600      	movs	r6, #0
 800393e:	42a6      	cmp	r6, r4
 8003940:	d105      	bne.n	800394e <__libc_init_array+0x2e>
 8003942:	bd70      	pop	{r4, r5, r6, pc}
 8003944:	f855 3b04 	ldr.w	r3, [r5], #4
 8003948:	4798      	blx	r3
 800394a:	3601      	adds	r6, #1
 800394c:	e7ee      	b.n	800392c <__libc_init_array+0xc>
 800394e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003952:	4798      	blx	r3
 8003954:	3601      	adds	r6, #1
 8003956:	e7f2      	b.n	800393e <__libc_init_array+0x1e>
 8003958:	080039b8 	.word	0x080039b8
 800395c:	080039b8 	.word	0x080039b8
 8003960:	080039b8 	.word	0x080039b8
 8003964:	080039bc 	.word	0x080039bc

08003968 <_init>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr

08003974 <_fini>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr
