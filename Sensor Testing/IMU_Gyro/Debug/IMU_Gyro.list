
IMU_Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007940  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08007ae0  08007ae0  00017ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f04  08007f04  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007f04  08007f04  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f04  08007f04  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          0000024c  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c81d  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ba9  00000000  00000000  0002ca64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a20  00000000  00000000  0002e610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007da  00000000  00000000  0002f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000209ff  00000000  00000000  0002f80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e85a  00000000  00000000  00050209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2f00  00000000  00000000  0005ea63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ac4  00000000  00000000  00121964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00125428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ac8 	.word	0x08007ac8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007ac8 	.word	0x08007ac8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c5c:	b0f0      	sub	sp, #448	; 0x1c0
 8000c5e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c60:	f000 fe22 	bl	80018a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c64:	f000 faf0 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c68:	f000 fbbe 	bl	80013e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c6c:	f000 fb8c 	bl	8001388 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c70:	f000 fb4a 	bl	8001308 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* MPU Loop Variables */
      	  /* Slave Address of the MPU-6050 */
      	  uint16_t mpuAddress = 0xD0; /* MPU-6050 Address */
 8000c74:	23d0      	movs	r3, #208	; 0xd0
 8000c76:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae

      	  /* MPU-6050 Register Addresses */
      	  uint8_t regAddress_PWR_MGMT1 = 0x6B; /* Power Configuration */
 8000c7a:	236b      	movs	r3, #107	; 0x6b
 8000c7c:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
      	  uint8_t regAddress_PWR_MGMT2 = 0x6C; /* Power Sample Rate Configuration */
 8000c80:	236c      	movs	r3, #108	; 0x6c
 8000c82:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
      	  uint8_t regAddress_CONFIG = 0x1A; /* System Configuration */
 8000c86:	231a      	movs	r3, #26
 8000c88:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
      	  uint8_t regAddress_GYRO_CONFIG = 0x1B; /* Gyro Configuration */
 8000c8c:	231b      	movs	r3, #27
 8000c8e:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
      	  uint8_t regAddress_ACCEL_CONFIG = 0x1C; /* Accelerometer Configuration */
 8000c92:	231c      	movs	r3, #28
 8000c94:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
      	  uint8_t regAddress_ACCEL_XOUTH = 0x3B; /* X Acceleration Data High Byte */
 8000c98:	233b      	movs	r3, #59	; 0x3b
 8000c9a:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
      	  uint8_t regAddress_ACCEL_XOUTL = 0x3C; /* X Acceleration Data Low Byte */
 8000c9e:	233c      	movs	r3, #60	; 0x3c
 8000ca0:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
      	  uint8_t regAddress_ACCEL_YOUTH = 0x3D; /* Y Acceleration Data High Byte */
 8000ca4:	233d      	movs	r3, #61	; 0x3d
 8000ca6:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
      	  uint8_t regAddress_ACCEL_YOUTL = 0x3E; /* Y Acceleration Data Low Byte */
 8000caa:	233e      	movs	r3, #62	; 0x3e
 8000cac:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
      	  uint8_t regAddress_ACCEL_ZOUTH = 0x3F; /* Z Acceleration Data High Byte */
 8000cb0:	233f      	movs	r3, #63	; 0x3f
 8000cb2:	f887 31a4 	strb.w	r3, [r7, #420]	; 0x1a4
      	  uint8_t regAddress_ACCEL_ZOUTL = 0x40; /* Z Acceleration Data Low Byte */
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
      	  uint8_t regAddress_TEMP_OUTH = 0x41; /* Temperature Data High Byte */
 8000cbc:	2341      	movs	r3, #65	; 0x41
 8000cbe:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
      	  uint8_t regAddress_TEMP_OUTL = 0x42; /* Temperature Data Low Byte */
 8000cc2:	2342      	movs	r3, #66	; 0x42
 8000cc4:	f887 31a1 	strb.w	r3, [r7, #417]	; 0x1a1
      	  uint8_t regAddress_GYRO_XOUTH = 0x43; /* X Gyro Data High Byte */
 8000cc8:	2343      	movs	r3, #67	; 0x43
 8000cca:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
      	  uint8_t regAddress_GYRO_XOUTL = 0x44; /* X Gyro Data Low Byte */
 8000cce:	2344      	movs	r3, #68	; 0x44
 8000cd0:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
      	  uint8_t regAddress_GYRO_YOUTH = 0x45; /* Y Gyro Data High Byte */
 8000cd4:	2345      	movs	r3, #69	; 0x45
 8000cd6:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
      	  uint8_t regAddress_GYRO_YOUTL = 0x46; /* Y Gyro Data Low Byte */
 8000cda:	2346      	movs	r3, #70	; 0x46
 8000cdc:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
      	  uint8_t regAddress_GYRO_ZOUTH = 0x47; /* Z Gyro Data High Byte */
 8000ce0:	2347      	movs	r3, #71	; 0x47
 8000ce2:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
      	  uint8_t regAddress_GYRO_ZOUTL = 0x48; /* Z Gyro Data Low Byte */
 8000ce6:	2348      	movs	r3, #72	; 0x48
 8000ce8:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
      	  uint8_t regAddress_WHO_AM_I = 0x75; /* Verify the Identity of the Device */
 8000cec:	2375      	movs	r3, #117	; 0x75
 8000cee:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
      	  uint8_t regAddress_SMPLRT_DIV = 0x19; /* Set Data Rate */
 8000cf2:	2319      	movs	r3, #25
 8000cf4:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199

      	  /* Mode Settings */
      	  uint8_t regPWR_MGMT_1_Val = 0x00; /* Power 1 Configurations Device Reset = 0, Sleep = 0, Cycle = 0, Temp_Disable = 0, CLKSEL = 000 */
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
      	  uint8_t regPWR_MGMT_2_Val = 0xC0; /* Power 2 Configurations Cycle Frequency = 3, Standby = 000000 */
 8000cfe:	23c0      	movs	r3, #192	; 0xc0
 8000d00:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
      	  uint8_t regCONFIG_Val = 0x00; /* System Configuration, Highest Frequency filtering on all registers */
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
      	  uint8_t regGYRO_CONFIG_Val = 0x00; /* Setting the full range of the Gyro to +/- 250 deg/s */
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
      	  uint8_t regACCEL_CONFIG_Val = 0x00; /* Setting the full range of the Acceleration to +/- 2g */
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
      	  uint8_t regSMPLRT_DIV_Val = 0x07; /* Data rate of 1 kHz */
 8000d16:	2307      	movs	r3, #7
 8000d18:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
      	  float gyroScale = 131.072; /* Scaling Factor for the Gyro */
 8000d1c:	4bc8      	ldr	r3, [pc, #800]	; (8001040 <main+0x3e8>)
 8000d1e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
      	  float accelScale = 16384.0; /* Scaling Factor for the Accelerometer */
 8000d22:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8000d26:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
      	  char acceleration[128]; /* String for Acceleration serial port output */
      	  char velocity[128]; /* String for Velocity serial port output */
      	  char temperatureMPU[64]; /* String where to store the serial port output */

      	  /* Initializing MPU-6050 for Measurement */
      	  HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_PWR_MGMT1, I2C_MEMADD_SIZE_8BIT, &regPWR_MGMT_1_Val, 1, 2000u); /* Writing the Device Reset and Cycle */
 8000d2a:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	f8b7 11ae 	ldrh.w	r1, [r7, #430]	; 0x1ae
 8000d34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	f207 135f 	addw	r3, r7, #351	; 0x15f
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2301      	movs	r3, #1
 8000d46:	48bf      	ldr	r0, [pc, #764]	; (8001044 <main+0x3ec>)
 8000d48:	f001 f950 	bl	8001fec <HAL_I2C_Mem_Write>
      	  //HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_PWR_MGMT2, I2C_MEMADD_SIZE_8BIT, &regPWR_MGMT_2_Val, 1, 2000u); /* Writing the Cycle Frequency */
      	  HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &regSMPLRT_DIV_Val, 1, 2000u); /* Writing the data rate */
 8000d4c:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f8b7 11ae 	ldrh.w	r1, [r7, #430]	; 0x1ae
 8000d56:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d5a:	9302      	str	r3, [sp, #8]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2301      	movs	r3, #1
 8000d68:	48b6      	ldr	r0, [pc, #728]	; (8001044 <main+0x3ec>)
 8000d6a:	f001 f93f 	bl	8001fec <HAL_I2C_Mem_Write>
      	  //HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_CONFIG, I2C_MEMADD_SIZE_8BIT, &regCONFIG_Val, 1, 2000u); /* Writing the System Configuration */
      	  HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &regGYRO_CONFIG_Val, 1, 2000u); /* Writing the Gyro full range */
 8000d6e:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	f8b7 11ae 	ldrh.w	r1, [r7, #430]	; 0x1ae
 8000d78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	f507 73af 	add.w	r3, r7, #350	; 0x15e
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	48ae      	ldr	r0, [pc, #696]	; (8001044 <main+0x3ec>)
 8000d8c:	f001 f92e 	bl	8001fec <HAL_I2C_Mem_Write>
      	  HAL_I2C_Mem_Write(&hi2c1, mpuAddress, regAddress_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &regACCEL_CONFIG_Val, 1, 2000u); /* Writing the Accelerometer full range */
 8000d90:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	f8b7 11ae 	ldrh.w	r1, [r7, #430]	; 0x1ae
 8000d9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d9e:	9302      	str	r3, [sp, #8]
 8000da0:	2301      	movs	r3, #1
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	f207 135d 	addw	r3, r7, #349	; 0x15d
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2301      	movs	r3, #1
 8000dac:	48a5      	ldr	r0, [pc, #660]	; (8001044 <main+0x3ec>)
 8000dae:	f001 f91d 	bl	8001fec <HAL_I2C_Mem_Write>
  while (1)
  {
    /* USER CODE END WHILE */
	  /* MPU-6050 on  I2C 2 */
	  	  /* Read the Gyro in X */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_XOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_X[0], 1, 2000u);
 8000db2:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	b299      	uxth	r1, r3
 8000dbc:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	489b      	ldr	r0, [pc, #620]	; (8001044 <main+0x3ec>)
 8000dd6:	f001 fa1d 	bl	8002214 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_XOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_X[1], 1, 2000u);
 8000dda:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	b299      	uxth	r1, r3
 8000de4:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2301      	movs	r3, #1
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000df8:	3301      	adds	r3, #1
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	4891      	ldr	r0, [pc, #580]	; (8001044 <main+0x3ec>)
 8000e00:	f001 fa08 	bl	8002214 <HAL_I2C_Mem_Read>

	  	  /* Compose the register content, regardless of the endianess */
	  	  gyroX = (((int16_t)dataReg_Gyro_X[0] << 8) | dataReg_Gyro_X[1]);
 8000e04:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a

	  	  /* Read the Gyro in Y */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_YOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_Y[0], 1, 2000u);
 8000e18:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	b299      	uxth	r1, r3
 8000e22:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	4882      	ldr	r0, [pc, #520]	; (8001044 <main+0x3ec>)
 8000e3c:	f001 f9ea 	bl	8002214 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_YOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_Y[1], 1, 2000u);
 8000e40:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	b299      	uxth	r1, r3
 8000e4a:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e54:	9302      	str	r3, [sp, #8]
 8000e56:	2301      	movs	r3, #1
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000e5e:	3301      	adds	r3, #1
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2301      	movs	r3, #1
 8000e64:	4877      	ldr	r0, [pc, #476]	; (8001044 <main+0x3ec>)
 8000e66:	f001 f9d5 	bl	8002214 <HAL_I2C_Mem_Read>

	  	  /* Compose the register content, regardless of the endianess */
	  	  gyroY = (((int16_t)dataReg_Gyro_Y[0] << 8) | dataReg_Gyro_Y[1]);
 8000e6a:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188

	  	  /* Read the Gyro in Z */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_ZOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_Z[0], 1, 2000u);
 8000e7e:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	b299      	uxth	r1, r3
 8000e88:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	2301      	movs	r3, #1
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	4868      	ldr	r0, [pc, #416]	; (8001044 <main+0x3ec>)
 8000ea2:	f001 f9b7 	bl	8002214 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_GYRO_ZOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Gyro_Z[1], 1, 2000u);
 8000ea6:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	b299      	uxth	r1, r3
 8000eb0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	485e      	ldr	r0, [pc, #376]	; (8001044 <main+0x3ec>)
 8000ecc:	f001 f9a2 	bl	8002214 <HAL_I2C_Mem_Read>

	  	  /* Compose the register content, regardless of the endianess */
	  	  gyroZ = (((int16_t)dataReg_Gyro_Z[0] << 8) | dataReg_Gyro_Z[1]);
 8000ed0:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186

	  	  /* Read the Accelerometer in X */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_XOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_X[0], 1, 2000u);
 8000ee4:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	b299      	uxth	r1, r3
 8000eee:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	2301      	movs	r3, #1
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	484f      	ldr	r0, [pc, #316]	; (8001044 <main+0x3ec>)
 8000f08:	f001 f984 	bl	8002214 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_XOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_X[1], 1, 2000u);
 8000f0c:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	b299      	uxth	r1, r3
 8000f16:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	2301      	movs	r3, #1
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4844      	ldr	r0, [pc, #272]	; (8001044 <main+0x3ec>)
 8000f32:	f001 f96f 	bl	8002214 <HAL_I2C_Mem_Read>

	  	  /* Compose the register content, regardles of the endianess */
	  	  accelX = (((int16_t)dataReg_Accel_X[0] << 8) | dataReg_Accel_X[1]);
 8000f36:	f897 3158 	ldrb.w	r3, [r7, #344]	; 0x158
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	f897 3159 	ldrb.w	r3, [r7, #345]	; 0x159
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184

	  	  /* Read the Accelerometer in Y */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_XOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_Y[0], 1, 2000u);
 8000f4a:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2301      	movs	r3, #1
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4835      	ldr	r0, [pc, #212]	; (8001044 <main+0x3ec>)
 8000f6e:	f001 f951 	bl	8002214 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_XOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_Y[1], 1, 2000u);
 8000f72:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	b299      	uxth	r1, r3
 8000f7c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000f90:	3301      	adds	r3, #1
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	482b      	ldr	r0, [pc, #172]	; (8001044 <main+0x3ec>)
 8000f98:	f001 f93c 	bl	8002214 <HAL_I2C_Mem_Read>

	  	  /* Compose the register content, regardles of the endianess */
	  	  accelY = (((int16_t)dataReg_Accel_Y[0] << 8) | dataReg_Accel_Y[1]);
 8000f9c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182

	  	  /* Read the Accelerometer in Z */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_ZOUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_Z[0], 1, 2000u);
 8000fb0:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	f897 31a4 	ldrb.w	r3, [r7, #420]	; 0x1a4
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	481c      	ldr	r0, [pc, #112]	; (8001044 <main+0x3ec>)
 8000fd4:	f001 f91e 	bl	8002214 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress | 0x01, regAddress_ACCEL_ZOUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Accel_Z[1], 1, 2000u);
 8000fd8:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	4811      	ldr	r0, [pc, #68]	; (8001044 <main+0x3ec>)
 8000ffe:	f001 f909 	bl	8002214 <HAL_I2C_Mem_Read>

	  	  /* Compose the register content, regardles of the endianess */
	  	  accelZ = (((int16_t)dataReg_Accel_Z[0] << 8) | dataReg_Accel_Z[1]);
 8001002:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180

	  	  /* Convert to decimal and scale */
	  	  gyroXVal = ((float)gyroX) / gyroScale;
 8001016:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	; 0x18a
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001022:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 8001026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102a:	edc7 7a5f 	vstr	s15, [r7, #380]	; 0x17c
	  	  gyroYVal = ((float)gyroY) / gyroScale;
 800102e:	f9b7 3188 	ldrsh.w	r3, [r7, #392]	; 0x188
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800103a:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 800103e:	e003      	b.n	8001048 <main+0x3f0>
 8001040:	4303126f 	.word	0x4303126f
 8001044:	200001f0 	.word	0x200001f0
 8001048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800104c:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
	  	  gyroZVal = ((float)gyroZ) / gyroScale;
 8001050:	f9b7 3186 	ldrsh.w	r3, [r7, #390]	; 0x186
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800105c:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 8001060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001064:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
	  	  accelXVal = ((float)accelX) / accelScale;
 8001068:	f9b7 3184 	ldrsh.w	r3, [r7, #388]	; 0x184
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001074:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 8001078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107c:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
	  	  accelYVal = ((float)accelY) / accelScale;
 8001080:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	; 0x182
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800108c:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 8001090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001094:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
	  	  accelZVal = ((float)accelZ) / accelScale;
 8001098:	f9b7 3180 	ldrsh.w	r3, [r7, #384]	; 0x180
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010a4:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 80010a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ac:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168

	  	  /* Temperature Measurement */
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress, regAddress_TEMP_OUTH, I2C_MEMADD_SIZE_8BIT, &dataReg_Temp_MPU[0], 1, 1000u);
 80010b0:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	f8b7 11ae 	ldrh.w	r1, [r7, #430]	; 0x1ae
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	4858      	ldr	r0, [pc, #352]	; (8001230 <main+0x5d8>)
 80010ce:	f001 f8a1 	bl	8002214 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(&hi2c1, mpuAddress, regAddress_TEMP_OUTL, I2C_MEMADD_SIZE_8BIT, &dataReg_Temp_MPU[1], 1, 1000u);
 80010d2:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f8b7 11ae 	ldrh.w	r1, [r7, #430]	; 0x1ae
 80010dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010ea:	3301      	adds	r3, #1
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	484f      	ldr	r0, [pc, #316]	; (8001230 <main+0x5d8>)
 80010f2:	f001 f88f 	bl	8002214 <HAL_I2C_Mem_Read>

	  	  tempMPU = (((int16_t)dataReg_Temp_MPU[0] << 8) | dataReg_Temp_MPU[1]);
 80010f6:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
	  	  tempVal = ((float)tempMPU)/340 + 36.35;
 800110a:	f9b7 3166 	ldrsh.w	r3, [r7, #358]	; 0x166
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001116:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001234 <main+0x5dc>
 800111a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800111e:	ee16 0a90 	vmov	r0, s13
 8001122:	f7ff fa19 	bl	8000558 <__aeabi_f2d>
 8001126:	a340      	add	r3, pc, #256	; (adr r3, 8001228 <main+0x5d0>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff f8b6 	bl	800029c <__adddf3>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fd3e 	bl	8000bb8 <__aeabi_d2f>
 800113c:	4603      	mov	r3, r0
 800113e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

	  	  /* Prepare a formatted string, with the temperature value */
	  	  sprintf(velocity, "Angular Velocity in X: %f deg/s, Y: %f deg/s, Z: %f deg/s\r\n", gyroXVal, gyroYVal, gyroZVal);
 8001142:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8001146:	f7ff fa07 	bl	8000558 <__aeabi_f2d>
 800114a:	4680      	mov	r8, r0
 800114c:	4689      	mov	r9, r1
 800114e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8001152:	f7ff fa01 	bl	8000558 <__aeabi_f2d>
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 800115e:	f7ff f9fb 	bl	8000558 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800116a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800116e:	e9cd 4500 	strd	r4, r5, [sp]
 8001172:	4642      	mov	r2, r8
 8001174:	464b      	mov	r3, r9
 8001176:	4930      	ldr	r1, [pc, #192]	; (8001238 <main+0x5e0>)
 8001178:	f004 fb48 	bl	800580c <siprintf>
	  	  sprintf(acceleration, "Acceleration in X: %f g, Y: %f g, Z: %f g\r\n", accelXVal, accelYVal, accelZVal);
 800117c:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001180:	f7ff f9ea 	bl	8000558 <__aeabi_f2d>
 8001184:	4680      	mov	r8, r0
 8001186:	4689      	mov	r9, r1
 8001188:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 800118c:	f7ff f9e4 	bl	8000558 <__aeabi_f2d>
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
 8001194:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8001198:	f7ff f9de 	bl	8000558 <__aeabi_f2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80011a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011a8:	e9cd 4500 	strd	r4, r5, [sp]
 80011ac:	4642      	mov	r2, r8
 80011ae:	464b      	mov	r3, r9
 80011b0:	4922      	ldr	r1, [pc, #136]	; (800123c <main+0x5e4>)
 80011b2:	f004 fb2b 	bl	800580c <siprintf>
	  	  sprintf(temperatureMPU, "Temp: %f C\r\n", tempVal);
 80011b6:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 80011ba:	f7ff f9cd 	bl	8000558 <__aeabi_f2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4638      	mov	r0, r7
 80011c4:	491e      	ldr	r1, [pc, #120]	; (8001240 <main+0x5e8>)
 80011c6:	f004 fb21 	bl	800580c <siprintf>

	  	  /* Transmit the message over UART */
	  	  HAL_UART_Transmit(&huart2, velocity, strlen(velocity), 1000u);
 80011ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f856 	bl	8000280 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80011dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e0:	4818      	ldr	r0, [pc, #96]	; (8001244 <main+0x5ec>)
 80011e2:	f003 f977 	bl	80044d4 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, acceleration, strlen(acceleration), 1000u);
 80011e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f848 	bl	8000280 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	4811      	ldr	r0, [pc, #68]	; (8001244 <main+0x5ec>)
 80011fe:	f003 f969 	bl	80044d4 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, temperatureMPU, strlen(temperatureMPU), 1000u);
 8001202:	463b      	mov	r3, r7
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f83b 	bl	8000280 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	b29a      	uxth	r2, r3
 800120e:	4639      	mov	r1, r7
 8001210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <main+0x5ec>)
 8001216:	f003 f95d 	bl	80044d4 <HAL_UART_Transmit>

	  	  /* Add a newline */
//	  	  HAL_UART_Transmit(&huart2, '\n', strlen('\n'), 1000u);

	  	  /* Wait half a second */
	  	  HAL_Delay(2000);
 800121a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800121e:	f000 fba9 	bl	8001974 <HAL_Delay>
  {
 8001222:	e5c6      	b.n	8000db2 <main+0x15a>
 8001224:	f3af 8000 	nop.w
 8001228:	cccccccd 	.word	0xcccccccd
 800122c:	40422ccc 	.word	0x40422ccc
 8001230:	200001f0 	.word	0x200001f0
 8001234:	43aa0000 	.word	0x43aa0000
 8001238:	08007ae0 	.word	0x08007ae0
 800123c:	08007b1c 	.word	0x08007b1c
 8001240:	08007b48 	.word	0x08007b48
 8001244:	20000244 	.word	0x20000244

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0a6      	sub	sp, #152	; 0x98
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001252:	2228      	movs	r2, #40	; 0x28
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f004 fb3b 	bl	80058d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2258      	movs	r2, #88	; 0x58
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f004 fb2d 	bl	80058d2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001278:	2302      	movs	r3, #2
 800127a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001280:	2310      	movs	r3, #16
 8001282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001294:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001298:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fc1e 	bl	8002ae8 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012b2:	f000 f8ff 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b6:	230f      	movs	r3, #15
 80012b8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ba:	2302      	movs	r3, #2
 80012bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012d0:	2102      	movs	r1, #2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fc5c 	bl	8003b90 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012de:	f000 f8e9 	bl	80014b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80012e2:	2322      	movs	r3, #34	; 0x22
 80012e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fe83 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80012fc:	f000 f8da 	bl	80014b4 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3798      	adds	r7, #152	; 0x98
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <MX_I2C1_Init+0x74>)
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <MX_I2C1_Init+0x78>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_I2C1_Init+0x74>)
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <MX_I2C1_Init+0x7c>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_I2C1_Init+0x74>)
 8001320:	2201      	movs	r2, #1
 8001322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001342:	480e      	ldr	r0, [pc, #56]	; (800137c <MX_I2C1_Init+0x74>)
 8001344:	f000 fdc2 	bl	8001ecc <HAL_I2C_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800134e:	f000 f8b1 	bl	80014b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <MX_I2C1_Init+0x74>)
 8001356:	f001 fb2f 	bl	80029b8 <HAL_I2CEx_ConfigAnalogFilter>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001360:	f000 f8a8 	bl	80014b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001364:	2100      	movs	r1, #0
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_I2C1_Init+0x74>)
 8001368:	f001 fb71 	bl	8002a4e <HAL_I2CEx_ConfigDigitalFilter>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001372:	f000 f89f 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001f0 	.word	0x200001f0
 8001380:	40005400 	.word	0x40005400
 8001384:	0010020a 	.word	0x0010020a

08001388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 8001390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 8001394:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013cc:	f003 f834 	bl	8004438 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013d6:	f000 f86d 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000244 	.word	0x20000244
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a2a      	ldr	r2, [pc, #168]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001408:	6153      	str	r3, [r2, #20]
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <MX_GPIO_Init+0xc4>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001416:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	4a24      	ldr	r2, [pc, #144]	; (80014ac <MX_GPIO_Init+0xc4>)
 800141c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001420:	6153      	str	r3, [r2, #20]
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	6153      	str	r3, [r2, #20]
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_GPIO_Init+0xc4>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <MX_GPIO_Init+0xc4>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001450:	6153      	str	r3, [r2, #20]
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2120      	movs	r1, #32
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f000 fd19 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800146a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001470:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_GPIO_Init+0xc8>)
 8001482:	f000 fb81 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001486:	2320      	movs	r3, #32
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f000 fb72 	bl	8001b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000800 	.word	0x48000800

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	e7fe      	b.n	80014bc <Error_Handler+0x8>
	...

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_MspInit+0x44>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_MspInit+0x44>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_MspInit+0x44>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_MspInit+0x44>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_MspInit+0x44>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_MspInit+0x44>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014f6:	2007      	movs	r0, #7
 80014f8:	f000 fb12 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d145      	bne.n	80015b6 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154c:	6153      	str	r3, [r2, #20]
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800155a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156c:	2304      	movs	r3, #4
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157a:	f000 fb05 	bl	8001b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001582:	2312      	movs	r3, #18
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158e:	2304      	movs	r3, #4
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	480b      	ldr	r0, [pc, #44]	; (80015c8 <HAL_I2C_MspInit+0xc0>)
 800159a:	f000 faf5 	bl	8001b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 80015a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40005400 	.word	0x40005400
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000400 	.word	0x48000400

080015cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_UART_MspInit+0x7c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d128      	bne.n	8001640 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_UART_MspInit+0x80>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a16      	ldr	r2, [pc, #88]	; (800164c <HAL_UART_MspInit+0x80>)
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_UART_MspInit+0x80>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_UART_MspInit+0x80>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_UART_MspInit+0x80>)
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	6153      	str	r3, [r2, #20]
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_UART_MspInit+0x80>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800161e:	230c      	movs	r3, #12
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162e:	2307      	movs	r3, #7
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f000 faa4 	bl	8001b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40004400 	.word	0x40004400
 800164c:	40021000 	.word	0x40021000

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 f94a 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return 1;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_kill>:

int _kill(int pid, int sig)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016be:	f004 f95b 	bl	8005978 <__errno>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2216      	movs	r2, #22
 80016c6:	601a      	str	r2, [r3, #0]
  return -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_exit>:

void _exit (int status)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ffe7 	bl	80016b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e6:	e7fe      	b.n	80016e6 <_exit+0x12>

080016e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e00a      	b.n	8001710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fa:	f3af 8000 	nop.w
 80016fe:	4601      	mov	r1, r0
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60ba      	str	r2, [r7, #8]
 8001706:	b2ca      	uxtb	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf0      	blt.n	80016fa <_read+0x12>
  }

  return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e009      	b.n	8001748 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf1      	blt.n	8001734 <_write+0x12>
  }
  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_close>:

int _close(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001782:	605a      	str	r2, [r3, #4]
  return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_isatty>:

int _isatty(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f004 f8c0 	bl	8005978 <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20010000 	.word	0x20010000
 8001824:	00000400 	.word	0x00000400
 8001828:	200002cc 	.word	0x200002cc
 800182c:	20000420 	.word	0x20000420

08001830 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800188c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001858:	f7ff ffea 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <LoopForever+0x6>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <LoopForever+0xe>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	; (80018a0 <LoopForever+0x16>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f004 f87f 	bl	8005984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001886:	f7ff f9e7 	bl	8000c58 <main>

0800188a <LoopForever>:

LoopForever:
    b LoopForever
 800188a:	e7fe      	b.n	800188a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800188c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001898:	08007f0c 	.word	0x08007f0c
  ldr r2, =_sbss
 800189c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018a0:	20000420 	.word	0x20000420

080018a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_2_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x28>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x28>)
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f931 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fdfc 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f93b 	bl	8001b6e <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 f911 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000000 	.word	0x20000000
 800192c:	20000008 	.word	0x20000008
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008
 8001958:	200002d0 	.word	0x200002d0

0800195c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	200002d0 	.word	0x200002d0

08001974 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff ffee 	bl	800195c <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d005      	beq.n	800199a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_Delay+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800199a:	bf00      	nop
 800199c:	f7ff ffde 	bl	800195c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8f7      	bhi.n	800199c <HAL_Delay+0x28>
  {
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff8e 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff47 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff5c 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff8e 	bl	8001a74 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff5d 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffb0 	bl	8001adc <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b96:	e160      	b.n	8001e5a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8152 	beq.w	8001e54 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d005      	beq.n	8001bc8 <HAL_GPIO_Init+0x40>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d130      	bne.n	8001c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfe:	2201      	movs	r2, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 0201 	and.w	r2, r3, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d017      	beq.n	8001c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	2203      	movs	r2, #3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d123      	bne.n	8001cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	6939      	ldr	r1, [r7, #16]
 8001cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0203 	and.w	r2, r3, #3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 80ac 	beq.w	8001e54 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfc:	4b5e      	ldr	r3, [pc, #376]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a5d      	ldr	r2, [pc, #372]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b5b      	ldr	r3, [pc, #364]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d14:	4a59      	ldr	r2, [pc, #356]	; (8001e7c <HAL_GPIO_Init+0x2f4>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d3e:	d025      	beq.n	8001d8c <HAL_GPIO_Init+0x204>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <HAL_GPIO_Init+0x2f8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d01f      	beq.n	8001d88 <HAL_GPIO_Init+0x200>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a4e      	ldr	r2, [pc, #312]	; (8001e84 <HAL_GPIO_Init+0x2fc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d019      	beq.n	8001d84 <HAL_GPIO_Init+0x1fc>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a4d      	ldr	r2, [pc, #308]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_GPIO_Init+0x1f8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_GPIO_Init+0x304>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00d      	beq.n	8001d7c <HAL_GPIO_Init+0x1f4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_GPIO_Init+0x308>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d007      	beq.n	8001d78 <HAL_GPIO_Init+0x1f0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_GPIO_Init+0x30c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_GPIO_Init+0x1ec>
 8001d70:	2306      	movs	r3, #6
 8001d72:	e00c      	b.n	8001d8e <HAL_GPIO_Init+0x206>
 8001d74:	2307      	movs	r3, #7
 8001d76:	e00a      	b.n	8001d8e <HAL_GPIO_Init+0x206>
 8001d78:	2305      	movs	r3, #5
 8001d7a:	e008      	b.n	8001d8e <HAL_GPIO_Init+0x206>
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	e006      	b.n	8001d8e <HAL_GPIO_Init+0x206>
 8001d80:	2303      	movs	r3, #3
 8001d82:	e004      	b.n	8001d8e <HAL_GPIO_Init+0x206>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e002      	b.n	8001d8e <HAL_GPIO_Init+0x206>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_GPIO_Init+0x206>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	f002 0203 	and.w	r2, r2, #3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4093      	lsls	r3, r2
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d9e:	4937      	ldr	r1, [pc, #220]	; (8001e7c <HAL_GPIO_Init+0x2f4>)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dd0:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dfa:	4a27      	ldr	r2, [pc, #156]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f47f ae97 	bne.w	8001b98 <HAL_GPIO_Init+0x10>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	48000400 	.word	0x48000400
 8001e84:	48000800 	.word	0x48000800
 8001e88:	48000c00 	.word	0x48000c00
 8001e8c:	48001000 	.word	0x48001000
 8001e90:	48001400 	.word	0x48001400
 8001e94:	48001800 	.word	0x48001800
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e081      	b.n	8001fe2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fb08 	bl	8001508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d107      	bne.n	8001f46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	e006      	b.n	8001f54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d104      	bne.n	8001f66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69d9      	ldr	r1, [r3, #28]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1a      	ldr	r2, [r3, #32]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	817b      	strh	r3, [r7, #10]
 8001ffe:	460b      	mov	r3, r1
 8002000:	813b      	strh	r3, [r7, #8]
 8002002:	4613      	mov	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	f040 80f9 	bne.w	8002206 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <HAL_I2C_Mem_Write+0x34>
 800201a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0ed      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_I2C_Mem_Write+0x4e>
 8002036:	2302      	movs	r3, #2
 8002038:	e0e6      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002042:	f7ff fc8b 	bl	800195c <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2319      	movs	r3, #25
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fac3 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0d1      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2221      	movs	r2, #33	; 0x21
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2240      	movs	r2, #64	; 0x40
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a3a      	ldr	r2, [r7, #32]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002084:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800208c:	88f8      	ldrh	r0, [r7, #6]
 800208e:	893a      	ldrh	r2, [r7, #8]
 8002090:	8979      	ldrh	r1, [r7, #10]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	4603      	mov	r3, r0
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f9d3 	bl	8002448 <I2C_RequestMemoryWrite>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0a9      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2bff      	cmp	r3, #255	; 0xff
 80020bc:	d90e      	bls.n	80020dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	22ff      	movs	r2, #255	; 0xff
 80020c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	8979      	ldrh	r1, [r7, #10]
 80020cc:	2300      	movs	r3, #0
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fc3d 	bl	8002954 <I2C_TransferConfig>
 80020da:	e00f      	b.n	80020fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	8979      	ldrh	r1, [r7, #10]
 80020ee:	2300      	movs	r3, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 fc2c 	bl	8002954 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fabc 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e07b      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d034      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x1c8>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	2b00      	cmp	r3, #0
 8002150:	d130      	bne.n	80021b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	2200      	movs	r2, #0
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fa3f 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e04d      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002170:	b29b      	uxth	r3, r3
 8002172:	2bff      	cmp	r3, #255	; 0xff
 8002174:	d90e      	bls.n	8002194 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	22ff      	movs	r2, #255	; 0xff
 800217a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	b2da      	uxtb	r2, r3
 8002182:	8979      	ldrh	r1, [r7, #10]
 8002184:	2300      	movs	r3, #0
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 fbe1 	bl	8002954 <I2C_TransferConfig>
 8002192:	e00f      	b.n	80021b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	8979      	ldrh	r1, [r7, #10]
 80021a6:	2300      	movs	r3, #0
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fbd0 	bl	8002954 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d19e      	bne.n	80020fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 faa2 	bl	800270c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e01a      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2220      	movs	r2, #32
 80021d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_I2C_Mem_Write+0x224>)
 80021e6:	400b      	ands	r3, r1
 80021e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
  }
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	fe00e800 	.word	0xfe00e800

08002214 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	460b      	mov	r3, r1
 8002228:	813b      	strh	r3, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b20      	cmp	r3, #32
 8002238:	f040 80fd 	bne.w	8002436 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_I2C_Mem_Read+0x34>
 8002242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0f1      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_I2C_Mem_Read+0x4e>
 800225e:	2302      	movs	r3, #2
 8002260:	e0ea      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800226a:	f7ff fb77 	bl	800195c <HAL_GetTick>
 800226e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2319      	movs	r3, #25
 8002276:	2201      	movs	r2, #1
 8002278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f9af 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0d5      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2222      	movs	r2, #34	; 0x22
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2240      	movs	r2, #64	; 0x40
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a3a      	ldr	r2, [r7, #32]
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022b4:	88f8      	ldrh	r0, [r7, #6]
 80022b6:	893a      	ldrh	r2, [r7, #8]
 80022b8:	8979      	ldrh	r1, [r7, #10]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	4603      	mov	r3, r0
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f913 	bl	80024f0 <I2C_RequestMemoryRead>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0ad      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2bff      	cmp	r3, #255	; 0xff
 80022e4:	d90e      	bls.n	8002304 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	22ff      	movs	r2, #255	; 0xff
 80022ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	8979      	ldrh	r1, [r7, #10]
 80022f4:	4b52      	ldr	r3, [pc, #328]	; (8002440 <HAL_I2C_Mem_Read+0x22c>)
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fb29 	bl	8002954 <I2C_TransferConfig>
 8002302:	e00f      	b.n	8002324 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	b2da      	uxtb	r2, r3
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_I2C_Mem_Read+0x22c>)
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fb18 	bl	8002954 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	2200      	movs	r2, #0
 800232c:	2104      	movs	r1, #4
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f956 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e07c      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d034      	beq.n	80023e4 <HAL_I2C_Mem_Read+0x1d0>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	d130      	bne.n	80023e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	2200      	movs	r2, #0
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f927 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e04d      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2bff      	cmp	r3, #255	; 0xff
 80023a4:	d90e      	bls.n	80023c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	22ff      	movs	r2, #255	; 0xff
 80023aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	8979      	ldrh	r1, [r7, #10]
 80023b4:	2300      	movs	r3, #0
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 fac9 	bl	8002954 <I2C_TransferConfig>
 80023c2:	e00f      	b.n	80023e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	8979      	ldrh	r1, [r7, #10]
 80023d6:	2300      	movs	r3, #0
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fab8 	bl	8002954 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d19a      	bne.n	8002324 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f98a 	bl	800270c <I2C_WaitOnSTOPFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e01a      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2220      	movs	r2, #32
 8002408:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_I2C_Mem_Read+0x230>)
 8002416:	400b      	ands	r3, r1
 8002418:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002436:	2302      	movs	r3, #2
  }
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	80002400 	.word	0x80002400
 8002444:	fe00e800 	.word	0xfe00e800

08002448 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	461a      	mov	r2, r3
 8002456:	4603      	mov	r3, r0
 8002458:	817b      	strh	r3, [r7, #10]
 800245a:	460b      	mov	r3, r1
 800245c:	813b      	strh	r3, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	8979      	ldrh	r1, [r7, #10]
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <I2C_RequestMemoryWrite+0xa4>)
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa6f 	bl	8002954 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	69b9      	ldr	r1, [r7, #24]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f8ff 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e02c      	b.n	80024e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002490:	893b      	ldrh	r3, [r7, #8]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
 800249a:	e015      	b.n	80024c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800249c:	893b      	ldrh	r3, [r7, #8]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	69b9      	ldr	r1, [r7, #24]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f8e5 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e012      	b.n	80024e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024be:	893b      	ldrh	r3, [r7, #8]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2200      	movs	r2, #0
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f884 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	80002000 	.word	0x80002000

080024f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	817b      	strh	r3, [r7, #10]
 8002502:	460b      	mov	r3, r1
 8002504:	813b      	strh	r3, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	4b20      	ldr	r3, [pc, #128]	; (8002594 <I2C_RequestMemoryRead+0xa4>)
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2300      	movs	r3, #0
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fa1c 	bl	8002954 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f8ac 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e02c      	b.n	800258a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002536:	893b      	ldrh	r3, [r7, #8]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
 8002540:	e015      	b.n	800256e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002542:	893b      	ldrh	r3, [r7, #8]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	b29b      	uxth	r3, r3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f892 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e012      	b.n	800258a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002564:	893b      	ldrh	r3, [r7, #8]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2200      	movs	r2, #0
 8002576:	2140      	movs	r1, #64	; 0x40
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f831 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	80002000 	.word	0x80002000

08002598 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d103      	bne.n	80025b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d007      	beq.n	80025d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	619a      	str	r2, [r3, #24]
  }
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f0:	e031      	b.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d02d      	beq.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fa:	f7ff f9af 	bl	800195c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d302      	bcc.n	8002610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d122      	bne.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4013      	ands	r3, r2
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	429a      	cmp	r2, r3
 800262c:	d113      	bne.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f043 0220 	orr.w	r2, r3, #32
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00f      	b.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4013      	ands	r3, r2
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	429a      	cmp	r2, r3
 8002672:	d0be      	beq.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800268a:	e033      	b.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f87f 	bl	8002794 <I2C_IsErrorOccurred>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e031      	b.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a6:	d025      	beq.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a8:	f7ff f958 	bl	800195c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d302      	bcc.n	80026be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11a      	bne.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d013      	beq.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d1c4      	bne.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002718:	e02f      	b.n	800277a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f838 	bl	8002794 <I2C_IsErrorOccurred>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e02d      	b.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272e:	f7ff f915 	bl	800195c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d11a      	bne.n	800277a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b20      	cmp	r3, #32
 8002750:	d013      	beq.n	800277a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e007      	b.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b20      	cmp	r3, #32
 8002786:	d1c8      	bne.n	800271a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d068      	beq.n	8002892 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2210      	movs	r2, #16
 80027c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027c8:	e049      	b.n	800285e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d045      	beq.n	800285e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7ff f8c3 	bl	800195c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_IsErrorOccurred+0x54>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d13a      	bne.n	800285e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280a:	d121      	bne.n	8002850 <I2C_IsErrorOccurred+0xbc>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002812:	d01d      	beq.n	8002850 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	2b20      	cmp	r3, #32
 8002818:	d01a      	beq.n	8002850 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002828:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800282a:	f7ff f897 	bl	800195c <HAL_GetTick>
 800282e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002830:	e00e      	b.n	8002850 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002832:	f7ff f893 	bl	800195c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b19      	cmp	r3, #25
 800283e:	d907      	bls.n	8002850 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	f043 0320 	orr.w	r3, r3, #32
 8002846:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800284e:	e006      	b.n	800285e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b20      	cmp	r3, #32
 800285c:	d1e9      	bne.n	8002832 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b20      	cmp	r3, #32
 800286a:	d003      	beq.n	8002874 <I2C_IsErrorOccurred+0xe0>
 800286c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0aa      	beq.n	80027ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2220      	movs	r2, #32
 8002882:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00b      	beq.n	80028bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	f043 0302 	orr.w	r3, r3, #2
 80028ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01c      	beq.n	8002942 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff fe45 	bl	8002598 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <I2C_IsErrorOccurred+0x1bc>)
 800291a:	400b      	ands	r3, r1
 800291c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002946:	4618      	mov	r0, r3
 8002948:	3728      	adds	r7, #40	; 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	fe00e800 	.word	0xfe00e800

08002954 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	4613      	mov	r3, r2
 8002964:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002966:	897b      	ldrh	r3, [r7, #10]
 8002968:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800296c:	7a7b      	ldrb	r3, [r7, #9]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002974:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	4313      	orrs	r3, r2
 800297e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002982:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	0d5b      	lsrs	r3, r3, #21
 800298e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <I2C_TransferConfig+0x60>)
 8002994:	430b      	orrs	r3, r1
 8002996:	43db      	mvns	r3, r3
 8002998:	ea02 0103 	and.w	r1, r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	03ff63ff 	.word	0x03ff63ff

080029b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d138      	bne.n	8002a40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029d8:	2302      	movs	r3, #2
 80029da:	e032      	b.n	8002a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d139      	bne.n	8002ad8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e033      	b.n	8002ada <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2224      	movs	r2, #36	; 0x24
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002aa0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002af8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002afe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f001 b83a 	b.w	8003b82 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 816f 	beq.w	8002e02 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b24:	4bb5      	ldr	r3, [pc, #724]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d00c      	beq.n	8002b4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b30:	4bb2      	ldr	r3, [pc, #712]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d15c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x10e>
 8002b3c:	4baf      	ldr	r3, [pc, #700]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d155      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x10e>
 8002b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_RCC_OscConfig+0x94>
 8002b76:	4ba1      	ldr	r3, [pc, #644]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	e015      	b.n	8002ba8 <HAL_RCC_OscConfig+0xc0>
 8002b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b80:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b94:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b98:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ba4:	4b95      	ldr	r3, [pc, #596]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bac:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002bb0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002bb4:	fa92 f2a2 	rbit	r2, r2
 8002bb8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002bbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bc0:	fab2 f282 	clz	r2, r2
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f042 0220 	orr.w	r2, r2, #32
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	f002 021f 	and.w	r2, r2, #31
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8111 	beq.w	8002e00 <HAL_RCC_OscConfig+0x318>
 8002bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 8108 	bne.w	8002e00 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f000 bfc6 	b.w	8003b82 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x12e>
 8002c08:	4b7c      	ldr	r3, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a7b      	ldr	r2, [pc, #492]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e036      	b.n	8002c84 <HAL_RCC_OscConfig+0x19c>
 8002c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x158>
 8002c26:	4b75      	ldr	r3, [pc, #468]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a74      	ldr	r2, [pc, #464]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b72      	ldr	r3, [pc, #456]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a71      	ldr	r2, [pc, #452]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e021      	b.n	8002c84 <HAL_RCC_OscConfig+0x19c>
 8002c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x184>
 8002c52:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a69      	ldr	r2, [pc, #420]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a66      	ldr	r2, [pc, #408]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x19c>
 8002c6c:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a62      	ldr	r2, [pc, #392]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b60      	ldr	r3, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a5f      	ldr	r2, [pc, #380]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c82:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d059      	beq.n	8002d48 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fe fe62 	bl	800195c <HAL_GetTick>
 8002c98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c9e:	f7fe fe5d 	bl	800195c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d902      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	f000 bf67 	b.w	8003b82 <HAL_RCC_OscConfig+0x109a>
 8002cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002cc8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d102      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x1fe>
 8002ce0:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x22a>
 8002ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cfe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d16:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002d1a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002d1e:	fa92 f2a2 	rbit	r2, r2
 8002d22:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002d26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ab      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1b6>
 8002d46:	e05c      	b.n	8002e02 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fe08 	bl	800195c <HAL_GetTick>
 8002d4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d52:	f7fe fe03 	bl	800195c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d902      	bls.n	8002d68 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	f000 bf0d 	b.w	8003b82 <HAL_RCC_OscConfig+0x109a>
 8002d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002d7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d102      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2b2>
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	e015      	b.n	8002dc6 <HAL_RCC_OscConfig+0x2de>
 8002d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002db6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <HAL_RCC_OscConfig+0x314>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dca:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002dce:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002dd2:	fa92 f2a2 	rbit	r2, r2
 8002dd6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002dda:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	f042 0220 	orr.w	r2, r2, #32
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f002 021f 	and.w	r2, r2, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ab      	bne.n	8002d52 <HAL_RCC_OscConfig+0x26a>
 8002dfa:	e002      	b.n	8002e02 <HAL_RCC_OscConfig+0x31a>
 8002dfc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 817f 	beq.w	8003116 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e18:	4ba7      	ldr	r3, [pc, #668]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e24:	4ba4      	ldr	r3, [pc, #656]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d173      	bne.n	8002f18 <HAL_RCC_OscConfig+0x430>
 8002e30:	4ba1      	ldr	r3, [pc, #644]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3c:	d16c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x430>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002e50:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_OscConfig+0x386>
 8002e68:	4b93      	ldr	r3, [pc, #588]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	e013      	b.n	8002e96 <HAL_RCC_OscConfig+0x3ae>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002e80:	2302      	movs	r3, #2
 8002e82:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e86:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e92:	4b89      	ldr	r3, [pc, #548]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2202      	movs	r2, #2
 8002e98:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002e9c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002ea0:	fa92 f2a2 	rbit	r2, r2
 8002ea4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002ea8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f042 0220 	orr.w	r2, r2, #32
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f002 021f 	and.w	r2, r2, #31
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCC_OscConfig+0x3f6>
 8002ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ecc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d002      	beq.n	8002ede <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f000 be52 	b.w	8003b82 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ede:	4b76      	ldr	r3, [pc, #472]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	21f8      	movs	r1, #248	; 0xf8
 8002ef4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002efc:	fa91 f1a1 	rbit	r1, r1
 8002f00:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002f04:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f08:	fab1 f181 	clz	r1, r1
 8002f0c:	b2c9      	uxtb	r1, r1
 8002f0e:	408b      	lsls	r3, r1
 8002f10:	4969      	ldr	r1, [pc, #420]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	e0fe      	b.n	8003116 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8088 	beq.w	800303a <HAL_RCC_OscConfig+0x552>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002f3c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	461a      	mov	r2, r3
 8002f52:	2301      	movs	r3, #1
 8002f54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fe fd01 	bl	800195c <HAL_GetTick>
 8002f5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f60:	f7fe fcfc 	bl	800195c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d902      	bls.n	8002f76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	f000 be06 	b.w	8003b82 <HAL_RCC_OscConfig+0x109a>
 8002f76:	2302      	movs	r3, #2
 8002f78:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002f88:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d102      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x4be>
 8002fa0:	4b45      	ldr	r3, [pc, #276]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	e013      	b.n	8002fce <HAL_RCC_OscConfig+0x4e6>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fbe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002fd4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002fd8:	fa92 f2a2 	rbit	r2, r2
 8002fdc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002fe0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002fe4:	fab2 f282 	clz	r2, r2
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f042 0220 	orr.w	r2, r2, #32
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f002 021f 	and.w	r2, r2, #31
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0af      	beq.n	8002f60 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800300c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	21f8      	movs	r1, #248	; 0xf8
 8003016:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800301e:	fa91 f1a1 	rbit	r1, r1
 8003022:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003026:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800302a:	fab1 f181 	clz	r1, r1
 800302e:	b2c9      	uxtb	r1, r1
 8003030:	408b      	lsls	r3, r1
 8003032:	4921      	ldr	r1, [pc, #132]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]
 8003038:	e06d      	b.n	8003116 <HAL_RCC_OscConfig+0x62e>
 800303a:	2301      	movs	r3, #1
 800303c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800304c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800305a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	461a      	mov	r2, r3
 8003062:	2300      	movs	r3, #0
 8003064:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fe fc79 	bl	800195c <HAL_GetTick>
 800306a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	e00a      	b.n	8003086 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003070:	f7fe fc74 	bl	800195c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d902      	bls.n	8003086 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	f000 bd7e 	b.w	8003b82 <HAL_RCC_OscConfig+0x109a>
 8003086:	2302      	movs	r3, #2
 8003088:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003098:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_RCC_OscConfig+0x5d4>
 80030b0:	4b01      	ldr	r3, [pc, #4]	; (80030b8 <HAL_RCC_OscConfig+0x5d0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	e016      	b.n	80030e4 <HAL_RCC_OscConfig+0x5fc>
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	2302      	movs	r3, #2
 80030be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80030ce:	2302      	movs	r3, #2
 80030d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030e0:	4bbf      	ldr	r3, [pc, #764]	; (80033e0 <HAL_RCC_OscConfig+0x8f8>)
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2202      	movs	r2, #2
 80030e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80030ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80030ee:	fa92 f2a2 	rbit	r2, r2
 80030f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80030f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030fa:	fab2 f282 	clz	r2, r2
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f042 0220 	orr.w	r2, r2, #32
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f002 021f 	and.w	r2, r2, #31
 800310a:	2101      	movs	r1, #1
 800310c:	fa01 f202 	lsl.w	r2, r1, r2
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ac      	bne.n	8003070 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800311a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8113 	beq.w	8003352 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003130:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d07c      	beq.n	8003236 <HAL_RCC_OscConfig+0x74e>
 800313c:	2301      	movs	r3, #1
 800313e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800314e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	4ba2      	ldr	r3, [pc, #648]	; (80033e4 <HAL_RCC_OscConfig+0x8fc>)
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	461a      	mov	r2, r3
 8003162:	2301      	movs	r3, #1
 8003164:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fe fbf9 	bl	800195c <HAL_GetTick>
 800316a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003170:	f7fe fbf4 	bl	800195c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d902      	bls.n	8003186 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	f000 bcfe 	b.w	8003b82 <HAL_RCC_OscConfig+0x109a>
 8003186:	2302      	movs	r3, #2
 8003188:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003190:	fa93 f2a3 	rbit	r2, r3
 8003194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003198:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031a6:	2202      	movs	r2, #2
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	fa93 f2a3 	rbit	r2, r3
 80031b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031ca:	2202      	movs	r2, #2
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	fa93 f2a3 	rbit	r2, r3
 80031dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	4b7e      	ldr	r3, [pc, #504]	; (80033e0 <HAL_RCC_OscConfig+0x8f8>)
 80031e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031f2:	2102      	movs	r1, #2
 80031f4:	6019      	str	r1, [r3, #0]
 80031f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fa93 f1a3 	rbit	r1, r3
 8003204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003208:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800320c:	6019      	str	r1, [r3, #0]
  return result;
 800320e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003212:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2101      	movs	r1, #1
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d09d      	beq.n	8003170 <HAL_RCC_OscConfig+0x688>
 8003234:	e08d      	b.n	8003352 <HAL_RCC_OscConfig+0x86a>
 8003236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003246:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003254:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003258:	601a      	str	r2, [r3, #0]
  return result;
 800325a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800325e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003262:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <HAL_RCC_OscConfig+0x8fc>)
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	461a      	mov	r2, r3
 8003274:	2300      	movs	r3, #0
 8003276:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003278:	f7fe fb70 	bl	800195c <HAL_GetTick>
 800327c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003282:	f7fe fb6b 	bl	800195c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d902      	bls.n	8003298 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	f000 bc75 	b.w	8003b82 <HAL_RCC_OscConfig+0x109a>
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80032a0:	2202      	movs	r2, #2
 80032a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fa93 f2a3 	rbit	r2, r3
 80032b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032c4:	2202      	movs	r2, #2
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032e8:	2202      	movs	r2, #2
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	fa93 f2a3 	rbit	r2, r3
 80032fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003302:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003304:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_RCC_OscConfig+0x8f8>)
 8003306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003310:	2102      	movs	r1, #2
 8003312:	6019      	str	r1, [r3, #0]
 8003314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003318:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f1a3 	rbit	r1, r3
 8003322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003326:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800332a:	6019      	str	r1, [r3, #0]
  return result;
 800332c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003330:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2101      	movs	r1, #1
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d197      	bne.n	8003282 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003356:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 81a5 	beq.w	80036b2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003368:	2300      	movs	r3, #0
 800336a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_RCC_OscConfig+0x8f8>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d116      	bne.n	80033a8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_RCC_OscConfig+0x8f8>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <HAL_RCC_OscConfig+0x8f8>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	61d3      	str	r3, [r2, #28]
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_RCC_OscConfig+0x8f8>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800338e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <HAL_RCC_OscConfig+0x900>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d121      	bne.n	80033f8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_RCC_OscConfig+0x900>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <HAL_RCC_OscConfig+0x900>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c0:	f7fe facc 	bl	800195c <HAL_GetTick>
 80033c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	e010      	b.n	80033ec <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ca:	f7fe fac7 	bl	800195c <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d908      	bls.n	80033ec <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e3d1      	b.n	8003b82 <HAL_RCC_OscConfig+0x109a>
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	10908120 	.word	0x10908120
 80033e8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	4b8d      	ldr	r3, [pc, #564]	; (8003624 <HAL_RCC_OscConfig+0xb3c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0e8      	beq.n	80033ca <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x92e>
 8003408:	4b87      	ldr	r3, [pc, #540]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a86      	ldr	r2, [pc, #536]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	e035      	b.n	8003482 <HAL_RCC_OscConfig+0x99a>
 8003416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x958>
 8003426:	4b80      	ldr	r3, [pc, #512]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a7f      	ldr	r2, [pc, #508]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6213      	str	r3, [r2, #32]
 8003432:	4b7d      	ldr	r3, [pc, #500]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a7c      	ldr	r2, [pc, #496]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6213      	str	r3, [r2, #32]
 800343e:	e020      	b.n	8003482 <HAL_RCC_OscConfig+0x99a>
 8003440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003444:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b05      	cmp	r3, #5
 800344e:	d10c      	bne.n	800346a <HAL_RCC_OscConfig+0x982>
 8003450:	4b75      	ldr	r3, [pc, #468]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4a74      	ldr	r2, [pc, #464]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	6213      	str	r3, [r2, #32]
 800345c:	4b72      	ldr	r3, [pc, #456]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4a71      	ldr	r2, [pc, #452]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6213      	str	r3, [r2, #32]
 8003468:	e00b      	b.n	8003482 <HAL_RCC_OscConfig+0x99a>
 800346a:	4b6f      	ldr	r3, [pc, #444]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4a6e      	ldr	r2, [pc, #440]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	6213      	str	r3, [r2, #32]
 8003476:	4b6c      	ldr	r3, [pc, #432]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4a6b      	ldr	r2, [pc, #428]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 800347c:	f023 0304 	bic.w	r3, r3, #4
 8003480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003486:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8081 	beq.w	8003596 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7fe fa62 	bl	800195c <HAL_GetTick>
 8003498:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	e00b      	b.n	80034b6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fe fa5d 	bl	800195c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e365      	b.n	8003b82 <HAL_RCC_OscConfig+0x109a>
 80034b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80034be:	2202      	movs	r2, #2
 80034c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fa93 f2a3 	rbit	r2, r3
 80034d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034e2:	2202      	movs	r2, #2
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	fa93 f2a3 	rbit	r2, r3
 80034f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034fc:	601a      	str	r2, [r3, #0]
  return result;
 80034fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003502:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003506:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f043 0302 	orr.w	r3, r3, #2
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d102      	bne.n	8003522 <HAL_RCC_OscConfig+0xa3a>
 800351c:	4b42      	ldr	r3, [pc, #264]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	e013      	b.n	800354a <HAL_RCC_OscConfig+0xa62>
 8003522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003526:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800352a:	2202      	movs	r2, #2
 800352c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003532:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	fa93 f2a3 	rbit	r2, r3
 800353c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003540:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	4b38      	ldr	r3, [pc, #224]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800354e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003552:	2102      	movs	r1, #2
 8003554:	6011      	str	r1, [r2, #0]
 8003556:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800355a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	fa92 f1a2 	rbit	r1, r2
 8003564:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003568:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800356c:	6011      	str	r1, [r2, #0]
  return result;
 800356e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003572:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	fab2 f282 	clz	r2, r2
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	f002 021f 	and.w	r2, r2, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f202 	lsl.w	r2, r1, r2
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d084      	beq.n	800349e <HAL_RCC_OscConfig+0x9b6>
 8003594:	e083      	b.n	800369e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7fe f9e1 	bl	800195c <HAL_GetTick>
 800359a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a0:	f7fe f9dc 	bl	800195c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e2e4      	b.n	8003b82 <HAL_RCC_OscConfig+0x109a>
 80035b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035c0:	2202      	movs	r2, #2
 80035c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	fa93 f2a3 	rbit	r2, r3
 80035d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035e4:	2202      	movs	r2, #2
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	fa93 f2a3 	rbit	r2, r3
 80035f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035fe:	601a      	str	r2, [r3, #0]
  return result;
 8003600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003604:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003608:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d106      	bne.n	800362c <HAL_RCC_OscConfig+0xb44>
 800361e:	4b02      	ldr	r3, [pc, #8]	; (8003628 <HAL_RCC_OscConfig+0xb40>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	e017      	b.n	8003654 <HAL_RCC_OscConfig+0xb6c>
 8003624:	40007000 	.word	0x40007000
 8003628:	40021000 	.word	0x40021000
 800362c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003630:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003634:	2202      	movs	r2, #2
 8003636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800363c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fa93 f2a3 	rbit	r2, r3
 8003646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800364a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	4bb3      	ldr	r3, [pc, #716]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003658:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800365c:	2102      	movs	r1, #2
 800365e:	6011      	str	r1, [r2, #0]
 8003660:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003664:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	fa92 f1a2 	rbit	r1, r2
 800366e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003672:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003676:	6011      	str	r1, [r2, #0]
  return result;
 8003678:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800367c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	fab2 f282 	clz	r2, r2
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f002 021f 	and.w	r2, r2, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f202 	lsl.w	r2, r1, r2
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d180      	bne.n	80035a0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800369e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a6:	4b9e      	ldr	r3, [pc, #632]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	4a9d      	ldr	r2, [pc, #628]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 825e 	beq.w	8003b80 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c4:	4b96      	ldr	r3, [pc, #600]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	f000 821f 	beq.w	8003b10 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	f040 8170 	bne.w	80039c4 <HAL_RCC_OscConfig+0xedc>
 80036e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	fa93 f2a3 	rbit	r2, r3
 8003700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003704:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003708:	601a      	str	r2, [r3, #0]
  return result;
 800370a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003712:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800371e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	461a      	mov	r2, r3
 8003726:	2300      	movs	r3, #0
 8003728:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fe f917 	bl	800195c <HAL_GetTick>
 800372e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003732:	e009      	b.n	8003748 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe f912 	bl	800195c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e21c      	b.n	8003b82 <HAL_RCC_OscConfig+0x109a>
 8003748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800374c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	fa93 f2a3 	rbit	r2, r3
 8003764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003768:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800376c:	601a      	str	r2, [r3, #0]
  return result;
 800376e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003772:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003776:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	b2db      	uxtb	r3, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d102      	bne.n	8003792 <HAL_RCC_OscConfig+0xcaa>
 800378c:	4b64      	ldr	r3, [pc, #400]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	e027      	b.n	80037e2 <HAL_RCC_OscConfig+0xcfa>
 8003792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003796:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800379a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800379e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	fa93 f2a3 	rbit	r2, r3
 80037ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037bc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	fa93 f2a3 	rbit	r2, r3
 80037d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037e6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037ee:	6011      	str	r1, [r2, #0]
 80037f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	fa92 f1a2 	rbit	r1, r2
 80037fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003802:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003806:	6011      	str	r1, [r2, #0]
  return result;
 8003808:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800380c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	fab2 f282 	clz	r2, r2
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	f042 0220 	orr.w	r2, r2, #32
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	f002 021f 	and.w	r2, r2, #31
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f202 	lsl.w	r2, r1, r2
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d182      	bne.n	8003734 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800382e:	4b3c      	ldr	r3, [pc, #240]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	f023 020f 	bic.w	r2, r3, #15
 8003836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	4937      	ldr	r1, [pc, #220]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 8003844:	4313      	orrs	r3, r2
 8003846:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003848:	4b35      	ldr	r3, [pc, #212]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003854:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a19      	ldr	r1, [r3, #32]
 800385c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003860:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	430b      	orrs	r3, r1
 800386a:	492d      	ldr	r1, [pc, #180]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
 8003870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003874:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800387c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003882:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	fa93 f2a3 	rbit	r2, r3
 800388c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003890:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003894:	601a      	str	r2, [r3, #0]
  return result;
 8003896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800389a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800389e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a0:	fab3 f383 	clz	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	461a      	mov	r2, r3
 80038b2:	2301      	movs	r3, #1
 80038b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fe f851 	bl	800195c <HAL_GetTick>
 80038ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038be:	e009      	b.n	80038d4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fe f84c 	bl	800195c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e156      	b.n	8003b82 <HAL_RCC_OscConfig+0x109a>
 80038d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	fa93 f2a3 	rbit	r2, r3
 80038f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038f8:	601a      	str	r2, [r3, #0]
  return result;
 80038fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003902:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003904:	fab3 f383 	clz	r3, r3
 8003908:	b2db      	uxtb	r3, r3
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d105      	bne.n	8003924 <HAL_RCC_OscConfig+0xe3c>
 8003918:	4b01      	ldr	r3, [pc, #4]	; (8003920 <HAL_RCC_OscConfig+0xe38>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	e02a      	b.n	8003974 <HAL_RCC_OscConfig+0xe8c>
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003928:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800392c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003936:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	fa93 f2a3 	rbit	r2, r3
 8003940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003944:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800395c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	fa93 f2a3 	rbit	r2, r3
 8003966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800396a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	4b86      	ldr	r3, [pc, #536]	; (8003b8c <HAL_RCC_OscConfig+0x10a4>)
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003978:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800397c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003980:	6011      	str	r1, [r2, #0]
 8003982:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003986:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	fa92 f1a2 	rbit	r1, r2
 8003990:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003994:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003998:	6011      	str	r1, [r2, #0]
  return result;
 800399a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800399e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	fab2 f282 	clz	r2, r2
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f042 0220 	orr.w	r2, r2, #32
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	f002 021f 	and.w	r2, r2, #31
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f43f af7f 	beq.w	80038c0 <HAL_RCC_OscConfig+0xdd8>
 80039c2:	e0dd      	b.n	8003b80 <HAL_RCC_OscConfig+0x1098>
 80039c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	fa93 f2a3 	rbit	r2, r3
 80039e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039e8:	601a      	str	r2, [r3, #0]
  return result;
 80039ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039f2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f4:	fab3 f383 	clz	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	461a      	mov	r2, r3
 8003a06:	2300      	movs	r3, #0
 8003a08:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0a:	f7fd ffa7 	bl	800195c <HAL_GetTick>
 8003a0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a12:	e009      	b.n	8003a28 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fd ffa2 	bl	800195c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e0ac      	b.n	8003b82 <HAL_RCC_OscConfig+0x109a>
 8003a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	fa93 f2a3 	rbit	r2, r3
 8003a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a48:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a4c:	601a      	str	r2, [r3, #0]
  return result;
 8003a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d102      	bne.n	8003a72 <HAL_RCC_OscConfig+0xf8a>
 8003a6c:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCC_OscConfig+0x10a4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	e027      	b.n	8003ac2 <HAL_RCC_OscConfig+0xfda>
 8003a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a76:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a84:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	fa93 f2a3 	rbit	r2, r3
 8003a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a92:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003aa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aaa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fa93 f2a3 	rbit	r2, r3
 8003ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <HAL_RCC_OscConfig+0x10a4>)
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ac6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003aca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ace:	6011      	str	r1, [r2, #0]
 8003ad0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ad4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	fa92 f1a2 	rbit	r1, r2
 8003ade:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ae2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003ae6:	6011      	str	r1, [r2, #0]
  return result;
 8003ae8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aec:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	fab2 f282 	clz	r2, r2
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	f042 0220 	orr.w	r2, r2, #32
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	f002 021f 	and.w	r2, r2, #31
 8003b02:	2101      	movs	r1, #1
 8003b04:	fa01 f202 	lsl.w	r2, r1, r2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d182      	bne.n	8003a14 <HAL_RCC_OscConfig+0xf2c>
 8003b0e:	e037      	b.n	8003b80 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e02e      	b.n	8003b82 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_RCC_OscConfig+0x10a4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003b2c:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <HAL_RCC_OscConfig+0x10a4>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b38:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d117      	bne.n	8003b7c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b50:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d10b      	bne.n	8003b7c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b68:	f003 020f 	and.w	r2, r3, #15
 8003b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000

08003b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b09e      	sub	sp, #120	; 0x78
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e162      	b.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b90      	ldr	r3, [pc, #576]	; (8003dec <HAL_RCC_ClockConfig+0x25c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d910      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b8d      	ldr	r3, [pc, #564]	; (8003dec <HAL_RCC_ClockConfig+0x25c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 0207 	bic.w	r2, r3, #7
 8003bbe:	498b      	ldr	r1, [pc, #556]	; (8003dec <HAL_RCC_ClockConfig+0x25c>)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b89      	ldr	r3, [pc, #548]	; (8003dec <HAL_RCC_ClockConfig+0x25c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e14a      	b.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be4:	4b82      	ldr	r3, [pc, #520]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	497f      	ldr	r1, [pc, #508]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80dc 	beq.w	8003dbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d13c      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xf6>
 8003c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1c:	fab3 f383 	clz	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d102      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xa6>
 8003c30:	4b6f      	ldr	r3, [pc, #444]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	e00f      	b.n	8003c56 <HAL_RCC_ClockConfig+0xc6>
 8003c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	667b      	str	r3, [r7, #100]	; 0x64
 8003c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c48:	663b      	str	r3, [r7, #96]	; 0x60
 8003c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c52:	4b67      	ldr	r3, [pc, #412]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c5e:	fa92 f2a2 	rbit	r2, r2
 8003c62:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c66:	fab2 f282 	clz	r2, r2
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	f042 0220 	orr.w	r2, r2, #32
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	f002 021f 	and.w	r2, r2, #31
 8003c76:	2101      	movs	r1, #1
 8003c78:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d17b      	bne.n	8003d7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0f3      	b.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d13c      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x178>
 8003c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x128>
 8003cb2:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	e00f      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x148>
 8003cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc0:	fa93 f3a3 	rbit	r3, r3
 8003cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cca:	643b      	str	r3, [r7, #64]	; 0x40
 8003ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cce:	fa93 f3a3 	rbit	r3, r3
 8003cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd4:	4b46      	ldr	r3, [pc, #280]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cdc:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ce0:	fa92 f2a2 	rbit	r2, r2
 8003ce4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ce8:	fab2 f282 	clz	r2, r2
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	f042 0220 	orr.w	r2, r2, #32
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	f002 021f 	and.w	r2, r2, #31
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d13a      	bne.n	8003d7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0b2      	b.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d102      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x1a0>
 8003d2a:	4b31      	ldr	r3, [pc, #196]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	e00d      	b.n	8003d4c <HAL_RCC_ClockConfig+0x1bc>
 8003d30:	2302      	movs	r3, #2
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	61ba      	str	r2, [r7, #24]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	fa92 f2a2 	rbit	r2, r2
 8003d56:	617a      	str	r2, [r7, #20]
  return result;
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	fab2 f282 	clz	r2, r2
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	f042 0220 	orr.w	r2, r2, #32
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	f002 021f 	and.w	r2, r2, #31
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e079      	b.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7a:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	491a      	ldr	r1, [pc, #104]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d8c:	f7fd fde6 	bl	800195c <HAL_GetTick>
 8003d90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fd fde2 	bl	800195c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e061      	b.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_RCC_ClockConfig+0x260>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 020c 	and.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1eb      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_ClockConfig+0x25c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d214      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_RCC_ClockConfig+0x25c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 0207 	bic.w	r2, r3, #7
 8003dd2:	4906      	ldr	r1, [pc, #24]	; (8003dec <HAL_RCC_ClockConfig+0x25c>)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <HAL_RCC_ClockConfig+0x25c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e040      	b.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
 8003dec:	40022000 	.word	0x40022000
 8003df0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_RCC_ClockConfig+0x2e8>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	491a      	ldr	r1, [pc, #104]	; (8003e78 <HAL_RCC_ClockConfig+0x2e8>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <HAL_RCC_ClockConfig+0x2e8>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4912      	ldr	r1, [pc, #72]	; (8003e78 <HAL_RCC_ClockConfig+0x2e8>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e32:	f000 f829 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8003e36:	4601      	mov	r1, r0
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <HAL_RCC_ClockConfig+0x2e8>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e40:	22f0      	movs	r2, #240	; 0xf0
 8003e42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	fa92 f2a2 	rbit	r2, r2
 8003e4a:	60fa      	str	r2, [r7, #12]
  return result;
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	fab2 f282 	clz	r2, r2
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	40d3      	lsrs	r3, r2
 8003e56:	4a09      	ldr	r2, [pc, #36]	; (8003e7c <HAL_RCC_ClockConfig+0x2ec>)
 8003e58:	5cd3      	ldrb	r3, [r2, r3]
 8003e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <HAL_RCC_ClockConfig+0x2f0>)
 8003e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <HAL_RCC_ClockConfig+0x2f4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd fd34 	bl	80018d4 <HAL_InitTick>
  
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3778      	adds	r7, #120	; 0x78
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	08007b58 	.word	0x08007b58
 8003e80:	20000000 	.word	0x20000000
 8003e84:	20000004 	.word	0x20000004

08003e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b08b      	sub	sp, #44	; 0x2c
 8003e8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x30>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x36>
 8003eb6:	e03f      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eb8:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eba:	623b      	str	r3, [r7, #32]
      break;
 8003ebc:	e03f      	b.n	8003f3e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ec4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ec8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	fa92 f2a2 	rbit	r2, r2
 8003ed0:	607a      	str	r2, [r7, #4]
  return result;
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	fab2 f282 	clz	r2, r2
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	40d3      	lsrs	r3, r2
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ede:	5cd3      	ldrb	r3, [r2, r3]
 8003ee0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	220f      	movs	r2, #15
 8003eec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	fa92 f2a2 	rbit	r2, r2
 8003ef4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	fab2 f282 	clz	r2, r2
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	40d3      	lsrs	r3, r2
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f02:	5cd3      	ldrb	r3, [r2, r3]
 8003f04:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f10:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	e007      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f22:	4a0b      	ldr	r2, [pc, #44]	; (8003f50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	fb02 f303 	mul.w	r3, r2, r3
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	623b      	str	r3, [r7, #32]
      break;
 8003f36:	e002      	b.n	8003f3e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f3a:	623b      	str	r3, [r7, #32]
      break;
 8003f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	372c      	adds	r7, #44	; 0x2c
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	007a1200 	.word	0x007a1200
 8003f54:	08007b70 	.word	0x08007b70
 8003f58:	08007b80 	.word	0x08007b80

08003f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000000 	.word	0x20000000

08003f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f7a:	f7ff ffef 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003f7e:	4601      	mov	r1, r0
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	fa92 f2a2 	rbit	r2, r2
 8003f94:	603a      	str	r2, [r7, #0]
  return result;
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	fab2 f282 	clz	r2, r2
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	40d3      	lsrs	r3, r2
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	08007b68 	.word	0x08007b68

08003fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003fbe:	f7ff ffcd 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003fc2:	4601      	mov	r1, r0
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003fcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003fd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	fa92 f2a2 	rbit	r2, r2
 8003fd8:	603a      	str	r2, [r7, #0]
  return result;
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	fab2 f282 	clz	r2, r2
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	40d3      	lsrs	r3, r2
 8003fe4:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
 8003fe8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08007b68 	.word	0x08007b68

08003ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b092      	sub	sp, #72	; 0x48
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800400c:	2300      	movs	r3, #0
 800400e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80d4 	beq.w	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004020:	4b4e      	ldr	r3, [pc, #312]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10e      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402c:	4b4b      	ldr	r3, [pc, #300]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	4a4a      	ldr	r2, [pc, #296]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004036:	61d3      	str	r3, [r2, #28]
 8004038:	4b48      	ldr	r3, [pc, #288]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b45      	ldr	r3, [pc, #276]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b42      	ldr	r3, [pc, #264]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a41      	ldr	r2, [pc, #260]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004060:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fd fc7b 	bl	800195c <HAL_GetTick>
 8004066:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	e008      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406a:	f7fd fc77 	bl	800195c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b64      	cmp	r3, #100	; 0x64
 8004076:	d901      	bls.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e1d6      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	4b38      	ldr	r3, [pc, #224]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004088:	4b34      	ldr	r3, [pc, #208]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8084 	beq.w	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d07c      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a8:	4b2c      	ldr	r3, [pc, #176]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b26      	ldr	r3, [pc, #152]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	461a      	mov	r2, r3
 80040d2:	2301      	movs	r3, #1
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	fa93 f3a3 	rbit	r3, r3
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	461a      	mov	r2, r3
 80040f6:	2300      	movs	r3, #0
 80040f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040fa:	4a18      	ldr	r2, [pc, #96]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d04b      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410a:	f7fd fc27 	bl	800195c <HAL_GetTick>
 800410e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004110:	e00a      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f7fd fc23 	bl	800195c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e180      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004128:	2302      	movs	r3, #2
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
 8004134:	2302      	movs	r3, #2
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	61fb      	str	r3, [r7, #28]
  return result;
 8004140:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d108      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004156:	4b01      	ldr	r3, [pc, #4]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	e00d      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800415c:	40021000 	.word	0x40021000
 8004160:	40007000 	.word	0x40007000
 8004164:	10908100 	.word	0x10908100
 8004168:	2302      	movs	r3, #2
 800416a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	fa93 f3a3 	rbit	r3, r3
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	4b9a      	ldr	r3, [pc, #616]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	2202      	movs	r2, #2
 800417a:	613a      	str	r2, [r7, #16]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	fa92 f2a2 	rbit	r2, r2
 8004182:	60fa      	str	r2, [r7, #12]
  return result;
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	fab2 f282 	clz	r2, r2
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	f002 021f 	and.w	r2, r2, #31
 8004196:	2101      	movs	r1, #1
 8004198:	fa01 f202 	lsl.w	r2, r1, r2
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0b7      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041a2:	4b8f      	ldr	r3, [pc, #572]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	498c      	ldr	r1, [pc, #560]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d105      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041bc:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	4a87      	ldr	r2, [pc, #540]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d4:	4b82      	ldr	r3, [pc, #520]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	f023 0203 	bic.w	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	497f      	ldr	r1, [pc, #508]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041f2:	4b7b      	ldr	r3, [pc, #492]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	4978      	ldr	r1, [pc, #480]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004200:	4313      	orrs	r3, r2
 8004202:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004210:	4b73      	ldr	r3, [pc, #460]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	4970      	ldr	r1, [pc, #448]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800422e:	4b6c      	ldr	r3, [pc, #432]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f023 0210 	bic.w	r2, r3, #16
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4969      	ldr	r1, [pc, #420]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800423c:	4313      	orrs	r3, r2
 800423e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800424c:	4b64      	ldr	r3, [pc, #400]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	4961      	ldr	r1, [pc, #388]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800426a:	4b5d      	ldr	r3, [pc, #372]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f023 0220 	bic.w	r2, r3, #32
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	495a      	ldr	r1, [pc, #360]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004278:	4313      	orrs	r3, r2
 800427a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004288:	4b55      	ldr	r3, [pc, #340]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	4952      	ldr	r1, [pc, #328]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042a6:	4b4e      	ldr	r3, [pc, #312]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	494b      	ldr	r1, [pc, #300]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042c4:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	4943      	ldr	r1, [pc, #268]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042e2:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	493c      	ldr	r1, [pc, #240]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004300:	4b37      	ldr	r3, [pc, #220]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	4934      	ldr	r1, [pc, #208]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800431e:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	492d      	ldr	r1, [pc, #180]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800432c:	4313      	orrs	r3, r2
 800432e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800433c:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	4925      	ldr	r1, [pc, #148]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800435a:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	491e      	ldr	r1, [pc, #120]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004368:	4313      	orrs	r3, r2
 800436a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004378:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	4916      	ldr	r1, [pc, #88]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d008      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	490f      	ldr	r1, [pc, #60]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c0:	4907      	ldr	r1, [pc, #28]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80043d2:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	e002      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e6:	4913      	ldr	r1, [pc, #76]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004404:	490b      	ldr	r1, [pc, #44]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004406:	4313      	orrs	r3, r2
 8004408:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004416:	4b07      	ldr	r3, [pc, #28]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004422:	4904      	ldr	r1, [pc, #16]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004424:	4313      	orrs	r3, r2
 8004426:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3748      	adds	r7, #72	; 0x48
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000

08004438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e040      	b.n	80044cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd f8b6 	bl	80015cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	; 0x24
 8004464:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0201 	bic.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8b6 	bl	80045e8 <UART_SetConfig>
 800447c:	4603      	mov	r3, r0
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e022      	b.n	80044cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa7e 	bl	8004990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fb05 	bl	8004ad4 <UART_CheckIdleState>
 80044ca:	4603      	mov	r3, r0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08a      	sub	sp, #40	; 0x28
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d178      	bne.n	80045de <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Transmit+0x24>
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e071      	b.n	80045e0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2221      	movs	r2, #33	; 0x21
 8004508:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450a:	f7fd fa27 	bl	800195c <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004528:	d108      	bne.n	800453c <HAL_UART_Transmit+0x68>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d104      	bne.n	800453c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e003      	b.n	8004544 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004544:	e030      	b.n	80045a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2200      	movs	r2, #0
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fb67 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e03c      	b.n	80045e0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10b      	bne.n	8004584 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004578:	b292      	uxth	r2, r2
 800457a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	3302      	adds	r3, #2
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e008      	b.n	8004596 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	b292      	uxth	r2, r2
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	3301      	adds	r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1c8      	bne.n	8004546 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2200      	movs	r2, #0
 80045bc:	2140      	movs	r1, #64	; 0x40
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fb30 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e005      	b.n	80045e0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4b92      	ldr	r3, [pc, #584]	; (800485c <UART_SetConfig+0x274>)
 8004614:	4013      	ands	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	6979      	ldr	r1, [r7, #20]
 800461c:	430b      	orrs	r3, r1
 800461e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	430a      	orrs	r2, r1
 8004658:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a80      	ldr	r2, [pc, #512]	; (8004860 <UART_SetConfig+0x278>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d120      	bne.n	80046a6 <UART_SetConfig+0xbe>
 8004664:	4b7f      	ldr	r3, [pc, #508]	; (8004864 <UART_SetConfig+0x27c>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	2b03      	cmp	r3, #3
 800466e:	d817      	bhi.n	80046a0 <UART_SetConfig+0xb8>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <UART_SetConfig+0x90>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	08004689 	.word	0x08004689
 800467c:	08004695 	.word	0x08004695
 8004680:	0800469b 	.word	0x0800469b
 8004684:	0800468f 	.word	0x0800468f
 8004688:	2301      	movs	r3, #1
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e0b5      	b.n	80047fa <UART_SetConfig+0x212>
 800468e:	2302      	movs	r3, #2
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e0b2      	b.n	80047fa <UART_SetConfig+0x212>
 8004694:	2304      	movs	r3, #4
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e0af      	b.n	80047fa <UART_SetConfig+0x212>
 800469a:	2308      	movs	r3, #8
 800469c:	77fb      	strb	r3, [r7, #31]
 800469e:	e0ac      	b.n	80047fa <UART_SetConfig+0x212>
 80046a0:	2310      	movs	r3, #16
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e0a9      	b.n	80047fa <UART_SetConfig+0x212>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6f      	ldr	r2, [pc, #444]	; (8004868 <UART_SetConfig+0x280>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d124      	bne.n	80046fa <UART_SetConfig+0x112>
 80046b0:	4b6c      	ldr	r3, [pc, #432]	; (8004864 <UART_SetConfig+0x27c>)
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046bc:	d011      	beq.n	80046e2 <UART_SetConfig+0xfa>
 80046be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046c2:	d817      	bhi.n	80046f4 <UART_SetConfig+0x10c>
 80046c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046c8:	d011      	beq.n	80046ee <UART_SetConfig+0x106>
 80046ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046ce:	d811      	bhi.n	80046f4 <UART_SetConfig+0x10c>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <UART_SetConfig+0xf4>
 80046d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d8:	d006      	beq.n	80046e8 <UART_SetConfig+0x100>
 80046da:	e00b      	b.n	80046f4 <UART_SetConfig+0x10c>
 80046dc:	2300      	movs	r3, #0
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e08b      	b.n	80047fa <UART_SetConfig+0x212>
 80046e2:	2302      	movs	r3, #2
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e088      	b.n	80047fa <UART_SetConfig+0x212>
 80046e8:	2304      	movs	r3, #4
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e085      	b.n	80047fa <UART_SetConfig+0x212>
 80046ee:	2308      	movs	r3, #8
 80046f0:	77fb      	strb	r3, [r7, #31]
 80046f2:	e082      	b.n	80047fa <UART_SetConfig+0x212>
 80046f4:	2310      	movs	r3, #16
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e07f      	b.n	80047fa <UART_SetConfig+0x212>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5b      	ldr	r2, [pc, #364]	; (800486c <UART_SetConfig+0x284>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d124      	bne.n	800474e <UART_SetConfig+0x166>
 8004704:	4b57      	ldr	r3, [pc, #348]	; (8004864 <UART_SetConfig+0x27c>)
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800470c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004710:	d011      	beq.n	8004736 <UART_SetConfig+0x14e>
 8004712:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004716:	d817      	bhi.n	8004748 <UART_SetConfig+0x160>
 8004718:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800471c:	d011      	beq.n	8004742 <UART_SetConfig+0x15a>
 800471e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004722:	d811      	bhi.n	8004748 <UART_SetConfig+0x160>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <UART_SetConfig+0x148>
 8004728:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800472c:	d006      	beq.n	800473c <UART_SetConfig+0x154>
 800472e:	e00b      	b.n	8004748 <UART_SetConfig+0x160>
 8004730:	2300      	movs	r3, #0
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e061      	b.n	80047fa <UART_SetConfig+0x212>
 8004736:	2302      	movs	r3, #2
 8004738:	77fb      	strb	r3, [r7, #31]
 800473a:	e05e      	b.n	80047fa <UART_SetConfig+0x212>
 800473c:	2304      	movs	r3, #4
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e05b      	b.n	80047fa <UART_SetConfig+0x212>
 8004742:	2308      	movs	r3, #8
 8004744:	77fb      	strb	r3, [r7, #31]
 8004746:	e058      	b.n	80047fa <UART_SetConfig+0x212>
 8004748:	2310      	movs	r3, #16
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e055      	b.n	80047fa <UART_SetConfig+0x212>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a47      	ldr	r2, [pc, #284]	; (8004870 <UART_SetConfig+0x288>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d124      	bne.n	80047a2 <UART_SetConfig+0x1ba>
 8004758:	4b42      	ldr	r3, [pc, #264]	; (8004864 <UART_SetConfig+0x27c>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004760:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004764:	d011      	beq.n	800478a <UART_SetConfig+0x1a2>
 8004766:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800476a:	d817      	bhi.n	800479c <UART_SetConfig+0x1b4>
 800476c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004770:	d011      	beq.n	8004796 <UART_SetConfig+0x1ae>
 8004772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004776:	d811      	bhi.n	800479c <UART_SetConfig+0x1b4>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <UART_SetConfig+0x19c>
 800477c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004780:	d006      	beq.n	8004790 <UART_SetConfig+0x1a8>
 8004782:	e00b      	b.n	800479c <UART_SetConfig+0x1b4>
 8004784:	2300      	movs	r3, #0
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e037      	b.n	80047fa <UART_SetConfig+0x212>
 800478a:	2302      	movs	r3, #2
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e034      	b.n	80047fa <UART_SetConfig+0x212>
 8004790:	2304      	movs	r3, #4
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e031      	b.n	80047fa <UART_SetConfig+0x212>
 8004796:	2308      	movs	r3, #8
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e02e      	b.n	80047fa <UART_SetConfig+0x212>
 800479c:	2310      	movs	r3, #16
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e02b      	b.n	80047fa <UART_SetConfig+0x212>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a33      	ldr	r2, [pc, #204]	; (8004874 <UART_SetConfig+0x28c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d124      	bne.n	80047f6 <UART_SetConfig+0x20e>
 80047ac:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <UART_SetConfig+0x27c>)
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80047b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047b8:	d011      	beq.n	80047de <UART_SetConfig+0x1f6>
 80047ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047be:	d817      	bhi.n	80047f0 <UART_SetConfig+0x208>
 80047c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047c4:	d011      	beq.n	80047ea <UART_SetConfig+0x202>
 80047c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047ca:	d811      	bhi.n	80047f0 <UART_SetConfig+0x208>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <UART_SetConfig+0x1f0>
 80047d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d4:	d006      	beq.n	80047e4 <UART_SetConfig+0x1fc>
 80047d6:	e00b      	b.n	80047f0 <UART_SetConfig+0x208>
 80047d8:	2300      	movs	r3, #0
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e00d      	b.n	80047fa <UART_SetConfig+0x212>
 80047de:	2302      	movs	r3, #2
 80047e0:	77fb      	strb	r3, [r7, #31]
 80047e2:	e00a      	b.n	80047fa <UART_SetConfig+0x212>
 80047e4:	2304      	movs	r3, #4
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e007      	b.n	80047fa <UART_SetConfig+0x212>
 80047ea:	2308      	movs	r3, #8
 80047ec:	77fb      	strb	r3, [r7, #31]
 80047ee:	e004      	b.n	80047fa <UART_SetConfig+0x212>
 80047f0:	2310      	movs	r3, #16
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e001      	b.n	80047fa <UART_SetConfig+0x212>
 80047f6:	2310      	movs	r3, #16
 80047f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004802:	d16b      	bne.n	80048dc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004804:	7ffb      	ldrb	r3, [r7, #31]
 8004806:	2b08      	cmp	r3, #8
 8004808:	d838      	bhi.n	800487c <UART_SetConfig+0x294>
 800480a:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <UART_SetConfig+0x228>)
 800480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004810:	08004835 	.word	0x08004835
 8004814:	0800483d 	.word	0x0800483d
 8004818:	08004845 	.word	0x08004845
 800481c:	0800487d 	.word	0x0800487d
 8004820:	0800484b 	.word	0x0800484b
 8004824:	0800487d 	.word	0x0800487d
 8004828:	0800487d 	.word	0x0800487d
 800482c:	0800487d 	.word	0x0800487d
 8004830:	08004853 	.word	0x08004853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004834:	f7ff fb9e 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 8004838:	61b8      	str	r0, [r7, #24]
        break;
 800483a:	e024      	b.n	8004886 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800483c:	f7ff fbbc 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8004840:	61b8      	str	r0, [r7, #24]
        break;
 8004842:	e020      	b.n	8004886 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <UART_SetConfig+0x290>)
 8004846:	61bb      	str	r3, [r7, #24]
        break;
 8004848:	e01d      	b.n	8004886 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484a:	f7ff fb1d 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 800484e:	61b8      	str	r0, [r7, #24]
        break;
 8004850:	e019      	b.n	8004886 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004856:	61bb      	str	r3, [r7, #24]
        break;
 8004858:	e015      	b.n	8004886 <UART_SetConfig+0x29e>
 800485a:	bf00      	nop
 800485c:	efff69f3 	.word	0xefff69f3
 8004860:	40013800 	.word	0x40013800
 8004864:	40021000 	.word	0x40021000
 8004868:	40004400 	.word	0x40004400
 800486c:	40004800 	.word	0x40004800
 8004870:	40004c00 	.word	0x40004c00
 8004874:	40005000 	.word	0x40005000
 8004878:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	77bb      	strb	r3, [r7, #30]
        break;
 8004884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d073      	beq.n	8004974 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	005a      	lsls	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	441a      	add	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b0f      	cmp	r3, #15
 80048a6:	d916      	bls.n	80048d6 <UART_SetConfig+0x2ee>
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ae:	d212      	bcs.n	80048d6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f023 030f 	bic.w	r3, r3, #15
 80048b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	b29b      	uxth	r3, r3
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	89fb      	ldrh	r3, [r7, #14]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	89fa      	ldrh	r2, [r7, #14]
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	e04e      	b.n	8004974 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77bb      	strb	r3, [r7, #30]
 80048da:	e04b      	b.n	8004974 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048dc:	7ffb      	ldrb	r3, [r7, #31]
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d827      	bhi.n	8004932 <UART_SetConfig+0x34a>
 80048e2:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <UART_SetConfig+0x300>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004915 	.word	0x08004915
 80048f0:	0800491d 	.word	0x0800491d
 80048f4:	08004933 	.word	0x08004933
 80048f8:	08004923 	.word	0x08004923
 80048fc:	08004933 	.word	0x08004933
 8004900:	08004933 	.word	0x08004933
 8004904:	08004933 	.word	0x08004933
 8004908:	0800492b 	.word	0x0800492b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7ff fb32 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 8004910:	61b8      	str	r0, [r7, #24]
        break;
 8004912:	e013      	b.n	800493c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004914:	f7ff fb50 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8004918:	61b8      	str	r0, [r7, #24]
        break;
 800491a:	e00f      	b.n	800493c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <UART_SetConfig+0x3a4>)
 800491e:	61bb      	str	r3, [r7, #24]
        break;
 8004920:	e00c      	b.n	800493c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7ff fab1 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8004926:	61b8      	str	r0, [r7, #24]
        break;
 8004928:	e008      	b.n	800493c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492e:	61bb      	str	r3, [r7, #24]
        break;
 8004930:	e004      	b.n	800493c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	77bb      	strb	r3, [r7, #30]
        break;
 800493a:	bf00      	nop
    }

    if (pclk != 0U)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d018      	beq.n	8004974 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	085a      	lsrs	r2, r3, #1
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	441a      	add	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b0f      	cmp	r3, #15
 800495a:	d909      	bls.n	8004970 <UART_SetConfig+0x388>
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004962:	d205      	bcs.n	8004970 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	e001      	b.n	8004974 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004980:	7fbb      	ldrb	r3, [r7, #30]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	007a1200 	.word	0x007a1200

08004990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a8e:	d10a      	bne.n	8004aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b098      	sub	sp, #96	; 0x60
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae4:	f7fc ff3a 	bl	800195c <HAL_GetTick>
 8004ae8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d12e      	bne.n	8004b56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b00:	2200      	movs	r2, #0
 8004b02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f88c 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d021      	beq.n	8004b56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b26:	653b      	str	r3, [r7, #80]	; 0x50
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
 8004b32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e6      	bne.n	8004b12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e062      	b.n	8004c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d149      	bne.n	8004bf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f856 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d03c      	beq.n	8004bf8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e6      	bne.n	8004b7e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e5      	bne.n	8004bb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e011      	b.n	8004c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3758      	adds	r7, #88	; 0x58
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	e049      	b.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d045      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fc fe8d 	bl	800195c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e048      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d031      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d110      	bne.n	8004c96 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f838 	bl	8004cf2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2208      	movs	r2, #8
 8004c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e029      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca4:	d111      	bne.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f81e 	bl	8004cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e00f      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	bf0c      	ite	eq
 8004cda:	2301      	moveq	r3, #1
 8004cdc:	2300      	movne	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d0a6      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b095      	sub	sp, #84	; 0x54
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d18:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e6      	bne.n	8004cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3308      	adds	r3, #8
 8004d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e5      	bne.n	8004d2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d118      	bne.n	8004d9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 0310 	bic.w	r3, r3, #16
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6979      	ldr	r1, [r7, #20]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	613b      	str	r3, [r7, #16]
   return(result);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e6      	bne.n	8004d68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dae:	bf00      	nop
 8004db0:	3754      	adds	r7, #84	; 0x54
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <__cvt>:
 8004dba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dbe:	ec55 4b10 	vmov	r4, r5, d0
 8004dc2:	2d00      	cmp	r5, #0
 8004dc4:	460e      	mov	r6, r1
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	462b      	mov	r3, r5
 8004dca:	bfbb      	ittet	lt
 8004dcc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004dd0:	461d      	movlt	r5, r3
 8004dd2:	2300      	movge	r3, #0
 8004dd4:	232d      	movlt	r3, #45	; 0x2d
 8004dd6:	700b      	strb	r3, [r1, #0]
 8004dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dda:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004dde:	4691      	mov	r9, r2
 8004de0:	f023 0820 	bic.w	r8, r3, #32
 8004de4:	bfbc      	itt	lt
 8004de6:	4622      	movlt	r2, r4
 8004de8:	4614      	movlt	r4, r2
 8004dea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dee:	d005      	beq.n	8004dfc <__cvt+0x42>
 8004df0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004df4:	d100      	bne.n	8004df8 <__cvt+0x3e>
 8004df6:	3601      	adds	r6, #1
 8004df8:	2102      	movs	r1, #2
 8004dfa:	e000      	b.n	8004dfe <__cvt+0x44>
 8004dfc:	2103      	movs	r1, #3
 8004dfe:	ab03      	add	r3, sp, #12
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	ab02      	add	r3, sp, #8
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	ec45 4b10 	vmov	d0, r4, r5
 8004e0a:	4653      	mov	r3, sl
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	f000 fe6b 	bl	8005ae8 <_dtoa_r>
 8004e12:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e16:	4607      	mov	r7, r0
 8004e18:	d102      	bne.n	8004e20 <__cvt+0x66>
 8004e1a:	f019 0f01 	tst.w	r9, #1
 8004e1e:	d022      	beq.n	8004e66 <__cvt+0xac>
 8004e20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e24:	eb07 0906 	add.w	r9, r7, r6
 8004e28:	d110      	bne.n	8004e4c <__cvt+0x92>
 8004e2a:	783b      	ldrb	r3, [r7, #0]
 8004e2c:	2b30      	cmp	r3, #48	; 0x30
 8004e2e:	d10a      	bne.n	8004e46 <__cvt+0x8c>
 8004e30:	2200      	movs	r2, #0
 8004e32:	2300      	movs	r3, #0
 8004e34:	4620      	mov	r0, r4
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb fe4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e3c:	b918      	cbnz	r0, 8004e46 <__cvt+0x8c>
 8004e3e:	f1c6 0601 	rsb	r6, r6, #1
 8004e42:	f8ca 6000 	str.w	r6, [sl]
 8004e46:	f8da 3000 	ldr.w	r3, [sl]
 8004e4a:	4499      	add	r9, r3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4620      	mov	r0, r4
 8004e52:	4629      	mov	r1, r5
 8004e54:	f7fb fe40 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e58:	b108      	cbz	r0, 8004e5e <__cvt+0xa4>
 8004e5a:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e5e:	2230      	movs	r2, #48	; 0x30
 8004e60:	9b03      	ldr	r3, [sp, #12]
 8004e62:	454b      	cmp	r3, r9
 8004e64:	d307      	bcc.n	8004e76 <__cvt+0xbc>
 8004e66:	9b03      	ldr	r3, [sp, #12]
 8004e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e6a:	1bdb      	subs	r3, r3, r7
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	b004      	add	sp, #16
 8004e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e76:	1c59      	adds	r1, r3, #1
 8004e78:	9103      	str	r1, [sp, #12]
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e7f0      	b.n	8004e60 <__cvt+0xa6>

08004e7e <__exponent>:
 8004e7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e80:	4603      	mov	r3, r0
 8004e82:	2900      	cmp	r1, #0
 8004e84:	bfb8      	it	lt
 8004e86:	4249      	neglt	r1, r1
 8004e88:	f803 2b02 	strb.w	r2, [r3], #2
 8004e8c:	bfb4      	ite	lt
 8004e8e:	222d      	movlt	r2, #45	; 0x2d
 8004e90:	222b      	movge	r2, #43	; 0x2b
 8004e92:	2909      	cmp	r1, #9
 8004e94:	7042      	strb	r2, [r0, #1]
 8004e96:	dd2a      	ble.n	8004eee <__exponent+0x70>
 8004e98:	f10d 0207 	add.w	r2, sp, #7
 8004e9c:	4617      	mov	r7, r2
 8004e9e:	260a      	movs	r6, #10
 8004ea0:	4694      	mov	ip, r2
 8004ea2:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ea6:	fb06 1415 	mls	r4, r6, r5, r1
 8004eaa:	3430      	adds	r4, #48	; 0x30
 8004eac:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	2c63      	cmp	r4, #99	; 0x63
 8004eb4:	f102 32ff 	add.w	r2, r2, #4294967295
 8004eb8:	4629      	mov	r1, r5
 8004eba:	dcf1      	bgt.n	8004ea0 <__exponent+0x22>
 8004ebc:	3130      	adds	r1, #48	; 0x30
 8004ebe:	f1ac 0402 	sub.w	r4, ip, #2
 8004ec2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ec6:	1c41      	adds	r1, r0, #1
 8004ec8:	4622      	mov	r2, r4
 8004eca:	42ba      	cmp	r2, r7
 8004ecc:	d30a      	bcc.n	8004ee4 <__exponent+0x66>
 8004ece:	f10d 0209 	add.w	r2, sp, #9
 8004ed2:	eba2 020c 	sub.w	r2, r2, ip
 8004ed6:	42bc      	cmp	r4, r7
 8004ed8:	bf88      	it	hi
 8004eda:	2200      	movhi	r2, #0
 8004edc:	4413      	add	r3, r2
 8004ede:	1a18      	subs	r0, r3, r0
 8004ee0:	b003      	add	sp, #12
 8004ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ee8:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004eec:	e7ed      	b.n	8004eca <__exponent+0x4c>
 8004eee:	2330      	movs	r3, #48	; 0x30
 8004ef0:	3130      	adds	r1, #48	; 0x30
 8004ef2:	7083      	strb	r3, [r0, #2]
 8004ef4:	70c1      	strb	r1, [r0, #3]
 8004ef6:	1d03      	adds	r3, r0, #4
 8004ef8:	e7f1      	b.n	8004ede <__exponent+0x60>
	...

08004efc <_printf_float>:
 8004efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f00:	ed2d 8b02 	vpush	{d8}
 8004f04:	b08d      	sub	sp, #52	; 0x34
 8004f06:	460c      	mov	r4, r1
 8004f08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f0c:	4616      	mov	r6, r2
 8004f0e:	461f      	mov	r7, r3
 8004f10:	4605      	mov	r5, r0
 8004f12:	f000 fce7 	bl	80058e4 <_localeconv_r>
 8004f16:	f8d0 a000 	ldr.w	sl, [r0]
 8004f1a:	4650      	mov	r0, sl
 8004f1c:	f7fb f9b0 	bl	8000280 <strlen>
 8004f20:	2300      	movs	r3, #0
 8004f22:	930a      	str	r3, [sp, #40]	; 0x28
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	9305      	str	r3, [sp, #20]
 8004f28:	f8d8 3000 	ldr.w	r3, [r8]
 8004f2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f30:	3307      	adds	r3, #7
 8004f32:	f023 0307 	bic.w	r3, r3, #7
 8004f36:	f103 0208 	add.w	r2, r3, #8
 8004f3a:	f8c8 2000 	str.w	r2, [r8]
 8004f3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f46:	9307      	str	r3, [sp, #28]
 8004f48:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f4c:	ee08 0a10 	vmov	s16, r0
 8004f50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004f54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f58:	4b9e      	ldr	r3, [pc, #632]	; (80051d4 <_printf_float+0x2d8>)
 8004f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5e:	f7fb fded 	bl	8000b3c <__aeabi_dcmpun>
 8004f62:	bb88      	cbnz	r0, 8004fc8 <_printf_float+0xcc>
 8004f64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f68:	4b9a      	ldr	r3, [pc, #616]	; (80051d4 <_printf_float+0x2d8>)
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	f7fb fdc7 	bl	8000b00 <__aeabi_dcmple>
 8004f72:	bb48      	cbnz	r0, 8004fc8 <_printf_float+0xcc>
 8004f74:	2200      	movs	r2, #0
 8004f76:	2300      	movs	r3, #0
 8004f78:	4640      	mov	r0, r8
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	f7fb fdb6 	bl	8000aec <__aeabi_dcmplt>
 8004f80:	b110      	cbz	r0, 8004f88 <_printf_float+0x8c>
 8004f82:	232d      	movs	r3, #45	; 0x2d
 8004f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f88:	4a93      	ldr	r2, [pc, #588]	; (80051d8 <_printf_float+0x2dc>)
 8004f8a:	4b94      	ldr	r3, [pc, #592]	; (80051dc <_printf_float+0x2e0>)
 8004f8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f90:	bf94      	ite	ls
 8004f92:	4690      	movls	r8, r2
 8004f94:	4698      	movhi	r8, r3
 8004f96:	2303      	movs	r3, #3
 8004f98:	6123      	str	r3, [r4, #16]
 8004f9a:	9b05      	ldr	r3, [sp, #20]
 8004f9c:	f023 0304 	bic.w	r3, r3, #4
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	f04f 0900 	mov.w	r9, #0
 8004fa6:	9700      	str	r7, [sp, #0]
 8004fa8:	4633      	mov	r3, r6
 8004faa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004fac:	4621      	mov	r1, r4
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f000 f9da 	bl	8005368 <_printf_common>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	f040 8090 	bne.w	80050da <_printf_float+0x1de>
 8004fba:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbe:	b00d      	add	sp, #52	; 0x34
 8004fc0:	ecbd 8b02 	vpop	{d8}
 8004fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4649      	mov	r1, r9
 8004fd0:	f7fb fdb4 	bl	8000b3c <__aeabi_dcmpun>
 8004fd4:	b140      	cbz	r0, 8004fe8 <_printf_float+0xec>
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bfbc      	itt	lt
 8004fdc:	232d      	movlt	r3, #45	; 0x2d
 8004fde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fe2:	4a7f      	ldr	r2, [pc, #508]	; (80051e0 <_printf_float+0x2e4>)
 8004fe4:	4b7f      	ldr	r3, [pc, #508]	; (80051e4 <_printf_float+0x2e8>)
 8004fe6:	e7d1      	b.n	8004f8c <_printf_float+0x90>
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004fee:	9206      	str	r2, [sp, #24]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	d13f      	bne.n	8005074 <_printf_float+0x178>
 8004ff4:	2306      	movs	r3, #6
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	9b05      	ldr	r3, [sp, #20]
 8004ffa:	6861      	ldr	r1, [r4, #4]
 8004ffc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005000:	2300      	movs	r3, #0
 8005002:	9303      	str	r3, [sp, #12]
 8005004:	ab0a      	add	r3, sp, #40	; 0x28
 8005006:	e9cd b301 	strd	fp, r3, [sp, #4]
 800500a:	ab09      	add	r3, sp, #36	; 0x24
 800500c:	ec49 8b10 	vmov	d0, r8, r9
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	6022      	str	r2, [r4, #0]
 8005014:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005018:	4628      	mov	r0, r5
 800501a:	f7ff fece 	bl	8004dba <__cvt>
 800501e:	9b06      	ldr	r3, [sp, #24]
 8005020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005022:	2b47      	cmp	r3, #71	; 0x47
 8005024:	4680      	mov	r8, r0
 8005026:	d108      	bne.n	800503a <_printf_float+0x13e>
 8005028:	1cc8      	adds	r0, r1, #3
 800502a:	db02      	blt.n	8005032 <_printf_float+0x136>
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	4299      	cmp	r1, r3
 8005030:	dd41      	ble.n	80050b6 <_printf_float+0x1ba>
 8005032:	f1ab 0302 	sub.w	r3, fp, #2
 8005036:	fa5f fb83 	uxtb.w	fp, r3
 800503a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800503e:	d820      	bhi.n	8005082 <_printf_float+0x186>
 8005040:	3901      	subs	r1, #1
 8005042:	465a      	mov	r2, fp
 8005044:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005048:	9109      	str	r1, [sp, #36]	; 0x24
 800504a:	f7ff ff18 	bl	8004e7e <__exponent>
 800504e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005050:	1813      	adds	r3, r2, r0
 8005052:	2a01      	cmp	r2, #1
 8005054:	4681      	mov	r9, r0
 8005056:	6123      	str	r3, [r4, #16]
 8005058:	dc02      	bgt.n	8005060 <_printf_float+0x164>
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	07d2      	lsls	r2, r2, #31
 800505e:	d501      	bpl.n	8005064 <_printf_float+0x168>
 8005060:	3301      	adds	r3, #1
 8005062:	6123      	str	r3, [r4, #16]
 8005064:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005068:	2b00      	cmp	r3, #0
 800506a:	d09c      	beq.n	8004fa6 <_printf_float+0xaa>
 800506c:	232d      	movs	r3, #45	; 0x2d
 800506e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005072:	e798      	b.n	8004fa6 <_printf_float+0xaa>
 8005074:	9a06      	ldr	r2, [sp, #24]
 8005076:	2a47      	cmp	r2, #71	; 0x47
 8005078:	d1be      	bne.n	8004ff8 <_printf_float+0xfc>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1bc      	bne.n	8004ff8 <_printf_float+0xfc>
 800507e:	2301      	movs	r3, #1
 8005080:	e7b9      	b.n	8004ff6 <_printf_float+0xfa>
 8005082:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005086:	d118      	bne.n	80050ba <_printf_float+0x1be>
 8005088:	2900      	cmp	r1, #0
 800508a:	6863      	ldr	r3, [r4, #4]
 800508c:	dd0b      	ble.n	80050a6 <_printf_float+0x1aa>
 800508e:	6121      	str	r1, [r4, #16]
 8005090:	b913      	cbnz	r3, 8005098 <_printf_float+0x19c>
 8005092:	6822      	ldr	r2, [r4, #0]
 8005094:	07d0      	lsls	r0, r2, #31
 8005096:	d502      	bpl.n	800509e <_printf_float+0x1a2>
 8005098:	3301      	adds	r3, #1
 800509a:	440b      	add	r3, r1
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	65a1      	str	r1, [r4, #88]	; 0x58
 80050a0:	f04f 0900 	mov.w	r9, #0
 80050a4:	e7de      	b.n	8005064 <_printf_float+0x168>
 80050a6:	b913      	cbnz	r3, 80050ae <_printf_float+0x1b2>
 80050a8:	6822      	ldr	r2, [r4, #0]
 80050aa:	07d2      	lsls	r2, r2, #31
 80050ac:	d501      	bpl.n	80050b2 <_printf_float+0x1b6>
 80050ae:	3302      	adds	r3, #2
 80050b0:	e7f4      	b.n	800509c <_printf_float+0x1a0>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e7f2      	b.n	800509c <_printf_float+0x1a0>
 80050b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80050ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050bc:	4299      	cmp	r1, r3
 80050be:	db05      	blt.n	80050cc <_printf_float+0x1d0>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	6121      	str	r1, [r4, #16]
 80050c4:	07d8      	lsls	r0, r3, #31
 80050c6:	d5ea      	bpl.n	800509e <_printf_float+0x1a2>
 80050c8:	1c4b      	adds	r3, r1, #1
 80050ca:	e7e7      	b.n	800509c <_printf_float+0x1a0>
 80050cc:	2900      	cmp	r1, #0
 80050ce:	bfd4      	ite	le
 80050d0:	f1c1 0202 	rsble	r2, r1, #2
 80050d4:	2201      	movgt	r2, #1
 80050d6:	4413      	add	r3, r2
 80050d8:	e7e0      	b.n	800509c <_printf_float+0x1a0>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	055a      	lsls	r2, r3, #21
 80050de:	d407      	bmi.n	80050f0 <_printf_float+0x1f4>
 80050e0:	6923      	ldr	r3, [r4, #16]
 80050e2:	4642      	mov	r2, r8
 80050e4:	4631      	mov	r1, r6
 80050e6:	4628      	mov	r0, r5
 80050e8:	47b8      	blx	r7
 80050ea:	3001      	adds	r0, #1
 80050ec:	d12c      	bne.n	8005148 <_printf_float+0x24c>
 80050ee:	e764      	b.n	8004fba <_printf_float+0xbe>
 80050f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050f4:	f240 80e0 	bls.w	80052b8 <_printf_float+0x3bc>
 80050f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050fc:	2200      	movs	r2, #0
 80050fe:	2300      	movs	r3, #0
 8005100:	f7fb fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8005104:	2800      	cmp	r0, #0
 8005106:	d034      	beq.n	8005172 <_printf_float+0x276>
 8005108:	4a37      	ldr	r2, [pc, #220]	; (80051e8 <_printf_float+0x2ec>)
 800510a:	2301      	movs	r3, #1
 800510c:	4631      	mov	r1, r6
 800510e:	4628      	mov	r0, r5
 8005110:	47b8      	blx	r7
 8005112:	3001      	adds	r0, #1
 8005114:	f43f af51 	beq.w	8004fba <_printf_float+0xbe>
 8005118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800511c:	429a      	cmp	r2, r3
 800511e:	db02      	blt.n	8005126 <_printf_float+0x22a>
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	07d8      	lsls	r0, r3, #31
 8005124:	d510      	bpl.n	8005148 <_printf_float+0x24c>
 8005126:	ee18 3a10 	vmov	r3, s16
 800512a:	4652      	mov	r2, sl
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	f43f af41 	beq.w	8004fba <_printf_float+0xbe>
 8005138:	f04f 0800 	mov.w	r8, #0
 800513c:	f104 091a 	add.w	r9, r4, #26
 8005140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005142:	3b01      	subs	r3, #1
 8005144:	4543      	cmp	r3, r8
 8005146:	dc09      	bgt.n	800515c <_printf_float+0x260>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	079b      	lsls	r3, r3, #30
 800514c:	f100 8107 	bmi.w	800535e <_printf_float+0x462>
 8005150:	68e0      	ldr	r0, [r4, #12]
 8005152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005154:	4298      	cmp	r0, r3
 8005156:	bfb8      	it	lt
 8005158:	4618      	movlt	r0, r3
 800515a:	e730      	b.n	8004fbe <_printf_float+0xc2>
 800515c:	2301      	movs	r3, #1
 800515e:	464a      	mov	r2, r9
 8005160:	4631      	mov	r1, r6
 8005162:	4628      	mov	r0, r5
 8005164:	47b8      	blx	r7
 8005166:	3001      	adds	r0, #1
 8005168:	f43f af27 	beq.w	8004fba <_printf_float+0xbe>
 800516c:	f108 0801 	add.w	r8, r8, #1
 8005170:	e7e6      	b.n	8005140 <_printf_float+0x244>
 8005172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	dc39      	bgt.n	80051ec <_printf_float+0x2f0>
 8005178:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <_printf_float+0x2ec>)
 800517a:	2301      	movs	r3, #1
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	47b8      	blx	r7
 8005182:	3001      	adds	r0, #1
 8005184:	f43f af19 	beq.w	8004fba <_printf_float+0xbe>
 8005188:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800518c:	4313      	orrs	r3, r2
 800518e:	d102      	bne.n	8005196 <_printf_float+0x29a>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	07d9      	lsls	r1, r3, #31
 8005194:	d5d8      	bpl.n	8005148 <_printf_float+0x24c>
 8005196:	ee18 3a10 	vmov	r3, s16
 800519a:	4652      	mov	r2, sl
 800519c:	4631      	mov	r1, r6
 800519e:	4628      	mov	r0, r5
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	f43f af09 	beq.w	8004fba <_printf_float+0xbe>
 80051a8:	f04f 0900 	mov.w	r9, #0
 80051ac:	f104 0a1a 	add.w	sl, r4, #26
 80051b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b2:	425b      	negs	r3, r3
 80051b4:	454b      	cmp	r3, r9
 80051b6:	dc01      	bgt.n	80051bc <_printf_float+0x2c0>
 80051b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ba:	e792      	b.n	80050e2 <_printf_float+0x1e6>
 80051bc:	2301      	movs	r3, #1
 80051be:	4652      	mov	r2, sl
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f aef7 	beq.w	8004fba <_printf_float+0xbe>
 80051cc:	f109 0901 	add.w	r9, r9, #1
 80051d0:	e7ee      	b.n	80051b0 <_printf_float+0x2b4>
 80051d2:	bf00      	nop
 80051d4:	7fefffff 	.word	0x7fefffff
 80051d8:	08007b90 	.word	0x08007b90
 80051dc:	08007b94 	.word	0x08007b94
 80051e0:	08007b98 	.word	0x08007b98
 80051e4:	08007b9c 	.word	0x08007b9c
 80051e8:	08007ba0 	.word	0x08007ba0
 80051ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bfa8      	it	ge
 80051f4:	461a      	movge	r2, r3
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	4691      	mov	r9, r2
 80051fa:	dc37      	bgt.n	800526c <_printf_float+0x370>
 80051fc:	f04f 0b00 	mov.w	fp, #0
 8005200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005204:	f104 021a 	add.w	r2, r4, #26
 8005208:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800520a:	9305      	str	r3, [sp, #20]
 800520c:	eba3 0309 	sub.w	r3, r3, r9
 8005210:	455b      	cmp	r3, fp
 8005212:	dc33      	bgt.n	800527c <_printf_float+0x380>
 8005214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005218:	429a      	cmp	r2, r3
 800521a:	db3b      	blt.n	8005294 <_printf_float+0x398>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	07da      	lsls	r2, r3, #31
 8005220:	d438      	bmi.n	8005294 <_printf_float+0x398>
 8005222:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005226:	eba2 0903 	sub.w	r9, r2, r3
 800522a:	9b05      	ldr	r3, [sp, #20]
 800522c:	1ad2      	subs	r2, r2, r3
 800522e:	4591      	cmp	r9, r2
 8005230:	bfa8      	it	ge
 8005232:	4691      	movge	r9, r2
 8005234:	f1b9 0f00 	cmp.w	r9, #0
 8005238:	dc35      	bgt.n	80052a6 <_printf_float+0x3aa>
 800523a:	f04f 0800 	mov.w	r8, #0
 800523e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005242:	f104 0a1a 	add.w	sl, r4, #26
 8005246:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	eba3 0309 	sub.w	r3, r3, r9
 8005250:	4543      	cmp	r3, r8
 8005252:	f77f af79 	ble.w	8005148 <_printf_float+0x24c>
 8005256:	2301      	movs	r3, #1
 8005258:	4652      	mov	r2, sl
 800525a:	4631      	mov	r1, r6
 800525c:	4628      	mov	r0, r5
 800525e:	47b8      	blx	r7
 8005260:	3001      	adds	r0, #1
 8005262:	f43f aeaa 	beq.w	8004fba <_printf_float+0xbe>
 8005266:	f108 0801 	add.w	r8, r8, #1
 800526a:	e7ec      	b.n	8005246 <_printf_float+0x34a>
 800526c:	4613      	mov	r3, r2
 800526e:	4631      	mov	r1, r6
 8005270:	4642      	mov	r2, r8
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	d1c0      	bne.n	80051fc <_printf_float+0x300>
 800527a:	e69e      	b.n	8004fba <_printf_float+0xbe>
 800527c:	2301      	movs	r3, #1
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	9205      	str	r2, [sp, #20]
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f ae97 	beq.w	8004fba <_printf_float+0xbe>
 800528c:	9a05      	ldr	r2, [sp, #20]
 800528e:	f10b 0b01 	add.w	fp, fp, #1
 8005292:	e7b9      	b.n	8005208 <_printf_float+0x30c>
 8005294:	ee18 3a10 	vmov	r3, s16
 8005298:	4652      	mov	r2, sl
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	d1be      	bne.n	8005222 <_printf_float+0x326>
 80052a4:	e689      	b.n	8004fba <_printf_float+0xbe>
 80052a6:	9a05      	ldr	r2, [sp, #20]
 80052a8:	464b      	mov	r3, r9
 80052aa:	4442      	add	r2, r8
 80052ac:	4631      	mov	r1, r6
 80052ae:	4628      	mov	r0, r5
 80052b0:	47b8      	blx	r7
 80052b2:	3001      	adds	r0, #1
 80052b4:	d1c1      	bne.n	800523a <_printf_float+0x33e>
 80052b6:	e680      	b.n	8004fba <_printf_float+0xbe>
 80052b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ba:	2a01      	cmp	r2, #1
 80052bc:	dc01      	bgt.n	80052c2 <_printf_float+0x3c6>
 80052be:	07db      	lsls	r3, r3, #31
 80052c0:	d53a      	bpl.n	8005338 <_printf_float+0x43c>
 80052c2:	2301      	movs	r3, #1
 80052c4:	4642      	mov	r2, r8
 80052c6:	4631      	mov	r1, r6
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b8      	blx	r7
 80052cc:	3001      	adds	r0, #1
 80052ce:	f43f ae74 	beq.w	8004fba <_printf_float+0xbe>
 80052d2:	ee18 3a10 	vmov	r3, s16
 80052d6:	4652      	mov	r2, sl
 80052d8:	4631      	mov	r1, r6
 80052da:	4628      	mov	r0, r5
 80052dc:	47b8      	blx	r7
 80052de:	3001      	adds	r0, #1
 80052e0:	f43f ae6b 	beq.w	8004fba <_printf_float+0xbe>
 80052e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052e8:	2200      	movs	r2, #0
 80052ea:	2300      	movs	r3, #0
 80052ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80052f0:	f7fb fbf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80052f4:	b9d8      	cbnz	r0, 800532e <_printf_float+0x432>
 80052f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80052fa:	f108 0201 	add.w	r2, r8, #1
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	47b8      	blx	r7
 8005304:	3001      	adds	r0, #1
 8005306:	d10e      	bne.n	8005326 <_printf_float+0x42a>
 8005308:	e657      	b.n	8004fba <_printf_float+0xbe>
 800530a:	2301      	movs	r3, #1
 800530c:	4652      	mov	r2, sl
 800530e:	4631      	mov	r1, r6
 8005310:	4628      	mov	r0, r5
 8005312:	47b8      	blx	r7
 8005314:	3001      	adds	r0, #1
 8005316:	f43f ae50 	beq.w	8004fba <_printf_float+0xbe>
 800531a:	f108 0801 	add.w	r8, r8, #1
 800531e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005320:	3b01      	subs	r3, #1
 8005322:	4543      	cmp	r3, r8
 8005324:	dcf1      	bgt.n	800530a <_printf_float+0x40e>
 8005326:	464b      	mov	r3, r9
 8005328:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800532c:	e6da      	b.n	80050e4 <_printf_float+0x1e8>
 800532e:	f04f 0800 	mov.w	r8, #0
 8005332:	f104 0a1a 	add.w	sl, r4, #26
 8005336:	e7f2      	b.n	800531e <_printf_float+0x422>
 8005338:	2301      	movs	r3, #1
 800533a:	4642      	mov	r2, r8
 800533c:	e7df      	b.n	80052fe <_printf_float+0x402>
 800533e:	2301      	movs	r3, #1
 8005340:	464a      	mov	r2, r9
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	47b8      	blx	r7
 8005348:	3001      	adds	r0, #1
 800534a:	f43f ae36 	beq.w	8004fba <_printf_float+0xbe>
 800534e:	f108 0801 	add.w	r8, r8, #1
 8005352:	68e3      	ldr	r3, [r4, #12]
 8005354:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005356:	1a5b      	subs	r3, r3, r1
 8005358:	4543      	cmp	r3, r8
 800535a:	dcf0      	bgt.n	800533e <_printf_float+0x442>
 800535c:	e6f8      	b.n	8005150 <_printf_float+0x254>
 800535e:	f04f 0800 	mov.w	r8, #0
 8005362:	f104 0919 	add.w	r9, r4, #25
 8005366:	e7f4      	b.n	8005352 <_printf_float+0x456>

08005368 <_printf_common>:
 8005368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	4616      	mov	r6, r2
 800536e:	4699      	mov	r9, r3
 8005370:	688a      	ldr	r2, [r1, #8]
 8005372:	690b      	ldr	r3, [r1, #16]
 8005374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005378:	4293      	cmp	r3, r2
 800537a:	bfb8      	it	lt
 800537c:	4613      	movlt	r3, r2
 800537e:	6033      	str	r3, [r6, #0]
 8005380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005384:	4607      	mov	r7, r0
 8005386:	460c      	mov	r4, r1
 8005388:	b10a      	cbz	r2, 800538e <_printf_common+0x26>
 800538a:	3301      	adds	r3, #1
 800538c:	6033      	str	r3, [r6, #0]
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	0699      	lsls	r1, r3, #26
 8005392:	bf42      	ittt	mi
 8005394:	6833      	ldrmi	r3, [r6, #0]
 8005396:	3302      	addmi	r3, #2
 8005398:	6033      	strmi	r3, [r6, #0]
 800539a:	6825      	ldr	r5, [r4, #0]
 800539c:	f015 0506 	ands.w	r5, r5, #6
 80053a0:	d106      	bne.n	80053b0 <_printf_common+0x48>
 80053a2:	f104 0a19 	add.w	sl, r4, #25
 80053a6:	68e3      	ldr	r3, [r4, #12]
 80053a8:	6832      	ldr	r2, [r6, #0]
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	42ab      	cmp	r3, r5
 80053ae:	dc26      	bgt.n	80053fe <_printf_common+0x96>
 80053b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053b4:	1e13      	subs	r3, r2, #0
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	bf18      	it	ne
 80053ba:	2301      	movne	r3, #1
 80053bc:	0692      	lsls	r2, r2, #26
 80053be:	d42b      	bmi.n	8005418 <_printf_common+0xb0>
 80053c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c4:	4649      	mov	r1, r9
 80053c6:	4638      	mov	r0, r7
 80053c8:	47c0      	blx	r8
 80053ca:	3001      	adds	r0, #1
 80053cc:	d01e      	beq.n	800540c <_printf_common+0xa4>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	6922      	ldr	r2, [r4, #16]
 80053d2:	f003 0306 	and.w	r3, r3, #6
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	bf02      	ittt	eq
 80053da:	68e5      	ldreq	r5, [r4, #12]
 80053dc:	6833      	ldreq	r3, [r6, #0]
 80053de:	1aed      	subeq	r5, r5, r3
 80053e0:	68a3      	ldr	r3, [r4, #8]
 80053e2:	bf0c      	ite	eq
 80053e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e8:	2500      	movne	r5, #0
 80053ea:	4293      	cmp	r3, r2
 80053ec:	bfc4      	itt	gt
 80053ee:	1a9b      	subgt	r3, r3, r2
 80053f0:	18ed      	addgt	r5, r5, r3
 80053f2:	2600      	movs	r6, #0
 80053f4:	341a      	adds	r4, #26
 80053f6:	42b5      	cmp	r5, r6
 80053f8:	d11a      	bne.n	8005430 <_printf_common+0xc8>
 80053fa:	2000      	movs	r0, #0
 80053fc:	e008      	b.n	8005410 <_printf_common+0xa8>
 80053fe:	2301      	movs	r3, #1
 8005400:	4652      	mov	r2, sl
 8005402:	4649      	mov	r1, r9
 8005404:	4638      	mov	r0, r7
 8005406:	47c0      	blx	r8
 8005408:	3001      	adds	r0, #1
 800540a:	d103      	bne.n	8005414 <_printf_common+0xac>
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005414:	3501      	adds	r5, #1
 8005416:	e7c6      	b.n	80053a6 <_printf_common+0x3e>
 8005418:	18e1      	adds	r1, r4, r3
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	2030      	movs	r0, #48	; 0x30
 800541e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005422:	4422      	add	r2, r4
 8005424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800542c:	3302      	adds	r3, #2
 800542e:	e7c7      	b.n	80053c0 <_printf_common+0x58>
 8005430:	2301      	movs	r3, #1
 8005432:	4622      	mov	r2, r4
 8005434:	4649      	mov	r1, r9
 8005436:	4638      	mov	r0, r7
 8005438:	47c0      	blx	r8
 800543a:	3001      	adds	r0, #1
 800543c:	d0e6      	beq.n	800540c <_printf_common+0xa4>
 800543e:	3601      	adds	r6, #1
 8005440:	e7d9      	b.n	80053f6 <_printf_common+0x8e>
	...

08005444 <_printf_i>:
 8005444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005448:	7e0f      	ldrb	r7, [r1, #24]
 800544a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800544c:	2f78      	cmp	r7, #120	; 0x78
 800544e:	4691      	mov	r9, r2
 8005450:	4680      	mov	r8, r0
 8005452:	460c      	mov	r4, r1
 8005454:	469a      	mov	sl, r3
 8005456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800545a:	d807      	bhi.n	800546c <_printf_i+0x28>
 800545c:	2f62      	cmp	r7, #98	; 0x62
 800545e:	d80a      	bhi.n	8005476 <_printf_i+0x32>
 8005460:	2f00      	cmp	r7, #0
 8005462:	f000 80d4 	beq.w	800560e <_printf_i+0x1ca>
 8005466:	2f58      	cmp	r7, #88	; 0x58
 8005468:	f000 80c0 	beq.w	80055ec <_printf_i+0x1a8>
 800546c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005474:	e03a      	b.n	80054ec <_printf_i+0xa8>
 8005476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800547a:	2b15      	cmp	r3, #21
 800547c:	d8f6      	bhi.n	800546c <_printf_i+0x28>
 800547e:	a101      	add	r1, pc, #4	; (adr r1, 8005484 <_printf_i+0x40>)
 8005480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005484:	080054dd 	.word	0x080054dd
 8005488:	080054f1 	.word	0x080054f1
 800548c:	0800546d 	.word	0x0800546d
 8005490:	0800546d 	.word	0x0800546d
 8005494:	0800546d 	.word	0x0800546d
 8005498:	0800546d 	.word	0x0800546d
 800549c:	080054f1 	.word	0x080054f1
 80054a0:	0800546d 	.word	0x0800546d
 80054a4:	0800546d 	.word	0x0800546d
 80054a8:	0800546d 	.word	0x0800546d
 80054ac:	0800546d 	.word	0x0800546d
 80054b0:	080055f5 	.word	0x080055f5
 80054b4:	0800551d 	.word	0x0800551d
 80054b8:	080055af 	.word	0x080055af
 80054bc:	0800546d 	.word	0x0800546d
 80054c0:	0800546d 	.word	0x0800546d
 80054c4:	08005617 	.word	0x08005617
 80054c8:	0800546d 	.word	0x0800546d
 80054cc:	0800551d 	.word	0x0800551d
 80054d0:	0800546d 	.word	0x0800546d
 80054d4:	0800546d 	.word	0x0800546d
 80054d8:	080055b7 	.word	0x080055b7
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	1d1a      	adds	r2, r3, #4
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	602a      	str	r2, [r5, #0]
 80054e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054ec:	2301      	movs	r3, #1
 80054ee:	e09f      	b.n	8005630 <_printf_i+0x1ec>
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	682b      	ldr	r3, [r5, #0]
 80054f4:	0607      	lsls	r7, r0, #24
 80054f6:	f103 0104 	add.w	r1, r3, #4
 80054fa:	6029      	str	r1, [r5, #0]
 80054fc:	d501      	bpl.n	8005502 <_printf_i+0xbe>
 80054fe:	681e      	ldr	r6, [r3, #0]
 8005500:	e003      	b.n	800550a <_printf_i+0xc6>
 8005502:	0646      	lsls	r6, r0, #25
 8005504:	d5fb      	bpl.n	80054fe <_printf_i+0xba>
 8005506:	f9b3 6000 	ldrsh.w	r6, [r3]
 800550a:	2e00      	cmp	r6, #0
 800550c:	da03      	bge.n	8005516 <_printf_i+0xd2>
 800550e:	232d      	movs	r3, #45	; 0x2d
 8005510:	4276      	negs	r6, r6
 8005512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005516:	485a      	ldr	r0, [pc, #360]	; (8005680 <_printf_i+0x23c>)
 8005518:	230a      	movs	r3, #10
 800551a:	e012      	b.n	8005542 <_printf_i+0xfe>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	6820      	ldr	r0, [r4, #0]
 8005520:	1d19      	adds	r1, r3, #4
 8005522:	6029      	str	r1, [r5, #0]
 8005524:	0605      	lsls	r5, r0, #24
 8005526:	d501      	bpl.n	800552c <_printf_i+0xe8>
 8005528:	681e      	ldr	r6, [r3, #0]
 800552a:	e002      	b.n	8005532 <_printf_i+0xee>
 800552c:	0641      	lsls	r1, r0, #25
 800552e:	d5fb      	bpl.n	8005528 <_printf_i+0xe4>
 8005530:	881e      	ldrh	r6, [r3, #0]
 8005532:	4853      	ldr	r0, [pc, #332]	; (8005680 <_printf_i+0x23c>)
 8005534:	2f6f      	cmp	r7, #111	; 0x6f
 8005536:	bf0c      	ite	eq
 8005538:	2308      	moveq	r3, #8
 800553a:	230a      	movne	r3, #10
 800553c:	2100      	movs	r1, #0
 800553e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005542:	6865      	ldr	r5, [r4, #4]
 8005544:	60a5      	str	r5, [r4, #8]
 8005546:	2d00      	cmp	r5, #0
 8005548:	bfa2      	ittt	ge
 800554a:	6821      	ldrge	r1, [r4, #0]
 800554c:	f021 0104 	bicge.w	r1, r1, #4
 8005550:	6021      	strge	r1, [r4, #0]
 8005552:	b90e      	cbnz	r6, 8005558 <_printf_i+0x114>
 8005554:	2d00      	cmp	r5, #0
 8005556:	d04b      	beq.n	80055f0 <_printf_i+0x1ac>
 8005558:	4615      	mov	r5, r2
 800555a:	fbb6 f1f3 	udiv	r1, r6, r3
 800555e:	fb03 6711 	mls	r7, r3, r1, r6
 8005562:	5dc7      	ldrb	r7, [r0, r7]
 8005564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005568:	4637      	mov	r7, r6
 800556a:	42bb      	cmp	r3, r7
 800556c:	460e      	mov	r6, r1
 800556e:	d9f4      	bls.n	800555a <_printf_i+0x116>
 8005570:	2b08      	cmp	r3, #8
 8005572:	d10b      	bne.n	800558c <_printf_i+0x148>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	07de      	lsls	r6, r3, #31
 8005578:	d508      	bpl.n	800558c <_printf_i+0x148>
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	6861      	ldr	r1, [r4, #4]
 800557e:	4299      	cmp	r1, r3
 8005580:	bfde      	ittt	le
 8005582:	2330      	movle	r3, #48	; 0x30
 8005584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005588:	f105 35ff 	addle.w	r5, r5, #4294967295
 800558c:	1b52      	subs	r2, r2, r5
 800558e:	6122      	str	r2, [r4, #16]
 8005590:	f8cd a000 	str.w	sl, [sp]
 8005594:	464b      	mov	r3, r9
 8005596:	aa03      	add	r2, sp, #12
 8005598:	4621      	mov	r1, r4
 800559a:	4640      	mov	r0, r8
 800559c:	f7ff fee4 	bl	8005368 <_printf_common>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d14a      	bne.n	800563a <_printf_i+0x1f6>
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	b004      	add	sp, #16
 80055aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	f043 0320 	orr.w	r3, r3, #32
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	4833      	ldr	r0, [pc, #204]	; (8005684 <_printf_i+0x240>)
 80055b8:	2778      	movs	r7, #120	; 0x78
 80055ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	6829      	ldr	r1, [r5, #0]
 80055c2:	061f      	lsls	r7, r3, #24
 80055c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80055c8:	d402      	bmi.n	80055d0 <_printf_i+0x18c>
 80055ca:	065f      	lsls	r7, r3, #25
 80055cc:	bf48      	it	mi
 80055ce:	b2b6      	uxthmi	r6, r6
 80055d0:	07df      	lsls	r7, r3, #31
 80055d2:	bf48      	it	mi
 80055d4:	f043 0320 	orrmi.w	r3, r3, #32
 80055d8:	6029      	str	r1, [r5, #0]
 80055da:	bf48      	it	mi
 80055dc:	6023      	strmi	r3, [r4, #0]
 80055de:	b91e      	cbnz	r6, 80055e8 <_printf_i+0x1a4>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	f023 0320 	bic.w	r3, r3, #32
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	2310      	movs	r3, #16
 80055ea:	e7a7      	b.n	800553c <_printf_i+0xf8>
 80055ec:	4824      	ldr	r0, [pc, #144]	; (8005680 <_printf_i+0x23c>)
 80055ee:	e7e4      	b.n	80055ba <_printf_i+0x176>
 80055f0:	4615      	mov	r5, r2
 80055f2:	e7bd      	b.n	8005570 <_printf_i+0x12c>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	6826      	ldr	r6, [r4, #0]
 80055f8:	6961      	ldr	r1, [r4, #20]
 80055fa:	1d18      	adds	r0, r3, #4
 80055fc:	6028      	str	r0, [r5, #0]
 80055fe:	0635      	lsls	r5, r6, #24
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	d501      	bpl.n	8005608 <_printf_i+0x1c4>
 8005604:	6019      	str	r1, [r3, #0]
 8005606:	e002      	b.n	800560e <_printf_i+0x1ca>
 8005608:	0670      	lsls	r0, r6, #25
 800560a:	d5fb      	bpl.n	8005604 <_printf_i+0x1c0>
 800560c:	8019      	strh	r1, [r3, #0]
 800560e:	2300      	movs	r3, #0
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	4615      	mov	r5, r2
 8005614:	e7bc      	b.n	8005590 <_printf_i+0x14c>
 8005616:	682b      	ldr	r3, [r5, #0]
 8005618:	1d1a      	adds	r2, r3, #4
 800561a:	602a      	str	r2, [r5, #0]
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	6862      	ldr	r2, [r4, #4]
 8005620:	2100      	movs	r1, #0
 8005622:	4628      	mov	r0, r5
 8005624:	f7fa fddc 	bl	80001e0 <memchr>
 8005628:	b108      	cbz	r0, 800562e <_printf_i+0x1ea>
 800562a:	1b40      	subs	r0, r0, r5
 800562c:	6060      	str	r0, [r4, #4]
 800562e:	6863      	ldr	r3, [r4, #4]
 8005630:	6123      	str	r3, [r4, #16]
 8005632:	2300      	movs	r3, #0
 8005634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005638:	e7aa      	b.n	8005590 <_printf_i+0x14c>
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	462a      	mov	r2, r5
 800563e:	4649      	mov	r1, r9
 8005640:	4640      	mov	r0, r8
 8005642:	47d0      	blx	sl
 8005644:	3001      	adds	r0, #1
 8005646:	d0ad      	beq.n	80055a4 <_printf_i+0x160>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	079b      	lsls	r3, r3, #30
 800564c:	d413      	bmi.n	8005676 <_printf_i+0x232>
 800564e:	68e0      	ldr	r0, [r4, #12]
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	4298      	cmp	r0, r3
 8005654:	bfb8      	it	lt
 8005656:	4618      	movlt	r0, r3
 8005658:	e7a6      	b.n	80055a8 <_printf_i+0x164>
 800565a:	2301      	movs	r3, #1
 800565c:	4632      	mov	r2, r6
 800565e:	4649      	mov	r1, r9
 8005660:	4640      	mov	r0, r8
 8005662:	47d0      	blx	sl
 8005664:	3001      	adds	r0, #1
 8005666:	d09d      	beq.n	80055a4 <_printf_i+0x160>
 8005668:	3501      	adds	r5, #1
 800566a:	68e3      	ldr	r3, [r4, #12]
 800566c:	9903      	ldr	r1, [sp, #12]
 800566e:	1a5b      	subs	r3, r3, r1
 8005670:	42ab      	cmp	r3, r5
 8005672:	dcf2      	bgt.n	800565a <_printf_i+0x216>
 8005674:	e7eb      	b.n	800564e <_printf_i+0x20a>
 8005676:	2500      	movs	r5, #0
 8005678:	f104 0619 	add.w	r6, r4, #25
 800567c:	e7f5      	b.n	800566a <_printf_i+0x226>
 800567e:	bf00      	nop
 8005680:	08007ba2 	.word	0x08007ba2
 8005684:	08007bb3 	.word	0x08007bb3

08005688 <std>:
 8005688:	2300      	movs	r3, #0
 800568a:	b510      	push	{r4, lr}
 800568c:	4604      	mov	r4, r0
 800568e:	e9c0 3300 	strd	r3, r3, [r0]
 8005692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005696:	6083      	str	r3, [r0, #8]
 8005698:	8181      	strh	r1, [r0, #12]
 800569a:	6643      	str	r3, [r0, #100]	; 0x64
 800569c:	81c2      	strh	r2, [r0, #14]
 800569e:	6183      	str	r3, [r0, #24]
 80056a0:	4619      	mov	r1, r3
 80056a2:	2208      	movs	r2, #8
 80056a4:	305c      	adds	r0, #92	; 0x5c
 80056a6:	f000 f914 	bl	80058d2 <memset>
 80056aa:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <std+0x58>)
 80056ac:	6263      	str	r3, [r4, #36]	; 0x24
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <std+0x5c>)
 80056b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <std+0x60>)
 80056b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <std+0x64>)
 80056b8:	6323      	str	r3, [r4, #48]	; 0x30
 80056ba:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <std+0x68>)
 80056bc:	6224      	str	r4, [r4, #32]
 80056be:	429c      	cmp	r4, r3
 80056c0:	d006      	beq.n	80056d0 <std+0x48>
 80056c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80056c6:	4294      	cmp	r4, r2
 80056c8:	d002      	beq.n	80056d0 <std+0x48>
 80056ca:	33d0      	adds	r3, #208	; 0xd0
 80056cc:	429c      	cmp	r4, r3
 80056ce:	d105      	bne.n	80056dc <std+0x54>
 80056d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d8:	f000 b978 	b.w	80059cc <__retarget_lock_init_recursive>
 80056dc:	bd10      	pop	{r4, pc}
 80056de:	bf00      	nop
 80056e0:	0800584d 	.word	0x0800584d
 80056e4:	0800586f 	.word	0x0800586f
 80056e8:	080058a7 	.word	0x080058a7
 80056ec:	080058cb 	.word	0x080058cb
 80056f0:	200002d4 	.word	0x200002d4

080056f4 <stdio_exit_handler>:
 80056f4:	4a02      	ldr	r2, [pc, #8]	; (8005700 <stdio_exit_handler+0xc>)
 80056f6:	4903      	ldr	r1, [pc, #12]	; (8005704 <stdio_exit_handler+0x10>)
 80056f8:	4803      	ldr	r0, [pc, #12]	; (8005708 <stdio_exit_handler+0x14>)
 80056fa:	f000 b869 	b.w	80057d0 <_fwalk_sglue>
 80056fe:	bf00      	nop
 8005700:	2000000c 	.word	0x2000000c
 8005704:	08007381 	.word	0x08007381
 8005708:	20000018 	.word	0x20000018

0800570c <cleanup_stdio>:
 800570c:	6841      	ldr	r1, [r0, #4]
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <cleanup_stdio+0x34>)
 8005710:	4299      	cmp	r1, r3
 8005712:	b510      	push	{r4, lr}
 8005714:	4604      	mov	r4, r0
 8005716:	d001      	beq.n	800571c <cleanup_stdio+0x10>
 8005718:	f001 fe32 	bl	8007380 <_fflush_r>
 800571c:	68a1      	ldr	r1, [r4, #8]
 800571e:	4b09      	ldr	r3, [pc, #36]	; (8005744 <cleanup_stdio+0x38>)
 8005720:	4299      	cmp	r1, r3
 8005722:	d002      	beq.n	800572a <cleanup_stdio+0x1e>
 8005724:	4620      	mov	r0, r4
 8005726:	f001 fe2b 	bl	8007380 <_fflush_r>
 800572a:	68e1      	ldr	r1, [r4, #12]
 800572c:	4b06      	ldr	r3, [pc, #24]	; (8005748 <cleanup_stdio+0x3c>)
 800572e:	4299      	cmp	r1, r3
 8005730:	d004      	beq.n	800573c <cleanup_stdio+0x30>
 8005732:	4620      	mov	r0, r4
 8005734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005738:	f001 be22 	b.w	8007380 <_fflush_r>
 800573c:	bd10      	pop	{r4, pc}
 800573e:	bf00      	nop
 8005740:	200002d4 	.word	0x200002d4
 8005744:	2000033c 	.word	0x2000033c
 8005748:	200003a4 	.word	0x200003a4

0800574c <global_stdio_init.part.0>:
 800574c:	b510      	push	{r4, lr}
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <global_stdio_init.part.0+0x30>)
 8005750:	4c0b      	ldr	r4, [pc, #44]	; (8005780 <global_stdio_init.part.0+0x34>)
 8005752:	4a0c      	ldr	r2, [pc, #48]	; (8005784 <global_stdio_init.part.0+0x38>)
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	4620      	mov	r0, r4
 8005758:	2200      	movs	r2, #0
 800575a:	2104      	movs	r1, #4
 800575c:	f7ff ff94 	bl	8005688 <std>
 8005760:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005764:	2201      	movs	r2, #1
 8005766:	2109      	movs	r1, #9
 8005768:	f7ff ff8e 	bl	8005688 <std>
 800576c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005770:	2202      	movs	r2, #2
 8005772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005776:	2112      	movs	r1, #18
 8005778:	f7ff bf86 	b.w	8005688 <std>
 800577c:	2000040c 	.word	0x2000040c
 8005780:	200002d4 	.word	0x200002d4
 8005784:	080056f5 	.word	0x080056f5

08005788 <__sfp_lock_acquire>:
 8005788:	4801      	ldr	r0, [pc, #4]	; (8005790 <__sfp_lock_acquire+0x8>)
 800578a:	f000 b920 	b.w	80059ce <__retarget_lock_acquire_recursive>
 800578e:	bf00      	nop
 8005790:	20000415 	.word	0x20000415

08005794 <__sfp_lock_release>:
 8005794:	4801      	ldr	r0, [pc, #4]	; (800579c <__sfp_lock_release+0x8>)
 8005796:	f000 b91b 	b.w	80059d0 <__retarget_lock_release_recursive>
 800579a:	bf00      	nop
 800579c:	20000415 	.word	0x20000415

080057a0 <__sinit>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	4604      	mov	r4, r0
 80057a4:	f7ff fff0 	bl	8005788 <__sfp_lock_acquire>
 80057a8:	6a23      	ldr	r3, [r4, #32]
 80057aa:	b11b      	cbz	r3, 80057b4 <__sinit+0x14>
 80057ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b0:	f7ff bff0 	b.w	8005794 <__sfp_lock_release>
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <__sinit+0x28>)
 80057b6:	6223      	str	r3, [r4, #32]
 80057b8:	4b04      	ldr	r3, [pc, #16]	; (80057cc <__sinit+0x2c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f5      	bne.n	80057ac <__sinit+0xc>
 80057c0:	f7ff ffc4 	bl	800574c <global_stdio_init.part.0>
 80057c4:	e7f2      	b.n	80057ac <__sinit+0xc>
 80057c6:	bf00      	nop
 80057c8:	0800570d 	.word	0x0800570d
 80057cc:	2000040c 	.word	0x2000040c

080057d0 <_fwalk_sglue>:
 80057d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d4:	4607      	mov	r7, r0
 80057d6:	4688      	mov	r8, r1
 80057d8:	4614      	mov	r4, r2
 80057da:	2600      	movs	r6, #0
 80057dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057e0:	f1b9 0901 	subs.w	r9, r9, #1
 80057e4:	d505      	bpl.n	80057f2 <_fwalk_sglue+0x22>
 80057e6:	6824      	ldr	r4, [r4, #0]
 80057e8:	2c00      	cmp	r4, #0
 80057ea:	d1f7      	bne.n	80057dc <_fwalk_sglue+0xc>
 80057ec:	4630      	mov	r0, r6
 80057ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057f2:	89ab      	ldrh	r3, [r5, #12]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d907      	bls.n	8005808 <_fwalk_sglue+0x38>
 80057f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057fc:	3301      	adds	r3, #1
 80057fe:	d003      	beq.n	8005808 <_fwalk_sglue+0x38>
 8005800:	4629      	mov	r1, r5
 8005802:	4638      	mov	r0, r7
 8005804:	47c0      	blx	r8
 8005806:	4306      	orrs	r6, r0
 8005808:	3568      	adds	r5, #104	; 0x68
 800580a:	e7e9      	b.n	80057e0 <_fwalk_sglue+0x10>

0800580c <siprintf>:
 800580c:	b40e      	push	{r1, r2, r3}
 800580e:	b500      	push	{lr}
 8005810:	b09c      	sub	sp, #112	; 0x70
 8005812:	ab1d      	add	r3, sp, #116	; 0x74
 8005814:	9002      	str	r0, [sp, #8]
 8005816:	9006      	str	r0, [sp, #24]
 8005818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800581c:	4809      	ldr	r0, [pc, #36]	; (8005844 <siprintf+0x38>)
 800581e:	9107      	str	r1, [sp, #28]
 8005820:	9104      	str	r1, [sp, #16]
 8005822:	4909      	ldr	r1, [pc, #36]	; (8005848 <siprintf+0x3c>)
 8005824:	f853 2b04 	ldr.w	r2, [r3], #4
 8005828:	9105      	str	r1, [sp, #20]
 800582a:	6800      	ldr	r0, [r0, #0]
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	a902      	add	r1, sp, #8
 8005830:	f001 fc22 	bl	8007078 <_svfiprintf_r>
 8005834:	9b02      	ldr	r3, [sp, #8]
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	b01c      	add	sp, #112	; 0x70
 800583c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005840:	b003      	add	sp, #12
 8005842:	4770      	bx	lr
 8005844:	20000064 	.word	0x20000064
 8005848:	ffff0208 	.word	0xffff0208

0800584c <__sread>:
 800584c:	b510      	push	{r4, lr}
 800584e:	460c      	mov	r4, r1
 8005850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005854:	f000 f86c 	bl	8005930 <_read_r>
 8005858:	2800      	cmp	r0, #0
 800585a:	bfab      	itete	ge
 800585c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800585e:	89a3      	ldrhlt	r3, [r4, #12]
 8005860:	181b      	addge	r3, r3, r0
 8005862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005866:	bfac      	ite	ge
 8005868:	6563      	strge	r3, [r4, #84]	; 0x54
 800586a:	81a3      	strhlt	r3, [r4, #12]
 800586c:	bd10      	pop	{r4, pc}

0800586e <__swrite>:
 800586e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005872:	461f      	mov	r7, r3
 8005874:	898b      	ldrh	r3, [r1, #12]
 8005876:	05db      	lsls	r3, r3, #23
 8005878:	4605      	mov	r5, r0
 800587a:	460c      	mov	r4, r1
 800587c:	4616      	mov	r6, r2
 800587e:	d505      	bpl.n	800588c <__swrite+0x1e>
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	2302      	movs	r3, #2
 8005886:	2200      	movs	r2, #0
 8005888:	f000 f840 	bl	800590c <_lseek_r>
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	4632      	mov	r2, r6
 800589a:	463b      	mov	r3, r7
 800589c:	4628      	mov	r0, r5
 800589e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058a2:	f000 b857 	b.w	8005954 <_write_r>

080058a6 <__sseek>:
 80058a6:	b510      	push	{r4, lr}
 80058a8:	460c      	mov	r4, r1
 80058aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ae:	f000 f82d 	bl	800590c <_lseek_r>
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	bf15      	itete	ne
 80058b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058c2:	81a3      	strheq	r3, [r4, #12]
 80058c4:	bf18      	it	ne
 80058c6:	81a3      	strhne	r3, [r4, #12]
 80058c8:	bd10      	pop	{r4, pc}

080058ca <__sclose>:
 80058ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ce:	f000 b80d 	b.w	80058ec <_close_r>

080058d2 <memset>:
 80058d2:	4402      	add	r2, r0
 80058d4:	4603      	mov	r3, r0
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d100      	bne.n	80058dc <memset+0xa>
 80058da:	4770      	bx	lr
 80058dc:	f803 1b01 	strb.w	r1, [r3], #1
 80058e0:	e7f9      	b.n	80058d6 <memset+0x4>
	...

080058e4 <_localeconv_r>:
 80058e4:	4800      	ldr	r0, [pc, #0]	; (80058e8 <_localeconv_r+0x4>)
 80058e6:	4770      	bx	lr
 80058e8:	20000158 	.word	0x20000158

080058ec <_close_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4d06      	ldr	r5, [pc, #24]	; (8005908 <_close_r+0x1c>)
 80058f0:	2300      	movs	r3, #0
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fb ff2f 	bl	800175a <_close>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_close_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_close_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20000410 	.word	0x20000410

0800590c <_lseek_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d07      	ldr	r5, [pc, #28]	; (800592c <_lseek_r+0x20>)
 8005910:	4604      	mov	r4, r0
 8005912:	4608      	mov	r0, r1
 8005914:	4611      	mov	r1, r2
 8005916:	2200      	movs	r2, #0
 8005918:	602a      	str	r2, [r5, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	f7fb ff44 	bl	80017a8 <_lseek>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d102      	bne.n	800592a <_lseek_r+0x1e>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	b103      	cbz	r3, 800592a <_lseek_r+0x1e>
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	bd38      	pop	{r3, r4, r5, pc}
 800592c:	20000410 	.word	0x20000410

08005930 <_read_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d07      	ldr	r5, [pc, #28]	; (8005950 <_read_r+0x20>)
 8005934:	4604      	mov	r4, r0
 8005936:	4608      	mov	r0, r1
 8005938:	4611      	mov	r1, r2
 800593a:	2200      	movs	r2, #0
 800593c:	602a      	str	r2, [r5, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	f7fb fed2 	bl	80016e8 <_read>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d102      	bne.n	800594e <_read_r+0x1e>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	b103      	cbz	r3, 800594e <_read_r+0x1e>
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	bd38      	pop	{r3, r4, r5, pc}
 8005950:	20000410 	.word	0x20000410

08005954 <_write_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4d07      	ldr	r5, [pc, #28]	; (8005974 <_write_r+0x20>)
 8005958:	4604      	mov	r4, r0
 800595a:	4608      	mov	r0, r1
 800595c:	4611      	mov	r1, r2
 800595e:	2200      	movs	r2, #0
 8005960:	602a      	str	r2, [r5, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	f7fb fedd 	bl	8001722 <_write>
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d102      	bne.n	8005972 <_write_r+0x1e>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	b103      	cbz	r3, 8005972 <_write_r+0x1e>
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	bd38      	pop	{r3, r4, r5, pc}
 8005974:	20000410 	.word	0x20000410

08005978 <__errno>:
 8005978:	4b01      	ldr	r3, [pc, #4]	; (8005980 <__errno+0x8>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000064 	.word	0x20000064

08005984 <__libc_init_array>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4d0d      	ldr	r5, [pc, #52]	; (80059bc <__libc_init_array+0x38>)
 8005988:	4c0d      	ldr	r4, [pc, #52]	; (80059c0 <__libc_init_array+0x3c>)
 800598a:	1b64      	subs	r4, r4, r5
 800598c:	10a4      	asrs	r4, r4, #2
 800598e:	2600      	movs	r6, #0
 8005990:	42a6      	cmp	r6, r4
 8005992:	d109      	bne.n	80059a8 <__libc_init_array+0x24>
 8005994:	4d0b      	ldr	r5, [pc, #44]	; (80059c4 <__libc_init_array+0x40>)
 8005996:	4c0c      	ldr	r4, [pc, #48]	; (80059c8 <__libc_init_array+0x44>)
 8005998:	f002 f896 	bl	8007ac8 <_init>
 800599c:	1b64      	subs	r4, r4, r5
 800599e:	10a4      	asrs	r4, r4, #2
 80059a0:	2600      	movs	r6, #0
 80059a2:	42a6      	cmp	r6, r4
 80059a4:	d105      	bne.n	80059b2 <__libc_init_array+0x2e>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ac:	4798      	blx	r3
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7ee      	b.n	8005990 <__libc_init_array+0xc>
 80059b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b6:	4798      	blx	r3
 80059b8:	3601      	adds	r6, #1
 80059ba:	e7f2      	b.n	80059a2 <__libc_init_array+0x1e>
 80059bc:	08007f04 	.word	0x08007f04
 80059c0:	08007f04 	.word	0x08007f04
 80059c4:	08007f04 	.word	0x08007f04
 80059c8:	08007f08 	.word	0x08007f08

080059cc <__retarget_lock_init_recursive>:
 80059cc:	4770      	bx	lr

080059ce <__retarget_lock_acquire_recursive>:
 80059ce:	4770      	bx	lr

080059d0 <__retarget_lock_release_recursive>:
 80059d0:	4770      	bx	lr

080059d2 <quorem>:
 80059d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d6:	6903      	ldr	r3, [r0, #16]
 80059d8:	690c      	ldr	r4, [r1, #16]
 80059da:	42a3      	cmp	r3, r4
 80059dc:	4607      	mov	r7, r0
 80059de:	db7e      	blt.n	8005ade <quorem+0x10c>
 80059e0:	3c01      	subs	r4, #1
 80059e2:	f101 0814 	add.w	r8, r1, #20
 80059e6:	f100 0514 	add.w	r5, r0, #20
 80059ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059f8:	3301      	adds	r3, #1
 80059fa:	429a      	cmp	r2, r3
 80059fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a04:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a08:	d331      	bcc.n	8005a6e <quorem+0x9c>
 8005a0a:	f04f 0e00 	mov.w	lr, #0
 8005a0e:	4640      	mov	r0, r8
 8005a10:	46ac      	mov	ip, r5
 8005a12:	46f2      	mov	sl, lr
 8005a14:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a18:	b293      	uxth	r3, r2
 8005a1a:	fb06 e303 	mla	r3, r6, r3, lr
 8005a1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a22:	0c1a      	lsrs	r2, r3, #16
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	ebaa 0303 	sub.w	r3, sl, r3
 8005a2a:	f8dc a000 	ldr.w	sl, [ip]
 8005a2e:	fa13 f38a 	uxtah	r3, r3, sl
 8005a32:	fb06 220e 	mla	r2, r6, lr, r2
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	9b00      	ldr	r3, [sp, #0]
 8005a3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a3e:	b292      	uxth	r2, r2
 8005a40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a48:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a4c:	4581      	cmp	r9, r0
 8005a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a52:	f84c 3b04 	str.w	r3, [ip], #4
 8005a56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a5a:	d2db      	bcs.n	8005a14 <quorem+0x42>
 8005a5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a60:	b92b      	cbnz	r3, 8005a6e <quorem+0x9c>
 8005a62:	9b01      	ldr	r3, [sp, #4]
 8005a64:	3b04      	subs	r3, #4
 8005a66:	429d      	cmp	r5, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	d32c      	bcc.n	8005ac6 <quorem+0xf4>
 8005a6c:	613c      	str	r4, [r7, #16]
 8005a6e:	4638      	mov	r0, r7
 8005a70:	f001 f9a8 	bl	8006dc4 <__mcmp>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	db22      	blt.n	8005abe <quorem+0xec>
 8005a78:	3601      	adds	r6, #1
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a82:	f8d1 c000 	ldr.w	ip, [r1]
 8005a86:	b293      	uxth	r3, r2
 8005a88:	1ac3      	subs	r3, r0, r3
 8005a8a:	0c12      	lsrs	r2, r2, #16
 8005a8c:	fa13 f38c 	uxtah	r3, r3, ip
 8005a90:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a9e:	45c1      	cmp	r9, r8
 8005aa0:	f841 3b04 	str.w	r3, [r1], #4
 8005aa4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005aa8:	d2e9      	bcs.n	8005a7e <quorem+0xac>
 8005aaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ab2:	b922      	cbnz	r2, 8005abe <quorem+0xec>
 8005ab4:	3b04      	subs	r3, #4
 8005ab6:	429d      	cmp	r5, r3
 8005ab8:	461a      	mov	r2, r3
 8005aba:	d30a      	bcc.n	8005ad2 <quorem+0x100>
 8005abc:	613c      	str	r4, [r7, #16]
 8005abe:	4630      	mov	r0, r6
 8005ac0:	b003      	add	sp, #12
 8005ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	3b04      	subs	r3, #4
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	d1ce      	bne.n	8005a6c <quorem+0x9a>
 8005ace:	3c01      	subs	r4, #1
 8005ad0:	e7c9      	b.n	8005a66 <quorem+0x94>
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	3b04      	subs	r3, #4
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	d1f0      	bne.n	8005abc <quorem+0xea>
 8005ada:	3c01      	subs	r4, #1
 8005adc:	e7eb      	b.n	8005ab6 <quorem+0xe4>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	e7ee      	b.n	8005ac0 <quorem+0xee>
 8005ae2:	0000      	movs	r0, r0
 8005ae4:	0000      	movs	r0, r0
	...

08005ae8 <_dtoa_r>:
 8005ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aec:	ed2d 8b04 	vpush	{d8-d9}
 8005af0:	69c5      	ldr	r5, [r0, #28]
 8005af2:	b093      	sub	sp, #76	; 0x4c
 8005af4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005af8:	ec57 6b10 	vmov	r6, r7, d0
 8005afc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b00:	9107      	str	r1, [sp, #28]
 8005b02:	4604      	mov	r4, r0
 8005b04:	920a      	str	r2, [sp, #40]	; 0x28
 8005b06:	930d      	str	r3, [sp, #52]	; 0x34
 8005b08:	b975      	cbnz	r5, 8005b28 <_dtoa_r+0x40>
 8005b0a:	2010      	movs	r0, #16
 8005b0c:	f000 fe2a 	bl	8006764 <malloc>
 8005b10:	4602      	mov	r2, r0
 8005b12:	61e0      	str	r0, [r4, #28]
 8005b14:	b920      	cbnz	r0, 8005b20 <_dtoa_r+0x38>
 8005b16:	4bae      	ldr	r3, [pc, #696]	; (8005dd0 <_dtoa_r+0x2e8>)
 8005b18:	21ef      	movs	r1, #239	; 0xef
 8005b1a:	48ae      	ldr	r0, [pc, #696]	; (8005dd4 <_dtoa_r+0x2ec>)
 8005b1c:	f001 fc90 	bl	8007440 <__assert_func>
 8005b20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b24:	6005      	str	r5, [r0, #0]
 8005b26:	60c5      	str	r5, [r0, #12]
 8005b28:	69e3      	ldr	r3, [r4, #28]
 8005b2a:	6819      	ldr	r1, [r3, #0]
 8005b2c:	b151      	cbz	r1, 8005b44 <_dtoa_r+0x5c>
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	604a      	str	r2, [r1, #4]
 8005b32:	2301      	movs	r3, #1
 8005b34:	4093      	lsls	r3, r2
 8005b36:	608b      	str	r3, [r1, #8]
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f000 ff07 	bl	800694c <_Bfree>
 8005b3e:	69e3      	ldr	r3, [r4, #28]
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	1e3b      	subs	r3, r7, #0
 8005b46:	bfbb      	ittet	lt
 8005b48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b4c:	9303      	strlt	r3, [sp, #12]
 8005b4e:	2300      	movge	r3, #0
 8005b50:	2201      	movlt	r2, #1
 8005b52:	bfac      	ite	ge
 8005b54:	f8c8 3000 	strge.w	r3, [r8]
 8005b58:	f8c8 2000 	strlt.w	r2, [r8]
 8005b5c:	4b9e      	ldr	r3, [pc, #632]	; (8005dd8 <_dtoa_r+0x2f0>)
 8005b5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b62:	ea33 0308 	bics.w	r3, r3, r8
 8005b66:	d11b      	bne.n	8005ba0 <_dtoa_r+0xb8>
 8005b68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005b74:	4333      	orrs	r3, r6
 8005b76:	f000 8593 	beq.w	80066a0 <_dtoa_r+0xbb8>
 8005b7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b7c:	b963      	cbnz	r3, 8005b98 <_dtoa_r+0xb0>
 8005b7e:	4b97      	ldr	r3, [pc, #604]	; (8005ddc <_dtoa_r+0x2f4>)
 8005b80:	e027      	b.n	8005bd2 <_dtoa_r+0xea>
 8005b82:	4b97      	ldr	r3, [pc, #604]	; (8005de0 <_dtoa_r+0x2f8>)
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	9800      	ldr	r0, [sp, #0]
 8005b8e:	b013      	add	sp, #76	; 0x4c
 8005b90:	ecbd 8b04 	vpop	{d8-d9}
 8005b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b98:	4b90      	ldr	r3, [pc, #576]	; (8005ddc <_dtoa_r+0x2f4>)
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	3303      	adds	r3, #3
 8005b9e:	e7f3      	b.n	8005b88 <_dtoa_r+0xa0>
 8005ba0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	ec51 0b17 	vmov	r0, r1, d7
 8005baa:	eeb0 8a47 	vmov.f32	s16, s14
 8005bae:	eef0 8a67 	vmov.f32	s17, s15
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f7fa ff90 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bb8:	4681      	mov	r9, r0
 8005bba:	b160      	cbz	r0, 8005bd6 <_dtoa_r+0xee>
 8005bbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8568 	beq.w	800669a <_dtoa_r+0xbb2>
 8005bca:	4b86      	ldr	r3, [pc, #536]	; (8005de4 <_dtoa_r+0x2fc>)
 8005bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	e7da      	b.n	8005b8c <_dtoa_r+0xa4>
 8005bd6:	aa10      	add	r2, sp, #64	; 0x40
 8005bd8:	a911      	add	r1, sp, #68	; 0x44
 8005bda:	4620      	mov	r0, r4
 8005bdc:	eeb0 0a48 	vmov.f32	s0, s16
 8005be0:	eef0 0a68 	vmov.f32	s1, s17
 8005be4:	f001 f994 	bl	8006f10 <__d2b>
 8005be8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005bec:	4682      	mov	sl, r0
 8005bee:	2d00      	cmp	r5, #0
 8005bf0:	d07f      	beq.n	8005cf2 <_dtoa_r+0x20a>
 8005bf2:	ee18 3a90 	vmov	r3, s17
 8005bf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bfa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005bfe:	ec51 0b18 	vmov	r0, r1, d8
 8005c02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c0a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005c0e:	4619      	mov	r1, r3
 8005c10:	2200      	movs	r2, #0
 8005c12:	4b75      	ldr	r3, [pc, #468]	; (8005de8 <_dtoa_r+0x300>)
 8005c14:	f7fa fb40 	bl	8000298 <__aeabi_dsub>
 8005c18:	a367      	add	r3, pc, #412	; (adr r3, 8005db8 <_dtoa_r+0x2d0>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f7fa fcf3 	bl	8000608 <__aeabi_dmul>
 8005c22:	a367      	add	r3, pc, #412	; (adr r3, 8005dc0 <_dtoa_r+0x2d8>)
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	f7fa fb38 	bl	800029c <__adddf3>
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	4628      	mov	r0, r5
 8005c30:	460f      	mov	r7, r1
 8005c32:	f7fa fc7f 	bl	8000534 <__aeabi_i2d>
 8005c36:	a364      	add	r3, pc, #400	; (adr r3, 8005dc8 <_dtoa_r+0x2e0>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fce4 	bl	8000608 <__aeabi_dmul>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4630      	mov	r0, r6
 8005c46:	4639      	mov	r1, r7
 8005c48:	f7fa fb28 	bl	800029c <__adddf3>
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	460f      	mov	r7, r1
 8005c50:	f7fa ff8a 	bl	8000b68 <__aeabi_d2iz>
 8005c54:	2200      	movs	r2, #0
 8005c56:	4683      	mov	fp, r0
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	f7fa ff45 	bl	8000aec <__aeabi_dcmplt>
 8005c62:	b148      	cbz	r0, 8005c78 <_dtoa_r+0x190>
 8005c64:	4658      	mov	r0, fp
 8005c66:	f7fa fc65 	bl	8000534 <__aeabi_i2d>
 8005c6a:	4632      	mov	r2, r6
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	f7fa ff33 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c72:	b908      	cbnz	r0, 8005c78 <_dtoa_r+0x190>
 8005c74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c78:	f1bb 0f16 	cmp.w	fp, #22
 8005c7c:	d857      	bhi.n	8005d2e <_dtoa_r+0x246>
 8005c7e:	4b5b      	ldr	r3, [pc, #364]	; (8005dec <_dtoa_r+0x304>)
 8005c80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	ec51 0b18 	vmov	r0, r1, d8
 8005c8c:	f7fa ff2e 	bl	8000aec <__aeabi_dcmplt>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d04e      	beq.n	8005d32 <_dtoa_r+0x24a>
 8005c94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c98:	2300      	movs	r3, #0
 8005c9a:	930c      	str	r3, [sp, #48]	; 0x30
 8005c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c9e:	1b5b      	subs	r3, r3, r5
 8005ca0:	1e5a      	subs	r2, r3, #1
 8005ca2:	bf45      	ittet	mi
 8005ca4:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ca8:	9305      	strmi	r3, [sp, #20]
 8005caa:	2300      	movpl	r3, #0
 8005cac:	2300      	movmi	r3, #0
 8005cae:	9206      	str	r2, [sp, #24]
 8005cb0:	bf54      	ite	pl
 8005cb2:	9305      	strpl	r3, [sp, #20]
 8005cb4:	9306      	strmi	r3, [sp, #24]
 8005cb6:	f1bb 0f00 	cmp.w	fp, #0
 8005cba:	db3c      	blt.n	8005d36 <_dtoa_r+0x24e>
 8005cbc:	9b06      	ldr	r3, [sp, #24]
 8005cbe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005cc2:	445b      	add	r3, fp
 8005cc4:	9306      	str	r3, [sp, #24]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9308      	str	r3, [sp, #32]
 8005cca:	9b07      	ldr	r3, [sp, #28]
 8005ccc:	2b09      	cmp	r3, #9
 8005cce:	d868      	bhi.n	8005da2 <_dtoa_r+0x2ba>
 8005cd0:	2b05      	cmp	r3, #5
 8005cd2:	bfc4      	itt	gt
 8005cd4:	3b04      	subgt	r3, #4
 8005cd6:	9307      	strgt	r3, [sp, #28]
 8005cd8:	9b07      	ldr	r3, [sp, #28]
 8005cda:	f1a3 0302 	sub.w	r3, r3, #2
 8005cde:	bfcc      	ite	gt
 8005ce0:	2500      	movgt	r5, #0
 8005ce2:	2501      	movle	r5, #1
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	f200 8085 	bhi.w	8005df4 <_dtoa_r+0x30c>
 8005cea:	e8df f003 	tbb	[pc, r3]
 8005cee:	3b2e      	.short	0x3b2e
 8005cf0:	5839      	.short	0x5839
 8005cf2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005cf6:	441d      	add	r5, r3
 8005cf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	bfc1      	itttt	gt
 8005d00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d04:	fa08 f803 	lslgt.w	r8, r8, r3
 8005d08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005d0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005d10:	bfd6      	itet	le
 8005d12:	f1c3 0320 	rsble	r3, r3, #32
 8005d16:	ea48 0003 	orrgt.w	r0, r8, r3
 8005d1a:	fa06 f003 	lslle.w	r0, r6, r3
 8005d1e:	f7fa fbf9 	bl	8000514 <__aeabi_ui2d>
 8005d22:	2201      	movs	r2, #1
 8005d24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005d28:	3d01      	subs	r5, #1
 8005d2a:	920e      	str	r2, [sp, #56]	; 0x38
 8005d2c:	e76f      	b.n	8005c0e <_dtoa_r+0x126>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e7b3      	b.n	8005c9a <_dtoa_r+0x1b2>
 8005d32:	900c      	str	r0, [sp, #48]	; 0x30
 8005d34:	e7b2      	b.n	8005c9c <_dtoa_r+0x1b4>
 8005d36:	9b05      	ldr	r3, [sp, #20]
 8005d38:	eba3 030b 	sub.w	r3, r3, fp
 8005d3c:	9305      	str	r3, [sp, #20]
 8005d3e:	f1cb 0300 	rsb	r3, fp, #0
 8005d42:	9308      	str	r3, [sp, #32]
 8005d44:	2300      	movs	r3, #0
 8005d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d48:	e7bf      	b.n	8005cca <_dtoa_r+0x1e2>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	dc52      	bgt.n	8005dfa <_dtoa_r+0x312>
 8005d54:	2301      	movs	r3, #1
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	9304      	str	r3, [sp, #16]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	920a      	str	r2, [sp, #40]	; 0x28
 8005d5e:	e00b      	b.n	8005d78 <_dtoa_r+0x290>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e7f3      	b.n	8005d4c <_dtoa_r+0x264>
 8005d64:	2300      	movs	r3, #0
 8005d66:	9309      	str	r3, [sp, #36]	; 0x24
 8005d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d6a:	445b      	add	r3, fp
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	9304      	str	r3, [sp, #16]
 8005d74:	bfb8      	it	lt
 8005d76:	2301      	movlt	r3, #1
 8005d78:	69e0      	ldr	r0, [r4, #28]
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	f102 0614 	add.w	r6, r2, #20
 8005d82:	429e      	cmp	r6, r3
 8005d84:	d93d      	bls.n	8005e02 <_dtoa_r+0x31a>
 8005d86:	6041      	str	r1, [r0, #4]
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f000 fd9f 	bl	80068cc <_Balloc>
 8005d8e:	9000      	str	r0, [sp, #0]
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d139      	bne.n	8005e08 <_dtoa_r+0x320>
 8005d94:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <_dtoa_r+0x308>)
 8005d96:	4602      	mov	r2, r0
 8005d98:	f240 11af 	movw	r1, #431	; 0x1af
 8005d9c:	e6bd      	b.n	8005b1a <_dtoa_r+0x32>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e7e1      	b.n	8005d66 <_dtoa_r+0x27e>
 8005da2:	2501      	movs	r5, #1
 8005da4:	2300      	movs	r3, #0
 8005da6:	9307      	str	r3, [sp, #28]
 8005da8:	9509      	str	r5, [sp, #36]	; 0x24
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	9304      	str	r3, [sp, #16]
 8005db2:	2200      	movs	r2, #0
 8005db4:	2312      	movs	r3, #18
 8005db6:	e7d1      	b.n	8005d5c <_dtoa_r+0x274>
 8005db8:	636f4361 	.word	0x636f4361
 8005dbc:	3fd287a7 	.word	0x3fd287a7
 8005dc0:	8b60c8b3 	.word	0x8b60c8b3
 8005dc4:	3fc68a28 	.word	0x3fc68a28
 8005dc8:	509f79fb 	.word	0x509f79fb
 8005dcc:	3fd34413 	.word	0x3fd34413
 8005dd0:	08007bd1 	.word	0x08007bd1
 8005dd4:	08007be8 	.word	0x08007be8
 8005dd8:	7ff00000 	.word	0x7ff00000
 8005ddc:	08007bcd 	.word	0x08007bcd
 8005de0:	08007bc4 	.word	0x08007bc4
 8005de4:	08007ba1 	.word	0x08007ba1
 8005de8:	3ff80000 	.word	0x3ff80000
 8005dec:	08007cd8 	.word	0x08007cd8
 8005df0:	08007c40 	.word	0x08007c40
 8005df4:	2301      	movs	r3, #1
 8005df6:	9309      	str	r3, [sp, #36]	; 0x24
 8005df8:	e7d7      	b.n	8005daa <_dtoa_r+0x2c2>
 8005dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	9304      	str	r3, [sp, #16]
 8005e00:	e7ba      	b.n	8005d78 <_dtoa_r+0x290>
 8005e02:	3101      	adds	r1, #1
 8005e04:	0052      	lsls	r2, r2, #1
 8005e06:	e7ba      	b.n	8005d7e <_dtoa_r+0x296>
 8005e08:	69e3      	ldr	r3, [r4, #28]
 8005e0a:	9a00      	ldr	r2, [sp, #0]
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	9b04      	ldr	r3, [sp, #16]
 8005e10:	2b0e      	cmp	r3, #14
 8005e12:	f200 80a8 	bhi.w	8005f66 <_dtoa_r+0x47e>
 8005e16:	2d00      	cmp	r5, #0
 8005e18:	f000 80a5 	beq.w	8005f66 <_dtoa_r+0x47e>
 8005e1c:	f1bb 0f00 	cmp.w	fp, #0
 8005e20:	dd38      	ble.n	8005e94 <_dtoa_r+0x3ac>
 8005e22:	4bc0      	ldr	r3, [pc, #768]	; (8006124 <_dtoa_r+0x63c>)
 8005e24:	f00b 020f 	and.w	r2, fp, #15
 8005e28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005e30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005e34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005e38:	d019      	beq.n	8005e6e <_dtoa_r+0x386>
 8005e3a:	4bbb      	ldr	r3, [pc, #748]	; (8006128 <_dtoa_r+0x640>)
 8005e3c:	ec51 0b18 	vmov	r0, r1, d8
 8005e40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e44:	f7fa fd0a 	bl	800085c <__aeabi_ddiv>
 8005e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e4c:	f008 080f 	and.w	r8, r8, #15
 8005e50:	2503      	movs	r5, #3
 8005e52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006128 <_dtoa_r+0x640>
 8005e56:	f1b8 0f00 	cmp.w	r8, #0
 8005e5a:	d10a      	bne.n	8005e72 <_dtoa_r+0x38a>
 8005e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e60:	4632      	mov	r2, r6
 8005e62:	463b      	mov	r3, r7
 8005e64:	f7fa fcfa 	bl	800085c <__aeabi_ddiv>
 8005e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e6c:	e02b      	b.n	8005ec6 <_dtoa_r+0x3de>
 8005e6e:	2502      	movs	r5, #2
 8005e70:	e7ef      	b.n	8005e52 <_dtoa_r+0x36a>
 8005e72:	f018 0f01 	tst.w	r8, #1
 8005e76:	d008      	beq.n	8005e8a <_dtoa_r+0x3a2>
 8005e78:	4630      	mov	r0, r6
 8005e7a:	4639      	mov	r1, r7
 8005e7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e80:	f7fa fbc2 	bl	8000608 <__aeabi_dmul>
 8005e84:	3501      	adds	r5, #1
 8005e86:	4606      	mov	r6, r0
 8005e88:	460f      	mov	r7, r1
 8005e8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e8e:	f109 0908 	add.w	r9, r9, #8
 8005e92:	e7e0      	b.n	8005e56 <_dtoa_r+0x36e>
 8005e94:	f000 809f 	beq.w	8005fd6 <_dtoa_r+0x4ee>
 8005e98:	f1cb 0600 	rsb	r6, fp, #0
 8005e9c:	4ba1      	ldr	r3, [pc, #644]	; (8006124 <_dtoa_r+0x63c>)
 8005e9e:	4fa2      	ldr	r7, [pc, #648]	; (8006128 <_dtoa_r+0x640>)
 8005ea0:	f006 020f 	and.w	r2, r6, #15
 8005ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	ec51 0b18 	vmov	r0, r1, d8
 8005eb0:	f7fa fbaa 	bl	8000608 <__aeabi_dmul>
 8005eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eb8:	1136      	asrs	r6, r6, #4
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2502      	movs	r5, #2
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	d17e      	bne.n	8005fc0 <_dtoa_r+0x4d8>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1d0      	bne.n	8005e68 <_dtoa_r+0x380>
 8005ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ec8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8084 	beq.w	8005fda <_dtoa_r+0x4f2>
 8005ed2:	4b96      	ldr	r3, [pc, #600]	; (800612c <_dtoa_r+0x644>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	4649      	mov	r1, r9
 8005eda:	f7fa fe07 	bl	8000aec <__aeabi_dcmplt>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d07b      	beq.n	8005fda <_dtoa_r+0x4f2>
 8005ee2:	9b04      	ldr	r3, [sp, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d078      	beq.n	8005fda <_dtoa_r+0x4f2>
 8005ee8:	9b01      	ldr	r3, [sp, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	dd39      	ble.n	8005f62 <_dtoa_r+0x47a>
 8005eee:	4b90      	ldr	r3, [pc, #576]	; (8006130 <_dtoa_r+0x648>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	f7fa fb87 	bl	8000608 <__aeabi_dmul>
 8005efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005efe:	9e01      	ldr	r6, [sp, #4]
 8005f00:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005f04:	3501      	adds	r5, #1
 8005f06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f7fa fb12 	bl	8000534 <__aeabi_i2d>
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	f7fa fb78 	bl	8000608 <__aeabi_dmul>
 8005f18:	4b86      	ldr	r3, [pc, #536]	; (8006134 <_dtoa_r+0x64c>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f7fa f9be 	bl	800029c <__adddf3>
 8005f20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f28:	9303      	str	r3, [sp, #12]
 8005f2a:	2e00      	cmp	r6, #0
 8005f2c:	d158      	bne.n	8005fe0 <_dtoa_r+0x4f8>
 8005f2e:	4b82      	ldr	r3, [pc, #520]	; (8006138 <_dtoa_r+0x650>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	4640      	mov	r0, r8
 8005f34:	4649      	mov	r1, r9
 8005f36:	f7fa f9af 	bl	8000298 <__aeabi_dsub>
 8005f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f3e:	4680      	mov	r8, r0
 8005f40:	4689      	mov	r9, r1
 8005f42:	f7fa fdf1 	bl	8000b28 <__aeabi_dcmpgt>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f040 8296 	bne.w	8006478 <_dtoa_r+0x990>
 8005f4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005f50:	4640      	mov	r0, r8
 8005f52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f56:	4649      	mov	r1, r9
 8005f58:	f7fa fdc8 	bl	8000aec <__aeabi_dcmplt>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	f040 8289 	bne.w	8006474 <_dtoa_r+0x98c>
 8005f62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f2c0 814e 	blt.w	800620a <_dtoa_r+0x722>
 8005f6e:	f1bb 0f0e 	cmp.w	fp, #14
 8005f72:	f300 814a 	bgt.w	800620a <_dtoa_r+0x722>
 8005f76:	4b6b      	ldr	r3, [pc, #428]	; (8006124 <_dtoa_r+0x63c>)
 8005f78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f280 80dc 	bge.w	8006140 <_dtoa_r+0x658>
 8005f88:	9b04      	ldr	r3, [sp, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f300 80d8 	bgt.w	8006140 <_dtoa_r+0x658>
 8005f90:	f040 826f 	bne.w	8006472 <_dtoa_r+0x98a>
 8005f94:	4b68      	ldr	r3, [pc, #416]	; (8006138 <_dtoa_r+0x650>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	4640      	mov	r0, r8
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	f7fa fb34 	bl	8000608 <__aeabi_dmul>
 8005fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fa4:	f7fa fdb6 	bl	8000b14 <__aeabi_dcmpge>
 8005fa8:	9e04      	ldr	r6, [sp, #16]
 8005faa:	4637      	mov	r7, r6
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f040 8245 	bne.w	800643c <_dtoa_r+0x954>
 8005fb2:	9d00      	ldr	r5, [sp, #0]
 8005fb4:	2331      	movs	r3, #49	; 0x31
 8005fb6:	f805 3b01 	strb.w	r3, [r5], #1
 8005fba:	f10b 0b01 	add.w	fp, fp, #1
 8005fbe:	e241      	b.n	8006444 <_dtoa_r+0x95c>
 8005fc0:	07f2      	lsls	r2, r6, #31
 8005fc2:	d505      	bpl.n	8005fd0 <_dtoa_r+0x4e8>
 8005fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fc8:	f7fa fb1e 	bl	8000608 <__aeabi_dmul>
 8005fcc:	3501      	adds	r5, #1
 8005fce:	2301      	movs	r3, #1
 8005fd0:	1076      	asrs	r6, r6, #1
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	e773      	b.n	8005ebe <_dtoa_r+0x3d6>
 8005fd6:	2502      	movs	r5, #2
 8005fd8:	e775      	b.n	8005ec6 <_dtoa_r+0x3de>
 8005fda:	9e04      	ldr	r6, [sp, #16]
 8005fdc:	465f      	mov	r7, fp
 8005fde:	e792      	b.n	8005f06 <_dtoa_r+0x41e>
 8005fe0:	9900      	ldr	r1, [sp, #0]
 8005fe2:	4b50      	ldr	r3, [pc, #320]	; (8006124 <_dtoa_r+0x63c>)
 8005fe4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fe8:	4431      	add	r1, r6
 8005fea:	9102      	str	r1, [sp, #8]
 8005fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fee:	eeb0 9a47 	vmov.f32	s18, s14
 8005ff2:	eef0 9a67 	vmov.f32	s19, s15
 8005ff6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ffa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ffe:	2900      	cmp	r1, #0
 8006000:	d044      	beq.n	800608c <_dtoa_r+0x5a4>
 8006002:	494e      	ldr	r1, [pc, #312]	; (800613c <_dtoa_r+0x654>)
 8006004:	2000      	movs	r0, #0
 8006006:	f7fa fc29 	bl	800085c <__aeabi_ddiv>
 800600a:	ec53 2b19 	vmov	r2, r3, d9
 800600e:	f7fa f943 	bl	8000298 <__aeabi_dsub>
 8006012:	9d00      	ldr	r5, [sp, #0]
 8006014:	ec41 0b19 	vmov	d9, r0, r1
 8006018:	4649      	mov	r1, r9
 800601a:	4640      	mov	r0, r8
 800601c:	f7fa fda4 	bl	8000b68 <__aeabi_d2iz>
 8006020:	4606      	mov	r6, r0
 8006022:	f7fa fa87 	bl	8000534 <__aeabi_i2d>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	f7fa f933 	bl	8000298 <__aeabi_dsub>
 8006032:	3630      	adds	r6, #48	; 0x30
 8006034:	f805 6b01 	strb.w	r6, [r5], #1
 8006038:	ec53 2b19 	vmov	r2, r3, d9
 800603c:	4680      	mov	r8, r0
 800603e:	4689      	mov	r9, r1
 8006040:	f7fa fd54 	bl	8000aec <__aeabi_dcmplt>
 8006044:	2800      	cmp	r0, #0
 8006046:	d164      	bne.n	8006112 <_dtoa_r+0x62a>
 8006048:	4642      	mov	r2, r8
 800604a:	464b      	mov	r3, r9
 800604c:	4937      	ldr	r1, [pc, #220]	; (800612c <_dtoa_r+0x644>)
 800604e:	2000      	movs	r0, #0
 8006050:	f7fa f922 	bl	8000298 <__aeabi_dsub>
 8006054:	ec53 2b19 	vmov	r2, r3, d9
 8006058:	f7fa fd48 	bl	8000aec <__aeabi_dcmplt>
 800605c:	2800      	cmp	r0, #0
 800605e:	f040 80b6 	bne.w	80061ce <_dtoa_r+0x6e6>
 8006062:	9b02      	ldr	r3, [sp, #8]
 8006064:	429d      	cmp	r5, r3
 8006066:	f43f af7c 	beq.w	8005f62 <_dtoa_r+0x47a>
 800606a:	4b31      	ldr	r3, [pc, #196]	; (8006130 <_dtoa_r+0x648>)
 800606c:	ec51 0b19 	vmov	r0, r1, d9
 8006070:	2200      	movs	r2, #0
 8006072:	f7fa fac9 	bl	8000608 <__aeabi_dmul>
 8006076:	4b2e      	ldr	r3, [pc, #184]	; (8006130 <_dtoa_r+0x648>)
 8006078:	ec41 0b19 	vmov	d9, r0, r1
 800607c:	2200      	movs	r2, #0
 800607e:	4640      	mov	r0, r8
 8006080:	4649      	mov	r1, r9
 8006082:	f7fa fac1 	bl	8000608 <__aeabi_dmul>
 8006086:	4680      	mov	r8, r0
 8006088:	4689      	mov	r9, r1
 800608a:	e7c5      	b.n	8006018 <_dtoa_r+0x530>
 800608c:	ec51 0b17 	vmov	r0, r1, d7
 8006090:	f7fa faba 	bl	8000608 <__aeabi_dmul>
 8006094:	9b02      	ldr	r3, [sp, #8]
 8006096:	9d00      	ldr	r5, [sp, #0]
 8006098:	930f      	str	r3, [sp, #60]	; 0x3c
 800609a:	ec41 0b19 	vmov	d9, r0, r1
 800609e:	4649      	mov	r1, r9
 80060a0:	4640      	mov	r0, r8
 80060a2:	f7fa fd61 	bl	8000b68 <__aeabi_d2iz>
 80060a6:	4606      	mov	r6, r0
 80060a8:	f7fa fa44 	bl	8000534 <__aeabi_i2d>
 80060ac:	3630      	adds	r6, #48	; 0x30
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4640      	mov	r0, r8
 80060b4:	4649      	mov	r1, r9
 80060b6:	f7fa f8ef 	bl	8000298 <__aeabi_dsub>
 80060ba:	f805 6b01 	strb.w	r6, [r5], #1
 80060be:	9b02      	ldr	r3, [sp, #8]
 80060c0:	429d      	cmp	r5, r3
 80060c2:	4680      	mov	r8, r0
 80060c4:	4689      	mov	r9, r1
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	d124      	bne.n	8006116 <_dtoa_r+0x62e>
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <_dtoa_r+0x654>)
 80060ce:	ec51 0b19 	vmov	r0, r1, d9
 80060d2:	f7fa f8e3 	bl	800029c <__adddf3>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4640      	mov	r0, r8
 80060dc:	4649      	mov	r1, r9
 80060de:	f7fa fd23 	bl	8000b28 <__aeabi_dcmpgt>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d173      	bne.n	80061ce <_dtoa_r+0x6e6>
 80060e6:	ec53 2b19 	vmov	r2, r3, d9
 80060ea:	4914      	ldr	r1, [pc, #80]	; (800613c <_dtoa_r+0x654>)
 80060ec:	2000      	movs	r0, #0
 80060ee:	f7fa f8d3 	bl	8000298 <__aeabi_dsub>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4640      	mov	r0, r8
 80060f8:	4649      	mov	r1, r9
 80060fa:	f7fa fcf7 	bl	8000aec <__aeabi_dcmplt>
 80060fe:	2800      	cmp	r0, #0
 8006100:	f43f af2f 	beq.w	8005f62 <_dtoa_r+0x47a>
 8006104:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006106:	1e6b      	subs	r3, r5, #1
 8006108:	930f      	str	r3, [sp, #60]	; 0x3c
 800610a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800610e:	2b30      	cmp	r3, #48	; 0x30
 8006110:	d0f8      	beq.n	8006104 <_dtoa_r+0x61c>
 8006112:	46bb      	mov	fp, r7
 8006114:	e04a      	b.n	80061ac <_dtoa_r+0x6c4>
 8006116:	4b06      	ldr	r3, [pc, #24]	; (8006130 <_dtoa_r+0x648>)
 8006118:	f7fa fa76 	bl	8000608 <__aeabi_dmul>
 800611c:	4680      	mov	r8, r0
 800611e:	4689      	mov	r9, r1
 8006120:	e7bd      	b.n	800609e <_dtoa_r+0x5b6>
 8006122:	bf00      	nop
 8006124:	08007cd8 	.word	0x08007cd8
 8006128:	08007cb0 	.word	0x08007cb0
 800612c:	3ff00000 	.word	0x3ff00000
 8006130:	40240000 	.word	0x40240000
 8006134:	401c0000 	.word	0x401c0000
 8006138:	40140000 	.word	0x40140000
 800613c:	3fe00000 	.word	0x3fe00000
 8006140:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006144:	9d00      	ldr	r5, [sp, #0]
 8006146:	4642      	mov	r2, r8
 8006148:	464b      	mov	r3, r9
 800614a:	4630      	mov	r0, r6
 800614c:	4639      	mov	r1, r7
 800614e:	f7fa fb85 	bl	800085c <__aeabi_ddiv>
 8006152:	f7fa fd09 	bl	8000b68 <__aeabi_d2iz>
 8006156:	9001      	str	r0, [sp, #4]
 8006158:	f7fa f9ec 	bl	8000534 <__aeabi_i2d>
 800615c:	4642      	mov	r2, r8
 800615e:	464b      	mov	r3, r9
 8006160:	f7fa fa52 	bl	8000608 <__aeabi_dmul>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4630      	mov	r0, r6
 800616a:	4639      	mov	r1, r7
 800616c:	f7fa f894 	bl	8000298 <__aeabi_dsub>
 8006170:	9e01      	ldr	r6, [sp, #4]
 8006172:	9f04      	ldr	r7, [sp, #16]
 8006174:	3630      	adds	r6, #48	; 0x30
 8006176:	f805 6b01 	strb.w	r6, [r5], #1
 800617a:	9e00      	ldr	r6, [sp, #0]
 800617c:	1bae      	subs	r6, r5, r6
 800617e:	42b7      	cmp	r7, r6
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	d134      	bne.n	80061f0 <_dtoa_r+0x708>
 8006186:	f7fa f889 	bl	800029c <__adddf3>
 800618a:	4642      	mov	r2, r8
 800618c:	464b      	mov	r3, r9
 800618e:	4606      	mov	r6, r0
 8006190:	460f      	mov	r7, r1
 8006192:	f7fa fcc9 	bl	8000b28 <__aeabi_dcmpgt>
 8006196:	b9c8      	cbnz	r0, 80061cc <_dtoa_r+0x6e4>
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	4630      	mov	r0, r6
 800619e:	4639      	mov	r1, r7
 80061a0:	f7fa fc9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80061a4:	b110      	cbz	r0, 80061ac <_dtoa_r+0x6c4>
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	07db      	lsls	r3, r3, #31
 80061aa:	d40f      	bmi.n	80061cc <_dtoa_r+0x6e4>
 80061ac:	4651      	mov	r1, sl
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 fbcc 	bl	800694c <_Bfree>
 80061b4:	2300      	movs	r3, #0
 80061b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061b8:	702b      	strb	r3, [r5, #0]
 80061ba:	f10b 0301 	add.w	r3, fp, #1
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f43f ace2 	beq.w	8005b8c <_dtoa_r+0xa4>
 80061c8:	601d      	str	r5, [r3, #0]
 80061ca:	e4df      	b.n	8005b8c <_dtoa_r+0xa4>
 80061cc:	465f      	mov	r7, fp
 80061ce:	462b      	mov	r3, r5
 80061d0:	461d      	mov	r5, r3
 80061d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061d6:	2a39      	cmp	r2, #57	; 0x39
 80061d8:	d106      	bne.n	80061e8 <_dtoa_r+0x700>
 80061da:	9a00      	ldr	r2, [sp, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d1f7      	bne.n	80061d0 <_dtoa_r+0x6e8>
 80061e0:	9900      	ldr	r1, [sp, #0]
 80061e2:	2230      	movs	r2, #48	; 0x30
 80061e4:	3701      	adds	r7, #1
 80061e6:	700a      	strb	r2, [r1, #0]
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	3201      	adds	r2, #1
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e790      	b.n	8006112 <_dtoa_r+0x62a>
 80061f0:	4ba3      	ldr	r3, [pc, #652]	; (8006480 <_dtoa_r+0x998>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	f7fa fa08 	bl	8000608 <__aeabi_dmul>
 80061f8:	2200      	movs	r2, #0
 80061fa:	2300      	movs	r3, #0
 80061fc:	4606      	mov	r6, r0
 80061fe:	460f      	mov	r7, r1
 8006200:	f7fa fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006204:	2800      	cmp	r0, #0
 8006206:	d09e      	beq.n	8006146 <_dtoa_r+0x65e>
 8006208:	e7d0      	b.n	80061ac <_dtoa_r+0x6c4>
 800620a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800620c:	2a00      	cmp	r2, #0
 800620e:	f000 80ca 	beq.w	80063a6 <_dtoa_r+0x8be>
 8006212:	9a07      	ldr	r2, [sp, #28]
 8006214:	2a01      	cmp	r2, #1
 8006216:	f300 80ad 	bgt.w	8006374 <_dtoa_r+0x88c>
 800621a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800621c:	2a00      	cmp	r2, #0
 800621e:	f000 80a5 	beq.w	800636c <_dtoa_r+0x884>
 8006222:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006226:	9e08      	ldr	r6, [sp, #32]
 8006228:	9d05      	ldr	r5, [sp, #20]
 800622a:	9a05      	ldr	r2, [sp, #20]
 800622c:	441a      	add	r2, r3
 800622e:	9205      	str	r2, [sp, #20]
 8006230:	9a06      	ldr	r2, [sp, #24]
 8006232:	2101      	movs	r1, #1
 8006234:	441a      	add	r2, r3
 8006236:	4620      	mov	r0, r4
 8006238:	9206      	str	r2, [sp, #24]
 800623a:	f000 fc3d 	bl	8006ab8 <__i2b>
 800623e:	4607      	mov	r7, r0
 8006240:	b165      	cbz	r5, 800625c <_dtoa_r+0x774>
 8006242:	9b06      	ldr	r3, [sp, #24]
 8006244:	2b00      	cmp	r3, #0
 8006246:	dd09      	ble.n	800625c <_dtoa_r+0x774>
 8006248:	42ab      	cmp	r3, r5
 800624a:	9a05      	ldr	r2, [sp, #20]
 800624c:	bfa8      	it	ge
 800624e:	462b      	movge	r3, r5
 8006250:	1ad2      	subs	r2, r2, r3
 8006252:	9205      	str	r2, [sp, #20]
 8006254:	9a06      	ldr	r2, [sp, #24]
 8006256:	1aed      	subs	r5, r5, r3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	9306      	str	r3, [sp, #24]
 800625c:	9b08      	ldr	r3, [sp, #32]
 800625e:	b1f3      	cbz	r3, 800629e <_dtoa_r+0x7b6>
 8006260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80a3 	beq.w	80063ae <_dtoa_r+0x8c6>
 8006268:	2e00      	cmp	r6, #0
 800626a:	dd10      	ble.n	800628e <_dtoa_r+0x7a6>
 800626c:	4639      	mov	r1, r7
 800626e:	4632      	mov	r2, r6
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fce1 	bl	8006c38 <__pow5mult>
 8006276:	4652      	mov	r2, sl
 8006278:	4601      	mov	r1, r0
 800627a:	4607      	mov	r7, r0
 800627c:	4620      	mov	r0, r4
 800627e:	f000 fc31 	bl	8006ae4 <__multiply>
 8006282:	4651      	mov	r1, sl
 8006284:	4680      	mov	r8, r0
 8006286:	4620      	mov	r0, r4
 8006288:	f000 fb60 	bl	800694c <_Bfree>
 800628c:	46c2      	mov	sl, r8
 800628e:	9b08      	ldr	r3, [sp, #32]
 8006290:	1b9a      	subs	r2, r3, r6
 8006292:	d004      	beq.n	800629e <_dtoa_r+0x7b6>
 8006294:	4651      	mov	r1, sl
 8006296:	4620      	mov	r0, r4
 8006298:	f000 fcce 	bl	8006c38 <__pow5mult>
 800629c:	4682      	mov	sl, r0
 800629e:	2101      	movs	r1, #1
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fc09 	bl	8006ab8 <__i2b>
 80062a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	4606      	mov	r6, r0
 80062ac:	f340 8081 	ble.w	80063b2 <_dtoa_r+0x8ca>
 80062b0:	461a      	mov	r2, r3
 80062b2:	4601      	mov	r1, r0
 80062b4:	4620      	mov	r0, r4
 80062b6:	f000 fcbf 	bl	8006c38 <__pow5mult>
 80062ba:	9b07      	ldr	r3, [sp, #28]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	4606      	mov	r6, r0
 80062c0:	dd7a      	ble.n	80063b8 <_dtoa_r+0x8d0>
 80062c2:	f04f 0800 	mov.w	r8, #0
 80062c6:	6933      	ldr	r3, [r6, #16]
 80062c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80062cc:	6918      	ldr	r0, [r3, #16]
 80062ce:	f000 fba5 	bl	8006a1c <__hi0bits>
 80062d2:	f1c0 0020 	rsb	r0, r0, #32
 80062d6:	9b06      	ldr	r3, [sp, #24]
 80062d8:	4418      	add	r0, r3
 80062da:	f010 001f 	ands.w	r0, r0, #31
 80062de:	f000 8094 	beq.w	800640a <_dtoa_r+0x922>
 80062e2:	f1c0 0320 	rsb	r3, r0, #32
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	f340 8085 	ble.w	80063f6 <_dtoa_r+0x90e>
 80062ec:	9b05      	ldr	r3, [sp, #20]
 80062ee:	f1c0 001c 	rsb	r0, r0, #28
 80062f2:	4403      	add	r3, r0
 80062f4:	9305      	str	r3, [sp, #20]
 80062f6:	9b06      	ldr	r3, [sp, #24]
 80062f8:	4403      	add	r3, r0
 80062fa:	4405      	add	r5, r0
 80062fc:	9306      	str	r3, [sp, #24]
 80062fe:	9b05      	ldr	r3, [sp, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	dd05      	ble.n	8006310 <_dtoa_r+0x828>
 8006304:	4651      	mov	r1, sl
 8006306:	461a      	mov	r2, r3
 8006308:	4620      	mov	r0, r4
 800630a:	f000 fcef 	bl	8006cec <__lshift>
 800630e:	4682      	mov	sl, r0
 8006310:	9b06      	ldr	r3, [sp, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	dd05      	ble.n	8006322 <_dtoa_r+0x83a>
 8006316:	4631      	mov	r1, r6
 8006318:	461a      	mov	r2, r3
 800631a:	4620      	mov	r0, r4
 800631c:	f000 fce6 	bl	8006cec <__lshift>
 8006320:	4606      	mov	r6, r0
 8006322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006324:	2b00      	cmp	r3, #0
 8006326:	d072      	beq.n	800640e <_dtoa_r+0x926>
 8006328:	4631      	mov	r1, r6
 800632a:	4650      	mov	r0, sl
 800632c:	f000 fd4a 	bl	8006dc4 <__mcmp>
 8006330:	2800      	cmp	r0, #0
 8006332:	da6c      	bge.n	800640e <_dtoa_r+0x926>
 8006334:	2300      	movs	r3, #0
 8006336:	4651      	mov	r1, sl
 8006338:	220a      	movs	r2, #10
 800633a:	4620      	mov	r0, r4
 800633c:	f000 fb28 	bl	8006990 <__multadd>
 8006340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006342:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006346:	4682      	mov	sl, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 81b0 	beq.w	80066ae <_dtoa_r+0xbc6>
 800634e:	2300      	movs	r3, #0
 8006350:	4639      	mov	r1, r7
 8006352:	220a      	movs	r2, #10
 8006354:	4620      	mov	r0, r4
 8006356:	f000 fb1b 	bl	8006990 <__multadd>
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	4607      	mov	r7, r0
 8006360:	f300 8096 	bgt.w	8006490 <_dtoa_r+0x9a8>
 8006364:	9b07      	ldr	r3, [sp, #28]
 8006366:	2b02      	cmp	r3, #2
 8006368:	dc59      	bgt.n	800641e <_dtoa_r+0x936>
 800636a:	e091      	b.n	8006490 <_dtoa_r+0x9a8>
 800636c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800636e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006372:	e758      	b.n	8006226 <_dtoa_r+0x73e>
 8006374:	9b04      	ldr	r3, [sp, #16]
 8006376:	1e5e      	subs	r6, r3, #1
 8006378:	9b08      	ldr	r3, [sp, #32]
 800637a:	42b3      	cmp	r3, r6
 800637c:	bfbf      	itttt	lt
 800637e:	9b08      	ldrlt	r3, [sp, #32]
 8006380:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006382:	9608      	strlt	r6, [sp, #32]
 8006384:	1af3      	sublt	r3, r6, r3
 8006386:	bfb4      	ite	lt
 8006388:	18d2      	addlt	r2, r2, r3
 800638a:	1b9e      	subge	r6, r3, r6
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	bfbc      	itt	lt
 8006390:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006392:	2600      	movlt	r6, #0
 8006394:	2b00      	cmp	r3, #0
 8006396:	bfb7      	itett	lt
 8006398:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800639c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80063a0:	1a9d      	sublt	r5, r3, r2
 80063a2:	2300      	movlt	r3, #0
 80063a4:	e741      	b.n	800622a <_dtoa_r+0x742>
 80063a6:	9e08      	ldr	r6, [sp, #32]
 80063a8:	9d05      	ldr	r5, [sp, #20]
 80063aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80063ac:	e748      	b.n	8006240 <_dtoa_r+0x758>
 80063ae:	9a08      	ldr	r2, [sp, #32]
 80063b0:	e770      	b.n	8006294 <_dtoa_r+0x7ac>
 80063b2:	9b07      	ldr	r3, [sp, #28]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	dc19      	bgt.n	80063ec <_dtoa_r+0x904>
 80063b8:	9b02      	ldr	r3, [sp, #8]
 80063ba:	b9bb      	cbnz	r3, 80063ec <_dtoa_r+0x904>
 80063bc:	9b03      	ldr	r3, [sp, #12]
 80063be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c2:	b99b      	cbnz	r3, 80063ec <_dtoa_r+0x904>
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ca:	0d1b      	lsrs	r3, r3, #20
 80063cc:	051b      	lsls	r3, r3, #20
 80063ce:	b183      	cbz	r3, 80063f2 <_dtoa_r+0x90a>
 80063d0:	9b05      	ldr	r3, [sp, #20]
 80063d2:	3301      	adds	r3, #1
 80063d4:	9305      	str	r3, [sp, #20]
 80063d6:	9b06      	ldr	r3, [sp, #24]
 80063d8:	3301      	adds	r3, #1
 80063da:	9306      	str	r3, [sp, #24]
 80063dc:	f04f 0801 	mov.w	r8, #1
 80063e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f47f af6f 	bne.w	80062c6 <_dtoa_r+0x7de>
 80063e8:	2001      	movs	r0, #1
 80063ea:	e774      	b.n	80062d6 <_dtoa_r+0x7ee>
 80063ec:	f04f 0800 	mov.w	r8, #0
 80063f0:	e7f6      	b.n	80063e0 <_dtoa_r+0x8f8>
 80063f2:	4698      	mov	r8, r3
 80063f4:	e7f4      	b.n	80063e0 <_dtoa_r+0x8f8>
 80063f6:	d082      	beq.n	80062fe <_dtoa_r+0x816>
 80063f8:	9a05      	ldr	r2, [sp, #20]
 80063fa:	331c      	adds	r3, #28
 80063fc:	441a      	add	r2, r3
 80063fe:	9205      	str	r2, [sp, #20]
 8006400:	9a06      	ldr	r2, [sp, #24]
 8006402:	441a      	add	r2, r3
 8006404:	441d      	add	r5, r3
 8006406:	9206      	str	r2, [sp, #24]
 8006408:	e779      	b.n	80062fe <_dtoa_r+0x816>
 800640a:	4603      	mov	r3, r0
 800640c:	e7f4      	b.n	80063f8 <_dtoa_r+0x910>
 800640e:	9b04      	ldr	r3, [sp, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	dc37      	bgt.n	8006484 <_dtoa_r+0x99c>
 8006414:	9b07      	ldr	r3, [sp, #28]
 8006416:	2b02      	cmp	r3, #2
 8006418:	dd34      	ble.n	8006484 <_dtoa_r+0x99c>
 800641a:	9b04      	ldr	r3, [sp, #16]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	9b01      	ldr	r3, [sp, #4]
 8006420:	b963      	cbnz	r3, 800643c <_dtoa_r+0x954>
 8006422:	4631      	mov	r1, r6
 8006424:	2205      	movs	r2, #5
 8006426:	4620      	mov	r0, r4
 8006428:	f000 fab2 	bl	8006990 <__multadd>
 800642c:	4601      	mov	r1, r0
 800642e:	4606      	mov	r6, r0
 8006430:	4650      	mov	r0, sl
 8006432:	f000 fcc7 	bl	8006dc4 <__mcmp>
 8006436:	2800      	cmp	r0, #0
 8006438:	f73f adbb 	bgt.w	8005fb2 <_dtoa_r+0x4ca>
 800643c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800643e:	9d00      	ldr	r5, [sp, #0]
 8006440:	ea6f 0b03 	mvn.w	fp, r3
 8006444:	f04f 0800 	mov.w	r8, #0
 8006448:	4631      	mov	r1, r6
 800644a:	4620      	mov	r0, r4
 800644c:	f000 fa7e 	bl	800694c <_Bfree>
 8006450:	2f00      	cmp	r7, #0
 8006452:	f43f aeab 	beq.w	80061ac <_dtoa_r+0x6c4>
 8006456:	f1b8 0f00 	cmp.w	r8, #0
 800645a:	d005      	beq.n	8006468 <_dtoa_r+0x980>
 800645c:	45b8      	cmp	r8, r7
 800645e:	d003      	beq.n	8006468 <_dtoa_r+0x980>
 8006460:	4641      	mov	r1, r8
 8006462:	4620      	mov	r0, r4
 8006464:	f000 fa72 	bl	800694c <_Bfree>
 8006468:	4639      	mov	r1, r7
 800646a:	4620      	mov	r0, r4
 800646c:	f000 fa6e 	bl	800694c <_Bfree>
 8006470:	e69c      	b.n	80061ac <_dtoa_r+0x6c4>
 8006472:	2600      	movs	r6, #0
 8006474:	4637      	mov	r7, r6
 8006476:	e7e1      	b.n	800643c <_dtoa_r+0x954>
 8006478:	46bb      	mov	fp, r7
 800647a:	4637      	mov	r7, r6
 800647c:	e599      	b.n	8005fb2 <_dtoa_r+0x4ca>
 800647e:	bf00      	nop
 8006480:	40240000 	.word	0x40240000
 8006484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 80c8 	beq.w	800661c <_dtoa_r+0xb34>
 800648c:	9b04      	ldr	r3, [sp, #16]
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	2d00      	cmp	r5, #0
 8006492:	dd05      	ble.n	80064a0 <_dtoa_r+0x9b8>
 8006494:	4639      	mov	r1, r7
 8006496:	462a      	mov	r2, r5
 8006498:	4620      	mov	r0, r4
 800649a:	f000 fc27 	bl	8006cec <__lshift>
 800649e:	4607      	mov	r7, r0
 80064a0:	f1b8 0f00 	cmp.w	r8, #0
 80064a4:	d05b      	beq.n	800655e <_dtoa_r+0xa76>
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fa0f 	bl	80068cc <_Balloc>
 80064ae:	4605      	mov	r5, r0
 80064b0:	b928      	cbnz	r0, 80064be <_dtoa_r+0x9d6>
 80064b2:	4b83      	ldr	r3, [pc, #524]	; (80066c0 <_dtoa_r+0xbd8>)
 80064b4:	4602      	mov	r2, r0
 80064b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80064ba:	f7ff bb2e 	b.w	8005b1a <_dtoa_r+0x32>
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	3202      	adds	r2, #2
 80064c2:	0092      	lsls	r2, r2, #2
 80064c4:	f107 010c 	add.w	r1, r7, #12
 80064c8:	300c      	adds	r0, #12
 80064ca:	f000 ffab 	bl	8007424 <memcpy>
 80064ce:	2201      	movs	r2, #1
 80064d0:	4629      	mov	r1, r5
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 fc0a 	bl	8006cec <__lshift>
 80064d8:	9b00      	ldr	r3, [sp, #0]
 80064da:	3301      	adds	r3, #1
 80064dc:	9304      	str	r3, [sp, #16]
 80064de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064e2:	4413      	add	r3, r2
 80064e4:	9308      	str	r3, [sp, #32]
 80064e6:	9b02      	ldr	r3, [sp, #8]
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	46b8      	mov	r8, r7
 80064ee:	9306      	str	r3, [sp, #24]
 80064f0:	4607      	mov	r7, r0
 80064f2:	9b04      	ldr	r3, [sp, #16]
 80064f4:	4631      	mov	r1, r6
 80064f6:	3b01      	subs	r3, #1
 80064f8:	4650      	mov	r0, sl
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	f7ff fa69 	bl	80059d2 <quorem>
 8006500:	4641      	mov	r1, r8
 8006502:	9002      	str	r0, [sp, #8]
 8006504:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006508:	4650      	mov	r0, sl
 800650a:	f000 fc5b 	bl	8006dc4 <__mcmp>
 800650e:	463a      	mov	r2, r7
 8006510:	9005      	str	r0, [sp, #20]
 8006512:	4631      	mov	r1, r6
 8006514:	4620      	mov	r0, r4
 8006516:	f000 fc71 	bl	8006dfc <__mdiff>
 800651a:	68c2      	ldr	r2, [r0, #12]
 800651c:	4605      	mov	r5, r0
 800651e:	bb02      	cbnz	r2, 8006562 <_dtoa_r+0xa7a>
 8006520:	4601      	mov	r1, r0
 8006522:	4650      	mov	r0, sl
 8006524:	f000 fc4e 	bl	8006dc4 <__mcmp>
 8006528:	4602      	mov	r2, r0
 800652a:	4629      	mov	r1, r5
 800652c:	4620      	mov	r0, r4
 800652e:	9209      	str	r2, [sp, #36]	; 0x24
 8006530:	f000 fa0c 	bl	800694c <_Bfree>
 8006534:	9b07      	ldr	r3, [sp, #28]
 8006536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006538:	9d04      	ldr	r5, [sp, #16]
 800653a:	ea43 0102 	orr.w	r1, r3, r2
 800653e:	9b06      	ldr	r3, [sp, #24]
 8006540:	4319      	orrs	r1, r3
 8006542:	d110      	bne.n	8006566 <_dtoa_r+0xa7e>
 8006544:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006548:	d029      	beq.n	800659e <_dtoa_r+0xab6>
 800654a:	9b05      	ldr	r3, [sp, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	dd02      	ble.n	8006556 <_dtoa_r+0xa6e>
 8006550:	9b02      	ldr	r3, [sp, #8]
 8006552:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006556:	9b01      	ldr	r3, [sp, #4]
 8006558:	f883 9000 	strb.w	r9, [r3]
 800655c:	e774      	b.n	8006448 <_dtoa_r+0x960>
 800655e:	4638      	mov	r0, r7
 8006560:	e7ba      	b.n	80064d8 <_dtoa_r+0x9f0>
 8006562:	2201      	movs	r2, #1
 8006564:	e7e1      	b.n	800652a <_dtoa_r+0xa42>
 8006566:	9b05      	ldr	r3, [sp, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	db04      	blt.n	8006576 <_dtoa_r+0xa8e>
 800656c:	9907      	ldr	r1, [sp, #28]
 800656e:	430b      	orrs	r3, r1
 8006570:	9906      	ldr	r1, [sp, #24]
 8006572:	430b      	orrs	r3, r1
 8006574:	d120      	bne.n	80065b8 <_dtoa_r+0xad0>
 8006576:	2a00      	cmp	r2, #0
 8006578:	dded      	ble.n	8006556 <_dtoa_r+0xa6e>
 800657a:	4651      	mov	r1, sl
 800657c:	2201      	movs	r2, #1
 800657e:	4620      	mov	r0, r4
 8006580:	f000 fbb4 	bl	8006cec <__lshift>
 8006584:	4631      	mov	r1, r6
 8006586:	4682      	mov	sl, r0
 8006588:	f000 fc1c 	bl	8006dc4 <__mcmp>
 800658c:	2800      	cmp	r0, #0
 800658e:	dc03      	bgt.n	8006598 <_dtoa_r+0xab0>
 8006590:	d1e1      	bne.n	8006556 <_dtoa_r+0xa6e>
 8006592:	f019 0f01 	tst.w	r9, #1
 8006596:	d0de      	beq.n	8006556 <_dtoa_r+0xa6e>
 8006598:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800659c:	d1d8      	bne.n	8006550 <_dtoa_r+0xa68>
 800659e:	9a01      	ldr	r2, [sp, #4]
 80065a0:	2339      	movs	r3, #57	; 0x39
 80065a2:	7013      	strb	r3, [r2, #0]
 80065a4:	462b      	mov	r3, r5
 80065a6:	461d      	mov	r5, r3
 80065a8:	3b01      	subs	r3, #1
 80065aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065ae:	2a39      	cmp	r2, #57	; 0x39
 80065b0:	d06c      	beq.n	800668c <_dtoa_r+0xba4>
 80065b2:	3201      	adds	r2, #1
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	e747      	b.n	8006448 <_dtoa_r+0x960>
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	dd07      	ble.n	80065cc <_dtoa_r+0xae4>
 80065bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065c0:	d0ed      	beq.n	800659e <_dtoa_r+0xab6>
 80065c2:	9a01      	ldr	r2, [sp, #4]
 80065c4:	f109 0301 	add.w	r3, r9, #1
 80065c8:	7013      	strb	r3, [r2, #0]
 80065ca:	e73d      	b.n	8006448 <_dtoa_r+0x960>
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	9a08      	ldr	r2, [sp, #32]
 80065d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d043      	beq.n	8006660 <_dtoa_r+0xb78>
 80065d8:	4651      	mov	r1, sl
 80065da:	2300      	movs	r3, #0
 80065dc:	220a      	movs	r2, #10
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 f9d6 	bl	8006990 <__multadd>
 80065e4:	45b8      	cmp	r8, r7
 80065e6:	4682      	mov	sl, r0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	f04f 020a 	mov.w	r2, #10
 80065f0:	4641      	mov	r1, r8
 80065f2:	4620      	mov	r0, r4
 80065f4:	d107      	bne.n	8006606 <_dtoa_r+0xb1e>
 80065f6:	f000 f9cb 	bl	8006990 <__multadd>
 80065fa:	4680      	mov	r8, r0
 80065fc:	4607      	mov	r7, r0
 80065fe:	9b04      	ldr	r3, [sp, #16]
 8006600:	3301      	adds	r3, #1
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	e775      	b.n	80064f2 <_dtoa_r+0xa0a>
 8006606:	f000 f9c3 	bl	8006990 <__multadd>
 800660a:	4639      	mov	r1, r7
 800660c:	4680      	mov	r8, r0
 800660e:	2300      	movs	r3, #0
 8006610:	220a      	movs	r2, #10
 8006612:	4620      	mov	r0, r4
 8006614:	f000 f9bc 	bl	8006990 <__multadd>
 8006618:	4607      	mov	r7, r0
 800661a:	e7f0      	b.n	80065fe <_dtoa_r+0xb16>
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	9d00      	ldr	r5, [sp, #0]
 8006622:	4631      	mov	r1, r6
 8006624:	4650      	mov	r0, sl
 8006626:	f7ff f9d4 	bl	80059d2 <quorem>
 800662a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800662e:	9b00      	ldr	r3, [sp, #0]
 8006630:	f805 9b01 	strb.w	r9, [r5], #1
 8006634:	1aea      	subs	r2, r5, r3
 8006636:	9b01      	ldr	r3, [sp, #4]
 8006638:	4293      	cmp	r3, r2
 800663a:	dd07      	ble.n	800664c <_dtoa_r+0xb64>
 800663c:	4651      	mov	r1, sl
 800663e:	2300      	movs	r3, #0
 8006640:	220a      	movs	r2, #10
 8006642:	4620      	mov	r0, r4
 8006644:	f000 f9a4 	bl	8006990 <__multadd>
 8006648:	4682      	mov	sl, r0
 800664a:	e7ea      	b.n	8006622 <_dtoa_r+0xb3a>
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfc8      	it	gt
 8006652:	461d      	movgt	r5, r3
 8006654:	9b00      	ldr	r3, [sp, #0]
 8006656:	bfd8      	it	le
 8006658:	2501      	movle	r5, #1
 800665a:	441d      	add	r5, r3
 800665c:	f04f 0800 	mov.w	r8, #0
 8006660:	4651      	mov	r1, sl
 8006662:	2201      	movs	r2, #1
 8006664:	4620      	mov	r0, r4
 8006666:	f000 fb41 	bl	8006cec <__lshift>
 800666a:	4631      	mov	r1, r6
 800666c:	4682      	mov	sl, r0
 800666e:	f000 fba9 	bl	8006dc4 <__mcmp>
 8006672:	2800      	cmp	r0, #0
 8006674:	dc96      	bgt.n	80065a4 <_dtoa_r+0xabc>
 8006676:	d102      	bne.n	800667e <_dtoa_r+0xb96>
 8006678:	f019 0f01 	tst.w	r9, #1
 800667c:	d192      	bne.n	80065a4 <_dtoa_r+0xabc>
 800667e:	462b      	mov	r3, r5
 8006680:	461d      	mov	r5, r3
 8006682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006686:	2a30      	cmp	r2, #48	; 0x30
 8006688:	d0fa      	beq.n	8006680 <_dtoa_r+0xb98>
 800668a:	e6dd      	b.n	8006448 <_dtoa_r+0x960>
 800668c:	9a00      	ldr	r2, [sp, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d189      	bne.n	80065a6 <_dtoa_r+0xabe>
 8006692:	f10b 0b01 	add.w	fp, fp, #1
 8006696:	2331      	movs	r3, #49	; 0x31
 8006698:	e796      	b.n	80065c8 <_dtoa_r+0xae0>
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <_dtoa_r+0xbdc>)
 800669c:	f7ff ba99 	b.w	8005bd2 <_dtoa_r+0xea>
 80066a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f47f aa6d 	bne.w	8005b82 <_dtoa_r+0x9a>
 80066a8:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <_dtoa_r+0xbe0>)
 80066aa:	f7ff ba92 	b.w	8005bd2 <_dtoa_r+0xea>
 80066ae:	9b01      	ldr	r3, [sp, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	dcb5      	bgt.n	8006620 <_dtoa_r+0xb38>
 80066b4:	9b07      	ldr	r3, [sp, #28]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	f73f aeb1 	bgt.w	800641e <_dtoa_r+0x936>
 80066bc:	e7b0      	b.n	8006620 <_dtoa_r+0xb38>
 80066be:	bf00      	nop
 80066c0:	08007c40 	.word	0x08007c40
 80066c4:	08007ba0 	.word	0x08007ba0
 80066c8:	08007bc4 	.word	0x08007bc4

080066cc <_free_r>:
 80066cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ce:	2900      	cmp	r1, #0
 80066d0:	d044      	beq.n	800675c <_free_r+0x90>
 80066d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d6:	9001      	str	r0, [sp, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f1a1 0404 	sub.w	r4, r1, #4
 80066de:	bfb8      	it	lt
 80066e0:	18e4      	addlt	r4, r4, r3
 80066e2:	f000 f8e7 	bl	80068b4 <__malloc_lock>
 80066e6:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <_free_r+0x94>)
 80066e8:	9801      	ldr	r0, [sp, #4]
 80066ea:	6813      	ldr	r3, [r2, #0]
 80066ec:	b933      	cbnz	r3, 80066fc <_free_r+0x30>
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	6014      	str	r4, [r2, #0]
 80066f2:	b003      	add	sp, #12
 80066f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066f8:	f000 b8e2 	b.w	80068c0 <__malloc_unlock>
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	d908      	bls.n	8006712 <_free_r+0x46>
 8006700:	6825      	ldr	r5, [r4, #0]
 8006702:	1961      	adds	r1, r4, r5
 8006704:	428b      	cmp	r3, r1
 8006706:	bf01      	itttt	eq
 8006708:	6819      	ldreq	r1, [r3, #0]
 800670a:	685b      	ldreq	r3, [r3, #4]
 800670c:	1949      	addeq	r1, r1, r5
 800670e:	6021      	streq	r1, [r4, #0]
 8006710:	e7ed      	b.n	80066ee <_free_r+0x22>
 8006712:	461a      	mov	r2, r3
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	b10b      	cbz	r3, 800671c <_free_r+0x50>
 8006718:	42a3      	cmp	r3, r4
 800671a:	d9fa      	bls.n	8006712 <_free_r+0x46>
 800671c:	6811      	ldr	r1, [r2, #0]
 800671e:	1855      	adds	r5, r2, r1
 8006720:	42a5      	cmp	r5, r4
 8006722:	d10b      	bne.n	800673c <_free_r+0x70>
 8006724:	6824      	ldr	r4, [r4, #0]
 8006726:	4421      	add	r1, r4
 8006728:	1854      	adds	r4, r2, r1
 800672a:	42a3      	cmp	r3, r4
 800672c:	6011      	str	r1, [r2, #0]
 800672e:	d1e0      	bne.n	80066f2 <_free_r+0x26>
 8006730:	681c      	ldr	r4, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	6053      	str	r3, [r2, #4]
 8006736:	440c      	add	r4, r1
 8006738:	6014      	str	r4, [r2, #0]
 800673a:	e7da      	b.n	80066f2 <_free_r+0x26>
 800673c:	d902      	bls.n	8006744 <_free_r+0x78>
 800673e:	230c      	movs	r3, #12
 8006740:	6003      	str	r3, [r0, #0]
 8006742:	e7d6      	b.n	80066f2 <_free_r+0x26>
 8006744:	6825      	ldr	r5, [r4, #0]
 8006746:	1961      	adds	r1, r4, r5
 8006748:	428b      	cmp	r3, r1
 800674a:	bf04      	itt	eq
 800674c:	6819      	ldreq	r1, [r3, #0]
 800674e:	685b      	ldreq	r3, [r3, #4]
 8006750:	6063      	str	r3, [r4, #4]
 8006752:	bf04      	itt	eq
 8006754:	1949      	addeq	r1, r1, r5
 8006756:	6021      	streq	r1, [r4, #0]
 8006758:	6054      	str	r4, [r2, #4]
 800675a:	e7ca      	b.n	80066f2 <_free_r+0x26>
 800675c:	b003      	add	sp, #12
 800675e:	bd30      	pop	{r4, r5, pc}
 8006760:	20000418 	.word	0x20000418

08006764 <malloc>:
 8006764:	4b02      	ldr	r3, [pc, #8]	; (8006770 <malloc+0xc>)
 8006766:	4601      	mov	r1, r0
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	f000 b823 	b.w	80067b4 <_malloc_r>
 800676e:	bf00      	nop
 8006770:	20000064 	.word	0x20000064

08006774 <sbrk_aligned>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	4e0e      	ldr	r6, [pc, #56]	; (80067b0 <sbrk_aligned+0x3c>)
 8006778:	460c      	mov	r4, r1
 800677a:	6831      	ldr	r1, [r6, #0]
 800677c:	4605      	mov	r5, r0
 800677e:	b911      	cbnz	r1, 8006786 <sbrk_aligned+0x12>
 8006780:	f000 fe40 	bl	8007404 <_sbrk_r>
 8006784:	6030      	str	r0, [r6, #0]
 8006786:	4621      	mov	r1, r4
 8006788:	4628      	mov	r0, r5
 800678a:	f000 fe3b 	bl	8007404 <_sbrk_r>
 800678e:	1c43      	adds	r3, r0, #1
 8006790:	d00a      	beq.n	80067a8 <sbrk_aligned+0x34>
 8006792:	1cc4      	adds	r4, r0, #3
 8006794:	f024 0403 	bic.w	r4, r4, #3
 8006798:	42a0      	cmp	r0, r4
 800679a:	d007      	beq.n	80067ac <sbrk_aligned+0x38>
 800679c:	1a21      	subs	r1, r4, r0
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 fe30 	bl	8007404 <_sbrk_r>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d101      	bne.n	80067ac <sbrk_aligned+0x38>
 80067a8:	f04f 34ff 	mov.w	r4, #4294967295
 80067ac:	4620      	mov	r0, r4
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	2000041c 	.word	0x2000041c

080067b4 <_malloc_r>:
 80067b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b8:	1ccd      	adds	r5, r1, #3
 80067ba:	f025 0503 	bic.w	r5, r5, #3
 80067be:	3508      	adds	r5, #8
 80067c0:	2d0c      	cmp	r5, #12
 80067c2:	bf38      	it	cc
 80067c4:	250c      	movcc	r5, #12
 80067c6:	2d00      	cmp	r5, #0
 80067c8:	4607      	mov	r7, r0
 80067ca:	db01      	blt.n	80067d0 <_malloc_r+0x1c>
 80067cc:	42a9      	cmp	r1, r5
 80067ce:	d905      	bls.n	80067dc <_malloc_r+0x28>
 80067d0:	230c      	movs	r3, #12
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	2600      	movs	r6, #0
 80067d6:	4630      	mov	r0, r6
 80067d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80068b0 <_malloc_r+0xfc>
 80067e0:	f000 f868 	bl	80068b4 <__malloc_lock>
 80067e4:	f8d8 3000 	ldr.w	r3, [r8]
 80067e8:	461c      	mov	r4, r3
 80067ea:	bb5c      	cbnz	r4, 8006844 <_malloc_r+0x90>
 80067ec:	4629      	mov	r1, r5
 80067ee:	4638      	mov	r0, r7
 80067f0:	f7ff ffc0 	bl	8006774 <sbrk_aligned>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	4604      	mov	r4, r0
 80067f8:	d155      	bne.n	80068a6 <_malloc_r+0xf2>
 80067fa:	f8d8 4000 	ldr.w	r4, [r8]
 80067fe:	4626      	mov	r6, r4
 8006800:	2e00      	cmp	r6, #0
 8006802:	d145      	bne.n	8006890 <_malloc_r+0xdc>
 8006804:	2c00      	cmp	r4, #0
 8006806:	d048      	beq.n	800689a <_malloc_r+0xe6>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	4631      	mov	r1, r6
 800680c:	4638      	mov	r0, r7
 800680e:	eb04 0903 	add.w	r9, r4, r3
 8006812:	f000 fdf7 	bl	8007404 <_sbrk_r>
 8006816:	4581      	cmp	r9, r0
 8006818:	d13f      	bne.n	800689a <_malloc_r+0xe6>
 800681a:	6821      	ldr	r1, [r4, #0]
 800681c:	1a6d      	subs	r5, r5, r1
 800681e:	4629      	mov	r1, r5
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff ffa7 	bl	8006774 <sbrk_aligned>
 8006826:	3001      	adds	r0, #1
 8006828:	d037      	beq.n	800689a <_malloc_r+0xe6>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	442b      	add	r3, r5
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	f8d8 3000 	ldr.w	r3, [r8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d038      	beq.n	80068aa <_malloc_r+0xf6>
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	42a2      	cmp	r2, r4
 800683c:	d12b      	bne.n	8006896 <_malloc_r+0xe2>
 800683e:	2200      	movs	r2, #0
 8006840:	605a      	str	r2, [r3, #4]
 8006842:	e00f      	b.n	8006864 <_malloc_r+0xb0>
 8006844:	6822      	ldr	r2, [r4, #0]
 8006846:	1b52      	subs	r2, r2, r5
 8006848:	d41f      	bmi.n	800688a <_malloc_r+0xd6>
 800684a:	2a0b      	cmp	r2, #11
 800684c:	d917      	bls.n	800687e <_malloc_r+0xca>
 800684e:	1961      	adds	r1, r4, r5
 8006850:	42a3      	cmp	r3, r4
 8006852:	6025      	str	r5, [r4, #0]
 8006854:	bf18      	it	ne
 8006856:	6059      	strne	r1, [r3, #4]
 8006858:	6863      	ldr	r3, [r4, #4]
 800685a:	bf08      	it	eq
 800685c:	f8c8 1000 	streq.w	r1, [r8]
 8006860:	5162      	str	r2, [r4, r5]
 8006862:	604b      	str	r3, [r1, #4]
 8006864:	4638      	mov	r0, r7
 8006866:	f104 060b 	add.w	r6, r4, #11
 800686a:	f000 f829 	bl	80068c0 <__malloc_unlock>
 800686e:	f026 0607 	bic.w	r6, r6, #7
 8006872:	1d23      	adds	r3, r4, #4
 8006874:	1af2      	subs	r2, r6, r3
 8006876:	d0ae      	beq.n	80067d6 <_malloc_r+0x22>
 8006878:	1b9b      	subs	r3, r3, r6
 800687a:	50a3      	str	r3, [r4, r2]
 800687c:	e7ab      	b.n	80067d6 <_malloc_r+0x22>
 800687e:	42a3      	cmp	r3, r4
 8006880:	6862      	ldr	r2, [r4, #4]
 8006882:	d1dd      	bne.n	8006840 <_malloc_r+0x8c>
 8006884:	f8c8 2000 	str.w	r2, [r8]
 8006888:	e7ec      	b.n	8006864 <_malloc_r+0xb0>
 800688a:	4623      	mov	r3, r4
 800688c:	6864      	ldr	r4, [r4, #4]
 800688e:	e7ac      	b.n	80067ea <_malloc_r+0x36>
 8006890:	4634      	mov	r4, r6
 8006892:	6876      	ldr	r6, [r6, #4]
 8006894:	e7b4      	b.n	8006800 <_malloc_r+0x4c>
 8006896:	4613      	mov	r3, r2
 8006898:	e7cc      	b.n	8006834 <_malloc_r+0x80>
 800689a:	230c      	movs	r3, #12
 800689c:	603b      	str	r3, [r7, #0]
 800689e:	4638      	mov	r0, r7
 80068a0:	f000 f80e 	bl	80068c0 <__malloc_unlock>
 80068a4:	e797      	b.n	80067d6 <_malloc_r+0x22>
 80068a6:	6025      	str	r5, [r4, #0]
 80068a8:	e7dc      	b.n	8006864 <_malloc_r+0xb0>
 80068aa:	605b      	str	r3, [r3, #4]
 80068ac:	deff      	udf	#255	; 0xff
 80068ae:	bf00      	nop
 80068b0:	20000418 	.word	0x20000418

080068b4 <__malloc_lock>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__malloc_lock+0x8>)
 80068b6:	f7ff b88a 	b.w	80059ce <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000414 	.word	0x20000414

080068c0 <__malloc_unlock>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__malloc_unlock+0x8>)
 80068c2:	f7ff b885 	b.w	80059d0 <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	20000414 	.word	0x20000414

080068cc <_Balloc>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	69c6      	ldr	r6, [r0, #28]
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	b976      	cbnz	r6, 80068f4 <_Balloc+0x28>
 80068d6:	2010      	movs	r0, #16
 80068d8:	f7ff ff44 	bl	8006764 <malloc>
 80068dc:	4602      	mov	r2, r0
 80068de:	61e0      	str	r0, [r4, #28]
 80068e0:	b920      	cbnz	r0, 80068ec <_Balloc+0x20>
 80068e2:	4b18      	ldr	r3, [pc, #96]	; (8006944 <_Balloc+0x78>)
 80068e4:	4818      	ldr	r0, [pc, #96]	; (8006948 <_Balloc+0x7c>)
 80068e6:	216b      	movs	r1, #107	; 0x6b
 80068e8:	f000 fdaa 	bl	8007440 <__assert_func>
 80068ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068f0:	6006      	str	r6, [r0, #0]
 80068f2:	60c6      	str	r6, [r0, #12]
 80068f4:	69e6      	ldr	r6, [r4, #28]
 80068f6:	68f3      	ldr	r3, [r6, #12]
 80068f8:	b183      	cbz	r3, 800691c <_Balloc+0x50>
 80068fa:	69e3      	ldr	r3, [r4, #28]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006902:	b9b8      	cbnz	r0, 8006934 <_Balloc+0x68>
 8006904:	2101      	movs	r1, #1
 8006906:	fa01 f605 	lsl.w	r6, r1, r5
 800690a:	1d72      	adds	r2, r6, #5
 800690c:	0092      	lsls	r2, r2, #2
 800690e:	4620      	mov	r0, r4
 8006910:	f000 fdb4 	bl	800747c <_calloc_r>
 8006914:	b160      	cbz	r0, 8006930 <_Balloc+0x64>
 8006916:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800691a:	e00e      	b.n	800693a <_Balloc+0x6e>
 800691c:	2221      	movs	r2, #33	; 0x21
 800691e:	2104      	movs	r1, #4
 8006920:	4620      	mov	r0, r4
 8006922:	f000 fdab 	bl	800747c <_calloc_r>
 8006926:	69e3      	ldr	r3, [r4, #28]
 8006928:	60f0      	str	r0, [r6, #12]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e4      	bne.n	80068fa <_Balloc+0x2e>
 8006930:	2000      	movs	r0, #0
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	6802      	ldr	r2, [r0, #0]
 8006936:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800693a:	2300      	movs	r3, #0
 800693c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006940:	e7f7      	b.n	8006932 <_Balloc+0x66>
 8006942:	bf00      	nop
 8006944:	08007bd1 	.word	0x08007bd1
 8006948:	08007c51 	.word	0x08007c51

0800694c <_Bfree>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	69c6      	ldr	r6, [r0, #28]
 8006950:	4605      	mov	r5, r0
 8006952:	460c      	mov	r4, r1
 8006954:	b976      	cbnz	r6, 8006974 <_Bfree+0x28>
 8006956:	2010      	movs	r0, #16
 8006958:	f7ff ff04 	bl	8006764 <malloc>
 800695c:	4602      	mov	r2, r0
 800695e:	61e8      	str	r0, [r5, #28]
 8006960:	b920      	cbnz	r0, 800696c <_Bfree+0x20>
 8006962:	4b09      	ldr	r3, [pc, #36]	; (8006988 <_Bfree+0x3c>)
 8006964:	4809      	ldr	r0, [pc, #36]	; (800698c <_Bfree+0x40>)
 8006966:	218f      	movs	r1, #143	; 0x8f
 8006968:	f000 fd6a 	bl	8007440 <__assert_func>
 800696c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006970:	6006      	str	r6, [r0, #0]
 8006972:	60c6      	str	r6, [r0, #12]
 8006974:	b13c      	cbz	r4, 8006986 <_Bfree+0x3a>
 8006976:	69eb      	ldr	r3, [r5, #28]
 8006978:	6862      	ldr	r2, [r4, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006980:	6021      	str	r1, [r4, #0]
 8006982:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	08007bd1 	.word	0x08007bd1
 800698c:	08007c51 	.word	0x08007c51

08006990 <__multadd>:
 8006990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006994:	690d      	ldr	r5, [r1, #16]
 8006996:	4607      	mov	r7, r0
 8006998:	460c      	mov	r4, r1
 800699a:	461e      	mov	r6, r3
 800699c:	f101 0c14 	add.w	ip, r1, #20
 80069a0:	2000      	movs	r0, #0
 80069a2:	f8dc 3000 	ldr.w	r3, [ip]
 80069a6:	b299      	uxth	r1, r3
 80069a8:	fb02 6101 	mla	r1, r2, r1, r6
 80069ac:	0c1e      	lsrs	r6, r3, #16
 80069ae:	0c0b      	lsrs	r3, r1, #16
 80069b0:	fb02 3306 	mla	r3, r2, r6, r3
 80069b4:	b289      	uxth	r1, r1
 80069b6:	3001      	adds	r0, #1
 80069b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069bc:	4285      	cmp	r5, r0
 80069be:	f84c 1b04 	str.w	r1, [ip], #4
 80069c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069c6:	dcec      	bgt.n	80069a2 <__multadd+0x12>
 80069c8:	b30e      	cbz	r6, 8006a0e <__multadd+0x7e>
 80069ca:	68a3      	ldr	r3, [r4, #8]
 80069cc:	42ab      	cmp	r3, r5
 80069ce:	dc19      	bgt.n	8006a04 <__multadd+0x74>
 80069d0:	6861      	ldr	r1, [r4, #4]
 80069d2:	4638      	mov	r0, r7
 80069d4:	3101      	adds	r1, #1
 80069d6:	f7ff ff79 	bl	80068cc <_Balloc>
 80069da:	4680      	mov	r8, r0
 80069dc:	b928      	cbnz	r0, 80069ea <__multadd+0x5a>
 80069de:	4602      	mov	r2, r0
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <__multadd+0x84>)
 80069e2:	480d      	ldr	r0, [pc, #52]	; (8006a18 <__multadd+0x88>)
 80069e4:	21ba      	movs	r1, #186	; 0xba
 80069e6:	f000 fd2b 	bl	8007440 <__assert_func>
 80069ea:	6922      	ldr	r2, [r4, #16]
 80069ec:	3202      	adds	r2, #2
 80069ee:	f104 010c 	add.w	r1, r4, #12
 80069f2:	0092      	lsls	r2, r2, #2
 80069f4:	300c      	adds	r0, #12
 80069f6:	f000 fd15 	bl	8007424 <memcpy>
 80069fa:	4621      	mov	r1, r4
 80069fc:	4638      	mov	r0, r7
 80069fe:	f7ff ffa5 	bl	800694c <_Bfree>
 8006a02:	4644      	mov	r4, r8
 8006a04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a08:	3501      	adds	r5, #1
 8006a0a:	615e      	str	r6, [r3, #20]
 8006a0c:	6125      	str	r5, [r4, #16]
 8006a0e:	4620      	mov	r0, r4
 8006a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a14:	08007c40 	.word	0x08007c40
 8006a18:	08007c51 	.word	0x08007c51

08006a1c <__hi0bits>:
 8006a1c:	0c03      	lsrs	r3, r0, #16
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	b9d3      	cbnz	r3, 8006a58 <__hi0bits+0x3c>
 8006a22:	0400      	lsls	r0, r0, #16
 8006a24:	2310      	movs	r3, #16
 8006a26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a2a:	bf04      	itt	eq
 8006a2c:	0200      	lsleq	r0, r0, #8
 8006a2e:	3308      	addeq	r3, #8
 8006a30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a34:	bf04      	itt	eq
 8006a36:	0100      	lsleq	r0, r0, #4
 8006a38:	3304      	addeq	r3, #4
 8006a3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a3e:	bf04      	itt	eq
 8006a40:	0080      	lsleq	r0, r0, #2
 8006a42:	3302      	addeq	r3, #2
 8006a44:	2800      	cmp	r0, #0
 8006a46:	db05      	blt.n	8006a54 <__hi0bits+0x38>
 8006a48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a4c:	f103 0301 	add.w	r3, r3, #1
 8006a50:	bf08      	it	eq
 8006a52:	2320      	moveq	r3, #32
 8006a54:	4618      	mov	r0, r3
 8006a56:	4770      	bx	lr
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e7e4      	b.n	8006a26 <__hi0bits+0xa>

08006a5c <__lo0bits>:
 8006a5c:	6803      	ldr	r3, [r0, #0]
 8006a5e:	f013 0207 	ands.w	r2, r3, #7
 8006a62:	d00c      	beq.n	8006a7e <__lo0bits+0x22>
 8006a64:	07d9      	lsls	r1, r3, #31
 8006a66:	d422      	bmi.n	8006aae <__lo0bits+0x52>
 8006a68:	079a      	lsls	r2, r3, #30
 8006a6a:	bf49      	itett	mi
 8006a6c:	085b      	lsrmi	r3, r3, #1
 8006a6e:	089b      	lsrpl	r3, r3, #2
 8006a70:	6003      	strmi	r3, [r0, #0]
 8006a72:	2201      	movmi	r2, #1
 8006a74:	bf5c      	itt	pl
 8006a76:	6003      	strpl	r3, [r0, #0]
 8006a78:	2202      	movpl	r2, #2
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4770      	bx	lr
 8006a7e:	b299      	uxth	r1, r3
 8006a80:	b909      	cbnz	r1, 8006a86 <__lo0bits+0x2a>
 8006a82:	0c1b      	lsrs	r3, r3, #16
 8006a84:	2210      	movs	r2, #16
 8006a86:	b2d9      	uxtb	r1, r3
 8006a88:	b909      	cbnz	r1, 8006a8e <__lo0bits+0x32>
 8006a8a:	3208      	adds	r2, #8
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	0719      	lsls	r1, r3, #28
 8006a90:	bf04      	itt	eq
 8006a92:	091b      	lsreq	r3, r3, #4
 8006a94:	3204      	addeq	r2, #4
 8006a96:	0799      	lsls	r1, r3, #30
 8006a98:	bf04      	itt	eq
 8006a9a:	089b      	lsreq	r3, r3, #2
 8006a9c:	3202      	addeq	r2, #2
 8006a9e:	07d9      	lsls	r1, r3, #31
 8006aa0:	d403      	bmi.n	8006aaa <__lo0bits+0x4e>
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	f102 0201 	add.w	r2, r2, #1
 8006aa8:	d003      	beq.n	8006ab2 <__lo0bits+0x56>
 8006aaa:	6003      	str	r3, [r0, #0]
 8006aac:	e7e5      	b.n	8006a7a <__lo0bits+0x1e>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	e7e3      	b.n	8006a7a <__lo0bits+0x1e>
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	e7e1      	b.n	8006a7a <__lo0bits+0x1e>
	...

08006ab8 <__i2b>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	460c      	mov	r4, r1
 8006abc:	2101      	movs	r1, #1
 8006abe:	f7ff ff05 	bl	80068cc <_Balloc>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	b928      	cbnz	r0, 8006ad2 <__i2b+0x1a>
 8006ac6:	4b05      	ldr	r3, [pc, #20]	; (8006adc <__i2b+0x24>)
 8006ac8:	4805      	ldr	r0, [pc, #20]	; (8006ae0 <__i2b+0x28>)
 8006aca:	f240 1145 	movw	r1, #325	; 0x145
 8006ace:	f000 fcb7 	bl	8007440 <__assert_func>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	6144      	str	r4, [r0, #20]
 8006ad6:	6103      	str	r3, [r0, #16]
 8006ad8:	bd10      	pop	{r4, pc}
 8006ada:	bf00      	nop
 8006adc:	08007c40 	.word	0x08007c40
 8006ae0:	08007c51 	.word	0x08007c51

08006ae4 <__multiply>:
 8006ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	4691      	mov	r9, r2
 8006aea:	690a      	ldr	r2, [r1, #16]
 8006aec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	bfb8      	it	lt
 8006af4:	460b      	movlt	r3, r1
 8006af6:	460c      	mov	r4, r1
 8006af8:	bfbc      	itt	lt
 8006afa:	464c      	movlt	r4, r9
 8006afc:	4699      	movlt	r9, r3
 8006afe:	6927      	ldr	r7, [r4, #16]
 8006b00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	6861      	ldr	r1, [r4, #4]
 8006b08:	eb07 060a 	add.w	r6, r7, sl
 8006b0c:	42b3      	cmp	r3, r6
 8006b0e:	b085      	sub	sp, #20
 8006b10:	bfb8      	it	lt
 8006b12:	3101      	addlt	r1, #1
 8006b14:	f7ff feda 	bl	80068cc <_Balloc>
 8006b18:	b930      	cbnz	r0, 8006b28 <__multiply+0x44>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	4b44      	ldr	r3, [pc, #272]	; (8006c30 <__multiply+0x14c>)
 8006b1e:	4845      	ldr	r0, [pc, #276]	; (8006c34 <__multiply+0x150>)
 8006b20:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006b24:	f000 fc8c 	bl	8007440 <__assert_func>
 8006b28:	f100 0514 	add.w	r5, r0, #20
 8006b2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b30:	462b      	mov	r3, r5
 8006b32:	2200      	movs	r2, #0
 8006b34:	4543      	cmp	r3, r8
 8006b36:	d321      	bcc.n	8006b7c <__multiply+0x98>
 8006b38:	f104 0314 	add.w	r3, r4, #20
 8006b3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b40:	f109 0314 	add.w	r3, r9, #20
 8006b44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b48:	9202      	str	r2, [sp, #8]
 8006b4a:	1b3a      	subs	r2, r7, r4
 8006b4c:	3a15      	subs	r2, #21
 8006b4e:	f022 0203 	bic.w	r2, r2, #3
 8006b52:	3204      	adds	r2, #4
 8006b54:	f104 0115 	add.w	r1, r4, #21
 8006b58:	428f      	cmp	r7, r1
 8006b5a:	bf38      	it	cc
 8006b5c:	2204      	movcc	r2, #4
 8006b5e:	9201      	str	r2, [sp, #4]
 8006b60:	9a02      	ldr	r2, [sp, #8]
 8006b62:	9303      	str	r3, [sp, #12]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d80c      	bhi.n	8006b82 <__multiply+0x9e>
 8006b68:	2e00      	cmp	r6, #0
 8006b6a:	dd03      	ble.n	8006b74 <__multiply+0x90>
 8006b6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d05b      	beq.n	8006c2c <__multiply+0x148>
 8006b74:	6106      	str	r6, [r0, #16]
 8006b76:	b005      	add	sp, #20
 8006b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b7c:	f843 2b04 	str.w	r2, [r3], #4
 8006b80:	e7d8      	b.n	8006b34 <__multiply+0x50>
 8006b82:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b86:	f1ba 0f00 	cmp.w	sl, #0
 8006b8a:	d024      	beq.n	8006bd6 <__multiply+0xf2>
 8006b8c:	f104 0e14 	add.w	lr, r4, #20
 8006b90:	46a9      	mov	r9, r5
 8006b92:	f04f 0c00 	mov.w	ip, #0
 8006b96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b9a:	f8d9 1000 	ldr.w	r1, [r9]
 8006b9e:	fa1f fb82 	uxth.w	fp, r2
 8006ba2:	b289      	uxth	r1, r1
 8006ba4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ba8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006bac:	f8d9 2000 	ldr.w	r2, [r9]
 8006bb0:	4461      	add	r1, ip
 8006bb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006bba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bbe:	b289      	uxth	r1, r1
 8006bc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bc4:	4577      	cmp	r7, lr
 8006bc6:	f849 1b04 	str.w	r1, [r9], #4
 8006bca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bce:	d8e2      	bhi.n	8006b96 <__multiply+0xb2>
 8006bd0:	9a01      	ldr	r2, [sp, #4]
 8006bd2:	f845 c002 	str.w	ip, [r5, r2]
 8006bd6:	9a03      	ldr	r2, [sp, #12]
 8006bd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	f1b9 0f00 	cmp.w	r9, #0
 8006be2:	d021      	beq.n	8006c28 <__multiply+0x144>
 8006be4:	6829      	ldr	r1, [r5, #0]
 8006be6:	f104 0c14 	add.w	ip, r4, #20
 8006bea:	46ae      	mov	lr, r5
 8006bec:	f04f 0a00 	mov.w	sl, #0
 8006bf0:	f8bc b000 	ldrh.w	fp, [ip]
 8006bf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006bf8:	fb09 220b 	mla	r2, r9, fp, r2
 8006bfc:	4452      	add	r2, sl
 8006bfe:	b289      	uxth	r1, r1
 8006c00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c04:	f84e 1b04 	str.w	r1, [lr], #4
 8006c08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c10:	f8be 1000 	ldrh.w	r1, [lr]
 8006c14:	fb09 110a 	mla	r1, r9, sl, r1
 8006c18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006c1c:	4567      	cmp	r7, ip
 8006c1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c22:	d8e5      	bhi.n	8006bf0 <__multiply+0x10c>
 8006c24:	9a01      	ldr	r2, [sp, #4]
 8006c26:	50a9      	str	r1, [r5, r2]
 8006c28:	3504      	adds	r5, #4
 8006c2a:	e799      	b.n	8006b60 <__multiply+0x7c>
 8006c2c:	3e01      	subs	r6, #1
 8006c2e:	e79b      	b.n	8006b68 <__multiply+0x84>
 8006c30:	08007c40 	.word	0x08007c40
 8006c34:	08007c51 	.word	0x08007c51

08006c38 <__pow5mult>:
 8006c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c3c:	4615      	mov	r5, r2
 8006c3e:	f012 0203 	ands.w	r2, r2, #3
 8006c42:	4606      	mov	r6, r0
 8006c44:	460f      	mov	r7, r1
 8006c46:	d007      	beq.n	8006c58 <__pow5mult+0x20>
 8006c48:	4c25      	ldr	r4, [pc, #148]	; (8006ce0 <__pow5mult+0xa8>)
 8006c4a:	3a01      	subs	r2, #1
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c52:	f7ff fe9d 	bl	8006990 <__multadd>
 8006c56:	4607      	mov	r7, r0
 8006c58:	10ad      	asrs	r5, r5, #2
 8006c5a:	d03d      	beq.n	8006cd8 <__pow5mult+0xa0>
 8006c5c:	69f4      	ldr	r4, [r6, #28]
 8006c5e:	b97c      	cbnz	r4, 8006c80 <__pow5mult+0x48>
 8006c60:	2010      	movs	r0, #16
 8006c62:	f7ff fd7f 	bl	8006764 <malloc>
 8006c66:	4602      	mov	r2, r0
 8006c68:	61f0      	str	r0, [r6, #28]
 8006c6a:	b928      	cbnz	r0, 8006c78 <__pow5mult+0x40>
 8006c6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ce4 <__pow5mult+0xac>)
 8006c6e:	481e      	ldr	r0, [pc, #120]	; (8006ce8 <__pow5mult+0xb0>)
 8006c70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c74:	f000 fbe4 	bl	8007440 <__assert_func>
 8006c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c7c:	6004      	str	r4, [r0, #0]
 8006c7e:	60c4      	str	r4, [r0, #12]
 8006c80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c88:	b94c      	cbnz	r4, 8006c9e <__pow5mult+0x66>
 8006c8a:	f240 2171 	movw	r1, #625	; 0x271
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f7ff ff12 	bl	8006ab8 <__i2b>
 8006c94:	2300      	movs	r3, #0
 8006c96:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	6003      	str	r3, [r0, #0]
 8006c9e:	f04f 0900 	mov.w	r9, #0
 8006ca2:	07eb      	lsls	r3, r5, #31
 8006ca4:	d50a      	bpl.n	8006cbc <__pow5mult+0x84>
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	4622      	mov	r2, r4
 8006caa:	4630      	mov	r0, r6
 8006cac:	f7ff ff1a 	bl	8006ae4 <__multiply>
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	4680      	mov	r8, r0
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f7ff fe49 	bl	800694c <_Bfree>
 8006cba:	4647      	mov	r7, r8
 8006cbc:	106d      	asrs	r5, r5, #1
 8006cbe:	d00b      	beq.n	8006cd8 <__pow5mult+0xa0>
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	b938      	cbnz	r0, 8006cd4 <__pow5mult+0x9c>
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f7ff ff0b 	bl	8006ae4 <__multiply>
 8006cce:	6020      	str	r0, [r4, #0]
 8006cd0:	f8c0 9000 	str.w	r9, [r0]
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	e7e4      	b.n	8006ca2 <__pow5mult+0x6a>
 8006cd8:	4638      	mov	r0, r7
 8006cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cde:	bf00      	nop
 8006ce0:	08007da0 	.word	0x08007da0
 8006ce4:	08007bd1 	.word	0x08007bd1
 8006ce8:	08007c51 	.word	0x08007c51

08006cec <__lshift>:
 8006cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	6849      	ldr	r1, [r1, #4]
 8006cf4:	6923      	ldr	r3, [r4, #16]
 8006cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cfa:	68a3      	ldr	r3, [r4, #8]
 8006cfc:	4607      	mov	r7, r0
 8006cfe:	4691      	mov	r9, r2
 8006d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d04:	f108 0601 	add.w	r6, r8, #1
 8006d08:	42b3      	cmp	r3, r6
 8006d0a:	db0b      	blt.n	8006d24 <__lshift+0x38>
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7ff fddd 	bl	80068cc <_Balloc>
 8006d12:	4605      	mov	r5, r0
 8006d14:	b948      	cbnz	r0, 8006d2a <__lshift+0x3e>
 8006d16:	4602      	mov	r2, r0
 8006d18:	4b28      	ldr	r3, [pc, #160]	; (8006dbc <__lshift+0xd0>)
 8006d1a:	4829      	ldr	r0, [pc, #164]	; (8006dc0 <__lshift+0xd4>)
 8006d1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006d20:	f000 fb8e 	bl	8007440 <__assert_func>
 8006d24:	3101      	adds	r1, #1
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	e7ee      	b.n	8006d08 <__lshift+0x1c>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f100 0114 	add.w	r1, r0, #20
 8006d30:	f100 0210 	add.w	r2, r0, #16
 8006d34:	4618      	mov	r0, r3
 8006d36:	4553      	cmp	r3, sl
 8006d38:	db33      	blt.n	8006da2 <__lshift+0xb6>
 8006d3a:	6920      	ldr	r0, [r4, #16]
 8006d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d40:	f104 0314 	add.w	r3, r4, #20
 8006d44:	f019 091f 	ands.w	r9, r9, #31
 8006d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d50:	d02b      	beq.n	8006daa <__lshift+0xbe>
 8006d52:	f1c9 0e20 	rsb	lr, r9, #32
 8006d56:	468a      	mov	sl, r1
 8006d58:	2200      	movs	r2, #0
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	fa00 f009 	lsl.w	r0, r0, r9
 8006d60:	4310      	orrs	r0, r2
 8006d62:	f84a 0b04 	str.w	r0, [sl], #4
 8006d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d6a:	459c      	cmp	ip, r3
 8006d6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d70:	d8f3      	bhi.n	8006d5a <__lshift+0x6e>
 8006d72:	ebac 0304 	sub.w	r3, ip, r4
 8006d76:	3b15      	subs	r3, #21
 8006d78:	f023 0303 	bic.w	r3, r3, #3
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	f104 0015 	add.w	r0, r4, #21
 8006d82:	4584      	cmp	ip, r0
 8006d84:	bf38      	it	cc
 8006d86:	2304      	movcc	r3, #4
 8006d88:	50ca      	str	r2, [r1, r3]
 8006d8a:	b10a      	cbz	r2, 8006d90 <__lshift+0xa4>
 8006d8c:	f108 0602 	add.w	r6, r8, #2
 8006d90:	3e01      	subs	r6, #1
 8006d92:	4638      	mov	r0, r7
 8006d94:	612e      	str	r6, [r5, #16]
 8006d96:	4621      	mov	r1, r4
 8006d98:	f7ff fdd8 	bl	800694c <_Bfree>
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006da6:	3301      	adds	r3, #1
 8006da8:	e7c5      	b.n	8006d36 <__lshift+0x4a>
 8006daa:	3904      	subs	r1, #4
 8006dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006db4:	459c      	cmp	ip, r3
 8006db6:	d8f9      	bhi.n	8006dac <__lshift+0xc0>
 8006db8:	e7ea      	b.n	8006d90 <__lshift+0xa4>
 8006dba:	bf00      	nop
 8006dbc:	08007c40 	.word	0x08007c40
 8006dc0:	08007c51 	.word	0x08007c51

08006dc4 <__mcmp>:
 8006dc4:	b530      	push	{r4, r5, lr}
 8006dc6:	6902      	ldr	r2, [r0, #16]
 8006dc8:	690c      	ldr	r4, [r1, #16]
 8006dca:	1b12      	subs	r2, r2, r4
 8006dcc:	d10e      	bne.n	8006dec <__mcmp+0x28>
 8006dce:	f100 0314 	add.w	r3, r0, #20
 8006dd2:	3114      	adds	r1, #20
 8006dd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006dd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ddc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006de0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006de4:	42a5      	cmp	r5, r4
 8006de6:	d003      	beq.n	8006df0 <__mcmp+0x2c>
 8006de8:	d305      	bcc.n	8006df6 <__mcmp+0x32>
 8006dea:	2201      	movs	r2, #1
 8006dec:	4610      	mov	r0, r2
 8006dee:	bd30      	pop	{r4, r5, pc}
 8006df0:	4283      	cmp	r3, r0
 8006df2:	d3f3      	bcc.n	8006ddc <__mcmp+0x18>
 8006df4:	e7fa      	b.n	8006dec <__mcmp+0x28>
 8006df6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfa:	e7f7      	b.n	8006dec <__mcmp+0x28>

08006dfc <__mdiff>:
 8006dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e00:	460c      	mov	r4, r1
 8006e02:	4606      	mov	r6, r0
 8006e04:	4611      	mov	r1, r2
 8006e06:	4620      	mov	r0, r4
 8006e08:	4690      	mov	r8, r2
 8006e0a:	f7ff ffdb 	bl	8006dc4 <__mcmp>
 8006e0e:	1e05      	subs	r5, r0, #0
 8006e10:	d110      	bne.n	8006e34 <__mdiff+0x38>
 8006e12:	4629      	mov	r1, r5
 8006e14:	4630      	mov	r0, r6
 8006e16:	f7ff fd59 	bl	80068cc <_Balloc>
 8006e1a:	b930      	cbnz	r0, 8006e2a <__mdiff+0x2e>
 8006e1c:	4b3a      	ldr	r3, [pc, #232]	; (8006f08 <__mdiff+0x10c>)
 8006e1e:	4602      	mov	r2, r0
 8006e20:	f240 2137 	movw	r1, #567	; 0x237
 8006e24:	4839      	ldr	r0, [pc, #228]	; (8006f0c <__mdiff+0x110>)
 8006e26:	f000 fb0b 	bl	8007440 <__assert_func>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e34:	bfa4      	itt	ge
 8006e36:	4643      	movge	r3, r8
 8006e38:	46a0      	movge	r8, r4
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e40:	bfa6      	itte	ge
 8006e42:	461c      	movge	r4, r3
 8006e44:	2500      	movge	r5, #0
 8006e46:	2501      	movlt	r5, #1
 8006e48:	f7ff fd40 	bl	80068cc <_Balloc>
 8006e4c:	b920      	cbnz	r0, 8006e58 <__mdiff+0x5c>
 8006e4e:	4b2e      	ldr	r3, [pc, #184]	; (8006f08 <__mdiff+0x10c>)
 8006e50:	4602      	mov	r2, r0
 8006e52:	f240 2145 	movw	r1, #581	; 0x245
 8006e56:	e7e5      	b.n	8006e24 <__mdiff+0x28>
 8006e58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e5c:	6926      	ldr	r6, [r4, #16]
 8006e5e:	60c5      	str	r5, [r0, #12]
 8006e60:	f104 0914 	add.w	r9, r4, #20
 8006e64:	f108 0514 	add.w	r5, r8, #20
 8006e68:	f100 0e14 	add.w	lr, r0, #20
 8006e6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e74:	f108 0210 	add.w	r2, r8, #16
 8006e78:	46f2      	mov	sl, lr
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e84:	fa11 f88b 	uxtah	r8, r1, fp
 8006e88:	b299      	uxth	r1, r3
 8006e8a:	0c1b      	lsrs	r3, r3, #16
 8006e8c:	eba8 0801 	sub.w	r8, r8, r1
 8006e90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e98:	fa1f f888 	uxth.w	r8, r8
 8006e9c:	1419      	asrs	r1, r3, #16
 8006e9e:	454e      	cmp	r6, r9
 8006ea0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ea4:	f84a 3b04 	str.w	r3, [sl], #4
 8006ea8:	d8e8      	bhi.n	8006e7c <__mdiff+0x80>
 8006eaa:	1b33      	subs	r3, r6, r4
 8006eac:	3b15      	subs	r3, #21
 8006eae:	f023 0303 	bic.w	r3, r3, #3
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	3415      	adds	r4, #21
 8006eb6:	42a6      	cmp	r6, r4
 8006eb8:	bf38      	it	cc
 8006eba:	2304      	movcc	r3, #4
 8006ebc:	441d      	add	r5, r3
 8006ebe:	4473      	add	r3, lr
 8006ec0:	469e      	mov	lr, r3
 8006ec2:	462e      	mov	r6, r5
 8006ec4:	4566      	cmp	r6, ip
 8006ec6:	d30e      	bcc.n	8006ee6 <__mdiff+0xea>
 8006ec8:	f10c 0203 	add.w	r2, ip, #3
 8006ecc:	1b52      	subs	r2, r2, r5
 8006ece:	f022 0203 	bic.w	r2, r2, #3
 8006ed2:	3d03      	subs	r5, #3
 8006ed4:	45ac      	cmp	ip, r5
 8006ed6:	bf38      	it	cc
 8006ed8:	2200      	movcc	r2, #0
 8006eda:	4413      	add	r3, r2
 8006edc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006ee0:	b17a      	cbz	r2, 8006f02 <__mdiff+0x106>
 8006ee2:	6107      	str	r7, [r0, #16]
 8006ee4:	e7a4      	b.n	8006e30 <__mdiff+0x34>
 8006ee6:	f856 8b04 	ldr.w	r8, [r6], #4
 8006eea:	fa11 f288 	uxtah	r2, r1, r8
 8006eee:	1414      	asrs	r4, r2, #16
 8006ef0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ef4:	b292      	uxth	r2, r2
 8006ef6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006efa:	f84e 2b04 	str.w	r2, [lr], #4
 8006efe:	1421      	asrs	r1, r4, #16
 8006f00:	e7e0      	b.n	8006ec4 <__mdiff+0xc8>
 8006f02:	3f01      	subs	r7, #1
 8006f04:	e7ea      	b.n	8006edc <__mdiff+0xe0>
 8006f06:	bf00      	nop
 8006f08:	08007c40 	.word	0x08007c40
 8006f0c:	08007c51 	.word	0x08007c51

08006f10 <__d2b>:
 8006f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f14:	460f      	mov	r7, r1
 8006f16:	2101      	movs	r1, #1
 8006f18:	ec59 8b10 	vmov	r8, r9, d0
 8006f1c:	4616      	mov	r6, r2
 8006f1e:	f7ff fcd5 	bl	80068cc <_Balloc>
 8006f22:	4604      	mov	r4, r0
 8006f24:	b930      	cbnz	r0, 8006f34 <__d2b+0x24>
 8006f26:	4602      	mov	r2, r0
 8006f28:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <__d2b+0xac>)
 8006f2a:	4825      	ldr	r0, [pc, #148]	; (8006fc0 <__d2b+0xb0>)
 8006f2c:	f240 310f 	movw	r1, #783	; 0x30f
 8006f30:	f000 fa86 	bl	8007440 <__assert_func>
 8006f34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f3c:	bb2d      	cbnz	r5, 8006f8a <__d2b+0x7a>
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	f1b8 0300 	subs.w	r3, r8, #0
 8006f44:	d026      	beq.n	8006f94 <__d2b+0x84>
 8006f46:	4668      	mov	r0, sp
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	f7ff fd87 	bl	8006a5c <__lo0bits>
 8006f4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f52:	b1e8      	cbz	r0, 8006f90 <__d2b+0x80>
 8006f54:	f1c0 0320 	rsb	r3, r0, #32
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	40c2      	lsrs	r2, r0
 8006f60:	6163      	str	r3, [r4, #20]
 8006f62:	9201      	str	r2, [sp, #4]
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	61a3      	str	r3, [r4, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf14      	ite	ne
 8006f6c:	2202      	movne	r2, #2
 8006f6e:	2201      	moveq	r2, #1
 8006f70:	6122      	str	r2, [r4, #16]
 8006f72:	b1bd      	cbz	r5, 8006fa4 <__d2b+0x94>
 8006f74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f78:	4405      	add	r5, r0
 8006f7a:	603d      	str	r5, [r7, #0]
 8006f7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f80:	6030      	str	r0, [r6, #0]
 8006f82:	4620      	mov	r0, r4
 8006f84:	b003      	add	sp, #12
 8006f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f8e:	e7d6      	b.n	8006f3e <__d2b+0x2e>
 8006f90:	6161      	str	r1, [r4, #20]
 8006f92:	e7e7      	b.n	8006f64 <__d2b+0x54>
 8006f94:	a801      	add	r0, sp, #4
 8006f96:	f7ff fd61 	bl	8006a5c <__lo0bits>
 8006f9a:	9b01      	ldr	r3, [sp, #4]
 8006f9c:	6163      	str	r3, [r4, #20]
 8006f9e:	3020      	adds	r0, #32
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	e7e5      	b.n	8006f70 <__d2b+0x60>
 8006fa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fac:	6038      	str	r0, [r7, #0]
 8006fae:	6918      	ldr	r0, [r3, #16]
 8006fb0:	f7ff fd34 	bl	8006a1c <__hi0bits>
 8006fb4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fb8:	e7e2      	b.n	8006f80 <__d2b+0x70>
 8006fba:	bf00      	nop
 8006fbc:	08007c40 	.word	0x08007c40
 8006fc0:	08007c51 	.word	0x08007c51

08006fc4 <__ssputs_r>:
 8006fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc8:	688e      	ldr	r6, [r1, #8]
 8006fca:	461f      	mov	r7, r3
 8006fcc:	42be      	cmp	r6, r7
 8006fce:	680b      	ldr	r3, [r1, #0]
 8006fd0:	4682      	mov	sl, r0
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	4690      	mov	r8, r2
 8006fd6:	d82c      	bhi.n	8007032 <__ssputs_r+0x6e>
 8006fd8:	898a      	ldrh	r2, [r1, #12]
 8006fda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fde:	d026      	beq.n	800702e <__ssputs_r+0x6a>
 8006fe0:	6965      	ldr	r5, [r4, #20]
 8006fe2:	6909      	ldr	r1, [r1, #16]
 8006fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fe8:	eba3 0901 	sub.w	r9, r3, r1
 8006fec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ff0:	1c7b      	adds	r3, r7, #1
 8006ff2:	444b      	add	r3, r9
 8006ff4:	106d      	asrs	r5, r5, #1
 8006ff6:	429d      	cmp	r5, r3
 8006ff8:	bf38      	it	cc
 8006ffa:	461d      	movcc	r5, r3
 8006ffc:	0553      	lsls	r3, r2, #21
 8006ffe:	d527      	bpl.n	8007050 <__ssputs_r+0x8c>
 8007000:	4629      	mov	r1, r5
 8007002:	f7ff fbd7 	bl	80067b4 <_malloc_r>
 8007006:	4606      	mov	r6, r0
 8007008:	b360      	cbz	r0, 8007064 <__ssputs_r+0xa0>
 800700a:	6921      	ldr	r1, [r4, #16]
 800700c:	464a      	mov	r2, r9
 800700e:	f000 fa09 	bl	8007424 <memcpy>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701c:	81a3      	strh	r3, [r4, #12]
 800701e:	6126      	str	r6, [r4, #16]
 8007020:	6165      	str	r5, [r4, #20]
 8007022:	444e      	add	r6, r9
 8007024:	eba5 0509 	sub.w	r5, r5, r9
 8007028:	6026      	str	r6, [r4, #0]
 800702a:	60a5      	str	r5, [r4, #8]
 800702c:	463e      	mov	r6, r7
 800702e:	42be      	cmp	r6, r7
 8007030:	d900      	bls.n	8007034 <__ssputs_r+0x70>
 8007032:	463e      	mov	r6, r7
 8007034:	6820      	ldr	r0, [r4, #0]
 8007036:	4632      	mov	r2, r6
 8007038:	4641      	mov	r1, r8
 800703a:	f000 f9c9 	bl	80073d0 <memmove>
 800703e:	68a3      	ldr	r3, [r4, #8]
 8007040:	1b9b      	subs	r3, r3, r6
 8007042:	60a3      	str	r3, [r4, #8]
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	4433      	add	r3, r6
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	2000      	movs	r0, #0
 800704c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007050:	462a      	mov	r2, r5
 8007052:	f000 fa3b 	bl	80074cc <_realloc_r>
 8007056:	4606      	mov	r6, r0
 8007058:	2800      	cmp	r0, #0
 800705a:	d1e0      	bne.n	800701e <__ssputs_r+0x5a>
 800705c:	6921      	ldr	r1, [r4, #16]
 800705e:	4650      	mov	r0, sl
 8007060:	f7ff fb34 	bl	80066cc <_free_r>
 8007064:	230c      	movs	r3, #12
 8007066:	f8ca 3000 	str.w	r3, [sl]
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	f04f 30ff 	mov.w	r0, #4294967295
 8007076:	e7e9      	b.n	800704c <__ssputs_r+0x88>

08007078 <_svfiprintf_r>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	4698      	mov	r8, r3
 800707e:	898b      	ldrh	r3, [r1, #12]
 8007080:	061b      	lsls	r3, r3, #24
 8007082:	b09d      	sub	sp, #116	; 0x74
 8007084:	4607      	mov	r7, r0
 8007086:	460d      	mov	r5, r1
 8007088:	4614      	mov	r4, r2
 800708a:	d50e      	bpl.n	80070aa <_svfiprintf_r+0x32>
 800708c:	690b      	ldr	r3, [r1, #16]
 800708e:	b963      	cbnz	r3, 80070aa <_svfiprintf_r+0x32>
 8007090:	2140      	movs	r1, #64	; 0x40
 8007092:	f7ff fb8f 	bl	80067b4 <_malloc_r>
 8007096:	6028      	str	r0, [r5, #0]
 8007098:	6128      	str	r0, [r5, #16]
 800709a:	b920      	cbnz	r0, 80070a6 <_svfiprintf_r+0x2e>
 800709c:	230c      	movs	r3, #12
 800709e:	603b      	str	r3, [r7, #0]
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	e0d0      	b.n	8007248 <_svfiprintf_r+0x1d0>
 80070a6:	2340      	movs	r3, #64	; 0x40
 80070a8:	616b      	str	r3, [r5, #20]
 80070aa:	2300      	movs	r3, #0
 80070ac:	9309      	str	r3, [sp, #36]	; 0x24
 80070ae:	2320      	movs	r3, #32
 80070b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b8:	2330      	movs	r3, #48	; 0x30
 80070ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007260 <_svfiprintf_r+0x1e8>
 80070be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070c2:	f04f 0901 	mov.w	r9, #1
 80070c6:	4623      	mov	r3, r4
 80070c8:	469a      	mov	sl, r3
 80070ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070ce:	b10a      	cbz	r2, 80070d4 <_svfiprintf_r+0x5c>
 80070d0:	2a25      	cmp	r2, #37	; 0x25
 80070d2:	d1f9      	bne.n	80070c8 <_svfiprintf_r+0x50>
 80070d4:	ebba 0b04 	subs.w	fp, sl, r4
 80070d8:	d00b      	beq.n	80070f2 <_svfiprintf_r+0x7a>
 80070da:	465b      	mov	r3, fp
 80070dc:	4622      	mov	r2, r4
 80070de:	4629      	mov	r1, r5
 80070e0:	4638      	mov	r0, r7
 80070e2:	f7ff ff6f 	bl	8006fc4 <__ssputs_r>
 80070e6:	3001      	adds	r0, #1
 80070e8:	f000 80a9 	beq.w	800723e <_svfiprintf_r+0x1c6>
 80070ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ee:	445a      	add	r2, fp
 80070f0:	9209      	str	r2, [sp, #36]	; 0x24
 80070f2:	f89a 3000 	ldrb.w	r3, [sl]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 80a1 	beq.w	800723e <_svfiprintf_r+0x1c6>
 80070fc:	2300      	movs	r3, #0
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007106:	f10a 0a01 	add.w	sl, sl, #1
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	9307      	str	r3, [sp, #28]
 800710e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007112:	931a      	str	r3, [sp, #104]	; 0x68
 8007114:	4654      	mov	r4, sl
 8007116:	2205      	movs	r2, #5
 8007118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711c:	4850      	ldr	r0, [pc, #320]	; (8007260 <_svfiprintf_r+0x1e8>)
 800711e:	f7f9 f85f 	bl	80001e0 <memchr>
 8007122:	9a04      	ldr	r2, [sp, #16]
 8007124:	b9d8      	cbnz	r0, 800715e <_svfiprintf_r+0xe6>
 8007126:	06d0      	lsls	r0, r2, #27
 8007128:	bf44      	itt	mi
 800712a:	2320      	movmi	r3, #32
 800712c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007130:	0711      	lsls	r1, r2, #28
 8007132:	bf44      	itt	mi
 8007134:	232b      	movmi	r3, #43	; 0x2b
 8007136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800713a:	f89a 3000 	ldrb.w	r3, [sl]
 800713e:	2b2a      	cmp	r3, #42	; 0x2a
 8007140:	d015      	beq.n	800716e <_svfiprintf_r+0xf6>
 8007142:	9a07      	ldr	r2, [sp, #28]
 8007144:	4654      	mov	r4, sl
 8007146:	2000      	movs	r0, #0
 8007148:	f04f 0c0a 	mov.w	ip, #10
 800714c:	4621      	mov	r1, r4
 800714e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007152:	3b30      	subs	r3, #48	; 0x30
 8007154:	2b09      	cmp	r3, #9
 8007156:	d94d      	bls.n	80071f4 <_svfiprintf_r+0x17c>
 8007158:	b1b0      	cbz	r0, 8007188 <_svfiprintf_r+0x110>
 800715a:	9207      	str	r2, [sp, #28]
 800715c:	e014      	b.n	8007188 <_svfiprintf_r+0x110>
 800715e:	eba0 0308 	sub.w	r3, r0, r8
 8007162:	fa09 f303 	lsl.w	r3, r9, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	9304      	str	r3, [sp, #16]
 800716a:	46a2      	mov	sl, r4
 800716c:	e7d2      	b.n	8007114 <_svfiprintf_r+0x9c>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	1d19      	adds	r1, r3, #4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	9103      	str	r1, [sp, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfbb      	ittet	lt
 800717a:	425b      	neglt	r3, r3
 800717c:	f042 0202 	orrlt.w	r2, r2, #2
 8007180:	9307      	strge	r3, [sp, #28]
 8007182:	9307      	strlt	r3, [sp, #28]
 8007184:	bfb8      	it	lt
 8007186:	9204      	strlt	r2, [sp, #16]
 8007188:	7823      	ldrb	r3, [r4, #0]
 800718a:	2b2e      	cmp	r3, #46	; 0x2e
 800718c:	d10c      	bne.n	80071a8 <_svfiprintf_r+0x130>
 800718e:	7863      	ldrb	r3, [r4, #1]
 8007190:	2b2a      	cmp	r3, #42	; 0x2a
 8007192:	d134      	bne.n	80071fe <_svfiprintf_r+0x186>
 8007194:	9b03      	ldr	r3, [sp, #12]
 8007196:	1d1a      	adds	r2, r3, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	9203      	str	r2, [sp, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	bfb8      	it	lt
 80071a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80071a4:	3402      	adds	r4, #2
 80071a6:	9305      	str	r3, [sp, #20]
 80071a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007270 <_svfiprintf_r+0x1f8>
 80071ac:	7821      	ldrb	r1, [r4, #0]
 80071ae:	2203      	movs	r2, #3
 80071b0:	4650      	mov	r0, sl
 80071b2:	f7f9 f815 	bl	80001e0 <memchr>
 80071b6:	b138      	cbz	r0, 80071c8 <_svfiprintf_r+0x150>
 80071b8:	9b04      	ldr	r3, [sp, #16]
 80071ba:	eba0 000a 	sub.w	r0, r0, sl
 80071be:	2240      	movs	r2, #64	; 0x40
 80071c0:	4082      	lsls	r2, r0
 80071c2:	4313      	orrs	r3, r2
 80071c4:	3401      	adds	r4, #1
 80071c6:	9304      	str	r3, [sp, #16]
 80071c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071cc:	4825      	ldr	r0, [pc, #148]	; (8007264 <_svfiprintf_r+0x1ec>)
 80071ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071d2:	2206      	movs	r2, #6
 80071d4:	f7f9 f804 	bl	80001e0 <memchr>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d038      	beq.n	800724e <_svfiprintf_r+0x1d6>
 80071dc:	4b22      	ldr	r3, [pc, #136]	; (8007268 <_svfiprintf_r+0x1f0>)
 80071de:	bb1b      	cbnz	r3, 8007228 <_svfiprintf_r+0x1b0>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	3307      	adds	r3, #7
 80071e4:	f023 0307 	bic.w	r3, r3, #7
 80071e8:	3308      	adds	r3, #8
 80071ea:	9303      	str	r3, [sp, #12]
 80071ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ee:	4433      	add	r3, r6
 80071f0:	9309      	str	r3, [sp, #36]	; 0x24
 80071f2:	e768      	b.n	80070c6 <_svfiprintf_r+0x4e>
 80071f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071f8:	460c      	mov	r4, r1
 80071fa:	2001      	movs	r0, #1
 80071fc:	e7a6      	b.n	800714c <_svfiprintf_r+0xd4>
 80071fe:	2300      	movs	r3, #0
 8007200:	3401      	adds	r4, #1
 8007202:	9305      	str	r3, [sp, #20]
 8007204:	4619      	mov	r1, r3
 8007206:	f04f 0c0a 	mov.w	ip, #10
 800720a:	4620      	mov	r0, r4
 800720c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007210:	3a30      	subs	r2, #48	; 0x30
 8007212:	2a09      	cmp	r2, #9
 8007214:	d903      	bls.n	800721e <_svfiprintf_r+0x1a6>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0c6      	beq.n	80071a8 <_svfiprintf_r+0x130>
 800721a:	9105      	str	r1, [sp, #20]
 800721c:	e7c4      	b.n	80071a8 <_svfiprintf_r+0x130>
 800721e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007222:	4604      	mov	r4, r0
 8007224:	2301      	movs	r3, #1
 8007226:	e7f0      	b.n	800720a <_svfiprintf_r+0x192>
 8007228:	ab03      	add	r3, sp, #12
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	462a      	mov	r2, r5
 800722e:	4b0f      	ldr	r3, [pc, #60]	; (800726c <_svfiprintf_r+0x1f4>)
 8007230:	a904      	add	r1, sp, #16
 8007232:	4638      	mov	r0, r7
 8007234:	f7fd fe62 	bl	8004efc <_printf_float>
 8007238:	1c42      	adds	r2, r0, #1
 800723a:	4606      	mov	r6, r0
 800723c:	d1d6      	bne.n	80071ec <_svfiprintf_r+0x174>
 800723e:	89ab      	ldrh	r3, [r5, #12]
 8007240:	065b      	lsls	r3, r3, #25
 8007242:	f53f af2d 	bmi.w	80070a0 <_svfiprintf_r+0x28>
 8007246:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007248:	b01d      	add	sp, #116	; 0x74
 800724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724e:	ab03      	add	r3, sp, #12
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	462a      	mov	r2, r5
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <_svfiprintf_r+0x1f4>)
 8007256:	a904      	add	r1, sp, #16
 8007258:	4638      	mov	r0, r7
 800725a:	f7fe f8f3 	bl	8005444 <_printf_i>
 800725e:	e7eb      	b.n	8007238 <_svfiprintf_r+0x1c0>
 8007260:	08007dac 	.word	0x08007dac
 8007264:	08007db6 	.word	0x08007db6
 8007268:	08004efd 	.word	0x08004efd
 800726c:	08006fc5 	.word	0x08006fc5
 8007270:	08007db2 	.word	0x08007db2

08007274 <__sflush_r>:
 8007274:	898a      	ldrh	r2, [r1, #12]
 8007276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727a:	4605      	mov	r5, r0
 800727c:	0710      	lsls	r0, r2, #28
 800727e:	460c      	mov	r4, r1
 8007280:	d458      	bmi.n	8007334 <__sflush_r+0xc0>
 8007282:	684b      	ldr	r3, [r1, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	dc05      	bgt.n	8007294 <__sflush_r+0x20>
 8007288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800728a:	2b00      	cmp	r3, #0
 800728c:	dc02      	bgt.n	8007294 <__sflush_r+0x20>
 800728e:	2000      	movs	r0, #0
 8007290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007296:	2e00      	cmp	r6, #0
 8007298:	d0f9      	beq.n	800728e <__sflush_r+0x1a>
 800729a:	2300      	movs	r3, #0
 800729c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072a0:	682f      	ldr	r7, [r5, #0]
 80072a2:	6a21      	ldr	r1, [r4, #32]
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	d032      	beq.n	800730e <__sflush_r+0x9a>
 80072a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	075a      	lsls	r2, r3, #29
 80072ae:	d505      	bpl.n	80072bc <__sflush_r+0x48>
 80072b0:	6863      	ldr	r3, [r4, #4]
 80072b2:	1ac0      	subs	r0, r0, r3
 80072b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072b6:	b10b      	cbz	r3, 80072bc <__sflush_r+0x48>
 80072b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072ba:	1ac0      	subs	r0, r0, r3
 80072bc:	2300      	movs	r3, #0
 80072be:	4602      	mov	r2, r0
 80072c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072c2:	6a21      	ldr	r1, [r4, #32]
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b0      	blx	r6
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	d106      	bne.n	80072dc <__sflush_r+0x68>
 80072ce:	6829      	ldr	r1, [r5, #0]
 80072d0:	291d      	cmp	r1, #29
 80072d2:	d82b      	bhi.n	800732c <__sflush_r+0xb8>
 80072d4:	4a29      	ldr	r2, [pc, #164]	; (800737c <__sflush_r+0x108>)
 80072d6:	410a      	asrs	r2, r1
 80072d8:	07d6      	lsls	r6, r2, #31
 80072da:	d427      	bmi.n	800732c <__sflush_r+0xb8>
 80072dc:	2200      	movs	r2, #0
 80072de:	6062      	str	r2, [r4, #4]
 80072e0:	04d9      	lsls	r1, r3, #19
 80072e2:	6922      	ldr	r2, [r4, #16]
 80072e4:	6022      	str	r2, [r4, #0]
 80072e6:	d504      	bpl.n	80072f2 <__sflush_r+0x7e>
 80072e8:	1c42      	adds	r2, r0, #1
 80072ea:	d101      	bne.n	80072f0 <__sflush_r+0x7c>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	b903      	cbnz	r3, 80072f2 <__sflush_r+0x7e>
 80072f0:	6560      	str	r0, [r4, #84]	; 0x54
 80072f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072f4:	602f      	str	r7, [r5, #0]
 80072f6:	2900      	cmp	r1, #0
 80072f8:	d0c9      	beq.n	800728e <__sflush_r+0x1a>
 80072fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072fe:	4299      	cmp	r1, r3
 8007300:	d002      	beq.n	8007308 <__sflush_r+0x94>
 8007302:	4628      	mov	r0, r5
 8007304:	f7ff f9e2 	bl	80066cc <_free_r>
 8007308:	2000      	movs	r0, #0
 800730a:	6360      	str	r0, [r4, #52]	; 0x34
 800730c:	e7c0      	b.n	8007290 <__sflush_r+0x1c>
 800730e:	2301      	movs	r3, #1
 8007310:	4628      	mov	r0, r5
 8007312:	47b0      	blx	r6
 8007314:	1c41      	adds	r1, r0, #1
 8007316:	d1c8      	bne.n	80072aa <__sflush_r+0x36>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0c5      	beq.n	80072aa <__sflush_r+0x36>
 800731e:	2b1d      	cmp	r3, #29
 8007320:	d001      	beq.n	8007326 <__sflush_r+0xb2>
 8007322:	2b16      	cmp	r3, #22
 8007324:	d101      	bne.n	800732a <__sflush_r+0xb6>
 8007326:	602f      	str	r7, [r5, #0]
 8007328:	e7b1      	b.n	800728e <__sflush_r+0x1a>
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	e7ad      	b.n	8007290 <__sflush_r+0x1c>
 8007334:	690f      	ldr	r7, [r1, #16]
 8007336:	2f00      	cmp	r7, #0
 8007338:	d0a9      	beq.n	800728e <__sflush_r+0x1a>
 800733a:	0793      	lsls	r3, r2, #30
 800733c:	680e      	ldr	r6, [r1, #0]
 800733e:	bf08      	it	eq
 8007340:	694b      	ldreq	r3, [r1, #20]
 8007342:	600f      	str	r7, [r1, #0]
 8007344:	bf18      	it	ne
 8007346:	2300      	movne	r3, #0
 8007348:	eba6 0807 	sub.w	r8, r6, r7
 800734c:	608b      	str	r3, [r1, #8]
 800734e:	f1b8 0f00 	cmp.w	r8, #0
 8007352:	dd9c      	ble.n	800728e <__sflush_r+0x1a>
 8007354:	6a21      	ldr	r1, [r4, #32]
 8007356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007358:	4643      	mov	r3, r8
 800735a:	463a      	mov	r2, r7
 800735c:	4628      	mov	r0, r5
 800735e:	47b0      	blx	r6
 8007360:	2800      	cmp	r0, #0
 8007362:	dc06      	bgt.n	8007372 <__sflush_r+0xfe>
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	e78e      	b.n	8007290 <__sflush_r+0x1c>
 8007372:	4407      	add	r7, r0
 8007374:	eba8 0800 	sub.w	r8, r8, r0
 8007378:	e7e9      	b.n	800734e <__sflush_r+0xda>
 800737a:	bf00      	nop
 800737c:	dfbffffe 	.word	0xdfbffffe

08007380 <_fflush_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	690b      	ldr	r3, [r1, #16]
 8007384:	4605      	mov	r5, r0
 8007386:	460c      	mov	r4, r1
 8007388:	b913      	cbnz	r3, 8007390 <_fflush_r+0x10>
 800738a:	2500      	movs	r5, #0
 800738c:	4628      	mov	r0, r5
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	b118      	cbz	r0, 800739a <_fflush_r+0x1a>
 8007392:	6a03      	ldr	r3, [r0, #32]
 8007394:	b90b      	cbnz	r3, 800739a <_fflush_r+0x1a>
 8007396:	f7fe fa03 	bl	80057a0 <__sinit>
 800739a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0f3      	beq.n	800738a <_fflush_r+0xa>
 80073a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073a4:	07d0      	lsls	r0, r2, #31
 80073a6:	d404      	bmi.n	80073b2 <_fflush_r+0x32>
 80073a8:	0599      	lsls	r1, r3, #22
 80073aa:	d402      	bmi.n	80073b2 <_fflush_r+0x32>
 80073ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ae:	f7fe fb0e 	bl	80059ce <__retarget_lock_acquire_recursive>
 80073b2:	4628      	mov	r0, r5
 80073b4:	4621      	mov	r1, r4
 80073b6:	f7ff ff5d 	bl	8007274 <__sflush_r>
 80073ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073bc:	07da      	lsls	r2, r3, #31
 80073be:	4605      	mov	r5, r0
 80073c0:	d4e4      	bmi.n	800738c <_fflush_r+0xc>
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	059b      	lsls	r3, r3, #22
 80073c6:	d4e1      	bmi.n	800738c <_fflush_r+0xc>
 80073c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ca:	f7fe fb01 	bl	80059d0 <__retarget_lock_release_recursive>
 80073ce:	e7dd      	b.n	800738c <_fflush_r+0xc>

080073d0 <memmove>:
 80073d0:	4288      	cmp	r0, r1
 80073d2:	b510      	push	{r4, lr}
 80073d4:	eb01 0402 	add.w	r4, r1, r2
 80073d8:	d902      	bls.n	80073e0 <memmove+0x10>
 80073da:	4284      	cmp	r4, r0
 80073dc:	4623      	mov	r3, r4
 80073de:	d807      	bhi.n	80073f0 <memmove+0x20>
 80073e0:	1e43      	subs	r3, r0, #1
 80073e2:	42a1      	cmp	r1, r4
 80073e4:	d008      	beq.n	80073f8 <memmove+0x28>
 80073e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ee:	e7f8      	b.n	80073e2 <memmove+0x12>
 80073f0:	4402      	add	r2, r0
 80073f2:	4601      	mov	r1, r0
 80073f4:	428a      	cmp	r2, r1
 80073f6:	d100      	bne.n	80073fa <memmove+0x2a>
 80073f8:	bd10      	pop	{r4, pc}
 80073fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007402:	e7f7      	b.n	80073f4 <memmove+0x24>

08007404 <_sbrk_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4d06      	ldr	r5, [pc, #24]	; (8007420 <_sbrk_r+0x1c>)
 8007408:	2300      	movs	r3, #0
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	f7fa f9d8 	bl	80017c4 <_sbrk>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_sbrk_r+0x1a>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_sbrk_r+0x1a>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	20000410 	.word	0x20000410

08007424 <memcpy>:
 8007424:	440a      	add	r2, r1
 8007426:	4291      	cmp	r1, r2
 8007428:	f100 33ff 	add.w	r3, r0, #4294967295
 800742c:	d100      	bne.n	8007430 <memcpy+0xc>
 800742e:	4770      	bx	lr
 8007430:	b510      	push	{r4, lr}
 8007432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800743a:	4291      	cmp	r1, r2
 800743c:	d1f9      	bne.n	8007432 <memcpy+0xe>
 800743e:	bd10      	pop	{r4, pc}

08007440 <__assert_func>:
 8007440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007442:	4614      	mov	r4, r2
 8007444:	461a      	mov	r2, r3
 8007446:	4b09      	ldr	r3, [pc, #36]	; (800746c <__assert_func+0x2c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4605      	mov	r5, r0
 800744c:	68d8      	ldr	r0, [r3, #12]
 800744e:	b14c      	cbz	r4, 8007464 <__assert_func+0x24>
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <__assert_func+0x30>)
 8007452:	9100      	str	r1, [sp, #0]
 8007454:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007458:	4906      	ldr	r1, [pc, #24]	; (8007474 <__assert_func+0x34>)
 800745a:	462b      	mov	r3, r5
 800745c:	f000 f872 	bl	8007544 <fiprintf>
 8007460:	f000 f882 	bl	8007568 <abort>
 8007464:	4b04      	ldr	r3, [pc, #16]	; (8007478 <__assert_func+0x38>)
 8007466:	461c      	mov	r4, r3
 8007468:	e7f3      	b.n	8007452 <__assert_func+0x12>
 800746a:	bf00      	nop
 800746c:	20000064 	.word	0x20000064
 8007470:	08007dc7 	.word	0x08007dc7
 8007474:	08007dd4 	.word	0x08007dd4
 8007478:	08007e02 	.word	0x08007e02

0800747c <_calloc_r>:
 800747c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800747e:	fba1 2402 	umull	r2, r4, r1, r2
 8007482:	b94c      	cbnz	r4, 8007498 <_calloc_r+0x1c>
 8007484:	4611      	mov	r1, r2
 8007486:	9201      	str	r2, [sp, #4]
 8007488:	f7ff f994 	bl	80067b4 <_malloc_r>
 800748c:	9a01      	ldr	r2, [sp, #4]
 800748e:	4605      	mov	r5, r0
 8007490:	b930      	cbnz	r0, 80074a0 <_calloc_r+0x24>
 8007492:	4628      	mov	r0, r5
 8007494:	b003      	add	sp, #12
 8007496:	bd30      	pop	{r4, r5, pc}
 8007498:	220c      	movs	r2, #12
 800749a:	6002      	str	r2, [r0, #0]
 800749c:	2500      	movs	r5, #0
 800749e:	e7f8      	b.n	8007492 <_calloc_r+0x16>
 80074a0:	4621      	mov	r1, r4
 80074a2:	f7fe fa16 	bl	80058d2 <memset>
 80074a6:	e7f4      	b.n	8007492 <_calloc_r+0x16>

080074a8 <__ascii_mbtowc>:
 80074a8:	b082      	sub	sp, #8
 80074aa:	b901      	cbnz	r1, 80074ae <__ascii_mbtowc+0x6>
 80074ac:	a901      	add	r1, sp, #4
 80074ae:	b142      	cbz	r2, 80074c2 <__ascii_mbtowc+0x1a>
 80074b0:	b14b      	cbz	r3, 80074c6 <__ascii_mbtowc+0x1e>
 80074b2:	7813      	ldrb	r3, [r2, #0]
 80074b4:	600b      	str	r3, [r1, #0]
 80074b6:	7812      	ldrb	r2, [r2, #0]
 80074b8:	1e10      	subs	r0, r2, #0
 80074ba:	bf18      	it	ne
 80074bc:	2001      	movne	r0, #1
 80074be:	b002      	add	sp, #8
 80074c0:	4770      	bx	lr
 80074c2:	4610      	mov	r0, r2
 80074c4:	e7fb      	b.n	80074be <__ascii_mbtowc+0x16>
 80074c6:	f06f 0001 	mvn.w	r0, #1
 80074ca:	e7f8      	b.n	80074be <__ascii_mbtowc+0x16>

080074cc <_realloc_r>:
 80074cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d0:	4680      	mov	r8, r0
 80074d2:	4614      	mov	r4, r2
 80074d4:	460e      	mov	r6, r1
 80074d6:	b921      	cbnz	r1, 80074e2 <_realloc_r+0x16>
 80074d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074dc:	4611      	mov	r1, r2
 80074de:	f7ff b969 	b.w	80067b4 <_malloc_r>
 80074e2:	b92a      	cbnz	r2, 80074f0 <_realloc_r+0x24>
 80074e4:	f7ff f8f2 	bl	80066cc <_free_r>
 80074e8:	4625      	mov	r5, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f0:	f000 f841 	bl	8007576 <_malloc_usable_size_r>
 80074f4:	4284      	cmp	r4, r0
 80074f6:	4607      	mov	r7, r0
 80074f8:	d802      	bhi.n	8007500 <_realloc_r+0x34>
 80074fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074fe:	d812      	bhi.n	8007526 <_realloc_r+0x5a>
 8007500:	4621      	mov	r1, r4
 8007502:	4640      	mov	r0, r8
 8007504:	f7ff f956 	bl	80067b4 <_malloc_r>
 8007508:	4605      	mov	r5, r0
 800750a:	2800      	cmp	r0, #0
 800750c:	d0ed      	beq.n	80074ea <_realloc_r+0x1e>
 800750e:	42bc      	cmp	r4, r7
 8007510:	4622      	mov	r2, r4
 8007512:	4631      	mov	r1, r6
 8007514:	bf28      	it	cs
 8007516:	463a      	movcs	r2, r7
 8007518:	f7ff ff84 	bl	8007424 <memcpy>
 800751c:	4631      	mov	r1, r6
 800751e:	4640      	mov	r0, r8
 8007520:	f7ff f8d4 	bl	80066cc <_free_r>
 8007524:	e7e1      	b.n	80074ea <_realloc_r+0x1e>
 8007526:	4635      	mov	r5, r6
 8007528:	e7df      	b.n	80074ea <_realloc_r+0x1e>

0800752a <__ascii_wctomb>:
 800752a:	b149      	cbz	r1, 8007540 <__ascii_wctomb+0x16>
 800752c:	2aff      	cmp	r2, #255	; 0xff
 800752e:	bf85      	ittet	hi
 8007530:	238a      	movhi	r3, #138	; 0x8a
 8007532:	6003      	strhi	r3, [r0, #0]
 8007534:	700a      	strbls	r2, [r1, #0]
 8007536:	f04f 30ff 	movhi.w	r0, #4294967295
 800753a:	bf98      	it	ls
 800753c:	2001      	movls	r0, #1
 800753e:	4770      	bx	lr
 8007540:	4608      	mov	r0, r1
 8007542:	4770      	bx	lr

08007544 <fiprintf>:
 8007544:	b40e      	push	{r1, r2, r3}
 8007546:	b503      	push	{r0, r1, lr}
 8007548:	4601      	mov	r1, r0
 800754a:	ab03      	add	r3, sp, #12
 800754c:	4805      	ldr	r0, [pc, #20]	; (8007564 <fiprintf+0x20>)
 800754e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007552:	6800      	ldr	r0, [r0, #0]
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	f000 f83f 	bl	80075d8 <_vfiprintf_r>
 800755a:	b002      	add	sp, #8
 800755c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007560:	b003      	add	sp, #12
 8007562:	4770      	bx	lr
 8007564:	20000064 	.word	0x20000064

08007568 <abort>:
 8007568:	b508      	push	{r3, lr}
 800756a:	2006      	movs	r0, #6
 800756c:	f000 fa0c 	bl	8007988 <raise>
 8007570:	2001      	movs	r0, #1
 8007572:	f7fa f8af 	bl	80016d4 <_exit>

08007576 <_malloc_usable_size_r>:
 8007576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800757a:	1f18      	subs	r0, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	bfbc      	itt	lt
 8007580:	580b      	ldrlt	r3, [r1, r0]
 8007582:	18c0      	addlt	r0, r0, r3
 8007584:	4770      	bx	lr

08007586 <__sfputc_r>:
 8007586:	6893      	ldr	r3, [r2, #8]
 8007588:	3b01      	subs	r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	b410      	push	{r4}
 800758e:	6093      	str	r3, [r2, #8]
 8007590:	da08      	bge.n	80075a4 <__sfputc_r+0x1e>
 8007592:	6994      	ldr	r4, [r2, #24]
 8007594:	42a3      	cmp	r3, r4
 8007596:	db01      	blt.n	800759c <__sfputc_r+0x16>
 8007598:	290a      	cmp	r1, #10
 800759a:	d103      	bne.n	80075a4 <__sfputc_r+0x1e>
 800759c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a0:	f000 b934 	b.w	800780c <__swbuf_r>
 80075a4:	6813      	ldr	r3, [r2, #0]
 80075a6:	1c58      	adds	r0, r3, #1
 80075a8:	6010      	str	r0, [r2, #0]
 80075aa:	7019      	strb	r1, [r3, #0]
 80075ac:	4608      	mov	r0, r1
 80075ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <__sfputs_r>:
 80075b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b6:	4606      	mov	r6, r0
 80075b8:	460f      	mov	r7, r1
 80075ba:	4614      	mov	r4, r2
 80075bc:	18d5      	adds	r5, r2, r3
 80075be:	42ac      	cmp	r4, r5
 80075c0:	d101      	bne.n	80075c6 <__sfputs_r+0x12>
 80075c2:	2000      	movs	r0, #0
 80075c4:	e007      	b.n	80075d6 <__sfputs_r+0x22>
 80075c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ca:	463a      	mov	r2, r7
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7ff ffda 	bl	8007586 <__sfputc_r>
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	d1f3      	bne.n	80075be <__sfputs_r+0xa>
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075d8 <_vfiprintf_r>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	460d      	mov	r5, r1
 80075de:	b09d      	sub	sp, #116	; 0x74
 80075e0:	4614      	mov	r4, r2
 80075e2:	4698      	mov	r8, r3
 80075e4:	4606      	mov	r6, r0
 80075e6:	b118      	cbz	r0, 80075f0 <_vfiprintf_r+0x18>
 80075e8:	6a03      	ldr	r3, [r0, #32]
 80075ea:	b90b      	cbnz	r3, 80075f0 <_vfiprintf_r+0x18>
 80075ec:	f7fe f8d8 	bl	80057a0 <__sinit>
 80075f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075f2:	07d9      	lsls	r1, r3, #31
 80075f4:	d405      	bmi.n	8007602 <_vfiprintf_r+0x2a>
 80075f6:	89ab      	ldrh	r3, [r5, #12]
 80075f8:	059a      	lsls	r2, r3, #22
 80075fa:	d402      	bmi.n	8007602 <_vfiprintf_r+0x2a>
 80075fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075fe:	f7fe f9e6 	bl	80059ce <__retarget_lock_acquire_recursive>
 8007602:	89ab      	ldrh	r3, [r5, #12]
 8007604:	071b      	lsls	r3, r3, #28
 8007606:	d501      	bpl.n	800760c <_vfiprintf_r+0x34>
 8007608:	692b      	ldr	r3, [r5, #16]
 800760a:	b99b      	cbnz	r3, 8007634 <_vfiprintf_r+0x5c>
 800760c:	4629      	mov	r1, r5
 800760e:	4630      	mov	r0, r6
 8007610:	f000 f93a 	bl	8007888 <__swsetup_r>
 8007614:	b170      	cbz	r0, 8007634 <_vfiprintf_r+0x5c>
 8007616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007618:	07dc      	lsls	r4, r3, #31
 800761a:	d504      	bpl.n	8007626 <_vfiprintf_r+0x4e>
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	b01d      	add	sp, #116	; 0x74
 8007622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007626:	89ab      	ldrh	r3, [r5, #12]
 8007628:	0598      	lsls	r0, r3, #22
 800762a:	d4f7      	bmi.n	800761c <_vfiprintf_r+0x44>
 800762c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800762e:	f7fe f9cf 	bl	80059d0 <__retarget_lock_release_recursive>
 8007632:	e7f3      	b.n	800761c <_vfiprintf_r+0x44>
 8007634:	2300      	movs	r3, #0
 8007636:	9309      	str	r3, [sp, #36]	; 0x24
 8007638:	2320      	movs	r3, #32
 800763a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800763e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007642:	2330      	movs	r3, #48	; 0x30
 8007644:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80077f8 <_vfiprintf_r+0x220>
 8007648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800764c:	f04f 0901 	mov.w	r9, #1
 8007650:	4623      	mov	r3, r4
 8007652:	469a      	mov	sl, r3
 8007654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007658:	b10a      	cbz	r2, 800765e <_vfiprintf_r+0x86>
 800765a:	2a25      	cmp	r2, #37	; 0x25
 800765c:	d1f9      	bne.n	8007652 <_vfiprintf_r+0x7a>
 800765e:	ebba 0b04 	subs.w	fp, sl, r4
 8007662:	d00b      	beq.n	800767c <_vfiprintf_r+0xa4>
 8007664:	465b      	mov	r3, fp
 8007666:	4622      	mov	r2, r4
 8007668:	4629      	mov	r1, r5
 800766a:	4630      	mov	r0, r6
 800766c:	f7ff ffa2 	bl	80075b4 <__sfputs_r>
 8007670:	3001      	adds	r0, #1
 8007672:	f000 80a9 	beq.w	80077c8 <_vfiprintf_r+0x1f0>
 8007676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007678:	445a      	add	r2, fp
 800767a:	9209      	str	r2, [sp, #36]	; 0x24
 800767c:	f89a 3000 	ldrb.w	r3, [sl]
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80a1 	beq.w	80077c8 <_vfiprintf_r+0x1f0>
 8007686:	2300      	movs	r3, #0
 8007688:	f04f 32ff 	mov.w	r2, #4294967295
 800768c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007690:	f10a 0a01 	add.w	sl, sl, #1
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	9307      	str	r3, [sp, #28]
 8007698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800769c:	931a      	str	r3, [sp, #104]	; 0x68
 800769e:	4654      	mov	r4, sl
 80076a0:	2205      	movs	r2, #5
 80076a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a6:	4854      	ldr	r0, [pc, #336]	; (80077f8 <_vfiprintf_r+0x220>)
 80076a8:	f7f8 fd9a 	bl	80001e0 <memchr>
 80076ac:	9a04      	ldr	r2, [sp, #16]
 80076ae:	b9d8      	cbnz	r0, 80076e8 <_vfiprintf_r+0x110>
 80076b0:	06d1      	lsls	r1, r2, #27
 80076b2:	bf44      	itt	mi
 80076b4:	2320      	movmi	r3, #32
 80076b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ba:	0713      	lsls	r3, r2, #28
 80076bc:	bf44      	itt	mi
 80076be:	232b      	movmi	r3, #43	; 0x2b
 80076c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076c4:	f89a 3000 	ldrb.w	r3, [sl]
 80076c8:	2b2a      	cmp	r3, #42	; 0x2a
 80076ca:	d015      	beq.n	80076f8 <_vfiprintf_r+0x120>
 80076cc:	9a07      	ldr	r2, [sp, #28]
 80076ce:	4654      	mov	r4, sl
 80076d0:	2000      	movs	r0, #0
 80076d2:	f04f 0c0a 	mov.w	ip, #10
 80076d6:	4621      	mov	r1, r4
 80076d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076dc:	3b30      	subs	r3, #48	; 0x30
 80076de:	2b09      	cmp	r3, #9
 80076e0:	d94d      	bls.n	800777e <_vfiprintf_r+0x1a6>
 80076e2:	b1b0      	cbz	r0, 8007712 <_vfiprintf_r+0x13a>
 80076e4:	9207      	str	r2, [sp, #28]
 80076e6:	e014      	b.n	8007712 <_vfiprintf_r+0x13a>
 80076e8:	eba0 0308 	sub.w	r3, r0, r8
 80076ec:	fa09 f303 	lsl.w	r3, r9, r3
 80076f0:	4313      	orrs	r3, r2
 80076f2:	9304      	str	r3, [sp, #16]
 80076f4:	46a2      	mov	sl, r4
 80076f6:	e7d2      	b.n	800769e <_vfiprintf_r+0xc6>
 80076f8:	9b03      	ldr	r3, [sp, #12]
 80076fa:	1d19      	adds	r1, r3, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	9103      	str	r1, [sp, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	bfbb      	ittet	lt
 8007704:	425b      	neglt	r3, r3
 8007706:	f042 0202 	orrlt.w	r2, r2, #2
 800770a:	9307      	strge	r3, [sp, #28]
 800770c:	9307      	strlt	r3, [sp, #28]
 800770e:	bfb8      	it	lt
 8007710:	9204      	strlt	r2, [sp, #16]
 8007712:	7823      	ldrb	r3, [r4, #0]
 8007714:	2b2e      	cmp	r3, #46	; 0x2e
 8007716:	d10c      	bne.n	8007732 <_vfiprintf_r+0x15a>
 8007718:	7863      	ldrb	r3, [r4, #1]
 800771a:	2b2a      	cmp	r3, #42	; 0x2a
 800771c:	d134      	bne.n	8007788 <_vfiprintf_r+0x1b0>
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	1d1a      	adds	r2, r3, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	9203      	str	r2, [sp, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfb8      	it	lt
 800772a:	f04f 33ff 	movlt.w	r3, #4294967295
 800772e:	3402      	adds	r4, #2
 8007730:	9305      	str	r3, [sp, #20]
 8007732:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007808 <_vfiprintf_r+0x230>
 8007736:	7821      	ldrb	r1, [r4, #0]
 8007738:	2203      	movs	r2, #3
 800773a:	4650      	mov	r0, sl
 800773c:	f7f8 fd50 	bl	80001e0 <memchr>
 8007740:	b138      	cbz	r0, 8007752 <_vfiprintf_r+0x17a>
 8007742:	9b04      	ldr	r3, [sp, #16]
 8007744:	eba0 000a 	sub.w	r0, r0, sl
 8007748:	2240      	movs	r2, #64	; 0x40
 800774a:	4082      	lsls	r2, r0
 800774c:	4313      	orrs	r3, r2
 800774e:	3401      	adds	r4, #1
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007756:	4829      	ldr	r0, [pc, #164]	; (80077fc <_vfiprintf_r+0x224>)
 8007758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800775c:	2206      	movs	r2, #6
 800775e:	f7f8 fd3f 	bl	80001e0 <memchr>
 8007762:	2800      	cmp	r0, #0
 8007764:	d03f      	beq.n	80077e6 <_vfiprintf_r+0x20e>
 8007766:	4b26      	ldr	r3, [pc, #152]	; (8007800 <_vfiprintf_r+0x228>)
 8007768:	bb1b      	cbnz	r3, 80077b2 <_vfiprintf_r+0x1da>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	3307      	adds	r3, #7
 800776e:	f023 0307 	bic.w	r3, r3, #7
 8007772:	3308      	adds	r3, #8
 8007774:	9303      	str	r3, [sp, #12]
 8007776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007778:	443b      	add	r3, r7
 800777a:	9309      	str	r3, [sp, #36]	; 0x24
 800777c:	e768      	b.n	8007650 <_vfiprintf_r+0x78>
 800777e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007782:	460c      	mov	r4, r1
 8007784:	2001      	movs	r0, #1
 8007786:	e7a6      	b.n	80076d6 <_vfiprintf_r+0xfe>
 8007788:	2300      	movs	r3, #0
 800778a:	3401      	adds	r4, #1
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	4619      	mov	r1, r3
 8007790:	f04f 0c0a 	mov.w	ip, #10
 8007794:	4620      	mov	r0, r4
 8007796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800779a:	3a30      	subs	r2, #48	; 0x30
 800779c:	2a09      	cmp	r2, #9
 800779e:	d903      	bls.n	80077a8 <_vfiprintf_r+0x1d0>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0c6      	beq.n	8007732 <_vfiprintf_r+0x15a>
 80077a4:	9105      	str	r1, [sp, #20]
 80077a6:	e7c4      	b.n	8007732 <_vfiprintf_r+0x15a>
 80077a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80077ac:	4604      	mov	r4, r0
 80077ae:	2301      	movs	r3, #1
 80077b0:	e7f0      	b.n	8007794 <_vfiprintf_r+0x1bc>
 80077b2:	ab03      	add	r3, sp, #12
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	462a      	mov	r2, r5
 80077b8:	4b12      	ldr	r3, [pc, #72]	; (8007804 <_vfiprintf_r+0x22c>)
 80077ba:	a904      	add	r1, sp, #16
 80077bc:	4630      	mov	r0, r6
 80077be:	f7fd fb9d 	bl	8004efc <_printf_float>
 80077c2:	4607      	mov	r7, r0
 80077c4:	1c78      	adds	r0, r7, #1
 80077c6:	d1d6      	bne.n	8007776 <_vfiprintf_r+0x19e>
 80077c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077ca:	07d9      	lsls	r1, r3, #31
 80077cc:	d405      	bmi.n	80077da <_vfiprintf_r+0x202>
 80077ce:	89ab      	ldrh	r3, [r5, #12]
 80077d0:	059a      	lsls	r2, r3, #22
 80077d2:	d402      	bmi.n	80077da <_vfiprintf_r+0x202>
 80077d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077d6:	f7fe f8fb 	bl	80059d0 <__retarget_lock_release_recursive>
 80077da:	89ab      	ldrh	r3, [r5, #12]
 80077dc:	065b      	lsls	r3, r3, #25
 80077de:	f53f af1d 	bmi.w	800761c <_vfiprintf_r+0x44>
 80077e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077e4:	e71c      	b.n	8007620 <_vfiprintf_r+0x48>
 80077e6:	ab03      	add	r3, sp, #12
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	462a      	mov	r2, r5
 80077ec:	4b05      	ldr	r3, [pc, #20]	; (8007804 <_vfiprintf_r+0x22c>)
 80077ee:	a904      	add	r1, sp, #16
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7fd fe27 	bl	8005444 <_printf_i>
 80077f6:	e7e4      	b.n	80077c2 <_vfiprintf_r+0x1ea>
 80077f8:	08007dac 	.word	0x08007dac
 80077fc:	08007db6 	.word	0x08007db6
 8007800:	08004efd 	.word	0x08004efd
 8007804:	080075b5 	.word	0x080075b5
 8007808:	08007db2 	.word	0x08007db2

0800780c <__swbuf_r>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	460e      	mov	r6, r1
 8007810:	4614      	mov	r4, r2
 8007812:	4605      	mov	r5, r0
 8007814:	b118      	cbz	r0, 800781e <__swbuf_r+0x12>
 8007816:	6a03      	ldr	r3, [r0, #32]
 8007818:	b90b      	cbnz	r3, 800781e <__swbuf_r+0x12>
 800781a:	f7fd ffc1 	bl	80057a0 <__sinit>
 800781e:	69a3      	ldr	r3, [r4, #24]
 8007820:	60a3      	str	r3, [r4, #8]
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	071a      	lsls	r2, r3, #28
 8007826:	d525      	bpl.n	8007874 <__swbuf_r+0x68>
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	b31b      	cbz	r3, 8007874 <__swbuf_r+0x68>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	6922      	ldr	r2, [r4, #16]
 8007830:	1a98      	subs	r0, r3, r2
 8007832:	6963      	ldr	r3, [r4, #20]
 8007834:	b2f6      	uxtb	r6, r6
 8007836:	4283      	cmp	r3, r0
 8007838:	4637      	mov	r7, r6
 800783a:	dc04      	bgt.n	8007846 <__swbuf_r+0x3a>
 800783c:	4621      	mov	r1, r4
 800783e:	4628      	mov	r0, r5
 8007840:	f7ff fd9e 	bl	8007380 <_fflush_r>
 8007844:	b9e0      	cbnz	r0, 8007880 <__swbuf_r+0x74>
 8007846:	68a3      	ldr	r3, [r4, #8]
 8007848:	3b01      	subs	r3, #1
 800784a:	60a3      	str	r3, [r4, #8]
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	6022      	str	r2, [r4, #0]
 8007852:	701e      	strb	r6, [r3, #0]
 8007854:	6962      	ldr	r2, [r4, #20]
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	429a      	cmp	r2, r3
 800785a:	d004      	beq.n	8007866 <__swbuf_r+0x5a>
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	07db      	lsls	r3, r3, #31
 8007860:	d506      	bpl.n	8007870 <__swbuf_r+0x64>
 8007862:	2e0a      	cmp	r6, #10
 8007864:	d104      	bne.n	8007870 <__swbuf_r+0x64>
 8007866:	4621      	mov	r1, r4
 8007868:	4628      	mov	r0, r5
 800786a:	f7ff fd89 	bl	8007380 <_fflush_r>
 800786e:	b938      	cbnz	r0, 8007880 <__swbuf_r+0x74>
 8007870:	4638      	mov	r0, r7
 8007872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007874:	4621      	mov	r1, r4
 8007876:	4628      	mov	r0, r5
 8007878:	f000 f806 	bl	8007888 <__swsetup_r>
 800787c:	2800      	cmp	r0, #0
 800787e:	d0d5      	beq.n	800782c <__swbuf_r+0x20>
 8007880:	f04f 37ff 	mov.w	r7, #4294967295
 8007884:	e7f4      	b.n	8007870 <__swbuf_r+0x64>
	...

08007888 <__swsetup_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4b2a      	ldr	r3, [pc, #168]	; (8007934 <__swsetup_r+0xac>)
 800788c:	4605      	mov	r5, r0
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	460c      	mov	r4, r1
 8007892:	b118      	cbz	r0, 800789c <__swsetup_r+0x14>
 8007894:	6a03      	ldr	r3, [r0, #32]
 8007896:	b90b      	cbnz	r3, 800789c <__swsetup_r+0x14>
 8007898:	f7fd ff82 	bl	80057a0 <__sinit>
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078a2:	0718      	lsls	r0, r3, #28
 80078a4:	d422      	bmi.n	80078ec <__swsetup_r+0x64>
 80078a6:	06d9      	lsls	r1, r3, #27
 80078a8:	d407      	bmi.n	80078ba <__swsetup_r+0x32>
 80078aa:	2309      	movs	r3, #9
 80078ac:	602b      	str	r3, [r5, #0]
 80078ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	e034      	b.n	8007924 <__swsetup_r+0x9c>
 80078ba:	0758      	lsls	r0, r3, #29
 80078bc:	d512      	bpl.n	80078e4 <__swsetup_r+0x5c>
 80078be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078c0:	b141      	cbz	r1, 80078d4 <__swsetup_r+0x4c>
 80078c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078c6:	4299      	cmp	r1, r3
 80078c8:	d002      	beq.n	80078d0 <__swsetup_r+0x48>
 80078ca:	4628      	mov	r0, r5
 80078cc:	f7fe fefe 	bl	80066cc <_free_r>
 80078d0:	2300      	movs	r3, #0
 80078d2:	6363      	str	r3, [r4, #52]	; 0x34
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	2300      	movs	r3, #0
 80078de:	6063      	str	r3, [r4, #4]
 80078e0:	6923      	ldr	r3, [r4, #16]
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	f043 0308 	orr.w	r3, r3, #8
 80078ea:	81a3      	strh	r3, [r4, #12]
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	b94b      	cbnz	r3, 8007904 <__swsetup_r+0x7c>
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fa:	d003      	beq.n	8007904 <__swsetup_r+0x7c>
 80078fc:	4621      	mov	r1, r4
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 f884 	bl	8007a0c <__smakebuf_r>
 8007904:	89a0      	ldrh	r0, [r4, #12]
 8007906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800790a:	f010 0301 	ands.w	r3, r0, #1
 800790e:	d00a      	beq.n	8007926 <__swsetup_r+0x9e>
 8007910:	2300      	movs	r3, #0
 8007912:	60a3      	str	r3, [r4, #8]
 8007914:	6963      	ldr	r3, [r4, #20]
 8007916:	425b      	negs	r3, r3
 8007918:	61a3      	str	r3, [r4, #24]
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	b943      	cbnz	r3, 8007930 <__swsetup_r+0xa8>
 800791e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007922:	d1c4      	bne.n	80078ae <__swsetup_r+0x26>
 8007924:	bd38      	pop	{r3, r4, r5, pc}
 8007926:	0781      	lsls	r1, r0, #30
 8007928:	bf58      	it	pl
 800792a:	6963      	ldrpl	r3, [r4, #20]
 800792c:	60a3      	str	r3, [r4, #8]
 800792e:	e7f4      	b.n	800791a <__swsetup_r+0x92>
 8007930:	2000      	movs	r0, #0
 8007932:	e7f7      	b.n	8007924 <__swsetup_r+0x9c>
 8007934:	20000064 	.word	0x20000064

08007938 <_raise_r>:
 8007938:	291f      	cmp	r1, #31
 800793a:	b538      	push	{r3, r4, r5, lr}
 800793c:	4604      	mov	r4, r0
 800793e:	460d      	mov	r5, r1
 8007940:	d904      	bls.n	800794c <_raise_r+0x14>
 8007942:	2316      	movs	r3, #22
 8007944:	6003      	str	r3, [r0, #0]
 8007946:	f04f 30ff 	mov.w	r0, #4294967295
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800794e:	b112      	cbz	r2, 8007956 <_raise_r+0x1e>
 8007950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007954:	b94b      	cbnz	r3, 800796a <_raise_r+0x32>
 8007956:	4620      	mov	r0, r4
 8007958:	f000 f830 	bl	80079bc <_getpid_r>
 800795c:	462a      	mov	r2, r5
 800795e:	4601      	mov	r1, r0
 8007960:	4620      	mov	r0, r4
 8007962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007966:	f000 b817 	b.w	8007998 <_kill_r>
 800796a:	2b01      	cmp	r3, #1
 800796c:	d00a      	beq.n	8007984 <_raise_r+0x4c>
 800796e:	1c59      	adds	r1, r3, #1
 8007970:	d103      	bne.n	800797a <_raise_r+0x42>
 8007972:	2316      	movs	r3, #22
 8007974:	6003      	str	r3, [r0, #0]
 8007976:	2001      	movs	r0, #1
 8007978:	e7e7      	b.n	800794a <_raise_r+0x12>
 800797a:	2400      	movs	r4, #0
 800797c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007980:	4628      	mov	r0, r5
 8007982:	4798      	blx	r3
 8007984:	2000      	movs	r0, #0
 8007986:	e7e0      	b.n	800794a <_raise_r+0x12>

08007988 <raise>:
 8007988:	4b02      	ldr	r3, [pc, #8]	; (8007994 <raise+0xc>)
 800798a:	4601      	mov	r1, r0
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	f7ff bfd3 	b.w	8007938 <_raise_r>
 8007992:	bf00      	nop
 8007994:	20000064 	.word	0x20000064

08007998 <_kill_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4d07      	ldr	r5, [pc, #28]	; (80079b8 <_kill_r+0x20>)
 800799c:	2300      	movs	r3, #0
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	4611      	mov	r1, r2
 80079a4:	602b      	str	r3, [r5, #0]
 80079a6:	f7f9 fe85 	bl	80016b4 <_kill>
 80079aa:	1c43      	adds	r3, r0, #1
 80079ac:	d102      	bne.n	80079b4 <_kill_r+0x1c>
 80079ae:	682b      	ldr	r3, [r5, #0]
 80079b0:	b103      	cbz	r3, 80079b4 <_kill_r+0x1c>
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	bf00      	nop
 80079b8:	20000410 	.word	0x20000410

080079bc <_getpid_r>:
 80079bc:	f7f9 be72 	b.w	80016a4 <_getpid>

080079c0 <__swhatbuf_r>:
 80079c0:	b570      	push	{r4, r5, r6, lr}
 80079c2:	460c      	mov	r4, r1
 80079c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c8:	2900      	cmp	r1, #0
 80079ca:	b096      	sub	sp, #88	; 0x58
 80079cc:	4615      	mov	r5, r2
 80079ce:	461e      	mov	r6, r3
 80079d0:	da0d      	bge.n	80079ee <__swhatbuf_r+0x2e>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80079d8:	f04f 0100 	mov.w	r1, #0
 80079dc:	bf0c      	ite	eq
 80079de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80079e2:	2340      	movne	r3, #64	; 0x40
 80079e4:	2000      	movs	r0, #0
 80079e6:	6031      	str	r1, [r6, #0]
 80079e8:	602b      	str	r3, [r5, #0]
 80079ea:	b016      	add	sp, #88	; 0x58
 80079ec:	bd70      	pop	{r4, r5, r6, pc}
 80079ee:	466a      	mov	r2, sp
 80079f0:	f000 f848 	bl	8007a84 <_fstat_r>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	dbec      	blt.n	80079d2 <__swhatbuf_r+0x12>
 80079f8:	9901      	ldr	r1, [sp, #4]
 80079fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80079fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a02:	4259      	negs	r1, r3
 8007a04:	4159      	adcs	r1, r3
 8007a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a0a:	e7eb      	b.n	80079e4 <__swhatbuf_r+0x24>

08007a0c <__smakebuf_r>:
 8007a0c:	898b      	ldrh	r3, [r1, #12]
 8007a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a10:	079d      	lsls	r5, r3, #30
 8007a12:	4606      	mov	r6, r0
 8007a14:	460c      	mov	r4, r1
 8007a16:	d507      	bpl.n	8007a28 <__smakebuf_r+0x1c>
 8007a18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	2301      	movs	r3, #1
 8007a22:	6163      	str	r3, [r4, #20]
 8007a24:	b002      	add	sp, #8
 8007a26:	bd70      	pop	{r4, r5, r6, pc}
 8007a28:	ab01      	add	r3, sp, #4
 8007a2a:	466a      	mov	r2, sp
 8007a2c:	f7ff ffc8 	bl	80079c0 <__swhatbuf_r>
 8007a30:	9900      	ldr	r1, [sp, #0]
 8007a32:	4605      	mov	r5, r0
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7fe febd 	bl	80067b4 <_malloc_r>
 8007a3a:	b948      	cbnz	r0, 8007a50 <__smakebuf_r+0x44>
 8007a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a40:	059a      	lsls	r2, r3, #22
 8007a42:	d4ef      	bmi.n	8007a24 <__smakebuf_r+0x18>
 8007a44:	f023 0303 	bic.w	r3, r3, #3
 8007a48:	f043 0302 	orr.w	r3, r3, #2
 8007a4c:	81a3      	strh	r3, [r4, #12]
 8007a4e:	e7e3      	b.n	8007a18 <__smakebuf_r+0xc>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	6020      	str	r0, [r4, #0]
 8007a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a58:	81a3      	strh	r3, [r4, #12]
 8007a5a:	9b00      	ldr	r3, [sp, #0]
 8007a5c:	6163      	str	r3, [r4, #20]
 8007a5e:	9b01      	ldr	r3, [sp, #4]
 8007a60:	6120      	str	r0, [r4, #16]
 8007a62:	b15b      	cbz	r3, 8007a7c <__smakebuf_r+0x70>
 8007a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f000 f81d 	bl	8007aa8 <_isatty_r>
 8007a6e:	b128      	cbz	r0, 8007a7c <__smakebuf_r+0x70>
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	f023 0303 	bic.w	r3, r3, #3
 8007a76:	f043 0301 	orr.w	r3, r3, #1
 8007a7a:	81a3      	strh	r3, [r4, #12]
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	431d      	orrs	r5, r3
 8007a80:	81a5      	strh	r5, [r4, #12]
 8007a82:	e7cf      	b.n	8007a24 <__smakebuf_r+0x18>

08007a84 <_fstat_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4d07      	ldr	r5, [pc, #28]	; (8007aa4 <_fstat_r+0x20>)
 8007a88:	2300      	movs	r3, #0
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	4608      	mov	r0, r1
 8007a8e:	4611      	mov	r1, r2
 8007a90:	602b      	str	r3, [r5, #0]
 8007a92:	f7f9 fe6e 	bl	8001772 <_fstat>
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	d102      	bne.n	8007aa0 <_fstat_r+0x1c>
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	b103      	cbz	r3, 8007aa0 <_fstat_r+0x1c>
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	bd38      	pop	{r3, r4, r5, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000410 	.word	0x20000410

08007aa8 <_isatty_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d06      	ldr	r5, [pc, #24]	; (8007ac4 <_isatty_r+0x1c>)
 8007aac:	2300      	movs	r3, #0
 8007aae:	4604      	mov	r4, r0
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	602b      	str	r3, [r5, #0]
 8007ab4:	f7f9 fe6d 	bl	8001792 <_isatty>
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	d102      	bne.n	8007ac2 <_isatty_r+0x1a>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	b103      	cbz	r3, 8007ac2 <_isatty_r+0x1a>
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	bd38      	pop	{r3, r4, r5, pc}
 8007ac4:	20000410 	.word	0x20000410

08007ac8 <_init>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	bf00      	nop
 8007acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ace:	bc08      	pop	{r3}
 8007ad0:	469e      	mov	lr, r3
 8007ad2:	4770      	bx	lr

08007ad4 <_fini>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	bf00      	nop
 8007ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ada:	bc08      	pop	{r3}
 8007adc:	469e      	mov	lr, r3
 8007ade:	4770      	bx	lr
