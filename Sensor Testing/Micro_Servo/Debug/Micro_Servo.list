
Micro_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003afc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc8  08003cc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cc8  08003cc8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cc8  08003cc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d49a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a11  00000000  00000000  0002d519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bd0  00000000  00000000  0002ef30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000094e  00000000  00000000  0002fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fc8a  00000000  00000000  0003044e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f2d0  00000000  00000000  000500d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6211  00000000  00000000  0005f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000031d0  00000000  00000000  001255bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0012878c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c78 	.word	0x08003c78

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003c78 	.word	0x08003c78

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa86 	bl	80006e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80e 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8f8 	bl	80003d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f8c6 	bl	8000374 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001e8:	f000 f86a 	bl	80002c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001ec:	2100      	movs	r1, #0
 80001ee:	4802      	ldr	r0, [pc, #8]	; (80001f8 <main+0x24>)
 80001f0:	f002 fa68 	bl	80026c4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f4:	e7fe      	b.n	80001f4 <main+0x20>
 80001f6:	bf00      	nop
 80001f8:	20000028 	.word	0x20000028

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b0a6      	sub	sp, #152	; 0x98
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f003 fd07 	bl	8003c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2258      	movs	r2, #88	; 0x58
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fcf9 	bl	8003c1e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022c:	2302      	movs	r3, #2
 800022e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000230:	2301      	movs	r3, #1
 8000232:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000234:	2310      	movs	r3, #16
 8000236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000248:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fd32 	bl	8000cc4 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000266:	f000 f91b 	bl	80004a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000280:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fd70 	bl	8001d6c <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000292:	f000 f905 	bl	80004a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <SystemClock_Config+0xc0>)
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800029e:	2300      	movs	r3, #0
 80002a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 ff97 	bl	80021d8 <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002b0:	f000 f8f6 	bl	80004a0 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3798      	adds	r7, #152	; 0x98
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	00100002 	.word	0x00100002

080002c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	; 0x28
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c6:	f107 031c 	add.w	r3, r7, #28
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d2:	463b      	mov	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
 80002e0:	615a      	str	r2, [r3, #20]
 80002e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e4:	4b22      	ldr	r3, [pc, #136]	; (8000370 <MX_TIM2_Init+0xb0>)
 80002e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80002ec:	4b20      	ldr	r3, [pc, #128]	; (8000370 <MX_TIM2_Init+0xb0>)
 80002ee:	2247      	movs	r2, #71	; 0x47
 80002f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f2:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <MX_TIM2_Init+0xb0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_TIM2_Init+0xb0>)
 80002fa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80002fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_TIM2_Init+0xb0>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <MX_TIM2_Init+0xb0>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800030c:	4818      	ldr	r0, [pc, #96]	; (8000370 <MX_TIM2_Init+0xb0>)
 800030e:	f002 f981 	bl	8002614 <HAL_TIM_PWM_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000318:	f000 f8c2 	bl	80004a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000320:	2300      	movs	r3, #0
 8000322:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000324:	f107 031c 	add.w	r3, r7, #28
 8000328:	4619      	mov	r1, r3
 800032a:	4811      	ldr	r0, [pc, #68]	; (8000370 <MX_TIM2_Init+0xb0>)
 800032c:	f002 ffb4 	bl	8003298 <HAL_TIMEx_MasterConfigSynchronization>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000336:	f000 f8b3 	bl	80004a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800033a:	2360      	movs	r3, #96	; 0x60
 800033c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 800033e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000342:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000344:	2300      	movs	r3, #0
 8000346:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800034c:	463b      	mov	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	4619      	mov	r1, r3
 8000352:	4807      	ldr	r0, [pc, #28]	; (8000370 <MX_TIM2_Init+0xb0>)
 8000354:	f002 fac2 	bl	80028dc <HAL_TIM_PWM_ConfigChannel>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800035e:	f000 f89f 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000362:	4803      	ldr	r0, [pc, #12]	; (8000370 <MX_TIM2_Init+0xb0>)
 8000364:	f000 f8e4 	bl	8000530 <HAL_TIM_MspPostInit>

}
 8000368:	bf00      	nop
 800036a:	3728      	adds	r7, #40	; 0x28
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000028 	.word	0x20000028

08000374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800037a:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <MX_USART2_UART_Init+0x5c>)
 800037c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000380:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800039a:	220c      	movs	r2, #12
 800039c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003b8:	f002 fffa 	bl	80033b0 <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003c2:	f000 f86d 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000074 	.word	0x20000074
 80003d0:	40004400 	.word	0x40004400

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <MX_GPIO_Init+0xc4>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a2a      	ldr	r2, [pc, #168]	; (8000498 <MX_GPIO_Init+0xc4>)
 80003f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <MX_GPIO_Init+0xc4>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000402:	4b25      	ldr	r3, [pc, #148]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a24      	ldr	r2, [pc, #144]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a1e      	ldr	r2, [pc, #120]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000432:	4b19      	ldr	r3, [pc, #100]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a18      	ldr	r2, [pc, #96]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b16      	ldr	r3, [pc, #88]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2120      	movs	r1, #32
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f000 fc1f 	bl	8000c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800045c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4619      	mov	r1, r3
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <MX_GPIO_Init+0xc8>)
 800046e:	f000 fa87 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000472:	2320      	movs	r3, #32
 8000474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	4619      	mov	r1, r3
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f000 fa78 	bl	8000980 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000490:	bf00      	nop
 8000492:	3728      	adds	r7, #40	; 0x28
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000
 800049c:	48000800 	.word	0x48000800

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
}
 80004a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <Error_Handler+0x8>
	...

080004ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_MspInit+0x44>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_MspInit+0x44>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <HAL_MspInit+0x44>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_MspInit+0x44>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_MspInit+0x44>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004e2:	2007      	movs	r0, #7
 80004e4:	f000 fa18 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000504:	d10b      	bne.n	800051e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <HAL_TIM_PWM_MspInit+0x38>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <HAL_TIM_PWM_MspInit+0x38>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <HAL_TIM_PWM_MspInit+0x38>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000550:	d11c      	bne.n	800058c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <HAL_TIM_MspPostInit+0x64>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <HAL_TIM_MspPostInit+0x64>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <HAL_TIM_MspPostInit+0x64>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800056a:	2301      	movs	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056e:	2302      	movs	r3, #2
 8000570:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800057a:	2301      	movs	r3, #1
 800057c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	4619      	mov	r1, r3
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f000 f9fa 	bl	8000980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a17      	ldr	r2, [pc, #92]	; (8000614 <HAL_UART_MspInit+0x7c>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d128      	bne.n	800060c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <HAL_UART_MspInit+0x80>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	4a16      	ldr	r2, [pc, #88]	; (8000618 <HAL_UART_MspInit+0x80>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	61d3      	str	r3, [r2, #28]
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <HAL_UART_MspInit+0x80>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <HAL_UART_MspInit+0x80>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a10      	ldr	r2, [pc, #64]	; (8000618 <HAL_UART_MspInit+0x80>)
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <HAL_UART_MspInit+0x80>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005ea:	230c      	movs	r3, #12
 80005ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005fa:	2307      	movs	r3, #7
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f000 f9ba 	bl	8000980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40004400 	.word	0x40004400
 8000618:	40021000 	.word	0x40021000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <NMI_Handler+0x4>

08000622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <HardFault_Handler+0x4>

08000628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <MemManage_Handler+0x4>

0800062e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <UsageFault_Handler+0x4>

0800063a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000668:	f000 f884 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <SystemInit+0x20>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <SystemInit+0x20>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000698:	f7ff ffea 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800069e:	490d      	ldr	r1, [pc, #52]	; (80006d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <LoopForever+0xe>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b4:	4c0a      	ldr	r4, [pc, #40]	; (80006e0 <LoopForever+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c2:	f003 fab5 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006c6:	f7ff fd85 	bl	80001d4 <main>

080006ca <LoopForever>:

LoopForever:
    b LoopForever
 80006ca:	e7fe      	b.n	80006ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d8:	08003cd0 	.word	0x08003cd0
  ldr r2, =_sbss
 80006dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006e0:	20000100 	.word	0x20000100

080006e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC1_2_IRQHandler>
	...

080006e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_Init+0x28>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_Init+0x28>)
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 f90d 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f808 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000704:	f7ff fed2 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40022000 	.word	0x40022000

08000714 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x54>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x58>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f917 	bl	8000966 <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e00e      	b.n	8000760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d80a      	bhi.n	800075e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f000 f8ed 	bl	800092e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_InitTick+0x5c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000000 	.word	0x20000000
 800076c:	20000008 	.word	0x20000008
 8000770:	20000004 	.word	0x20000004

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x20>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_IncTick+0x24>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_IncTick+0x24>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000008 	.word	0x20000008
 8000798:	200000fc 	.word	0x200000fc

0800079c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;  
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <HAL_GetTick+0x14>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	200000fc 	.word	0x200000fc

080007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e6:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	60d3      	str	r3, [r2, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <__NVIC_GetPriorityGrouping+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	f003 0307 	and.w	r3, r3, #7
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	; (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	; 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f7ff ff8e 	bl	8000818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff47 	bl	80007b4 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000940:	f7ff ff5c 	bl	80007fc <__NVIC_GetPriorityGrouping>
 8000944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f7ff ff8e 	bl	800086c <NVIC_EncodePriority>
 8000950:	4602      	mov	r2, r0
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff5d 	bl	8000818 <__NVIC_SetPriority>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ffb0 	bl	80008d4 <SysTick_Config>
 8000974:	4603      	mov	r3, r0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	b480      	push	{r7}
 8000982:	b087      	sub	sp, #28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098e:	e160      	b.n	8000c52 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 8152 	beq.w	8000c4c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d005      	beq.n	80009c0 <HAL_GPIO_Init+0x40>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d130      	bne.n	8000a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f6:	2201      	movs	r2, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	091b      	lsrs	r3, r3, #4
 8000a0c:	f003 0201 	and.w	r2, r3, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d017      	beq.n	8000a5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f003 0303 	and.w	r3, r3, #3
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d123      	bne.n	8000ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	08da      	lsrs	r2, r3, #3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3208      	adds	r2, #8
 8000a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	220f      	movs	r2, #15
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	691a      	ldr	r2, [r3, #16]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	08da      	lsrs	r2, r3, #3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3208      	adds	r2, #8
 8000aac:	6939      	ldr	r1, [r7, #16]
 8000aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2203      	movs	r2, #3
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 0203 	and.w	r2, r3, #3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 80ac 	beq.w	8000c4c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af4:	4b5e      	ldr	r3, [pc, #376]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a5d      	ldr	r2, [pc, #372]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b5b      	ldr	r3, [pc, #364]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b0c:	4a59      	ldr	r2, [pc, #356]	; (8000c74 <HAL_GPIO_Init+0x2f4>)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	089b      	lsrs	r3, r3, #2
 8000b12:	3302      	adds	r3, #2
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	220f      	movs	r2, #15
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b36:	d025      	beq.n	8000b84 <HAL_GPIO_Init+0x204>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a4f      	ldr	r2, [pc, #316]	; (8000c78 <HAL_GPIO_Init+0x2f8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d01f      	beq.n	8000b80 <HAL_GPIO_Init+0x200>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a4e      	ldr	r2, [pc, #312]	; (8000c7c <HAL_GPIO_Init+0x2fc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d019      	beq.n	8000b7c <HAL_GPIO_Init+0x1fc>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a4d      	ldr	r2, [pc, #308]	; (8000c80 <HAL_GPIO_Init+0x300>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d013      	beq.n	8000b78 <HAL_GPIO_Init+0x1f8>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_GPIO_Init+0x304>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d00d      	beq.n	8000b74 <HAL_GPIO_Init+0x1f4>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <HAL_GPIO_Init+0x308>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d007      	beq.n	8000b70 <HAL_GPIO_Init+0x1f0>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a4a      	ldr	r2, [pc, #296]	; (8000c8c <HAL_GPIO_Init+0x30c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d101      	bne.n	8000b6c <HAL_GPIO_Init+0x1ec>
 8000b68:	2306      	movs	r3, #6
 8000b6a:	e00c      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	e00a      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b70:	2305      	movs	r3, #5
 8000b72:	e008      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b74:	2304      	movs	r3, #4
 8000b76:	e006      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e004      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b84:	2300      	movs	r3, #0
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	f002 0203 	and.w	r2, r2, #3
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	4093      	lsls	r3, r2
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b96:	4937      	ldr	r1, [pc, #220]	; (8000c74 <HAL_GPIO_Init+0x2f4>)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ba4:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bc8:	4a31      	ldr	r2, [pc, #196]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bce:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bf2:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f47f ae97 	bne.w	8000990 <HAL_GPIO_Init+0x10>
  }
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	371c      	adds	r7, #28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000c00 	.word	0x48000c00
 8000c84:	48001000 	.word	0x48001000
 8000c88:	48001400 	.word	0x48001400
 8000c8c:	48001800 	.word	0x48001800
 8000c90:	40010400 	.word	0x40010400

08000c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca4:	787b      	ldrb	r3, [r7, #1]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cd4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f001 b83a 	b.w	8001d5e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 816f 	beq.w	8000fde <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d00:	4bb5      	ldr	r3, [pc, #724]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d00c      	beq.n	8000d26 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d0c:	4bb2      	ldr	r3, [pc, #712]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d15c      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x10e>
 8000d18:	4baf      	ldr	r3, [pc, #700]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d24:	d155      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x10e>
 8000d26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3e:	fab3 f383 	clz	r3, r3
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	095b      	lsrs	r3, r3, #5
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d102      	bne.n	8000d58 <HAL_RCC_OscConfig+0x94>
 8000d52:	4ba1      	ldr	r3, [pc, #644]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	e015      	b.n	8000d84 <HAL_RCC_OscConfig+0xc0>
 8000d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d60:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d70:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d74:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d80:	4b95      	ldr	r3, [pc, #596]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d88:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d8c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000d90:	fa92 f2a2 	rbit	r2, r2
 8000d94:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000d98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	f042 0220 	orr.w	r2, r2, #32
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	f002 021f 	and.w	r2, r2, #31
 8000dac:	2101      	movs	r1, #1
 8000dae:	fa01 f202 	lsl.w	r2, r1, r2
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 8111 	beq.w	8000fdc <HAL_RCC_OscConfig+0x318>
 8000dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f040 8108 	bne.w	8000fdc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f000 bfc6 	b.w	8001d5e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de2:	d106      	bne.n	8000df2 <HAL_RCC_OscConfig+0x12e>
 8000de4:	4b7c      	ldr	r3, [pc, #496]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a7b      	ldr	r2, [pc, #492]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e036      	b.n	8000e60 <HAL_RCC_OscConfig+0x19c>
 8000df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000df6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10c      	bne.n	8000e1c <HAL_RCC_OscConfig+0x158>
 8000e02:	4b75      	ldr	r3, [pc, #468]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a74      	ldr	r2, [pc, #464]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	4b72      	ldr	r3, [pc, #456]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a71      	ldr	r2, [pc, #452]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e021      	b.n	8000e60 <HAL_RCC_OscConfig+0x19c>
 8000e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0x184>
 8000e2e:	4b6a      	ldr	r3, [pc, #424]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a69      	ldr	r2, [pc, #420]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b67      	ldr	r3, [pc, #412]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a66      	ldr	r2, [pc, #408]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e00b      	b.n	8000e60 <HAL_RCC_OscConfig+0x19c>
 8000e48:	4b63      	ldr	r3, [pc, #396]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a62      	ldr	r2, [pc, #392]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a5f      	ldr	r2, [pc, #380]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d059      	beq.n	8000f24 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fc94 	bl	800079c <HAL_GetTick>
 8000e74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e78:	e00a      	b.n	8000e90 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7a:	f7ff fc8f 	bl	800079c <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d902      	bls.n	8000e90 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f000 bf67 	b.w	8001d5e <HAL_RCC_OscConfig+0x109a>
 8000e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e94:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e98:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e9c:	fa93 f3a3 	rbit	r3, r3
 8000ea0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ea4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea8:	fab3 f383 	clz	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d102      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x1fe>
 8000ebc:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	e015      	b.n	8000eee <HAL_RCC_OscConfig+0x22a>
 8000ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eda:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ede:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ef2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ef6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000efa:	fa92 f2a2 	rbit	r2, r2
 8000efe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f02:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f06:	fab2 f282 	clz	r2, r2
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	f042 0220 	orr.w	r2, r2, #32
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	f002 021f 	and.w	r2, r2, #31
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0ab      	beq.n	8000e7a <HAL_RCC_OscConfig+0x1b6>
 8000f22:	e05c      	b.n	8000fde <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fc3a 	bl	800079c <HAL_GetTick>
 8000f28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2c:	e00a      	b.n	8000f44 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2e:	f7ff fc35 	bl	800079c <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	; 0x64
 8000f3c:	d902      	bls.n	8000f44 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f000 bf0d 	b.w	8001d5e <HAL_RCC_OscConfig+0x109a>
 8000f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f48:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f50:	fa93 f3a3 	rbit	r3, r3
 8000f54:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f58:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d102      	bne.n	8000f76 <HAL_RCC_OscConfig+0x2b2>
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	e015      	b.n	8000fa2 <HAL_RCC_OscConfig+0x2de>
 8000f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f92:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fa6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000faa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000fae:	fa92 f2a2 	rbit	r2, r2
 8000fb2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000fb6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fba:	fab2 f282 	clz	r2, r2
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	f042 0220 	orr.w	r2, r2, #32
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f002 021f 	and.w	r2, r2, #31
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1ab      	bne.n	8000f2e <HAL_RCC_OscConfig+0x26a>
 8000fd6:	e002      	b.n	8000fde <HAL_RCC_OscConfig+0x31a>
 8000fd8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fe2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 817f 	beq.w	80012f2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ff4:	4ba7      	ldr	r3, [pc, #668]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00c      	beq.n	800101a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001000:	4ba4      	ldr	r3, [pc, #656]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b08      	cmp	r3, #8
 800100a:	d173      	bne.n	80010f4 <HAL_RCC_OscConfig+0x430>
 800100c:	4ba1      	ldr	r3, [pc, #644]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001018:	d16c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x430>
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800102c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b01      	cmp	r3, #1
 8001042:	d102      	bne.n	800104a <HAL_RCC_OscConfig+0x386>
 8001044:	4b93      	ldr	r3, [pc, #588]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	e013      	b.n	8001072 <HAL_RCC_OscConfig+0x3ae>
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001050:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001054:	fa93 f3a3 	rbit	r3, r3
 8001058:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001062:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800106e:	4b89      	ldr	r3, [pc, #548]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	2202      	movs	r2, #2
 8001074:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001078:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800107c:	fa92 f2a2 	rbit	r2, r2
 8001080:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001084:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001088:	fab2 f282 	clz	r2, r2
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	f042 0220 	orr.w	r2, r2, #32
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	f002 021f 	and.w	r2, r2, #31
 8001098:	2101      	movs	r1, #1
 800109a:	fa01 f202 	lsl.w	r2, r1, r2
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00a      	beq.n	80010ba <HAL_RCC_OscConfig+0x3f6>
 80010a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d002      	beq.n	80010ba <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f000 be52 	b.w	8001d5e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	4b76      	ldr	r3, [pc, #472]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	21f8      	movs	r1, #248	; 0xf8
 80010d0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010d8:	fa91 f1a1 	rbit	r1, r1
 80010dc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80010e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010e4:	fab1 f181 	clz	r1, r1
 80010e8:	b2c9      	uxtb	r1, r1
 80010ea:	408b      	lsls	r3, r1
 80010ec:	4969      	ldr	r1, [pc, #420]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f2:	e0fe      	b.n	80012f2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 8088 	beq.w	8001216 <HAL_RCC_OscConfig+0x552>
 8001106:	2301      	movs	r3, #1
 8001108:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001118:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111c:	fab3 f383 	clz	r3, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001126:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	461a      	mov	r2, r3
 800112e:	2301      	movs	r3, #1
 8001130:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fb33 	bl	800079c <HAL_GetTick>
 8001136:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113a:	e00a      	b.n	8001152 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fb2e 	bl	800079c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d902      	bls.n	8001152 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	f000 be06 	b.w	8001d5e <HAL_RCC_OscConfig+0x109a>
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001164:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	fab3 f383 	clz	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b01      	cmp	r3, #1
 800117a:	d102      	bne.n	8001182 <HAL_RCC_OscConfig+0x4be>
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	e013      	b.n	80011aa <HAL_RCC_OscConfig+0x4e6>
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001188:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800118c:	fa93 f3a3 	rbit	r3, r3
 8001190:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001194:	2302      	movs	r3, #2
 8001196:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800119a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800119e:	fa93 f3a3 	rbit	r3, r3
 80011a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	2202      	movs	r2, #2
 80011ac:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80011b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011b4:	fa92 f2a2 	rbit	r2, r2
 80011b8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011c0:	fab2 f282 	clz	r2, r2
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	f042 0220 	orr.w	r2, r2, #32
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	f002 021f 	and.w	r2, r2, #31
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f202 	lsl.w	r2, r1, r2
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0af      	beq.n	800113c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	21f8      	movs	r1, #248	; 0xf8
 80011f2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80011fa:	fa91 f1a1 	rbit	r1, r1
 80011fe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001202:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001206:	fab1 f181 	clz	r1, r1
 800120a:	b2c9      	uxtb	r1, r1
 800120c:	408b      	lsls	r3, r1
 800120e:	4921      	ldr	r1, [pc, #132]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
 8001214:	e06d      	b.n	80012f2 <HAL_RCC_OscConfig+0x62e>
 8001216:	2301      	movs	r3, #1
 8001218:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001228:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122c:	fab3 f383 	clz	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001236:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	461a      	mov	r2, r3
 800123e:	2300      	movs	r3, #0
 8001240:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff faab 	bl	800079c <HAL_GetTick>
 8001246:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	e00a      	b.n	8001262 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff faa6 	bl	800079c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d902      	bls.n	8001262 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	f000 bd7e 	b.w	8001d5e <HAL_RCC_OscConfig+0x109a>
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001268:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800126c:	fa93 f3a3 	rbit	r3, r3
 8001270:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001274:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001278:	fab3 f383 	clz	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d105      	bne.n	8001298 <HAL_RCC_OscConfig+0x5d4>
 800128c:	4b01      	ldr	r3, [pc, #4]	; (8001294 <HAL_RCC_OscConfig+0x5d0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	e016      	b.n	80012c0 <HAL_RCC_OscConfig+0x5fc>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012bc:	4bbf      	ldr	r3, [pc, #764]	; (80015bc <HAL_RCC_OscConfig+0x8f8>)
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	2202      	movs	r2, #2
 80012c2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012ca:	fa92 f2a2 	rbit	r2, r2
 80012ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012d6:	fab2 f282 	clz	r2, r2
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	f042 0220 	orr.w	r2, r2, #32
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	f002 021f 	and.w	r2, r2, #31
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1ac      	bne.n	800124c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8113 	beq.w	800152e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800130c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d07c      	beq.n	8001412 <HAL_RCC_OscConfig+0x74e>
 8001318:	2301      	movs	r3, #1
 800131a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800132a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4ba2      	ldr	r3, [pc, #648]	; (80015c0 <HAL_RCC_OscConfig+0x8fc>)
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	461a      	mov	r2, r3
 800133e:	2301      	movs	r3, #1
 8001340:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7ff fa2b 	bl	800079c <HAL_GetTick>
 8001346:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fa26 	bl	800079c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d902      	bls.n	8001362 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	f000 bcfe 	b.w	8001d5e <HAL_RCC_OscConfig+0x109a>
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800136c:	fa93 f2a3 	rbit	r2, r3
 8001370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001374:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800137e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001382:	2202      	movs	r2, #2
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800138a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	fa93 f2a3 	rbit	r2, r3
 8001394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013a6:	2202      	movs	r2, #2
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	fa93 f2a3 	rbit	r2, r3
 80013b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c2:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <HAL_RCC_OscConfig+0x8f8>)
 80013c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013ce:	2102      	movs	r1, #2
 80013d0:	6019      	str	r1, [r3, #0]
 80013d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fa93 f1a3 	rbit	r1, r3
 80013e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013e8:	6019      	str	r1, [r3, #0]
  return result;
 80013ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	fab3 f383 	clz	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d09d      	beq.n	800134c <HAL_RCC_OscConfig+0x688>
 8001410:	e08d      	b.n	800152e <HAL_RCC_OscConfig+0x86a>
 8001412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001416:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001422:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fa93 f2a3 	rbit	r2, r3
 800142c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001430:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001434:	601a      	str	r2, [r3, #0]
  return result;
 8001436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800143a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800143e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001440:	fab3 f383 	clz	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <HAL_RCC_OscConfig+0x8fc>)
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	461a      	mov	r2, r3
 8001450:	2300      	movs	r3, #0
 8001452:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001454:	f7ff f9a2 	bl	800079c <HAL_GetTick>
 8001458:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff f99d 	bl	800079c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d902      	bls.n	8001474 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	f000 bc75 	b.w	8001d5e <HAL_RCC_OscConfig+0x109a>
 8001474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001478:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800147c:	2202      	movs	r2, #2
 800147e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001484:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fa93 f2a3 	rbit	r2, r3
 800148e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001492:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014a0:	2202      	movs	r2, #2
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fa93 f2a3 	rbit	r2, r3
 80014b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014c4:	2202      	movs	r2, #2
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fa93 f2a3 	rbit	r2, r3
 80014d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_RCC_OscConfig+0x8f8>)
 80014e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014ec:	2102      	movs	r1, #2
 80014ee:	6019      	str	r1, [r3, #0]
 80014f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fa93 f1a3 	rbit	r1, r3
 80014fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001502:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001506:	6019      	str	r1, [r3, #0]
  return result;
 8001508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fab3 f383 	clz	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	2101      	movs	r1, #1
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	4013      	ands	r3, r2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d197      	bne.n	800145e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001532:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 81a5 	beq.w	800188e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_RCC_OscConfig+0x8f8>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_OscConfig+0x8f8>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <HAL_RCC_OscConfig+0x8f8>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x8f8>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800156a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800156e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001578:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800157c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800157e:	2301      	movs	r3, #1
 8001580:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_RCC_OscConfig+0x900>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d121      	bne.n	80015d4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_RCC_OscConfig+0x900>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_RCC_OscConfig+0x900>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159c:	f7ff f8fe 	bl	800079c <HAL_GetTick>
 80015a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a4:	e010      	b.n	80015c8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a6:	f7ff f8f9 	bl	800079c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d908      	bls.n	80015c8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e3d1      	b.n	8001d5e <HAL_RCC_OscConfig+0x109a>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	10908120 	.word	0x10908120
 80015c4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	4b8d      	ldr	r3, [pc, #564]	; (8001800 <HAL_RCC_OscConfig+0xb3c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0e8      	beq.n	80015a6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x92e>
 80015e4:	4b87      	ldr	r3, [pc, #540]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a86      	ldr	r2, [pc, #536]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e035      	b.n	800165e <HAL_RCC_OscConfig+0x99a>
 80015f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x958>
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a7f      	ldr	r2, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6213      	str	r3, [r2, #32]
 800160e:	4b7d      	ldr	r3, [pc, #500]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a7c      	ldr	r2, [pc, #496]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	e020      	b.n	800165e <HAL_RCC_OscConfig+0x99a>
 800161c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b05      	cmp	r3, #5
 800162a:	d10c      	bne.n	8001646 <HAL_RCC_OscConfig+0x982>
 800162c:	4b75      	ldr	r3, [pc, #468]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a74      	ldr	r2, [pc, #464]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	4b72      	ldr	r3, [pc, #456]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a71      	ldr	r2, [pc, #452]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	e00b      	b.n	800165e <HAL_RCC_OscConfig+0x99a>
 8001646:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4a6e      	ldr	r2, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	6213      	str	r3, [r2, #32]
 8001652:	4b6c      	ldr	r3, [pc, #432]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a6b      	ldr	r2, [pc, #428]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 8001658:	f023 0304 	bic.w	r3, r3, #4
 800165c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800165e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001662:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8081 	beq.w	8001772 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff f894 	bl	800079c <HAL_GetTick>
 8001674:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	e00b      	b.n	8001692 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff f88f 	bl	800079c <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e365      	b.n	8001d5e <HAL_RCC_OscConfig+0x109a>
 8001692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001696:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800169a:	2202      	movs	r2, #2
 800169c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016be:	2202      	movs	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016d8:	601a      	str	r2, [r3, #0]
  return result;
 80016da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016de:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d102      	bne.n	80016fe <HAL_RCC_OscConfig+0xa3a>
 80016f8:	4b42      	ldr	r3, [pc, #264]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	e013      	b.n	8001726 <HAL_RCC_OscConfig+0xa62>
 80016fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001702:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001706:	2202      	movs	r2, #2
 8001708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f2a3 	rbit	r2, r3
 8001718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800172a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800172e:	2102      	movs	r1, #2
 8001730:	6011      	str	r1, [r2, #0]
 8001732:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001736:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	fa92 f1a2 	rbit	r1, r2
 8001740:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001744:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001748:	6011      	str	r1, [r2, #0]
  return result;
 800174a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800174e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	fab2 f282 	clz	r2, r2
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	f002 021f 	and.w	r2, r2, #31
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f202 	lsl.w	r2, r1, r2
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d084      	beq.n	800167a <HAL_RCC_OscConfig+0x9b6>
 8001770:	e083      	b.n	800187a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff f813 	bl	800079c <HAL_GetTick>
 8001776:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff f80e 	bl	800079c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	; 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e2e4      	b.n	8001d5e <HAL_RCC_OscConfig+0x109a>
 8001794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001798:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800179c:	2202      	movs	r2, #2
 800179e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	fa93 f2a3 	rbit	r2, r3
 80017ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017c0:	2202      	movs	r2, #2
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f2a3 	rbit	r2, r3
 80017d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017da:	601a      	str	r2, [r3, #0]
  return result;
 80017dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	095b      	lsrs	r3, r3, #5
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0xb44>
 80017fa:	4b02      	ldr	r3, [pc, #8]	; (8001804 <HAL_RCC_OscConfig+0xb40>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	e017      	b.n	8001830 <HAL_RCC_OscConfig+0xb6c>
 8001800:	40007000 	.word	0x40007000
 8001804:	40021000 	.word	0x40021000
 8001808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001810:	2202      	movs	r2, #2
 8001812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001818:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	fa93 f2a3 	rbit	r2, r3
 8001822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001826:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	4bb3      	ldr	r3, [pc, #716]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001834:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001838:	2102      	movs	r1, #2
 800183a:	6011      	str	r1, [r2, #0]
 800183c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001840:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	fa92 f1a2 	rbit	r1, r2
 800184a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800184e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001852:	6011      	str	r1, [r2, #0]
  return result;
 8001854:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001858:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	fab2 f282 	clz	r2, r2
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	f002 021f 	and.w	r2, r2, #31
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d180      	bne.n	800177c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800187a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800187e:	2b01      	cmp	r3, #1
 8001880:	d105      	bne.n	800188e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001882:	4b9e      	ldr	r3, [pc, #632]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a9d      	ldr	r2, [pc, #628]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 8001888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001892:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 825e 	beq.w	8001d5c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a0:	4b96      	ldr	r3, [pc, #600]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	f000 821f 	beq.w	8001cec <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	f040 8170 	bne.w	8001ba0 <HAL_RCC_OscConfig+0xedc>
 80018c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018e4:	601a      	str	r2, [r3, #0]
  return result;
 80018e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018ee:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	461a      	mov	r2, r3
 8001902:	2300      	movs	r3, #0
 8001904:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7fe ff49 	bl	800079c <HAL_GetTick>
 800190a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	e009      	b.n	8001924 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001910:	f7fe ff44 	bl	800079c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e21c      	b.n	8001d5e <HAL_RCC_OscConfig+0x109a>
 8001924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001928:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800192c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001936:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001944:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001948:	601a      	str	r2, [r3, #0]
  return result;
 800194a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001952:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d102      	bne.n	800196e <HAL_RCC_OscConfig+0xcaa>
 8001968:	4b64      	ldr	r3, [pc, #400]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	e027      	b.n	80019be <HAL_RCC_OscConfig+0xcfa>
 800196e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001972:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001976:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800197a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001980:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fa93 f2a3 	rbit	r2, r3
 800198a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001998:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800199c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	4b50      	ldr	r3, [pc, #320]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019c2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ca:	6011      	str	r1, [r2, #0]
 80019cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019d0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	fa92 f1a2 	rbit	r1, r2
 80019da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019de:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019e2:	6011      	str	r1, [r2, #0]
  return result;
 80019e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019e8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	fab2 f282 	clz	r2, r2
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	f042 0220 	orr.w	r2, r2, #32
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	f002 021f 	and.w	r2, r2, #31
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f202 	lsl.w	r2, r1, r2
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d182      	bne.n	8001910 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0a:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f023 020f 	bic.w	r2, r3, #15
 8001a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	4937      	ldr	r1, [pc, #220]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a24:	4b35      	ldr	r3, [pc, #212]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a19      	ldr	r1, [r3, #32]
 8001a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	492d      	ldr	r1, [pc, #180]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
 8001a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a70:	601a      	str	r2, [r3, #0]
  return result;
 8001a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a7a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2301      	movs	r3, #1
 8001a90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7fe fe83 	bl	800079c <HAL_GetTick>
 8001a96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9a:	e009      	b.n	8001ab0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7fe fe7e 	bl	800079c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e156      	b.n	8001d5e <HAL_RCC_OscConfig+0x109a>
 8001ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fa93 f2a3 	rbit	r2, r3
 8001acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ad4:	601a      	str	r2, [r3, #0]
  return result;
 8001ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ada:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ade:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0xe3c>
 8001af4:	4b01      	ldr	r3, [pc, #4]	; (8001afc <HAL_RCC_OscConfig+0xe38>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	e02a      	b.n	8001b50 <HAL_RCC_OscConfig+0xe8c>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b12:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b20:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b38:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b46:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	4b86      	ldr	r3, [pc, #536]	; (8001d68 <HAL_RCC_OscConfig+0x10a4>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b54:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b5c:	6011      	str	r1, [r2, #0]
 8001b5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b62:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fa92 f1a2 	rbit	r1, r2
 8001b6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b70:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b74:	6011      	str	r1, [r2, #0]
  return result;
 8001b76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b7a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	fab2 f282 	clz	r2, r2
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f042 0220 	orr.w	r2, r2, #32
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	f002 021f 	and.w	r2, r2, #31
 8001b90:	2101      	movs	r1, #1
 8001b92:	fa01 f202 	lsl.w	r2, r1, r2
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f43f af7f 	beq.w	8001a9c <HAL_RCC_OscConfig+0xdd8>
 8001b9e:	e0dd      	b.n	8001d5c <HAL_RCC_OscConfig+0x1098>
 8001ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ba8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bc4:	601a      	str	r2, [r3, #0]
  return result;
 8001bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bce:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	461a      	mov	r2, r3
 8001be2:	2300      	movs	r3, #0
 8001be4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7fe fdd9 	bl	800079c <HAL_GetTick>
 8001bea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	e009      	b.n	8001c04 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7fe fdd4 	bl	800079c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0ac      	b.n	8001d5e <HAL_RCC_OscConfig+0x109a>
 8001c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c08:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c16:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	fa93 f2a3 	rbit	r2, r3
 8001c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c24:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c28:	601a      	str	r2, [r3, #0]
  return result;
 8001c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d102      	bne.n	8001c4e <HAL_RCC_OscConfig+0xf8a>
 8001c48:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_OscConfig+0x10a4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	e027      	b.n	8001c9e <HAL_RCC_OscConfig+0xfda>
 8001c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c52:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fa93 f2a3 	rbit	r2, r3
 8001c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c78:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fa93 f2a3 	rbit	r2, r3
 8001c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c94:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <HAL_RCC_OscConfig+0x10a4>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ca2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ca6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001caa:	6011      	str	r1, [r2, #0]
 8001cac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cb0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	fa92 f1a2 	rbit	r1, r2
 8001cba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cbe:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001cc2:	6011      	str	r1, [r2, #0]
  return result;
 8001cc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cc8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	fab2 f282 	clz	r2, r2
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f042 0220 	orr.w	r2, r2, #32
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f002 021f 	and.w	r2, r2, #31
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d182      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xf2c>
 8001cea:	e037      	b.n	8001d5c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e02e      	b.n	8001d5e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_RCC_OscConfig+0x10a4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_RCC_OscConfig+0x10a4>)
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d14:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d117      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d2c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d10b      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d44:	f003 020f 	and.w	r2, r3, #15
 8001d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b09e      	sub	sp, #120	; 0x78
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e162      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b90      	ldr	r3, [pc, #576]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d910      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b8d      	ldr	r3, [pc, #564]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	498b      	ldr	r1, [pc, #556]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b89      	ldr	r3, [pc, #548]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e14a      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b82      	ldr	r3, [pc, #520]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	497f      	ldr	r1, [pc, #508]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80dc 	beq.w	8001f98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d13c      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xf6>
 8001de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xa6>
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	e00f      	b.n	8001e32 <HAL_RCC_ClockConfig+0xc6>
 8001e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e24:	663b      	str	r3, [r7, #96]	; 0x60
 8001e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e36:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e3a:	fa92 f2a2 	rbit	r2, r2
 8001e3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f042 0220 	orr.w	r2, r2, #32
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f002 021f 	and.w	r2, r2, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d17b      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0f3      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d13c      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x178>
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d102      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x128>
 8001e8e:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	e00f      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
 8001e94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ebc:	fa92 f2a2 	rbit	r2, r2
 8001ec0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ec4:	fab2 f282 	clz	r2, r2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f042 0220 	orr.w	r2, r2, #32
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f002 021f 	and.w	r2, r2, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d13a      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0b2      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	e00d      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1bc>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
 8001f18:	2302      	movs	r3, #2
 8001f1a:	623b      	str	r3, [r7, #32]
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2202      	movs	r2, #2
 8001f2a:	61ba      	str	r2, [r7, #24]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	fa92 f2a2 	rbit	r2, r2
 8001f32:	617a      	str	r2, [r7, #20]
  return result;
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e079      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 0203 	bic.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	491a      	ldr	r1, [pc, #104]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f68:	f7fe fc18 	bl	800079c <HAL_GetTick>
 8001f6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7fe fc14 	bl	800079c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e061      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 020c 	and.w	r2, r3, #12
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1eb      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d214      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 0207 	bic.w	r2, r3, #7
 8001fae:	4906      	ldr	r1, [pc, #24]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e040      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCC_ClockConfig+0x2e8>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	491a      	ldr	r1, [pc, #104]	; (8002054 <HAL_RCC_ClockConfig+0x2e8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4912      	ldr	r1, [pc, #72]	; (8002054 <HAL_RCC_ClockConfig+0x2e8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800200e:	f000 f829 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8002012:	4601      	mov	r1, r0
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_RCC_ClockConfig+0x2e8>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800201c:	22f0      	movs	r2, #240	; 0xf0
 800201e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	fa92 f2a2 	rbit	r2, r2
 8002026:	60fa      	str	r2, [r7, #12]
  return result;
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	40d3      	lsrs	r3, r2
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x2ec>)
 8002034:	5cd3      	ldrb	r3, [r2, r3]
 8002036:	fa21 f303 	lsr.w	r3, r1, r3
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <HAL_RCC_ClockConfig+0x2f0>)
 800203c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCC_ClockConfig+0x2f4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fb66 	bl	8000714 <HAL_InitTick>
  
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3778      	adds	r7, #120	; 0x78
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	08003c90 	.word	0x08003c90
 800205c:	20000000 	.word	0x20000000
 8002060:	20000004 	.word	0x20000004

08002064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b08b      	sub	sp, #44	; 0x2c
 8002068:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b04      	cmp	r3, #4
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x30>
 800208e:	2b08      	cmp	r3, #8
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x36>
 8002092:	e03f      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002096:	623b      	str	r3, [r7, #32]
      break;
 8002098:	e03f      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	fa92 f2a2 	rbit	r2, r2
 80020ac:	607a      	str	r2, [r7, #4]
  return result;
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	fab2 f282 	clz	r2, r2
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	40d3      	lsrs	r3, r2
 80020b8:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020ba:	5cd3      	ldrb	r3, [r2, r3]
 80020bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	220f      	movs	r2, #15
 80020c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	60fa      	str	r2, [r7, #12]
  return result;
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	40d3      	lsrs	r3, r2
 80020dc:	4a15      	ldr	r2, [pc, #84]	; (8002134 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ec:	4a0f      	ldr	r2, [pc, #60]	; (800212c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	e007      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fbb2 f2f3 	udiv	r2, r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	623b      	str	r3, [r7, #32]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	6a3b      	ldr	r3, [r7, #32]
}
 800211c:	4618      	mov	r0, r3
 800211e:	372c      	adds	r7, #44	; 0x2c
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40021000 	.word	0x40021000
 800212c:	007a1200 	.word	0x007a1200
 8002130:	08003ca8 	.word	0x08003ca8
 8002134:	08003cb8 	.word	0x08003cb8

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_RCC_GetHCLKFreq+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000000 	.word	0x20000000

08002150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002156:	f7ff ffef 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800215a:	4601      	mov	r1, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002164:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002168:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	603a      	str	r2, [r7, #0]
  return result;
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	40d3      	lsrs	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x40>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	08003ca0 	.word	0x08003ca0

08002194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800219a:	f7ff ffcd 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	fa92 f2a2 	rbit	r2, r2
 80021b4:	603a      	str	r2, [r7, #0]
  return result;
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	fab2 f282 	clz	r2, r2
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	40d3      	lsrs	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08003ca0 	.word	0x08003ca0

080021d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b092      	sub	sp, #72	; 0x48
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80d4 	beq.w	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fc:	4b4e      	ldr	r3, [pc, #312]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10e      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a4a      	ldr	r2, [pc, #296]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002212:	61d3      	str	r3, [r2, #28]
 8002214:	4b48      	ldr	r3, [pc, #288]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b45      	ldr	r3, [pc, #276]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b42      	ldr	r3, [pc, #264]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a41      	ldr	r2, [pc, #260]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7fe faad 	bl	800079c <HAL_GetTick>
 8002242:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7fe faa9 	bl	800079c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	; 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1d6      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002264:	4b34      	ldr	r3, [pc, #208]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8084 	beq.w	800237e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002280:	429a      	cmp	r2, r3
 8002282:	d07c      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	461a      	mov	r2, r3
 80022ae:	2301      	movs	r3, #1
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	461a      	mov	r2, r3
 80022d2:	2300      	movs	r3, #0
 80022d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022d6:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d04b      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe fa59 	bl	800079c <HAL_GetTick>
 80022ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ec:	e00a      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe fa55 	bl	800079c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e180      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002304:	2302      	movs	r3, #2
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
 8002310:	2302      	movs	r3, #2
 8002312:	623b      	str	r3, [r7, #32]
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	61fb      	str	r3, [r7, #28]
  return result;
 800231c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d108      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002332:	4b01      	ldr	r3, [pc, #4]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	e00d      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
 8002340:	10908100 	.word	0x10908100
 8002344:	2302      	movs	r3, #2
 8002346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	4b9a      	ldr	r3, [pc, #616]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	2202      	movs	r2, #2
 8002356:	613a      	str	r2, [r7, #16]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	fa92 f2a2 	rbit	r2, r2
 800235e:	60fa      	str	r2, [r7, #12]
  return result;
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	fab2 f282 	clz	r2, r2
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f002 021f 	and.w	r2, r2, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0b7      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800237e:	4b8f      	ldr	r3, [pc, #572]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	498c      	ldr	r1, [pc, #560]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800238c:	4313      	orrs	r3, r2
 800238e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002390:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	4a87      	ldr	r2, [pc, #540]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800239e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b0:	4b82      	ldr	r3, [pc, #520]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	f023 0203 	bic.w	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	497f      	ldr	r1, [pc, #508]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ce:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	4978      	ldr	r1, [pc, #480]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023ec:	4b73      	ldr	r3, [pc, #460]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	4970      	ldr	r1, [pc, #448]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b00      	cmp	r3, #0
 8002408:	d008      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800240a:	4b6c      	ldr	r3, [pc, #432]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f023 0210 	bic.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4969      	ldr	r1, [pc, #420]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002428:	4b64      	ldr	r3, [pc, #400]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	4961      	ldr	r1, [pc, #388]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002446:	4b5d      	ldr	r3, [pc, #372]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f023 0220 	bic.w	r2, r3, #32
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	495a      	ldr	r1, [pc, #360]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002464:	4b55      	ldr	r3, [pc, #340]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	4952      	ldr	r1, [pc, #328]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002472:	4313      	orrs	r3, r2
 8002474:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002482:	4b4e      	ldr	r3, [pc, #312]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	494b      	ldr	r1, [pc, #300]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024a0:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4943      	ldr	r1, [pc, #268]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	493c      	ldr	r1, [pc, #240]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024dc:	4b37      	ldr	r3, [pc, #220]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	4934      	ldr	r1, [pc, #208]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	492d      	ldr	r1, [pc, #180]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002524:	4925      	ldr	r1, [pc, #148]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	491e      	ldr	r1, [pc, #120]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	4916      	ldr	r1, [pc, #88]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	490f      	ldr	r1, [pc, #60]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025ae:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	e002      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c2:	4913      	ldr	r1, [pc, #76]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e0:	490b      	ldr	r1, [pc, #44]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d008      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fe:	4904      	ldr	r1, [pc, #16]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002600:	4313      	orrs	r3, r2
 8002602:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3748      	adds	r7, #72	; 0x48
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e049      	b.n	80026ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fd ff5a 	bl	80004f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 fa56 	bl	8002b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_TIM_PWM_Start+0x24>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e03c      	b.n	8002762 <HAL_TIM_PWM_Start+0x9e>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d109      	bne.n	8002702 <HAL_TIM_PWM_Start+0x3e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	bf14      	ite	ne
 80026fa:	2301      	movne	r3, #1
 80026fc:	2300      	moveq	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	e02f      	b.n	8002762 <HAL_TIM_PWM_Start+0x9e>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d109      	bne.n	800271c <HAL_TIM_PWM_Start+0x58>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e022      	b.n	8002762 <HAL_TIM_PWM_Start+0x9e>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b0c      	cmp	r3, #12
 8002720:	d109      	bne.n	8002736 <HAL_TIM_PWM_Start+0x72>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	bf14      	ite	ne
 800272e:	2301      	movne	r3, #1
 8002730:	2300      	moveq	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	e015      	b.n	8002762 <HAL_TIM_PWM_Start+0x9e>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b10      	cmp	r3, #16
 800273a:	d109      	bne.n	8002750 <HAL_TIM_PWM_Start+0x8c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	bf14      	ite	ne
 8002748:	2301      	movne	r3, #1
 800274a:	2300      	moveq	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	e008      	b.n	8002762 <HAL_TIM_PWM_Start+0x9e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e0a1      	b.n	80028ae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <HAL_TIM_PWM_Start+0xb6>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002778:	e023      	b.n	80027c2 <HAL_TIM_PWM_Start+0xfe>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d104      	bne.n	800278a <HAL_TIM_PWM_Start+0xc6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002788:	e01b      	b.n	80027c2 <HAL_TIM_PWM_Start+0xfe>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d104      	bne.n	800279a <HAL_TIM_PWM_Start+0xd6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002798:	e013      	b.n	80027c2 <HAL_TIM_PWM_Start+0xfe>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b0c      	cmp	r3, #12
 800279e:	d104      	bne.n	80027aa <HAL_TIM_PWM_Start+0xe6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027a8:	e00b      	b.n	80027c2 <HAL_TIM_PWM_Start+0xfe>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d104      	bne.n	80027ba <HAL_TIM_PWM_Start+0xf6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b8:	e003      	b.n	80027c2 <HAL_TIM_PWM_Start+0xfe>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2201      	movs	r2, #1
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fd3e 	bl	800324c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a38      	ldr	r2, [pc, #224]	; (80028b8 <HAL_TIM_PWM_Start+0x1f4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d018      	beq.n	800280c <HAL_TIM_PWM_Start+0x148>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a37      	ldr	r2, [pc, #220]	; (80028bc <HAL_TIM_PWM_Start+0x1f8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_TIM_PWM_Start+0x148>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a35      	ldr	r2, [pc, #212]	; (80028c0 <HAL_TIM_PWM_Start+0x1fc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00e      	beq.n	800280c <HAL_TIM_PWM_Start+0x148>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a34      	ldr	r2, [pc, #208]	; (80028c4 <HAL_TIM_PWM_Start+0x200>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d009      	beq.n	800280c <HAL_TIM_PWM_Start+0x148>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <HAL_TIM_PWM_Start+0x204>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_TIM_PWM_Start+0x148>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a31      	ldr	r2, [pc, #196]	; (80028cc <HAL_TIM_PWM_Start+0x208>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d101      	bne.n	8002810 <HAL_TIM_PWM_Start+0x14c>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_TIM_PWM_Start+0x14e>
 8002810:	2300      	movs	r3, #0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <HAL_TIM_PWM_Start+0x1f4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d01d      	beq.n	800286c <HAL_TIM_PWM_Start+0x1a8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d018      	beq.n	800286c <HAL_TIM_PWM_Start+0x1a8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <HAL_TIM_PWM_Start+0x20c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_TIM_PWM_Start+0x1a8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_TIM_PWM_Start+0x210>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_TIM_PWM_Start+0x1a8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <HAL_TIM_PWM_Start+0x1f8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_TIM_PWM_Start+0x1a8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <HAL_TIM_PWM_Start+0x1fc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_TIM_PWM_Start+0x1a8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_TIM_PWM_Start+0x208>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d115      	bne.n	8002898 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_TIM_PWM_Start+0x214>)
 8002874:	4013      	ands	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b06      	cmp	r3, #6
 800287c:	d015      	beq.n	80028aa <HAL_TIM_PWM_Start+0x1e6>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002884:	d011      	beq.n	80028aa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002896:	e008      	b.n	80028aa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e000      	b.n	80028ac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40013400 	.word	0x40013400
 80028c0:	40014000 	.word	0x40014000
 80028c4:	40014400 	.word	0x40014400
 80028c8:	40014800 	.word	0x40014800
 80028cc:	40015000 	.word	0x40015000
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800
 80028d8:	00010007 	.word	0x00010007

080028dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0ff      	b.n	8002afa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b14      	cmp	r3, #20
 8002906:	f200 80f0 	bhi.w	8002aea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800290a:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	08002965 	.word	0x08002965
 8002914:	08002aeb 	.word	0x08002aeb
 8002918:	08002aeb 	.word	0x08002aeb
 800291c:	08002aeb 	.word	0x08002aeb
 8002920:	080029a5 	.word	0x080029a5
 8002924:	08002aeb 	.word	0x08002aeb
 8002928:	08002aeb 	.word	0x08002aeb
 800292c:	08002aeb 	.word	0x08002aeb
 8002930:	080029e7 	.word	0x080029e7
 8002934:	08002aeb 	.word	0x08002aeb
 8002938:	08002aeb 	.word	0x08002aeb
 800293c:	08002aeb 	.word	0x08002aeb
 8002940:	08002a27 	.word	0x08002a27
 8002944:	08002aeb 	.word	0x08002aeb
 8002948:	08002aeb 	.word	0x08002aeb
 800294c:	08002aeb 	.word	0x08002aeb
 8002950:	08002a69 	.word	0x08002a69
 8002954:	08002aeb 	.word	0x08002aeb
 8002958:	08002aeb 	.word	0x08002aeb
 800295c:	08002aeb 	.word	0x08002aeb
 8002960:	08002aa9 	.word	0x08002aa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f968 	bl	8002c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0208 	orr.w	r2, r2, #8
 800297e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0204 	bic.w	r2, r2, #4
 800298e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6999      	ldr	r1, [r3, #24]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	619a      	str	r2, [r3, #24]
      break;
 80029a2:	e0a5      	b.n	8002af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f9e2 	bl	8002d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6999      	ldr	r1, [r3, #24]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	021a      	lsls	r2, r3, #8
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	619a      	str	r2, [r3, #24]
      break;
 80029e4:	e084      	b.n	8002af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fa55 	bl	8002e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0208 	orr.w	r2, r2, #8
 8002a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0204 	bic.w	r2, r2, #4
 8002a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69d9      	ldr	r1, [r3, #28]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	61da      	str	r2, [r3, #28]
      break;
 8002a24:	e064      	b.n	8002af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fac7 	bl	8002fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69d9      	ldr	r1, [r3, #28]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	021a      	lsls	r2, r3, #8
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	61da      	str	r2, [r3, #28]
      break;
 8002a66:	e043      	b.n	8002af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fb16 	bl	80030a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0208 	orr.w	r2, r2, #8
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0204 	bic.w	r2, r2, #4
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002aa6:	e023      	b.n	8002af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fb60 	bl	8003174 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	021a      	lsls	r2, r3, #8
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ae8:	e002      	b.n	8002af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	75fb      	strb	r3, [r7, #23]
      break;
 8002aee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop

08002b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a42      	ldr	r2, [pc, #264]	; (8002c20 <TIM_Base_SetConfig+0x11c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <TIM_Base_SetConfig+0x40>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b22:	d00f      	beq.n	8002b44 <TIM_Base_SetConfig+0x40>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <TIM_Base_SetConfig+0x120>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00b      	beq.n	8002b44 <TIM_Base_SetConfig+0x40>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a3e      	ldr	r2, [pc, #248]	; (8002c28 <TIM_Base_SetConfig+0x124>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d007      	beq.n	8002b44 <TIM_Base_SetConfig+0x40>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a3d      	ldr	r2, [pc, #244]	; (8002c2c <TIM_Base_SetConfig+0x128>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d003      	beq.n	8002b44 <TIM_Base_SetConfig+0x40>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a3c      	ldr	r2, [pc, #240]	; (8002c30 <TIM_Base_SetConfig+0x12c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d108      	bne.n	8002b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a31      	ldr	r2, [pc, #196]	; (8002c20 <TIM_Base_SetConfig+0x11c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01f      	beq.n	8002b9e <TIM_Base_SetConfig+0x9a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d01b      	beq.n	8002b9e <TIM_Base_SetConfig+0x9a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a2e      	ldr	r2, [pc, #184]	; (8002c24 <TIM_Base_SetConfig+0x120>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d017      	beq.n	8002b9e <TIM_Base_SetConfig+0x9a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a2d      	ldr	r2, [pc, #180]	; (8002c28 <TIM_Base_SetConfig+0x124>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <TIM_Base_SetConfig+0x9a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <TIM_Base_SetConfig+0x128>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00f      	beq.n	8002b9e <TIM_Base_SetConfig+0x9a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a2c      	ldr	r2, [pc, #176]	; (8002c34 <TIM_Base_SetConfig+0x130>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00b      	beq.n	8002b9e <TIM_Base_SetConfig+0x9a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a2b      	ldr	r2, [pc, #172]	; (8002c38 <TIM_Base_SetConfig+0x134>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <TIM_Base_SetConfig+0x9a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a2a      	ldr	r2, [pc, #168]	; (8002c3c <TIM_Base_SetConfig+0x138>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d003      	beq.n	8002b9e <TIM_Base_SetConfig+0x9a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <TIM_Base_SetConfig+0x12c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d108      	bne.n	8002bb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <TIM_Base_SetConfig+0x11c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <TIM_Base_SetConfig+0x100>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <TIM_Base_SetConfig+0x128>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00f      	beq.n	8002c04 <TIM_Base_SetConfig+0x100>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <TIM_Base_SetConfig+0x130>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <TIM_Base_SetConfig+0x100>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <TIM_Base_SetConfig+0x134>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d007      	beq.n	8002c04 <TIM_Base_SetConfig+0x100>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <TIM_Base_SetConfig+0x138>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_Base_SetConfig+0x100>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <TIM_Base_SetConfig+0x12c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d103      	bne.n	8002c0c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	615a      	str	r2, [r3, #20]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40013400 	.word	0x40013400
 8002c30:	40015000 	.word	0x40015000
 8002c34:	40014000 	.word	0x40014000
 8002c38:	40014400 	.word	0x40014400
 8002c3c:	40014800 	.word	0x40014800

08002c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f023 0201 	bic.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0303 	bic.w	r3, r3, #3
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f023 0302 	bic.w	r3, r3, #2
 8002c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <TIM_OC1_SetConfig+0x11c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <TIM_OC1_SetConfig+0x88>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <TIM_OC1_SetConfig+0x120>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00f      	beq.n	8002cc8 <TIM_OC1_SetConfig+0x88>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a2e      	ldr	r2, [pc, #184]	; (8002d64 <TIM_OC1_SetConfig+0x124>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <TIM_OC1_SetConfig+0x88>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <TIM_OC1_SetConfig+0x128>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <TIM_OC1_SetConfig+0x88>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <TIM_OC1_SetConfig+0x12c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_OC1_SetConfig+0x88>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <TIM_OC1_SetConfig+0x130>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d10c      	bne.n	8002ce2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f023 0308 	bic.w	r3, r3, #8
 8002cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <TIM_OC1_SetConfig+0x11c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <TIM_OC1_SetConfig+0xd2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <TIM_OC1_SetConfig+0x120>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00f      	beq.n	8002d12 <TIM_OC1_SetConfig+0xd2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <TIM_OC1_SetConfig+0x124>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00b      	beq.n	8002d12 <TIM_OC1_SetConfig+0xd2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <TIM_OC1_SetConfig+0x128>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <TIM_OC1_SetConfig+0xd2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <TIM_OC1_SetConfig+0x12c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d003      	beq.n	8002d12 <TIM_OC1_SetConfig+0xd2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <TIM_OC1_SetConfig+0x130>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d111      	bne.n	8002d36 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	621a      	str	r2, [r3, #32]
}
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40013400 	.word	0x40013400
 8002d64:	40014000 	.word	0x40014000
 8002d68:	40014400 	.word	0x40014400
 8002d6c:	40014800 	.word	0x40014800
 8002d70:	40015000 	.word	0x40015000

08002d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0210 	bic.w	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f023 0320 	bic.w	r3, r3, #32
 8002dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a2c      	ldr	r2, [pc, #176]	; (8002e84 <TIM_OC2_SetConfig+0x110>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d007      	beq.n	8002de8 <TIM_OC2_SetConfig+0x74>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a2b      	ldr	r2, [pc, #172]	; (8002e88 <TIM_OC2_SetConfig+0x114>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d003      	beq.n	8002de8 <TIM_OC2_SetConfig+0x74>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <TIM_OC2_SetConfig+0x118>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d10d      	bne.n	8002e04 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <TIM_OC2_SetConfig+0x110>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d013      	beq.n	8002e34 <TIM_OC2_SetConfig+0xc0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <TIM_OC2_SetConfig+0x114>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00f      	beq.n	8002e34 <TIM_OC2_SetConfig+0xc0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <TIM_OC2_SetConfig+0x11c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <TIM_OC2_SetConfig+0xc0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <TIM_OC2_SetConfig+0x120>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <TIM_OC2_SetConfig+0xc0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <TIM_OC2_SetConfig+0x124>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_OC2_SetConfig+0xc0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <TIM_OC2_SetConfig+0x118>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d113      	bne.n	8002e5c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e3a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e42:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40013400 	.word	0x40013400
 8002e8c:	40015000 	.word	0x40015000
 8002e90:	40014000 	.word	0x40014000
 8002e94:	40014400 	.word	0x40014400
 8002e98:	40014800 	.word	0x40014800

08002e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0303 	bic.w	r3, r3, #3
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <TIM_OC3_SetConfig+0x10c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <TIM_OC3_SetConfig+0x72>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <TIM_OC3_SetConfig+0x110>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d003      	beq.n	8002f0e <TIM_OC3_SetConfig+0x72>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <TIM_OC3_SetConfig+0x114>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d10d      	bne.n	8002f2a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f28:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a1e      	ldr	r2, [pc, #120]	; (8002fa8 <TIM_OC3_SetConfig+0x10c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <TIM_OC3_SetConfig+0xbe>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <TIM_OC3_SetConfig+0x110>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00f      	beq.n	8002f5a <TIM_OC3_SetConfig+0xbe>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <TIM_OC3_SetConfig+0x118>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00b      	beq.n	8002f5a <TIM_OC3_SetConfig+0xbe>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <TIM_OC3_SetConfig+0x11c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <TIM_OC3_SetConfig+0xbe>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a1b      	ldr	r2, [pc, #108]	; (8002fbc <TIM_OC3_SetConfig+0x120>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d003      	beq.n	8002f5a <TIM_OC3_SetConfig+0xbe>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <TIM_OC3_SetConfig+0x114>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d113      	bne.n	8002f82 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	621a      	str	r2, [r3, #32]
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	40015000 	.word	0x40015000
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40014400 	.word	0x40014400
 8002fbc:	40014800 	.word	0x40014800

08002fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800300e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	031b      	lsls	r3, r3, #12
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <TIM_OC4_SetConfig+0xc8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d013      	beq.n	800304c <TIM_OC4_SetConfig+0x8c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a19      	ldr	r2, [pc, #100]	; (800308c <TIM_OC4_SetConfig+0xcc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00f      	beq.n	800304c <TIM_OC4_SetConfig+0x8c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a18      	ldr	r2, [pc, #96]	; (8003090 <TIM_OC4_SetConfig+0xd0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_OC4_SetConfig+0x8c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a17      	ldr	r2, [pc, #92]	; (8003094 <TIM_OC4_SetConfig+0xd4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_OC4_SetConfig+0x8c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a16      	ldr	r2, [pc, #88]	; (8003098 <TIM_OC4_SetConfig+0xd8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_OC4_SetConfig+0x8c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a15      	ldr	r2, [pc, #84]	; (800309c <TIM_OC4_SetConfig+0xdc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d109      	bne.n	8003060 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	019b      	lsls	r3, r3, #6
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	621a      	str	r2, [r3, #32]
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40013400 	.word	0x40013400
 8003090:	40014000 	.word	0x40014000
 8003094:	40014400 	.word	0x40014400
 8003098:	40014800 	.word	0x40014800
 800309c:	40015000 	.word	0x40015000

080030a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80030e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <TIM_OC5_SetConfig+0xbc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <TIM_OC5_SetConfig+0x82>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a18      	ldr	r2, [pc, #96]	; (8003160 <TIM_OC5_SetConfig+0xc0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00f      	beq.n	8003122 <TIM_OC5_SetConfig+0x82>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a17      	ldr	r2, [pc, #92]	; (8003164 <TIM_OC5_SetConfig+0xc4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00b      	beq.n	8003122 <TIM_OC5_SetConfig+0x82>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a16      	ldr	r2, [pc, #88]	; (8003168 <TIM_OC5_SetConfig+0xc8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <TIM_OC5_SetConfig+0x82>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a15      	ldr	r2, [pc, #84]	; (800316c <TIM_OC5_SetConfig+0xcc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_OC5_SetConfig+0x82>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <TIM_OC5_SetConfig+0xd0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d109      	bne.n	8003136 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003128:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	621a      	str	r2, [r3, #32]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40013400 	.word	0x40013400
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800
 8003170:	40015000 	.word	0x40015000

08003174 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	051b      	lsls	r3, r3, #20
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <TIM_OC6_SetConfig+0xc0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d013      	beq.n	80031f8 <TIM_OC6_SetConfig+0x84>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a19      	ldr	r2, [pc, #100]	; (8003238 <TIM_OC6_SetConfig+0xc4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00f      	beq.n	80031f8 <TIM_OC6_SetConfig+0x84>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a18      	ldr	r2, [pc, #96]	; (800323c <TIM_OC6_SetConfig+0xc8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00b      	beq.n	80031f8 <TIM_OC6_SetConfig+0x84>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <TIM_OC6_SetConfig+0xcc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d007      	beq.n	80031f8 <TIM_OC6_SetConfig+0x84>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a16      	ldr	r2, [pc, #88]	; (8003244 <TIM_OC6_SetConfig+0xd0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d003      	beq.n	80031f8 <TIM_OC6_SetConfig+0x84>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a15      	ldr	r2, [pc, #84]	; (8003248 <TIM_OC6_SetConfig+0xd4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d109      	bne.n	800320c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	029b      	lsls	r3, r3, #10
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40013400 	.word	0x40013400
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400
 8003244:	40014800 	.word	0x40014800
 8003248:	40015000 	.word	0x40015000

0800324c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2201      	movs	r2, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1a      	ldr	r2, [r3, #32]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e06d      	b.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a30      	ldr	r2, [pc, #192]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2f      	ldr	r2, [pc, #188]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2d      	ldr	r2, [pc, #180]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d01d      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d018      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1a      	ldr	r2, [pc, #104]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00e      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a16      	ldr	r2, [pc, #88]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a11      	ldr	r2, [pc, #68]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10c      	bne.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	4313      	orrs	r3, r2
 8003370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40013400 	.word	0x40013400
 80033a0:	40015000 	.word	0x40015000
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800
 80033ac:	40014000 	.word	0x40014000

080033b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e040      	b.n	8003444 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd f8e0 	bl	8000598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	; 0x24
 80033dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f82c 	bl	800344c <UART_SetConfig>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e022      	b.n	8003444 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f9f4 	bl	80037f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800341a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800342a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fa7b 	bl	8003938 <UART_CheckIdleState>
 8003442:	4603      	mov	r3, r0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b92      	ldr	r3, [pc, #584]	; (80036c0 <UART_SetConfig+0x274>)
 8003478:	4013      	ands	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	6979      	ldr	r1, [r7, #20]
 8003480:	430b      	orrs	r3, r1
 8003482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a80      	ldr	r2, [pc, #512]	; (80036c4 <UART_SetConfig+0x278>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d120      	bne.n	800350a <UART_SetConfig+0xbe>
 80034c8:	4b7f      	ldr	r3, [pc, #508]	; (80036c8 <UART_SetConfig+0x27c>)
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d817      	bhi.n	8003504 <UART_SetConfig+0xb8>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0x90>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034f9 	.word	0x080034f9
 80034e4:	080034ff 	.word	0x080034ff
 80034e8:	080034f3 	.word	0x080034f3
 80034ec:	2301      	movs	r3, #1
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e0b5      	b.n	800365e <UART_SetConfig+0x212>
 80034f2:	2302      	movs	r3, #2
 80034f4:	77fb      	strb	r3, [r7, #31]
 80034f6:	e0b2      	b.n	800365e <UART_SetConfig+0x212>
 80034f8:	2304      	movs	r3, #4
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e0af      	b.n	800365e <UART_SetConfig+0x212>
 80034fe:	2308      	movs	r3, #8
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e0ac      	b.n	800365e <UART_SetConfig+0x212>
 8003504:	2310      	movs	r3, #16
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e0a9      	b.n	800365e <UART_SetConfig+0x212>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a6f      	ldr	r2, [pc, #444]	; (80036cc <UART_SetConfig+0x280>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d124      	bne.n	800355e <UART_SetConfig+0x112>
 8003514:	4b6c      	ldr	r3, [pc, #432]	; (80036c8 <UART_SetConfig+0x27c>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800351c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003520:	d011      	beq.n	8003546 <UART_SetConfig+0xfa>
 8003522:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003526:	d817      	bhi.n	8003558 <UART_SetConfig+0x10c>
 8003528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800352c:	d011      	beq.n	8003552 <UART_SetConfig+0x106>
 800352e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003532:	d811      	bhi.n	8003558 <UART_SetConfig+0x10c>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <UART_SetConfig+0xf4>
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d006      	beq.n	800354c <UART_SetConfig+0x100>
 800353e:	e00b      	b.n	8003558 <UART_SetConfig+0x10c>
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e08b      	b.n	800365e <UART_SetConfig+0x212>
 8003546:	2302      	movs	r3, #2
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e088      	b.n	800365e <UART_SetConfig+0x212>
 800354c:	2304      	movs	r3, #4
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e085      	b.n	800365e <UART_SetConfig+0x212>
 8003552:	2308      	movs	r3, #8
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e082      	b.n	800365e <UART_SetConfig+0x212>
 8003558:	2310      	movs	r3, #16
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e07f      	b.n	800365e <UART_SetConfig+0x212>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5b      	ldr	r2, [pc, #364]	; (80036d0 <UART_SetConfig+0x284>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d124      	bne.n	80035b2 <UART_SetConfig+0x166>
 8003568:	4b57      	ldr	r3, [pc, #348]	; (80036c8 <UART_SetConfig+0x27c>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003570:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003574:	d011      	beq.n	800359a <UART_SetConfig+0x14e>
 8003576:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800357a:	d817      	bhi.n	80035ac <UART_SetConfig+0x160>
 800357c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003580:	d011      	beq.n	80035a6 <UART_SetConfig+0x15a>
 8003582:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003586:	d811      	bhi.n	80035ac <UART_SetConfig+0x160>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <UART_SetConfig+0x148>
 800358c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003590:	d006      	beq.n	80035a0 <UART_SetConfig+0x154>
 8003592:	e00b      	b.n	80035ac <UART_SetConfig+0x160>
 8003594:	2300      	movs	r3, #0
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e061      	b.n	800365e <UART_SetConfig+0x212>
 800359a:	2302      	movs	r3, #2
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	e05e      	b.n	800365e <UART_SetConfig+0x212>
 80035a0:	2304      	movs	r3, #4
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e05b      	b.n	800365e <UART_SetConfig+0x212>
 80035a6:	2308      	movs	r3, #8
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e058      	b.n	800365e <UART_SetConfig+0x212>
 80035ac:	2310      	movs	r3, #16
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e055      	b.n	800365e <UART_SetConfig+0x212>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a47      	ldr	r2, [pc, #284]	; (80036d4 <UART_SetConfig+0x288>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d124      	bne.n	8003606 <UART_SetConfig+0x1ba>
 80035bc:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <UART_SetConfig+0x27c>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80035c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035c8:	d011      	beq.n	80035ee <UART_SetConfig+0x1a2>
 80035ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035ce:	d817      	bhi.n	8003600 <UART_SetConfig+0x1b4>
 80035d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d4:	d011      	beq.n	80035fa <UART_SetConfig+0x1ae>
 80035d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035da:	d811      	bhi.n	8003600 <UART_SetConfig+0x1b4>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <UART_SetConfig+0x19c>
 80035e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e4:	d006      	beq.n	80035f4 <UART_SetConfig+0x1a8>
 80035e6:	e00b      	b.n	8003600 <UART_SetConfig+0x1b4>
 80035e8:	2300      	movs	r3, #0
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e037      	b.n	800365e <UART_SetConfig+0x212>
 80035ee:	2302      	movs	r3, #2
 80035f0:	77fb      	strb	r3, [r7, #31]
 80035f2:	e034      	b.n	800365e <UART_SetConfig+0x212>
 80035f4:	2304      	movs	r3, #4
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e031      	b.n	800365e <UART_SetConfig+0x212>
 80035fa:	2308      	movs	r3, #8
 80035fc:	77fb      	strb	r3, [r7, #31]
 80035fe:	e02e      	b.n	800365e <UART_SetConfig+0x212>
 8003600:	2310      	movs	r3, #16
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e02b      	b.n	800365e <UART_SetConfig+0x212>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a33      	ldr	r2, [pc, #204]	; (80036d8 <UART_SetConfig+0x28c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d124      	bne.n	800365a <UART_SetConfig+0x20e>
 8003610:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <UART_SetConfig+0x27c>)
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003618:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800361c:	d011      	beq.n	8003642 <UART_SetConfig+0x1f6>
 800361e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003622:	d817      	bhi.n	8003654 <UART_SetConfig+0x208>
 8003624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003628:	d011      	beq.n	800364e <UART_SetConfig+0x202>
 800362a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800362e:	d811      	bhi.n	8003654 <UART_SetConfig+0x208>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <UART_SetConfig+0x1f0>
 8003634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003638:	d006      	beq.n	8003648 <UART_SetConfig+0x1fc>
 800363a:	e00b      	b.n	8003654 <UART_SetConfig+0x208>
 800363c:	2300      	movs	r3, #0
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e00d      	b.n	800365e <UART_SetConfig+0x212>
 8003642:	2302      	movs	r3, #2
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e00a      	b.n	800365e <UART_SetConfig+0x212>
 8003648:	2304      	movs	r3, #4
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e007      	b.n	800365e <UART_SetConfig+0x212>
 800364e:	2308      	movs	r3, #8
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e004      	b.n	800365e <UART_SetConfig+0x212>
 8003654:	2310      	movs	r3, #16
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e001      	b.n	800365e <UART_SetConfig+0x212>
 800365a:	2310      	movs	r3, #16
 800365c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003666:	d16b      	bne.n	8003740 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003668:	7ffb      	ldrb	r3, [r7, #31]
 800366a:	2b08      	cmp	r3, #8
 800366c:	d838      	bhi.n	80036e0 <UART_SetConfig+0x294>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <UART_SetConfig+0x228>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	08003699 	.word	0x08003699
 8003678:	080036a1 	.word	0x080036a1
 800367c:	080036a9 	.word	0x080036a9
 8003680:	080036e1 	.word	0x080036e1
 8003684:	080036af 	.word	0x080036af
 8003688:	080036e1 	.word	0x080036e1
 800368c:	080036e1 	.word	0x080036e1
 8003690:	080036e1 	.word	0x080036e1
 8003694:	080036b7 	.word	0x080036b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003698:	f7fe fd5a 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 800369c:	61b8      	str	r0, [r7, #24]
        break;
 800369e:	e024      	b.n	80036ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a0:	f7fe fd78 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 80036a4:	61b8      	str	r0, [r7, #24]
        break;
 80036a6:	e020      	b.n	80036ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <UART_SetConfig+0x290>)
 80036aa:	61bb      	str	r3, [r7, #24]
        break;
 80036ac:	e01d      	b.n	80036ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ae:	f7fe fcd9 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 80036b2:	61b8      	str	r0, [r7, #24]
        break;
 80036b4:	e019      	b.n	80036ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ba:	61bb      	str	r3, [r7, #24]
        break;
 80036bc:	e015      	b.n	80036ea <UART_SetConfig+0x29e>
 80036be:	bf00      	nop
 80036c0:	efff69f3 	.word	0xefff69f3
 80036c4:	40013800 	.word	0x40013800
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40004400 	.word	0x40004400
 80036d0:	40004800 	.word	0x40004800
 80036d4:	40004c00 	.word	0x40004c00
 80036d8:	40005000 	.word	0x40005000
 80036dc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	77bb      	strb	r3, [r7, #30]
        break;
 80036e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d073      	beq.n	80037d8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	005a      	lsls	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	441a      	add	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b0f      	cmp	r3, #15
 800370a:	d916      	bls.n	800373a <UART_SetConfig+0x2ee>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003712:	d212      	bcs.n	800373a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f023 030f 	bic.w	r3, r3, #15
 800371c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	b29b      	uxth	r3, r3
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	b29a      	uxth	r2, r3
 800372a:	89fb      	ldrh	r3, [r7, #14]
 800372c:	4313      	orrs	r3, r2
 800372e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	89fa      	ldrh	r2, [r7, #14]
 8003736:	60da      	str	r2, [r3, #12]
 8003738:	e04e      	b.n	80037d8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	77bb      	strb	r3, [r7, #30]
 800373e:	e04b      	b.n	80037d8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003740:	7ffb      	ldrb	r3, [r7, #31]
 8003742:	2b08      	cmp	r3, #8
 8003744:	d827      	bhi.n	8003796 <UART_SetConfig+0x34a>
 8003746:	a201      	add	r2, pc, #4	; (adr r2, 800374c <UART_SetConfig+0x300>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	08003771 	.word	0x08003771
 8003750:	08003779 	.word	0x08003779
 8003754:	08003781 	.word	0x08003781
 8003758:	08003797 	.word	0x08003797
 800375c:	08003787 	.word	0x08003787
 8003760:	08003797 	.word	0x08003797
 8003764:	08003797 	.word	0x08003797
 8003768:	08003797 	.word	0x08003797
 800376c:	0800378f 	.word	0x0800378f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003770:	f7fe fcee 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8003774:	61b8      	str	r0, [r7, #24]
        break;
 8003776:	e013      	b.n	80037a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003778:	f7fe fd0c 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 800377c:	61b8      	str	r0, [r7, #24]
        break;
 800377e:	e00f      	b.n	80037a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <UART_SetConfig+0x3a4>)
 8003782:	61bb      	str	r3, [r7, #24]
        break;
 8003784:	e00c      	b.n	80037a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003786:	f7fe fc6d 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 800378a:	61b8      	str	r0, [r7, #24]
        break;
 800378c:	e008      	b.n	80037a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003792:	61bb      	str	r3, [r7, #24]
        break;
 8003794:	e004      	b.n	80037a0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	77bb      	strb	r3, [r7, #30]
        break;
 800379e:	bf00      	nop
    }

    if (pclk != 0U)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d018      	beq.n	80037d8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	085a      	lsrs	r2, r3, #1
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	441a      	add	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b0f      	cmp	r3, #15
 80037be:	d909      	bls.n	80037d4 <UART_SetConfig+0x388>
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c6:	d205      	bcs.n	80037d4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	e001      	b.n	80037d8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	007a1200 	.word	0x007a1200

080037f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01a      	beq.n	800390a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038f2:	d10a      	bne.n	800390a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b098      	sub	sp, #96	; 0x60
 800393c:	af02      	add	r7, sp, #8
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003948:	f7fc ff28 	bl	800079c <HAL_GetTick>
 800394c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b08      	cmp	r3, #8
 800395a:	d12e      	bne.n	80039ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800395c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003964:	2200      	movs	r2, #0
 8003966:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f88c 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d021      	beq.n	80039ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800398a:	653b      	str	r3, [r7, #80]	; 0x50
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003994:	647b      	str	r3, [r7, #68]	; 0x44
 8003996:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800399a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e6      	bne.n	8003976 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e062      	b.n	8003a80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d149      	bne.n	8003a5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f856 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d03c      	beq.n	8003a5c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	623b      	str	r3, [r7, #32]
   return(result);
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30
 8003a02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e6      	bne.n	80039e2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a34:	61fa      	str	r2, [r7, #28]
 8003a36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	617b      	str	r3, [r7, #20]
   return(result);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e5      	bne.n	8003a14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e011      	b.n	8003a80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3758      	adds	r7, #88	; 0x58
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a98:	e049      	b.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d045      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fc fe7b 	bl	800079c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e048      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d031      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d110      	bne.n	8003afa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2208      	movs	r2, #8
 8003ade:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f838 	bl	8003b56 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e029      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b08:	d111      	bne.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f81e 	bl	8003b56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e00f      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4013      	ands	r3, r2
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	bf0c      	ite	eq
 8003b3e:	2301      	moveq	r3, #1
 8003b40:	2300      	movne	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d0a6      	beq.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b095      	sub	sp, #84	; 0x54
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e6      	bne.n	8003b5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3308      	adds	r3, #8
 8003b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3308      	adds	r3, #8
 8003bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e5      	bne.n	8003b90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d118      	bne.n	8003bfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f023 0310 	bic.w	r3, r3, #16
 8003be0:	647b      	str	r3, [r7, #68]	; 0x44
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e6      	bne.n	8003bcc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c12:	bf00      	nop
 8003c14:	3754      	adds	r7, #84	; 0x54
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <memset>:
 8003c1e:	4402      	add	r2, r0
 8003c20:	4603      	mov	r3, r0
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d100      	bne.n	8003c28 <memset+0xa>
 8003c26:	4770      	bx	lr
 8003c28:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2c:	e7f9      	b.n	8003c22 <memset+0x4>
	...

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4d0d      	ldr	r5, [pc, #52]	; (8003c68 <__libc_init_array+0x38>)
 8003c34:	4c0d      	ldr	r4, [pc, #52]	; (8003c6c <__libc_init_array+0x3c>)
 8003c36:	1b64      	subs	r4, r4, r5
 8003c38:	10a4      	asrs	r4, r4, #2
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	42a6      	cmp	r6, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	4d0b      	ldr	r5, [pc, #44]	; (8003c70 <__libc_init_array+0x40>)
 8003c42:	4c0c      	ldr	r4, [pc, #48]	; (8003c74 <__libc_init_array+0x44>)
 8003c44:	f000 f818 	bl	8003c78 <_init>
 8003c48:	1b64      	subs	r4, r4, r5
 8003c4a:	10a4      	asrs	r4, r4, #2
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	42a6      	cmp	r6, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c58:	4798      	blx	r3
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c62:	4798      	blx	r3
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	08003cc8 	.word	0x08003cc8
 8003c6c:	08003cc8 	.word	0x08003cc8
 8003c70:	08003cc8 	.word	0x08003cc8
 8003c74:	08003ccc 	.word	0x08003ccc

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
