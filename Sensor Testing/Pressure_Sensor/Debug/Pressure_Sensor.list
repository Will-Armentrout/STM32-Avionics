
Pressure_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e9c  08003e9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e9c  08003e9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e9c  08003e9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ea0  08003ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000fc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bf0f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000192c  00000000  00000000  0002bf8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000074e  00000000  00000000  0002e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f14c  00000000  00000000  0002e966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d956  00000000  00000000  0004dab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bd56c  00000000  00000000  0005b408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002630  00000000  00000000  00118974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0011afa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e4c 	.word	0x08003e4c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003e4c 	.word	0x08003e4c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b0b8      	sub	sp, #224	; 0xe0
 80001d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fc0b 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f99f 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 fa6d 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 fa3b 	bl	8000660 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001ea:	f000 f9f9 	bl	80005e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Pressure Sensor Loop Variables*/
  	  /* Slave Address of the BMP280 */
  	  uint16_t BMP_Address = 0xEC; /* BMP 280 Address */
 80001ee:	23ec      	movs	r3, #236	; 0xec
 80001f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

  	  /* Register Addresses */
  	  uint8_t regAddress_CTRL_MEAS = 0xF4; /* Oversampling control */
 80001f4:	23f4      	movs	r3, #244	; 0xf4
 80001f6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
  	  uint8_t regAddress_CONFIG = 0xF5; /* Data rate/filter and interface */
 80001fa:	23f5      	movs	r3, #245	; 0xf5
 80001fc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
  	  uint8_t regAddress_PRESS_MSB = 0xF7; /* Pressure Most Significant Bits */
 8000200:	23f7      	movs	r3, #247	; 0xf7
 8000202:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
  	  uint8_t regAddress_PRESS_LSB = 0xF8; /* Pressure Least Significant Bits */
 8000206:	23f8      	movs	r3, #248	; 0xf8
 8000208:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
  	  uint8_t regAddress_PRESS_XLSB = 0xF9; /* Pressure Extreme Least Significant Bits */
 800020c:	23f9      	movs	r3, #249	; 0xf9
 800020e:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
  	  uint8_t regAddress_TEMP_MSB = 0xFA; /* Temperature Most Significant Bits */
 8000212:	23fa      	movs	r3, #250	; 0xfa
 8000214:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
  	  uint8_t regAddress_TEMP_LSB = 0xFB; /* Temperature Least Significant Bits */
 8000218:	23fb      	movs	r3, #251	; 0xfb
 800021a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  	  uint8_t regAddress_TEMP_XLSB = 0xFC; /* Temperature Extreme Least Significant Bits */
 800021e:	23fc      	movs	r3, #252	; 0xfc
 8000220:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6

  	  /* Trimming Register Addresses */
  	  uint8_t regAddress_Dig_T1 = 0x88;
 8000224:	2388      	movs	r3, #136	; 0x88
 8000226:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
  	  uint8_t regAddress_Dig_T2 = 0x8A;
 800022a:	238a      	movs	r3, #138	; 0x8a
 800022c:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
  	  uint8_t regAddress_Dig_T3 = 0x8C;
 8000230:	238c      	movs	r3, #140	; 0x8c
 8000232:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	  uint8_t regAddress_Dig_P1 = 0x8E;
 8000236:	238e      	movs	r3, #142	; 0x8e
 8000238:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	  uint8_t regAddress_Dig_P2 = 0x90;
 800023c:	2390      	movs	r3, #144	; 0x90
 800023e:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
	  uint8_t regAddress_Dig_P3 = 0x92;
 8000242:	2392      	movs	r3, #146	; 0x92
 8000244:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
	  uint8_t regAddress_Dig_P4 = 0x94;
 8000248:	2394      	movs	r3, #148	; 0x94
 800024a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	  uint8_t regAddress_Dig_P5 = 0x96;
 800024e:	2396      	movs	r3, #150	; 0x96
 8000250:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
	  uint8_t regAddress_Dig_P6 = 0x98;
 8000254:	2398      	movs	r3, #152	; 0x98
 8000256:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
	  uint8_t regAddress_Dig_P7 = 0x9A;
 800025a:	239a      	movs	r3, #154	; 0x9a
 800025c:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
	  uint8_t regAddress_Dig_P8 = 0x9C;
 8000260:	239c      	movs	r3, #156	; 0x9c
 8000262:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	  uint8_t regAddress_Dig_P9 = 0x9E;
 8000266:	239e      	movs	r3, #158	; 0x9e
 8000268:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba


  	  /* Register Values */
  	  uint8_t regCTRL_MEAS = 0x27; /* Oversampling x1 for Pressure and Temp, Normal Mode 00100111*/
 800026c:	2327      	movs	r3, #39	; 0x27
 800026e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  	  uint8_t regCONFIG = 0x00; /* Not sure about this. 0.5ms rate, filter off, SPI off */
 8000272:	2300      	movs	r3, #0
 8000274:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
  	  float tempVal; /* Decimal Temperature */
  	  char pressure[64]; /* String Pressure Output */
  	  char temperature[64]; /* String Temperature Output */

  	  /* Configuration of the BMP280 */
  	  HAL_I2C_Mem_Write(&hi2c1, BMP_Address, regAddress_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &regCTRL_MEAS, 1, 2000u); /* Writing to the ctrl measurement register */
 8000278:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800027c:	b29a      	uxth	r2, r3
 800027e:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 8000282:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000286:	9302      	str	r3, [sp, #8]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	f107 039f 	add.w	r3, r7, #159	; 0x9f
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2301      	movs	r3, #1
 8000294:	48a1      	ldr	r0, [pc, #644]	; (800051c <main+0x348>)
 8000296:	f000 ff4f 	bl	8001138 <HAL_I2C_Mem_Write>
  	  HAL_I2C_Mem_Write(&hi2c1, BMP_Address, regAddress_CONFIG, I2C_MEMADD_SIZE_8BIT, &regCONFIG, 1, 2000u); /* Writing to the ctrl measurement register */
 800029a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800029e:	b29a      	uxth	r2, r3
 80002a0:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80002a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002a8:	9302      	str	r3, [sp, #8]
 80002aa:	2301      	movs	r3, #1
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	f107 039e 	add.w	r3, r7, #158	; 0x9e
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	2301      	movs	r3, #1
 80002b6:	4899      	ldr	r0, [pc, #612]	; (800051c <main+0x348>)
 80002b8:	f000 ff3e 	bl	8001138 <HAL_I2C_Mem_Write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, &data, 6, 2000u); /* Reading pressure and temperature */
 80002bc:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80002c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002ca:	9302      	str	r3, [sp, #8]
 80002cc:	2306      	movs	r3, #6
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2301      	movs	r3, #1
 80002d8:	4890      	ldr	r0, [pc, #576]	; (800051c <main+0x348>)
 80002da:	f001 f841 	bl	8001360 <HAL_I2C_Mem_Read>

	  temp = (int32_t)((data[0] << 12) | data[1] << 4 | data[2]);
 80002de:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80002e2:	031a      	lsls	r2, r3, #12
 80002e4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	4313      	orrs	r3, r2
 80002ec:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80002f0:	4313      	orrs	r3, r2
 80002f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  press = (int32_t)((data[3] << 12) | data[4] << 4 | data[5]);
 80002f6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80002fa:	031a      	lsls	r2, r3, #12
 80002fc:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000300:	011b      	lsls	r3, r3, #4
 8000302:	4313      	orrs	r3, r2
 8000304:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8000308:	4313      	orrs	r3, r2
 800030a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	  /* Reading the Trimming Values */
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T1, I2C_MEMADD_SIZE_8BIT, &dig_T1, 2, 2000u); /* Getting the Trimming Values */
 800030e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8000312:	b29a      	uxth	r2, r3
 8000314:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 8000318:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800031c:	9302      	str	r3, [sp, #8]
 800031e:	2302      	movs	r3, #2
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	f107 0396 	add.w	r3, r7, #150	; 0x96
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2301      	movs	r3, #1
 800032a:	487c      	ldr	r0, [pc, #496]	; (800051c <main+0x348>)
 800032c:	f001 f818 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T2, I2C_MEMADD_SIZE_8BIT, &dig_T2, 2, 2000u); /* Getting the Trimming Values */
 8000330:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8000334:	b29a      	uxth	r2, r3
 8000336:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800033a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800033e:	9302      	str	r3, [sp, #8]
 8000340:	2302      	movs	r3, #2
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2301      	movs	r3, #1
 800034c:	4873      	ldr	r0, [pc, #460]	; (800051c <main+0x348>)
 800034e:	f001 f807 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T3, I2C_MEMADD_SIZE_8BIT, &dig_T3, 2, 2000u); /* Getting the Trimming Values */
 8000352:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000356:	b29a      	uxth	r2, r3
 8000358:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800035c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000360:	9302      	str	r3, [sp, #8]
 8000362:	2302      	movs	r3, #2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	f107 0392 	add.w	r3, r7, #146	; 0x92
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2301      	movs	r3, #1
 800036e:	486b      	ldr	r0, [pc, #428]	; (800051c <main+0x348>)
 8000370:	f000 fff6 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P1, I2C_MEMADD_SIZE_8BIT, &dig_P1, 2, 2000u); /* Getting the Trimming Values */
 8000374:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8000378:	b29a      	uxth	r2, r3
 800037a:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800037e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000382:	9302      	str	r3, [sp, #8]
 8000384:	2302      	movs	r3, #2
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	2301      	movs	r3, #1
 8000390:	4862      	ldr	r0, [pc, #392]	; (800051c <main+0x348>)
 8000392:	f000 ffe5 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P2, I2C_MEMADD_SIZE_8BIT, &dig_P2, 2, 2000u); /* Getting the Trimming Values */
 8000396:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 800039a:	b29a      	uxth	r2, r3
 800039c:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80003a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003a4:	9302      	str	r3, [sp, #8]
 80003a6:	2302      	movs	r3, #2
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	2301      	movs	r3, #1
 80003b2:	485a      	ldr	r0, [pc, #360]	; (800051c <main+0x348>)
 80003b4:	f000 ffd4 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P3, I2C_MEMADD_SIZE_8BIT, &dig_P3, 2, 2000u); /* Getting the Trimming Values */
 80003b8:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80003bc:	b29a      	uxth	r2, r3
 80003be:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80003c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003c6:	9302      	str	r3, [sp, #8]
 80003c8:	2302      	movs	r3, #2
 80003ca:	9301      	str	r3, [sp, #4]
 80003cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2301      	movs	r3, #1
 80003d4:	4851      	ldr	r0, [pc, #324]	; (800051c <main+0x348>)
 80003d6:	f000 ffc3 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P4, I2C_MEMADD_SIZE_8BIT, &dig_P4, 2, 2000u); /* Getting the Trimming Values */
 80003da:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80003de:	b29a      	uxth	r2, r3
 80003e0:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80003e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003e8:	9302      	str	r3, [sp, #8]
 80003ea:	2302      	movs	r3, #2
 80003ec:	9301      	str	r3, [sp, #4]
 80003ee:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2301      	movs	r3, #1
 80003f6:	4849      	ldr	r0, [pc, #292]	; (800051c <main+0x348>)
 80003f8:	f000 ffb2 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P5, I2C_MEMADD_SIZE_8BIT, &dig_P5, 2, 2000u); /* Getting the Trimming Values */
 80003fc:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8000400:	b29a      	uxth	r2, r3
 8000402:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 8000406:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800040a:	9302      	str	r3, [sp, #8]
 800040c:	2302      	movs	r3, #2
 800040e:	9301      	str	r3, [sp, #4]
 8000410:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2301      	movs	r3, #1
 8000418:	4840      	ldr	r0, [pc, #256]	; (800051c <main+0x348>)
 800041a:	f000 ffa1 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P6, I2C_MEMADD_SIZE_8BIT, &dig_P6, 2, 2000u); /* Getting the Trimming Values */
 800041e:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8000422:	b29a      	uxth	r2, r3
 8000424:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 8000428:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800042c:	9302      	str	r3, [sp, #8]
 800042e:	2302      	movs	r3, #2
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2301      	movs	r3, #1
 800043a:	4838      	ldr	r0, [pc, #224]	; (800051c <main+0x348>)
 800043c:	f000 ff90 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P7, I2C_MEMADD_SIZE_8BIT, &dig_P7, 2, 2000u); /* Getting the Trimming Values */
 8000440:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8000444:	b29a      	uxth	r2, r3
 8000446:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800044a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800044e:	9302      	str	r3, [sp, #8]
 8000450:	2302      	movs	r3, #2
 8000452:	9301      	str	r3, [sp, #4]
 8000454:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2301      	movs	r3, #1
 800045c:	482f      	ldr	r0, [pc, #188]	; (800051c <main+0x348>)
 800045e:	f000 ff7f 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P8, I2C_MEMADD_SIZE_8BIT, &dig_P8, 2, 2000u); /* Getting the Trimming Values */
 8000462:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000466:	b29a      	uxth	r2, r3
 8000468:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800046c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000470:	9302      	str	r3, [sp, #8]
 8000472:	2302      	movs	r3, #2
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	f107 0382 	add.w	r3, r7, #130	; 0x82
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	2301      	movs	r3, #1
 800047e:	4827      	ldr	r0, [pc, #156]	; (800051c <main+0x348>)
 8000480:	f000 ff6e 	bl	8001360 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P9, I2C_MEMADD_SIZE_8BIT, &dig_P9, 2, 2000u); /* Getting the Trimming Values */
 8000484:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000488:	b29a      	uxth	r2, r3
 800048a:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800048e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000492:	9302      	str	r3, [sp, #8]
 8000494:	2302      	movs	r3, #2
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2301      	movs	r3, #1
 80004a0:	481e      	ldr	r0, [pc, #120]	; (800051c <main+0x348>)
 80004a2:	f000 ff5d 	bl	8001360 <HAL_I2C_Mem_Read>


	  /* Compensation of Temperature */
	  var1 = ((((temp >> 14) - ((int32_t)dig_T1 >> 10))) * ((int32_t)dig_T2));
 80004a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80004aa:	139b      	asrs	r3, r3, #14
 80004ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80004b0:	0a92      	lsrs	r2, r2, #10
 80004b2:	b292      	uxth	r2, r2
 80004b4:	1a9b      	subs	r3, r3, r2
 80004b6:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 80004ba:	fb02 f303 	mul.w	r3, r2, r3
 80004be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	  var2 = (((((temp >> 17) - ((int32_t)dig_T1 >> 13)) * ((temp >> 17) - ((int32_t)dig_T1))) >> 13) * ((int32_t)dig_T3));
 80004c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80004c6:	145b      	asrs	r3, r3, #17
 80004c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80004cc:	0b52      	lsrs	r2, r2, #13
 80004ce:	b292      	uxth	r2, r2
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80004d6:	1452      	asrs	r2, r2, #17
 80004d8:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 80004dc:	1a52      	subs	r2, r2, r1
 80004de:	fb02 f303 	mul.w	r3, r2, r3
 80004e2:	135b      	asrs	r3, r3, #13
 80004e4:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80004e8:	fb02 f303 	mul.w	r3, r2, r3
 80004ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  t_fine = var1 + var2;
 80004f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80004f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80004f8:	4413      	add	r3, r2
 80004fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  T = (t_fine * 5 + 128) >> 8;
 80004fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000502:	4613      	mov	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	3380      	adds	r3, #128	; 0x80
 800050a:	121b      	asrs	r3, r3, #8
 800050c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	  HAL_Delay(2000); /* Delay for 2 seconds */
 8000510:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000514:	f000 fad4 	bl	8000ac0 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, &data, 6, 2000u); /* Reading pressure and temperature */
 8000518:	e6d0      	b.n	80002bc <main+0xe8>
 800051a:	bf00      	nop
 800051c:	20000028 	.word	0x20000028

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b0a6      	sub	sp, #152	; 0x98
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800052a:	2228      	movs	r2, #40	; 0x28
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fc5f 	bl	8003df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2258      	movs	r2, #88	; 0x58
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fc51 	bl	8003df2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000558:	2310      	movs	r3, #16
 800055a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000568:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800056c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000570:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fb58 	bl	8001c34 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800058a:	f000 f8ff 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2302      	movs	r3, #2
 8000594:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005a8:	2102      	movs	r1, #2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fb96 	bl	8002cdc <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b6:	f000 f8e9 	bl	800078c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005ba:	2322      	movs	r3, #34	; 0x22
 80005bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fdbd 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005d4:	f000 f8da 	bl	800078c <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3798      	adds	r7, #152	; 0x98
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_I2C1_Init+0x74>)
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <MX_I2C1_Init+0x78>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_I2C1_Init+0x74>)
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <MX_I2C1_Init+0x7c>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_I2C1_Init+0x74>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_I2C1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061a:	480e      	ldr	r0, [pc, #56]	; (8000654 <MX_I2C1_Init+0x74>)
 800061c:	f000 fcfc 	bl	8001018 <HAL_I2C_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000626:	f000 f8b1 	bl	800078c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062a:	2100      	movs	r1, #0
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <MX_I2C1_Init+0x74>)
 800062e:	f001 fa69 	bl	8001b04 <HAL_I2CEx_ConfigAnalogFilter>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000638:	f000 f8a8 	bl	800078c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800063c:	2100      	movs	r1, #0
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_I2C1_Init+0x74>)
 8000640:	f001 faab 	bl	8001b9a <HAL_I2CEx_ConfigDigitalFilter>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 f89f 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000028 	.word	0x20000028
 8000658:	40005400 	.word	0x40005400
 800065c:	0010020a 	.word	0x0010020a

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <MX_USART2_UART_Init+0x5c>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800066c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 80006a4:	f002 ff6e 	bl	8003584 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f86d 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000007c 	.word	0x2000007c
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <MX_GPIO_Init+0xc4>)
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_GPIO_Init+0xc4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2120      	movs	r1, #32
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f000 fc53 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000748:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0xc8>)
 800075a:	f000 fabb 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800075e:	2320      	movs	r3, #32
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f000 faac 	bl	8000cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	48000800 	.word	0x48000800

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_MspInit+0x44>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <HAL_MspInit+0x44>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_MspInit+0x44>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x44>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x44>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x44>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ce:	2007      	movs	r0, #7
 80007d0:	f000 fa4c 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a26      	ldr	r2, [pc, #152]	; (8000898 <HAL_I2C_MspInit+0xb8>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d145      	bne.n	800088e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <HAL_I2C_MspInit+0xbc>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a25      	ldr	r2, [pc, #148]	; (800089c <HAL_I2C_MspInit+0xbc>)
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <HAL_I2C_MspInit+0xbc>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <HAL_I2C_MspInit+0xbc>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a1f      	ldr	r2, [pc, #124]	; (800089c <HAL_I2C_MspInit+0xbc>)
 8000820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000824:	6153      	str	r3, [r2, #20]
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <HAL_I2C_MspInit+0xbc>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	2312      	movs	r3, #18
 800083a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000844:	2304      	movs	r3, #4
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f000 fa3f 	bl	8000cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085a:	2312      	movs	r3, #18
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000866:	2304      	movs	r3, #4
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <HAL_I2C_MspInit+0xc0>)
 8000872:	f000 fa2f 	bl	8000cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_I2C_MspInit+0xbc>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_I2C_MspInit+0xbc>)
 800087c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_I2C_MspInit+0xbc>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40005400 	.word	0x40005400
 800089c:	40021000 	.word	0x40021000
 80008a0:	48000400 	.word	0x48000400

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a17      	ldr	r2, [pc, #92]	; (8000920 <HAL_UART_MspInit+0x7c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d128      	bne.n	8000918 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_UART_MspInit+0x80>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <HAL_UART_MspInit+0x80>)
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_UART_MspInit+0x80>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_UART_MspInit+0x80>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <HAL_UART_MspInit+0x80>)
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	6153      	str	r3, [r2, #20]
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_UART_MspInit+0x80>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f6:	230c      	movs	r3, #12
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000906:	2307      	movs	r3, #7
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000914:	f000 f9de 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40004400 	.word	0x40004400
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 f884 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a4:	f7ff ffea 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <LoopForever+0x6>)
  ldr r1, =_edata
 80009aa:	490d      	ldr	r1, [pc, #52]	; (80009e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <LoopForever+0xe>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c0:	4c0a      	ldr	r4, [pc, #40]	; (80009ec <LoopForever+0x16>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ce:	f003 fa19 	bl	8003e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009d2:	f7ff fbff 	bl	80001d4 <main>

080009d6 <LoopForever>:

LoopForever:
    b LoopForever
 80009d6:	e7fe      	b.n	80009d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e4:	08003ea4 	.word	0x08003ea4
  ldr r2, =_sbss
 80009e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ec:	20000108 	.word	0x20000108

080009f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_2_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x28>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x28>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f931 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 f808 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff fec2 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40022000 	.word	0x40022000

08000a20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x54>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f93b 	bl	8000cba <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d80a      	bhi.n	8000a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f911 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_InitTick+0x5c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000104 	.word	0x20000104

08000aa8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000104 	.word	0x20000104

08000ac0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff ffee 	bl	8000aa8 <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_Delay+0x44>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff ffde 	bl	8000aa8 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff47 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff5c 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffb0 	bl	8000c28 <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce2:	e160      	b.n	8000fa6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 8152 	beq.w	8000fa0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d005      	beq.n	8000d14 <HAL_GPIO_Init+0x40>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d017      	beq.n	8000db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d123      	bne.n	8000e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0203 	and.w	r2, r3, #3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 80ac 	beq.w	8000fa0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e48:	4b5e      	ldr	r3, [pc, #376]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a5d      	ldr	r2, [pc, #372]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b5b      	ldr	r3, [pc, #364]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e60:	4a59      	ldr	r2, [pc, #356]	; (8000fc8 <HAL_GPIO_Init+0x2f4>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e8a:	d025      	beq.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4f      	ldr	r2, [pc, #316]	; (8000fcc <HAL_GPIO_Init+0x2f8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d01f      	beq.n	8000ed4 <HAL_GPIO_Init+0x200>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a4e      	ldr	r2, [pc, #312]	; (8000fd0 <HAL_GPIO_Init+0x2fc>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d019      	beq.n	8000ed0 <HAL_GPIO_Init+0x1fc>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4d      	ldr	r2, [pc, #308]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d013      	beq.n	8000ecc <HAL_GPIO_Init+0x1f8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4c      	ldr	r2, [pc, #304]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d00d      	beq.n	8000ec8 <HAL_GPIO_Init+0x1f4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a4b      	ldr	r2, [pc, #300]	; (8000fdc <HAL_GPIO_Init+0x308>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d007      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f0>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a4a      	ldr	r2, [pc, #296]	; (8000fe0 <HAL_GPIO_Init+0x30c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	e00c      	b.n	8000eda <HAL_GPIO_Init+0x206>
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	e00a      	b.n	8000eda <HAL_GPIO_Init+0x206>
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	e008      	b.n	8000eda <HAL_GPIO_Init+0x206>
 8000ec8:	2304      	movs	r3, #4
 8000eca:	e006      	b.n	8000eda <HAL_GPIO_Init+0x206>
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e004      	b.n	8000eda <HAL_GPIO_Init+0x206>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e002      	b.n	8000eda <HAL_GPIO_Init+0x206>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <HAL_GPIO_Init+0x206>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	f002 0203 	and.w	r2, r2, #3
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	4093      	lsls	r3, r2
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eea:	4937      	ldr	r1, [pc, #220]	; (8000fc8 <HAL_GPIO_Init+0x2f4>)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef8:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <HAL_GPIO_Init+0x310>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f1c:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <HAL_GPIO_Init+0x310>)
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <HAL_GPIO_Init+0x310>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f46:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <HAL_GPIO_Init+0x310>)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <HAL_GPIO_Init+0x310>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f70:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <HAL_GPIO_Init+0x310>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_GPIO_Init+0x310>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <HAL_GPIO_Init+0x310>)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f47f ae97 	bne.w	8000ce4 <HAL_GPIO_Init+0x10>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000800 	.word	0x48000800
 8000fd4:	48000c00 	.word	0x48000c00
 8000fd8:	48001000 	.word	0x48001000
 8000fdc:	48001400 	.word	0x48001400
 8000fe0:	48001800 	.word	0x48001800
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001004:	e002      	b.n	800100c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e081      	b.n	800112e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d106      	bne.n	8001044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fbce 	bl	80007e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2224      	movs	r2, #36	; 0x24
 8001048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0201 	bic.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001068:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001078:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d107      	bne.n	8001092 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	e006      	b.n	80010a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800109e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d104      	bne.n	80010b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69d9      	ldr	r1, [r3, #28]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1a      	ldr	r2, [r3, #32]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2220      	movs	r2, #32
 800111a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	4608      	mov	r0, r1
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4603      	mov	r3, r0
 8001148:	817b      	strh	r3, [r7, #10]
 800114a:	460b      	mov	r3, r1
 800114c:	813b      	strh	r3, [r7, #8]
 800114e:	4613      	mov	r3, r2
 8001150:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b20      	cmp	r3, #32
 800115c:	f040 80f9 	bne.w	8001352 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <HAL_I2C_Mem_Write+0x34>
 8001166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001168:	2b00      	cmp	r3, #0
 800116a:	d105      	bne.n	8001178 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001172:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0ed      	b.n	8001354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_I2C_Mem_Write+0x4e>
 8001182:	2302      	movs	r3, #2
 8001184:	e0e6      	b.n	8001354 <HAL_I2C_Mem_Write+0x21c>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800118e:	f7ff fc8b 	bl	8000aa8 <HAL_GetTick>
 8001192:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2319      	movs	r3, #25
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 fac3 	bl	800172c <I2C_WaitOnFlagUntilTimeout>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0d1      	b.n	8001354 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2221      	movs	r2, #33	; 0x21
 80011b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2240      	movs	r2, #64	; 0x40
 80011bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a3a      	ldr	r2, [r7, #32]
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011d8:	88f8      	ldrh	r0, [r7, #6]
 80011da:	893a      	ldrh	r2, [r7, #8]
 80011dc:	8979      	ldrh	r1, [r7, #10]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4603      	mov	r3, r0
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f000 f9d3 	bl	8001594 <I2C_RequestMemoryWrite>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0a9      	b.n	8001354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001204:	b29b      	uxth	r3, r3
 8001206:	2bff      	cmp	r3, #255	; 0xff
 8001208:	d90e      	bls.n	8001228 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	22ff      	movs	r2, #255	; 0xff
 800120e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001214:	b2da      	uxtb	r2, r3
 8001216:	8979      	ldrh	r1, [r7, #10]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 fc3d 	bl	8001aa0 <I2C_TransferConfig>
 8001226:	e00f      	b.n	8001248 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122c:	b29a      	uxth	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001236:	b2da      	uxtb	r2, r3
 8001238:	8979      	ldrh	r1, [r7, #10]
 800123a:	2300      	movs	r3, #0
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 fc2c 	bl	8001aa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 fabc 	bl	80017ca <I2C_WaitOnTXISFlagUntilTimeout>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e07b      	b.n	8001354 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001276:	b29b      	uxth	r3, r3
 8001278:	3b01      	subs	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001284:	3b01      	subs	r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001290:	b29b      	uxth	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d034      	beq.n	8001300 <HAL_I2C_Mem_Write+0x1c8>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129a:	2b00      	cmp	r3, #0
 800129c:	d130      	bne.n	8001300 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a4:	2200      	movs	r2, #0
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 fa3f 	bl	800172c <I2C_WaitOnFlagUntilTimeout>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e04d      	b.n	8001354 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012bc:	b29b      	uxth	r3, r3
 80012be:	2bff      	cmp	r3, #255	; 0xff
 80012c0:	d90e      	bls.n	80012e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	22ff      	movs	r2, #255	; 0xff
 80012c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	8979      	ldrh	r1, [r7, #10]
 80012d0:	2300      	movs	r3, #0
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 fbe1 	bl	8001aa0 <I2C_TransferConfig>
 80012de:	e00f      	b.n	8001300 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	8979      	ldrh	r1, [r7, #10]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f000 fbd0 	bl	8001aa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001304:	b29b      	uxth	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d19e      	bne.n	8001248 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f000 faa2 	bl	8001858 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e01a      	b.n	8001354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2220      	movs	r2, #32
 8001324:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_I2C_Mem_Write+0x224>)
 8001332:	400b      	ands	r3, r1
 8001334:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2220      	movs	r2, #32
 800133a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001352:	2302      	movs	r3, #2
  }
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	fe00e800 	.word	0xfe00e800

08001360 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af02      	add	r7, sp, #8
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4603      	mov	r3, r0
 8001370:	817b      	strh	r3, [r7, #10]
 8001372:	460b      	mov	r3, r1
 8001374:	813b      	strh	r3, [r7, #8]
 8001376:	4613      	mov	r3, r2
 8001378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b20      	cmp	r3, #32
 8001384:	f040 80fd 	bne.w	8001582 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <HAL_I2C_Mem_Read+0x34>
 800138e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001390:	2b00      	cmp	r3, #0
 8001392:	d105      	bne.n	80013a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0f1      	b.n	8001584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <HAL_I2C_Mem_Read+0x4e>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e0ea      	b.n	8001584 <HAL_I2C_Mem_Read+0x224>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013b6:	f7ff fb77 	bl	8000aa8 <HAL_GetTick>
 80013ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2319      	movs	r3, #25
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f000 f9af 	bl	800172c <I2C_WaitOnFlagUntilTimeout>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0d5      	b.n	8001584 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2222      	movs	r2, #34	; 0x22
 80013dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a3a      	ldr	r2, [r7, #32]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001400:	88f8      	ldrh	r0, [r7, #6]
 8001402:	893a      	ldrh	r2, [r7, #8]
 8001404:	8979      	ldrh	r1, [r7, #10]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4603      	mov	r3, r0
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 f913 	bl	800163c <I2C_RequestMemoryRead>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0ad      	b.n	8001584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142c:	b29b      	uxth	r3, r3
 800142e:	2bff      	cmp	r3, #255	; 0xff
 8001430:	d90e      	bls.n	8001450 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	22ff      	movs	r2, #255	; 0xff
 8001436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143c:	b2da      	uxtb	r2, r3
 800143e:	8979      	ldrh	r1, [r7, #10]
 8001440:	4b52      	ldr	r3, [pc, #328]	; (800158c <HAL_I2C_Mem_Read+0x22c>)
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 fb29 	bl	8001aa0 <I2C_TransferConfig>
 800144e:	e00f      	b.n	8001470 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001454:	b29a      	uxth	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145e:	b2da      	uxtb	r2, r3
 8001460:	8979      	ldrh	r1, [r7, #10]
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_I2C_Mem_Read+0x22c>)
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 fb18 	bl	8001aa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	2200      	movs	r2, #0
 8001478:	2104      	movs	r1, #4
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f956 	bl	800172c <I2C_WaitOnFlagUntilTimeout>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e07c      	b.n	8001584 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3b01      	subs	r3, #1
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d034      	beq.n	8001530 <HAL_I2C_Mem_Read+0x1d0>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d130      	bne.n	8001530 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d4:	2200      	movs	r2, #0
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 f927 	bl	800172c <I2C_WaitOnFlagUntilTimeout>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e04d      	b.n	8001584 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2bff      	cmp	r3, #255	; 0xff
 80014f0:	d90e      	bls.n	8001510 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	22ff      	movs	r2, #255	; 0xff
 80014f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	8979      	ldrh	r1, [r7, #10]
 8001500:	2300      	movs	r3, #0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fac9 	bl	8001aa0 <I2C_TransferConfig>
 800150e:	e00f      	b.n	8001530 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	b2da      	uxtb	r2, r3
 8001520:	8979      	ldrh	r1, [r7, #10]
 8001522:	2300      	movs	r3, #0
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 fab8 	bl	8001aa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001534:	b29b      	uxth	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d19a      	bne.n	8001470 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 f98a 	bl	8001858 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e01a      	b.n	8001584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2220      	movs	r2, #32
 8001554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_I2C_Mem_Read+0x230>)
 8001562:	400b      	ands	r3, r1
 8001564:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2220      	movs	r2, #32
 800156a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001582:	2302      	movs	r3, #2
  }
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	80002400 	.word	0x80002400
 8001590:	fe00e800 	.word	0xfe00e800

08001594 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af02      	add	r7, sp, #8
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	817b      	strh	r3, [r7, #10]
 80015a6:	460b      	mov	r3, r1
 80015a8:	813b      	strh	r3, [r7, #8]
 80015aa:	4613      	mov	r3, r2
 80015ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	8979      	ldrh	r1, [r7, #10]
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <I2C_RequestMemoryWrite+0xa4>)
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 fa6f 	bl	8001aa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f8ff 	bl	80017ca <I2C_WaitOnTXISFlagUntilTimeout>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e02c      	b.n	8001630 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015dc:	893b      	ldrh	r3, [r7, #8]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
 80015e6:	e015      	b.n	8001614 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80015e8:	893b      	ldrh	r3, [r7, #8]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	69b9      	ldr	r1, [r7, #24]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f8e5 	bl	80017ca <I2C_WaitOnTXISFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e012      	b.n	8001630 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800160a:	893b      	ldrh	r3, [r7, #8]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2200      	movs	r2, #0
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f884 	bl	800172c <I2C_WaitOnFlagUntilTimeout>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	80002000 	.word	0x80002000

0800163c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4603      	mov	r3, r0
 800164c:	817b      	strh	r3, [r7, #10]
 800164e:	460b      	mov	r3, r1
 8001650:	813b      	strh	r3, [r7, #8]
 8001652:	4613      	mov	r3, r2
 8001654:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	8979      	ldrh	r1, [r7, #10]
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <I2C_RequestMemoryRead+0xa4>)
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2300      	movs	r3, #0
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 fa1c 	bl	8001aa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 f8ac 	bl	80017ca <I2C_WaitOnTXISFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e02c      	b.n	80016d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d105      	bne.n	800168e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001682:	893b      	ldrh	r3, [r7, #8]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
 800168c:	e015      	b.n	80016ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800168e:	893b      	ldrh	r3, [r7, #8]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2da      	uxtb	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	69b9      	ldr	r1, [r7, #24]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f892 	bl	80017ca <I2C_WaitOnTXISFlagUntilTimeout>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e012      	b.n	80016d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016b0:	893b      	ldrh	r3, [r7, #8]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2200      	movs	r2, #0
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f831 	bl	800172c <I2C_WaitOnFlagUntilTimeout>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	80002000 	.word	0x80002000

080016e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d103      	bne.n	8001702 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b01      	cmp	r3, #1
 800170e:	d007      	beq.n	8001720 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	619a      	str	r2, [r3, #24]
  }
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800173c:	e031      	b.n	80017a2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d02d      	beq.n	80017a2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001746:	f7ff f9af 	bl	8000aa8 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d302      	bcc.n	800175c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d122      	bne.n	80017a2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	4013      	ands	r3, r2
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	429a      	cmp	r2, r3
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	429a      	cmp	r2, r3
 8001778:	d113      	bne.n	80017a2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f043 0220 	orr.w	r2, r3, #32
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2220      	movs	r2, #32
 800178a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699a      	ldr	r2, [r3, #24]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4013      	ands	r3, r2
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	bf0c      	ite	eq
 80017b2:	2301      	moveq	r3, #1
 80017b4:	2300      	movne	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d0be      	beq.n	800173e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017d6:	e033      	b.n	8001840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f87f 	bl	80018e0 <I2C_IsErrorOccurred>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e031      	b.n	8001850 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f2:	d025      	beq.n	8001840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017f4:	f7ff f958 	bl	8000aa8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	429a      	cmp	r2, r3
 8001802:	d302      	bcc.n	800180a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d11a      	bne.n	8001840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b02      	cmp	r3, #2
 8001816:	d013      	beq.n	8001840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	f043 0220 	orr.w	r2, r3, #32
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e007      	b.n	8001850 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b02      	cmp	r3, #2
 800184c:	d1c4      	bne.n	80017d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001864:	e02f      	b.n	80018c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f838 	bl	80018e0 <I2C_IsErrorOccurred>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e02d      	b.n	80018d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187a:	f7ff f915 	bl	8000aa8 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	429a      	cmp	r2, r3
 8001888:	d302      	bcc.n	8001890 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d11a      	bne.n	80018c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b20      	cmp	r3, #32
 800189c:	d013      	beq.n	80018c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f043 0220 	orr.w	r2, r3, #32
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e007      	b.n	80018d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d1c8      	bne.n	8001866 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	2b00      	cmp	r3, #0
 800190a:	d068      	beq.n	80019de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2210      	movs	r2, #16
 8001912:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001914:	e049      	b.n	80019aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d045      	beq.n	80019aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800191e:	f7ff f8c3 	bl	8000aa8 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	429a      	cmp	r2, r3
 800192c:	d302      	bcc.n	8001934 <I2C_IsErrorOccurred+0x54>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d13a      	bne.n	80019aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001946:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001956:	d121      	bne.n	800199c <I2C_IsErrorOccurred+0xbc>
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800195e:	d01d      	beq.n	800199c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001960:	7cfb      	ldrb	r3, [r7, #19]
 8001962:	2b20      	cmp	r3, #32
 8001964:	d01a      	beq.n	800199c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001974:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001976:	f7ff f897 	bl	8000aa8 <HAL_GetTick>
 800197a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800197c:	e00e      	b.n	800199c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800197e:	f7ff f893 	bl	8000aa8 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b19      	cmp	r3, #25
 800198a:	d907      	bls.n	800199c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	f043 0320 	orr.w	r3, r3, #32
 8001992:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800199a:	e006      	b.n	80019aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d1e9      	bne.n	800197e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	d003      	beq.n	80019c0 <I2C_IsErrorOccurred+0xe0>
 80019b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0aa      	beq.n	8001916 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80019c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2220      	movs	r2, #32
 80019ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00b      	beq.n	8001a08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	f043 0308 	orr.w	r3, r3, #8
 8001a18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01c      	beq.n	8001a8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f7ff fe45 	bl	80016e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <I2C_IsErrorOccurred+0x1bc>)
 8001a66:	400b      	ands	r3, r1
 8001a68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3728      	adds	r7, #40	; 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	fe00e800 	.word	0xfe00e800

08001aa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	817b      	strh	r3, [r7, #10]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ab2:	897b      	ldrh	r3, [r7, #10]
 8001ab4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ab8:	7a7b      	ldrb	r3, [r7, #9]
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ac0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ace:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	0d5b      	lsrs	r3, r3, #21
 8001ada:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <I2C_TransferConfig+0x60>)
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	ea02 0103 	and.w	r1, r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001af2:	bf00      	nop
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	03ff63ff 	.word	0x03ff63ff

08001b04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	d138      	bne.n	8001b8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e032      	b.n	8001b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2224      	movs	r2, #36	; 0x24
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6819      	ldr	r1, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e000      	b.n	8001b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b8c:	2302      	movs	r3, #2
  }
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d139      	bne.n	8001c24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e033      	b.n	8001c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2224      	movs	r2, #36	; 0x24
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f001 b83a 	b.w	8002cce <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 816f 	beq.w	8001f4e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c70:	4bb5      	ldr	r3, [pc, #724]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d00c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c7c:	4bb2      	ldr	r3, [pc, #712]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d15c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x10e>
 8001c88:	4baf      	ldr	r3, [pc, #700]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d155      	bne.n	8001d42 <HAL_RCC_OscConfig+0x10e>
 8001c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001caa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x94>
 8001cc2:	4ba1      	ldr	r3, [pc, #644]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e015      	b.n	8001cf4 <HAL_RCC_OscConfig+0xc0>
 8001cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ccc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ce4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001cf0:	4b95      	ldr	r3, [pc, #596]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cf8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001cfc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001d00:	fa92 f2a2 	rbit	r2, r2
 8001d04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001d08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d0c:	fab2 f282 	clz	r2, r2
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f042 0220 	orr.w	r2, r2, #32
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	f002 021f 	and.w	r2, r2, #31
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 8111 	beq.w	8001f4c <HAL_RCC_OscConfig+0x318>
 8001d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 8108 	bne.w	8001f4c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f000 bfc6 	b.w	8002cce <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12e>
 8001d54:	4b7c      	ldr	r3, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a7b      	ldr	r2, [pc, #492]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	e036      	b.n	8001dd0 <HAL_RCC_OscConfig+0x19c>
 8001d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x158>
 8001d72:	4b75      	ldr	r3, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a74      	ldr	r2, [pc, #464]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b72      	ldr	r3, [pc, #456]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a71      	ldr	r2, [pc, #452]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e021      	b.n	8001dd0 <HAL_RCC_OscConfig+0x19c>
 8001d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x184>
 8001d9e:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a69      	ldr	r2, [pc, #420]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a66      	ldr	r2, [pc, #408]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x19c>
 8001db8:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a62      	ldr	r2, [pc, #392]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b60      	ldr	r3, [pc, #384]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5f      	ldr	r2, [pc, #380]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dce:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d059      	beq.n	8001e94 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe fe62 	bl	8000aa8 <HAL_GetTick>
 8001de4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dea:	f7fe fe5d 	bl	8000aa8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d902      	bls.n	8001e00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f000 bf67 	b.w	8002cce <HAL_RCC_OscConfig+0x109a>
 8001e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e04:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001e14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_OscConfig+0x1fe>
 8001e2c:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	e015      	b.n	8001e5e <HAL_RCC_OscConfig+0x22a>
 8001e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e4e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e62:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001e66:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001e6a:	fa92 f2a2 	rbit	r2, r2
 8001e6e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001e72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e76:	fab2 f282 	clz	r2, r2
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	f042 0220 	orr.w	r2, r2, #32
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	f002 021f 	and.w	r2, r2, #31
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0ab      	beq.n	8001dea <HAL_RCC_OscConfig+0x1b6>
 8001e92:	e05c      	b.n	8001f4e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7fe fe08 	bl	8000aa8 <HAL_GetTick>
 8001e98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9e:	f7fe fe03 	bl	8000aa8 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d902      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	f000 bf0d 	b.w	8002cce <HAL_RCC_OscConfig+0x109a>
 8001eb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001ec8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2b2>
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	e015      	b.n	8001f12 <HAL_RCC_OscConfig+0x2de>
 8001ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001efe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_RCC_OscConfig+0x314>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f16:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001f1a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001f1e:	fa92 f2a2 	rbit	r2, r2
 8001f22:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001f26:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f2a:	fab2 f282 	clz	r2, r2
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f042 0220 	orr.w	r2, r2, #32
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f002 021f 	and.w	r2, r2, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ab      	bne.n	8001e9e <HAL_RCC_OscConfig+0x26a>
 8001f46:	e002      	b.n	8001f4e <HAL_RCC_OscConfig+0x31a>
 8001f48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 817f 	beq.w	8002262 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f64:	4ba7      	ldr	r3, [pc, #668]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00c      	beq.n	8001f8a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f70:	4ba4      	ldr	r3, [pc, #656]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d173      	bne.n	8002064 <HAL_RCC_OscConfig+0x430>
 8001f7c:	4ba1      	ldr	r3, [pc, #644]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f88:	d16c      	bne.n	8002064 <HAL_RCC_OscConfig+0x430>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001f9c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d102      	bne.n	8001fba <HAL_RCC_OscConfig+0x386>
 8001fb4:	4b93      	ldr	r3, [pc, #588]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	e013      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3ae>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001fd2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001fde:	4b89      	ldr	r3, [pc, #548]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001fe8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001fec:	fa92 f2a2 	rbit	r2, r2
 8001ff0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001ff4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f042 0220 	orr.w	r2, r2, #32
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f002 021f 	and.w	r2, r2, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCC_OscConfig+0x3f6>
 8002014:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002018:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d002      	beq.n	800202a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	f000 be52 	b.w	8002cce <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202a:	4b76      	ldr	r3, [pc, #472]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002036:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	21f8      	movs	r1, #248	; 0xf8
 8002040:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002048:	fa91 f1a1 	rbit	r1, r1
 800204c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002050:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002054:	fab1 f181 	clz	r1, r1
 8002058:	b2c9      	uxtb	r1, r1
 800205a:	408b      	lsls	r3, r1
 800205c:	4969      	ldr	r1, [pc, #420]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e0fe      	b.n	8002262 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002068:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8088 	beq.w	8002186 <HAL_RCC_OscConfig+0x552>
 8002076:	2301      	movs	r3, #1
 8002078:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002088:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002096:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	461a      	mov	r2, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7fe fd01 	bl	8000aa8 <HAL_GetTick>
 80020a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7fe fcfc 	bl	8000aa8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d902      	bls.n	80020c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	f000 be06 	b.w	8002cce <HAL_RCC_OscConfig+0x109a>
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80020d4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0x4be>
 80020ec:	4b45      	ldr	r3, [pc, #276]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e013      	b.n	800211a <HAL_RCC_OscConfig+0x4e6>
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800210a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002116:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2202      	movs	r2, #2
 800211c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002120:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800212c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f002 021f 	and.w	r2, r2, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0af      	beq.n	80020ac <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002158:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	21f8      	movs	r1, #248	; 0xf8
 8002162:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800216a:	fa91 f1a1 	rbit	r1, r1
 800216e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002172:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002176:	fab1 f181 	clz	r1, r1
 800217a:	b2c9      	uxtb	r1, r1
 800217c:	408b      	lsls	r3, r1
 800217e:	4921      	ldr	r1, [pc, #132]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e06d      	b.n	8002262 <HAL_RCC_OscConfig+0x62e>
 8002186:	2301      	movs	r3, #1
 8002188:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002198:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	461a      	mov	r2, r3
 80021ae:	2300      	movs	r3, #0
 80021b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fc79 	bl	8000aa8 <HAL_GetTick>
 80021b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021bc:	f7fe fc74 	bl	8000aa8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d902      	bls.n	80021d2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	f000 bd7e 	b.w	8002cce <HAL_RCC_OscConfig+0x109a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80021e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x5d4>
 80021fc:	4b01      	ldr	r3, [pc, #4]	; (8002204 <HAL_RCC_OscConfig+0x5d0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	e016      	b.n	8002230 <HAL_RCC_OscConfig+0x5fc>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	2302      	movs	r3, #2
 800220a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800221a:	2302      	movs	r3, #2
 800221c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002220:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800222c:	4bbf      	ldr	r3, [pc, #764]	; (800252c <HAL_RCC_OscConfig+0x8f8>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	2202      	movs	r2, #2
 8002232:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002236:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800223a:	fa92 f2a2 	rbit	r2, r2
 800223e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002242:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002246:	fab2 f282 	clz	r2, r2
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	f042 0220 	orr.w	r2, r2, #32
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	f002 021f 	and.w	r2, r2, #31
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f202 	lsl.w	r2, r1, r2
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1ac      	bne.n	80021bc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002266:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8113 	beq.w	800249e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d07c      	beq.n	8002382 <HAL_RCC_OscConfig+0x74e>
 8002288:	2301      	movs	r3, #1
 800228a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800229a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	4ba2      	ldr	r3, [pc, #648]	; (8002530 <HAL_RCC_OscConfig+0x8fc>)
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	461a      	mov	r2, r3
 80022ae:	2301      	movs	r3, #1
 80022b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7fe fbf9 	bl	8000aa8 <HAL_GetTick>
 80022b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022bc:	f7fe fbf4 	bl	8000aa8 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d902      	bls.n	80022d2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	f000 bcfe 	b.w	8002cce <HAL_RCC_OscConfig+0x109a>
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022dc:	fa93 f2a3 	rbit	r2, r3
 80022e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022f2:	2202      	movs	r2, #2
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	fa93 f2a3 	rbit	r2, r3
 8002304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002312:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002316:	2202      	movs	r2, #2
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002330:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	4b7e      	ldr	r3, [pc, #504]	; (800252c <HAL_RCC_OscConfig+0x8f8>)
 8002334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800233e:	2102      	movs	r1, #2
 8002340:	6019      	str	r1, [r3, #0]
 8002342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002346:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f1a3 	rbit	r1, r3
 8002350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002354:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002358:	6019      	str	r1, [r3, #0]
  return result;
 800235a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800235e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d09d      	beq.n	80022bc <HAL_RCC_OscConfig+0x688>
 8002380:	e08d      	b.n	800249e <HAL_RCC_OscConfig+0x86a>
 8002382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002386:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002392:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	fa93 f2a3 	rbit	r2, r3
 800239c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023a4:	601a      	str	r2, [r3, #0]
  return result;
 80023a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <HAL_RCC_OscConfig+0x8fc>)
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	461a      	mov	r2, r3
 80023c0:	2300      	movs	r3, #0
 80023c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7fe fb70 	bl	8000aa8 <HAL_GetTick>
 80023c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ce:	f7fe fb6b 	bl	8000aa8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d902      	bls.n	80023e4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	f000 bc75 	b.w	8002cce <HAL_RCC_OscConfig+0x109a>
 80023e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002402:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002410:	2202      	movs	r2, #2
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fa93 f2a3 	rbit	r2, r3
 8002422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002430:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002434:	2202      	movs	r2, #2
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800244e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_RCC_OscConfig+0x8f8>)
 8002452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002458:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800245c:	2102      	movs	r1, #2
 800245e:	6019      	str	r1, [r3, #0]
 8002460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002464:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f1a3 	rbit	r1, r3
 800246e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002472:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002476:	6019      	str	r1, [r3, #0]
  return result;
 8002478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d197      	bne.n	80023ce <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 81a5 	beq.w	80027fe <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <HAL_RCC_OscConfig+0x8f8>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_OscConfig+0x8f8>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_RCC_OscConfig+0x8f8>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_RCC_OscConfig+0x8f8>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80024da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_RCC_OscConfig+0x900>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d121      	bne.n	8002544 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_RCC_OscConfig+0x900>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x900>)
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250c:	f7fe facc 	bl	8000aa8 <HAL_GetTick>
 8002510:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002514:	e010      	b.n	8002538 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002516:	f7fe fac7 	bl	8000aa8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d908      	bls.n	8002538 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e3d1      	b.n	8002cce <HAL_RCC_OscConfig+0x109a>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	10908120 	.word	0x10908120
 8002534:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	4b8d      	ldr	r3, [pc, #564]	; (8002770 <HAL_RCC_OscConfig+0xb3c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0e8      	beq.n	8002516 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002548:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x92e>
 8002554:	4b87      	ldr	r3, [pc, #540]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a86      	ldr	r2, [pc, #536]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	e035      	b.n	80025ce <HAL_RCC_OscConfig+0x99a>
 8002562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002566:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x958>
 8002572:	4b80      	ldr	r3, [pc, #512]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a7f      	ldr	r2, [pc, #508]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	4b7d      	ldr	r3, [pc, #500]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a7c      	ldr	r2, [pc, #496]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	e020      	b.n	80025ce <HAL_RCC_OscConfig+0x99a>
 800258c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b05      	cmp	r3, #5
 800259a:	d10c      	bne.n	80025b6 <HAL_RCC_OscConfig+0x982>
 800259c:	4b75      	ldr	r3, [pc, #468]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4a74      	ldr	r2, [pc, #464]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	6213      	str	r3, [r2, #32]
 80025a8:	4b72      	ldr	r3, [pc, #456]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4a71      	ldr	r2, [pc, #452]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6213      	str	r3, [r2, #32]
 80025b4:	e00b      	b.n	80025ce <HAL_RCC_OscConfig+0x99a>
 80025b6:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4a6e      	ldr	r2, [pc, #440]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	6213      	str	r3, [r2, #32]
 80025c2:	4b6c      	ldr	r3, [pc, #432]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a6b      	ldr	r2, [pc, #428]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8081 	beq.w	80026e2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe fa62 	bl	8000aa8 <HAL_GetTick>
 80025e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	e00b      	b.n	8002602 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe fa5d 	bl	8000aa8 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e365      	b.n	8002cce <HAL_RCC_OscConfig+0x109a>
 8002602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002606:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800260a:	2202      	movs	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002612:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002620:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800262e:	2202      	movs	r2, #2
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002636:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002644:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002648:	601a      	str	r2, [r3, #0]
  return result;
 800264a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002652:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d102      	bne.n	800266e <HAL_RCC_OscConfig+0xa3a>
 8002668:	4b42      	ldr	r3, [pc, #264]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	e013      	b.n	8002696 <HAL_RCC_OscConfig+0xa62>
 800266e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002672:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002676:	2202      	movs	r2, #2
 8002678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800269a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800269e:	2102      	movs	r1, #2
 80026a0:	6011      	str	r1, [r2, #0]
 80026a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	fa92 f1a2 	rbit	r1, r2
 80026b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026b4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80026b8:	6011      	str	r1, [r2, #0]
  return result;
 80026ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026be:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	fab2 f282 	clz	r2, r2
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	f002 021f 	and.w	r2, r2, #31
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f202 	lsl.w	r2, r1, r2
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d084      	beq.n	80025ea <HAL_RCC_OscConfig+0x9b6>
 80026e0:	e083      	b.n	80027ea <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe f9e1 	bl	8000aa8 <HAL_GetTick>
 80026e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe f9dc 	bl	8000aa8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e2e4      	b.n	8002cce <HAL_RCC_OscConfig+0x109a>
 8002704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002708:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800270c:	2202      	movs	r2, #2
 800270e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002714:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002722:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002730:	2202      	movs	r2, #2
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002738:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fa93 f2a3 	rbit	r2, r3
 8002742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002746:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800274a:	601a      	str	r2, [r3, #0]
  return result;
 800274c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002750:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002754:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d106      	bne.n	8002778 <HAL_RCC_OscConfig+0xb44>
 800276a:	4b02      	ldr	r3, [pc, #8]	; (8002774 <HAL_RCC_OscConfig+0xb40>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	e017      	b.n	80027a0 <HAL_RCC_OscConfig+0xb6c>
 8002770:	40007000 	.word	0x40007000
 8002774:	40021000 	.word	0x40021000
 8002778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002780:	2202      	movs	r2, #2
 8002782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002788:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	fa93 f2a3 	rbit	r2, r3
 8002792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002796:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	4bb3      	ldr	r3, [pc, #716]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80027a8:	2102      	movs	r1, #2
 80027aa:	6011      	str	r1, [r2, #0]
 80027ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	fa92 f1a2 	rbit	r1, r2
 80027ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027be:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80027c2:	6011      	str	r1, [r2, #0]
  return result;
 80027c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027c8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f002 021f 	and.w	r2, r2, #31
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d180      	bne.n	80026ec <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027ea:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b9e      	ldr	r3, [pc, #632]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4a9d      	ldr	r2, [pc, #628]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002802:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 825e 	beq.w	8002ccc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002810:	4b96      	ldr	r3, [pc, #600]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b08      	cmp	r3, #8
 800281a:	f000 821f 	beq.w	8002c5c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002822:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b02      	cmp	r3, #2
 800282c:	f040 8170 	bne.w	8002b10 <HAL_RCC_OscConfig+0xedc>
 8002830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002834:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800283c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002842:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fa93 f2a3 	rbit	r2, r3
 800284c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002850:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002854:	601a      	str	r2, [r3, #0]
  return result;
 8002856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800285a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800285e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800286a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	461a      	mov	r2, r3
 8002872:	2300      	movs	r3, #0
 8002874:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe f917 	bl	8000aa8 <HAL_GetTick>
 800287a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287e:	e009      	b.n	8002894 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe f912 	bl	8000aa8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e21c      	b.n	8002cce <HAL_RCC_OscConfig+0x109a>
 8002894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002898:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800289c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	fa93 f2a3 	rbit	r2, r3
 80028b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028b8:	601a      	str	r2, [r3, #0]
  return result;
 80028ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <HAL_RCC_OscConfig+0xcaa>
 80028d8:	4b64      	ldr	r3, [pc, #400]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	e027      	b.n	800292e <HAL_RCC_OscConfig+0xcfa>
 80028de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f2a3 	rbit	r2, r3
 80028fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002908:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800290c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002916:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002924:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	4b50      	ldr	r3, [pc, #320]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002932:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002936:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800293a:	6011      	str	r1, [r2, #0]
 800293c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002940:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	fa92 f1a2 	rbit	r1, r2
 800294a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800294e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002952:	6011      	str	r1, [r2, #0]
  return result;
 8002954:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002958:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	fab2 f282 	clz	r2, r2
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f042 0220 	orr.w	r2, r2, #32
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f002 021f 	and.w	r2, r2, #31
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d182      	bne.n	8002880 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297a:	4b3c      	ldr	r3, [pc, #240]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f023 020f 	bic.w	r2, r3, #15
 8002982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002986:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	4937      	ldr	r1, [pc, #220]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 8002990:	4313      	orrs	r3, r2
 8002992:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800299c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a19      	ldr	r1, [r3, #32]
 80029a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	430b      	orrs	r3, r1
 80029b6:	492d      	ldr	r1, [pc, #180]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
 80029bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80029c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029e0:	601a      	str	r2, [r3, #0]
  return result;
 80029e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029ea:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	461a      	mov	r2, r3
 80029fe:	2301      	movs	r3, #1
 8002a00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe f851 	bl	8000aa8 <HAL_GetTick>
 8002a06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a0a:	e009      	b.n	8002a20 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7fe f84c 	bl	8000aa8 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e156      	b.n	8002cce <HAL_RCC_OscConfig+0x109a>
 8002a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a24:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a32:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a40:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a44:	601a      	str	r2, [r3, #0]
  return result;
 8002a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0xe3c>
 8002a64:	4b01      	ldr	r3, [pc, #4]	; (8002a6c <HAL_RCC_OscConfig+0xe38>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	e02a      	b.n	8002ac0 <HAL_RCC_OscConfig+0xe8c>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a74:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a82:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fa93 f2a3 	rbit	r2, r3
 8002a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a90:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	4b86      	ldr	r3, [pc, #536]	; (8002cd8 <HAL_RCC_OscConfig+0x10a4>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ac4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ac8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002acc:	6011      	str	r1, [r2, #0]
 8002ace:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ad2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	fa92 f1a2 	rbit	r1, r2
 8002adc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ae0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002ae4:	6011      	str	r1, [r2, #0]
  return result;
 8002ae6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002aea:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	fab2 f282 	clz	r2, r2
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f042 0220 	orr.w	r2, r2, #32
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f002 021f 	and.w	r2, r2, #31
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f43f af7f 	beq.w	8002a0c <HAL_RCC_OscConfig+0xdd8>
 8002b0e:	e0dd      	b.n	8002ccc <HAL_RCC_OscConfig+0x1098>
 8002b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f2a3 	rbit	r2, r3
 8002b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b30:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b34:	601a      	str	r2, [r3, #0]
  return result;
 8002b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b3e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	2300      	movs	r3, #0
 8002b54:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7fd ffa7 	bl	8000aa8 <HAL_GetTick>
 8002b5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5e:	e009      	b.n	8002b74 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fd ffa2 	bl	8000aa8 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0ac      	b.n	8002cce <HAL_RCC_OscConfig+0x109a>
 8002b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b94:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b98:	601a      	str	r2, [r3, #0]
  return result;
 8002b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b9e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ba2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_OscConfig+0xf8a>
 8002bb8:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_OscConfig+0x10a4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e027      	b.n	8002c0e <HAL_RCC_OscConfig+0xfda>
 8002bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fa93 f2a3 	rbit	r2, r3
 8002bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bde:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	fa93 f2a3 	rbit	r2, r3
 8002c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c04:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	4b33      	ldr	r3, [pc, #204]	; (8002cd8 <HAL_RCC_OscConfig+0x10a4>)
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c12:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c1a:	6011      	str	r1, [r2, #0]
 8002c1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	fa92 f1a2 	rbit	r1, r2
 8002c2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c2e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002c32:	6011      	str	r1, [r2, #0]
  return result;
 8002c34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c38:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	fab2 f282 	clz	r2, r2
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f042 0220 	orr.w	r2, r2, #32
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	f002 021f 	and.w	r2, r2, #31
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f202 	lsl.w	r2, r1, r2
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d182      	bne.n	8002b60 <HAL_RCC_OscConfig+0xf2c>
 8002c5a:	e037      	b.n	8002ccc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e02e      	b.n	8002cce <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_OscConfig+0x10a4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_RCC_OscConfig+0x10a4>)
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c84:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d117      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c9c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d10b      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000

08002cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b09e      	sub	sp, #120	; 0x78
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e162      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b90      	ldr	r3, [pc, #576]	; (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d910      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b8d      	ldr	r3, [pc, #564]	; (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 0207 	bic.w	r2, r3, #7
 8002d0a:	498b      	ldr	r1, [pc, #556]	; (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b89      	ldr	r3, [pc, #548]	; (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e14a      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d30:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	497f      	ldr	r1, [pc, #508]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80dc 	beq.w	8002f08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d13c      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xf6>
 8002d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d102      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xa6>
 8002d7c:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	e00f      	b.n	8002da2 <HAL_RCC_ClockConfig+0xc6>
 8002d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d94:	663b      	str	r3, [r7, #96]	; 0x60
 8002d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d9e:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002da6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002da8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002daa:	fa92 f2a2 	rbit	r2, r2
 8002dae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002db0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002db2:	fab2 f282 	clz	r2, r2
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	f042 0220 	orr.w	r2, r2, #32
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	f002 021f 	and.w	r2, r2, #31
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d17b      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0f3      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d13c      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x178>
 8002dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x128>
 8002dfe:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	e00f      	b.n	8002e24 <HAL_RCC_ClockConfig+0x148>
 8002e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	647b      	str	r3, [r7, #68]	; 0x44
 8002e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e16:	643b      	str	r3, [r7, #64]	; 0x40
 8002e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e20:	4b46      	ldr	r3, [pc, #280]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e28:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e2c:	fa92 f2a2 	rbit	r2, r2
 8002e30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e34:	fab2 f282 	clz	r2, r2
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	f042 0220 	orr.w	r2, r2, #32
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	f002 021f 	and.w	r2, r2, #31
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d13a      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0b2      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
 8002e54:	2302      	movs	r3, #2
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1a0>
 8002e76:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	e00d      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1bc>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	2302      	movs	r3, #2
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2202      	movs	r2, #2
 8002e9a:	61ba      	str	r2, [r7, #24]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	fa92 f2a2 	rbit	r2, r2
 8002ea2:	617a      	str	r2, [r7, #20]
  return result;
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f042 0220 	orr.w	r2, r2, #32
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f002 021f 	and.w	r2, r2, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e079      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec6:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	491a      	ldr	r1, [pc, #104]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7fd fde6 	bl	8000aa8 <HAL_GetTick>
 8002edc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7fd fde2 	bl	8000aa8 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e061      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 020c 	and.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1eb      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d214      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	4906      	ldr	r1, [pc, #24]	; (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e040      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	491a      	ldr	r1, [pc, #104]	; (8002fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4912      	ldr	r1, [pc, #72]	; (8002fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f7e:	f000 f829 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4601      	mov	r1, r0
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f8c:	22f0      	movs	r2, #240	; 0xf0
 8002f8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	60fa      	str	r2, [r7, #12]
  return result;
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	40d3      	lsrs	r3, r2
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x2ec>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8002faa:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <HAL_RCC_ClockConfig+0x2f0>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_RCC_ClockConfig+0x2f4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fd34 	bl	8000a20 <HAL_InitTick>
  
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3778      	adds	r7, #120	; 0x78
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08003e64 	.word	0x08003e64
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b08b      	sub	sp, #44	; 0x2c
 8002fd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x30>
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d003      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x36>
 8003002:	e03f      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003006:	623b      	str	r3, [r7, #32]
      break;
 8003008:	e03f      	b.n	800308a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003010:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003014:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	fa92 f2a2 	rbit	r2, r2
 800301c:	607a      	str	r2, [r7, #4]
  return result;
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	fab2 f282 	clz	r2, r2
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	40d3      	lsrs	r3, r2
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800302a:	5cd3      	ldrb	r3, [r2, r3]
 800302c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	220f      	movs	r2, #15
 8003038:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	fa92 f2a2 	rbit	r2, r2
 8003040:	60fa      	str	r2, [r7, #12]
  return result;
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	fab2 f282 	clz	r2, r2
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	40d3      	lsrs	r3, r2
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800304e:	5cd3      	ldrb	r3, [r2, r3]
 8003050:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800305c:	4a0f      	ldr	r2, [pc, #60]	; (800309c <HAL_RCC_GetSysClockFreq+0xc8>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	fbb2 f2f3 	udiv	r2, r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
 800306c:	e007      	b.n	800307e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800306e:	4a0b      	ldr	r2, [pc, #44]	; (800309c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	fbb2 f2f3 	udiv	r2, r2, r3
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	623b      	str	r3, [r7, #32]
      break;
 8003082:	e002      	b.n	800308a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003086:	623b      	str	r3, [r7, #32]
      break;
 8003088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308a:	6a3b      	ldr	r3, [r7, #32]
}
 800308c:	4618      	mov	r0, r3
 800308e:	372c      	adds	r7, #44	; 0x2c
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40021000 	.word	0x40021000
 800309c:	007a1200 	.word	0x007a1200
 80030a0:	08003e7c 	.word	0x08003e7c
 80030a4:	08003e8c 	.word	0x08003e8c

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000000 	.word	0x20000000

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030c6:	f7ff ffef 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030ca:	4601      	mov	r1, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	fa92 f2a2 	rbit	r2, r2
 80030e0:	603a      	str	r2, [r7, #0]
  return result;
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	fab2 f282 	clz	r2, r2
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	40d3      	lsrs	r3, r2
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	08003e74 	.word	0x08003e74

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800310a:	f7ff ffcd 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 800310e:	4601      	mov	r1, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003118:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800311c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	fa92 f2a2 	rbit	r2, r2
 8003124:	603a      	str	r2, [r7, #0]
  return result;
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	40d3      	lsrs	r3, r2
 8003130:	4a04      	ldr	r2, [pc, #16]	; (8003144 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	08003e74 	.word	0x08003e74

08003148 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b092      	sub	sp, #72	; 0x48
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80d4 	beq.w	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316c:	4b4e      	ldr	r3, [pc, #312]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10e      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003178:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	4a4a      	ldr	r2, [pc, #296]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003182:	61d3      	str	r3, [r2, #28]
 8003184:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003196:	4b45      	ldr	r3, [pc, #276]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d118      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a2:	4b42      	ldr	r3, [pc, #264]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a41      	ldr	r2, [pc, #260]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ae:	f7fd fc7b 	bl	8000aa8 <HAL_GetTick>
 80031b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	e008      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b6:	f7fd fc77 	bl	8000aa8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b64      	cmp	r3, #100	; 0x64
 80031c2:	d901      	bls.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1d6      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031d4:	4b34      	ldr	r3, [pc, #208]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8084 	beq.w	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d07c      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031f4:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	461a      	mov	r2, r3
 800321e:	2301      	movs	r3, #1
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	461a      	mov	r2, r3
 8003242:	2300      	movs	r3, #0
 8003244:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003246:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800324c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d04b      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7fd fc27 	bl	8000aa8 <HAL_GetTick>
 800325a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325c:	e00a      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fd fc23 	bl	8000aa8 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	; 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e180      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003274:	2302      	movs	r3, #2
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
 8003280:	2302      	movs	r3, #2
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	61fb      	str	r3, [r7, #28]
  return result;
 800328c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d108      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032a2:	4b01      	ldr	r3, [pc, #4]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	e00d      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40007000 	.word	0x40007000
 80032b0:	10908100 	.word	0x10908100
 80032b4:	2302      	movs	r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	4b9a      	ldr	r3, [pc, #616]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	2202      	movs	r2, #2
 80032c6:	613a      	str	r2, [r7, #16]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	fa92 f2a2 	rbit	r2, r2
 80032ce:	60fa      	str	r2, [r7, #12]
  return result;
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	fab2 f282 	clz	r2, r2
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	f002 021f 	and.w	r2, r2, #31
 80032e2:	2101      	movs	r1, #1
 80032e4:	fa01 f202 	lsl.w	r2, r1, r2
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0b7      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032ee:	4b8f      	ldr	r3, [pc, #572]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	498c      	ldr	r1, [pc, #560]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003300:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003308:	4b88      	ldr	r3, [pc, #544]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	4a87      	ldr	r2, [pc, #540]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800330e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003312:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003320:	4b82      	ldr	r3, [pc, #520]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	f023 0203 	bic.w	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	497f      	ldr	r1, [pc, #508]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800333e:	4b7b      	ldr	r3, [pc, #492]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4978      	ldr	r1, [pc, #480]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800334c:	4313      	orrs	r3, r2
 800334e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800335c:	4b73      	ldr	r3, [pc, #460]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	4970      	ldr	r1, [pc, #448]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800337a:	4b6c      	ldr	r3, [pc, #432]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f023 0210 	bic.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	4969      	ldr	r1, [pc, #420]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003388:	4313      	orrs	r3, r2
 800338a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003398:	4b64      	ldr	r3, [pc, #400]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	4961      	ldr	r1, [pc, #388]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033b6:	4b5d      	ldr	r3, [pc, #372]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f023 0220 	bic.w	r2, r3, #32
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	495a      	ldr	r1, [pc, #360]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033d4:	4b55      	ldr	r3, [pc, #340]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	4952      	ldr	r1, [pc, #328]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f2:	4b4e      	ldr	r3, [pc, #312]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	494b      	ldr	r1, [pc, #300]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003410:	4b46      	ldr	r3, [pc, #280]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	4943      	ldr	r1, [pc, #268]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341e:	4313      	orrs	r3, r2
 8003420:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800342e:	4b3f      	ldr	r3, [pc, #252]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	493c      	ldr	r1, [pc, #240]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	4934      	ldr	r1, [pc, #208]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	492d      	ldr	r1, [pc, #180]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003478:	4313      	orrs	r3, r2
 800347a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003488:	4b28      	ldr	r3, [pc, #160]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003494:	4925      	ldr	r1, [pc, #148]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	491e      	ldr	r1, [pc, #120]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	4916      	ldr	r1, [pc, #88]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	490f      	ldr	r1, [pc, #60]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	4907      	ldr	r1, [pc, #28]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800351e:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	e002      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003532:	4913      	ldr	r1, [pc, #76]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003534:	4313      	orrs	r3, r2
 8003536:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003550:	490b      	ldr	r1, [pc, #44]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003552:	4313      	orrs	r3, r2
 8003554:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356e:	4904      	ldr	r1, [pc, #16]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003570:	4313      	orrs	r3, r2
 8003572:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3748      	adds	r7, #72	; 0x48
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e040      	b.n	8003618 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd f97c 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f82c 	bl	8003620 <UART_SetConfig>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e022      	b.n	8003618 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9f4 	bl	80039c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fa7b 	bl	8003b0c <UART_CheckIdleState>
 8003616:	4603      	mov	r3, r0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b92      	ldr	r3, [pc, #584]	; (8003894 <UART_SetConfig+0x274>)
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	430b      	orrs	r3, r1
 8003656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a80      	ldr	r2, [pc, #512]	; (8003898 <UART_SetConfig+0x278>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d120      	bne.n	80036de <UART_SetConfig+0xbe>
 800369c:	4b7f      	ldr	r3, [pc, #508]	; (800389c <UART_SetConfig+0x27c>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d817      	bhi.n	80036d8 <UART_SetConfig+0xb8>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <UART_SetConfig+0x90>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036c1 	.word	0x080036c1
 80036b4:	080036cd 	.word	0x080036cd
 80036b8:	080036d3 	.word	0x080036d3
 80036bc:	080036c7 	.word	0x080036c7
 80036c0:	2301      	movs	r3, #1
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e0b5      	b.n	8003832 <UART_SetConfig+0x212>
 80036c6:	2302      	movs	r3, #2
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e0b2      	b.n	8003832 <UART_SetConfig+0x212>
 80036cc:	2304      	movs	r3, #4
 80036ce:	77fb      	strb	r3, [r7, #31]
 80036d0:	e0af      	b.n	8003832 <UART_SetConfig+0x212>
 80036d2:	2308      	movs	r3, #8
 80036d4:	77fb      	strb	r3, [r7, #31]
 80036d6:	e0ac      	b.n	8003832 <UART_SetConfig+0x212>
 80036d8:	2310      	movs	r3, #16
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e0a9      	b.n	8003832 <UART_SetConfig+0x212>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6f      	ldr	r2, [pc, #444]	; (80038a0 <UART_SetConfig+0x280>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d124      	bne.n	8003732 <UART_SetConfig+0x112>
 80036e8:	4b6c      	ldr	r3, [pc, #432]	; (800389c <UART_SetConfig+0x27c>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036f4:	d011      	beq.n	800371a <UART_SetConfig+0xfa>
 80036f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036fa:	d817      	bhi.n	800372c <UART_SetConfig+0x10c>
 80036fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003700:	d011      	beq.n	8003726 <UART_SetConfig+0x106>
 8003702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003706:	d811      	bhi.n	800372c <UART_SetConfig+0x10c>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <UART_SetConfig+0xf4>
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d006      	beq.n	8003720 <UART_SetConfig+0x100>
 8003712:	e00b      	b.n	800372c <UART_SetConfig+0x10c>
 8003714:	2300      	movs	r3, #0
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e08b      	b.n	8003832 <UART_SetConfig+0x212>
 800371a:	2302      	movs	r3, #2
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e088      	b.n	8003832 <UART_SetConfig+0x212>
 8003720:	2304      	movs	r3, #4
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e085      	b.n	8003832 <UART_SetConfig+0x212>
 8003726:	2308      	movs	r3, #8
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e082      	b.n	8003832 <UART_SetConfig+0x212>
 800372c:	2310      	movs	r3, #16
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e07f      	b.n	8003832 <UART_SetConfig+0x212>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a5b      	ldr	r2, [pc, #364]	; (80038a4 <UART_SetConfig+0x284>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d124      	bne.n	8003786 <UART_SetConfig+0x166>
 800373c:	4b57      	ldr	r3, [pc, #348]	; (800389c <UART_SetConfig+0x27c>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003744:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003748:	d011      	beq.n	800376e <UART_SetConfig+0x14e>
 800374a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800374e:	d817      	bhi.n	8003780 <UART_SetConfig+0x160>
 8003750:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003754:	d011      	beq.n	800377a <UART_SetConfig+0x15a>
 8003756:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800375a:	d811      	bhi.n	8003780 <UART_SetConfig+0x160>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <UART_SetConfig+0x148>
 8003760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003764:	d006      	beq.n	8003774 <UART_SetConfig+0x154>
 8003766:	e00b      	b.n	8003780 <UART_SetConfig+0x160>
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e061      	b.n	8003832 <UART_SetConfig+0x212>
 800376e:	2302      	movs	r3, #2
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e05e      	b.n	8003832 <UART_SetConfig+0x212>
 8003774:	2304      	movs	r3, #4
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e05b      	b.n	8003832 <UART_SetConfig+0x212>
 800377a:	2308      	movs	r3, #8
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e058      	b.n	8003832 <UART_SetConfig+0x212>
 8003780:	2310      	movs	r3, #16
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e055      	b.n	8003832 <UART_SetConfig+0x212>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a47      	ldr	r2, [pc, #284]	; (80038a8 <UART_SetConfig+0x288>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d124      	bne.n	80037da <UART_SetConfig+0x1ba>
 8003790:	4b42      	ldr	r3, [pc, #264]	; (800389c <UART_SetConfig+0x27c>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800379c:	d011      	beq.n	80037c2 <UART_SetConfig+0x1a2>
 800379e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037a2:	d817      	bhi.n	80037d4 <UART_SetConfig+0x1b4>
 80037a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037a8:	d011      	beq.n	80037ce <UART_SetConfig+0x1ae>
 80037aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ae:	d811      	bhi.n	80037d4 <UART_SetConfig+0x1b4>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <UART_SetConfig+0x19c>
 80037b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b8:	d006      	beq.n	80037c8 <UART_SetConfig+0x1a8>
 80037ba:	e00b      	b.n	80037d4 <UART_SetConfig+0x1b4>
 80037bc:	2300      	movs	r3, #0
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e037      	b.n	8003832 <UART_SetConfig+0x212>
 80037c2:	2302      	movs	r3, #2
 80037c4:	77fb      	strb	r3, [r7, #31]
 80037c6:	e034      	b.n	8003832 <UART_SetConfig+0x212>
 80037c8:	2304      	movs	r3, #4
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e031      	b.n	8003832 <UART_SetConfig+0x212>
 80037ce:	2308      	movs	r3, #8
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e02e      	b.n	8003832 <UART_SetConfig+0x212>
 80037d4:	2310      	movs	r3, #16
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e02b      	b.n	8003832 <UART_SetConfig+0x212>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a33      	ldr	r2, [pc, #204]	; (80038ac <UART_SetConfig+0x28c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d124      	bne.n	800382e <UART_SetConfig+0x20e>
 80037e4:	4b2d      	ldr	r3, [pc, #180]	; (800389c <UART_SetConfig+0x27c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80037ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037f0:	d011      	beq.n	8003816 <UART_SetConfig+0x1f6>
 80037f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037f6:	d817      	bhi.n	8003828 <UART_SetConfig+0x208>
 80037f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037fc:	d011      	beq.n	8003822 <UART_SetConfig+0x202>
 80037fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003802:	d811      	bhi.n	8003828 <UART_SetConfig+0x208>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <UART_SetConfig+0x1f0>
 8003808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380c:	d006      	beq.n	800381c <UART_SetConfig+0x1fc>
 800380e:	e00b      	b.n	8003828 <UART_SetConfig+0x208>
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e00d      	b.n	8003832 <UART_SetConfig+0x212>
 8003816:	2302      	movs	r3, #2
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e00a      	b.n	8003832 <UART_SetConfig+0x212>
 800381c:	2304      	movs	r3, #4
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e007      	b.n	8003832 <UART_SetConfig+0x212>
 8003822:	2308      	movs	r3, #8
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e004      	b.n	8003832 <UART_SetConfig+0x212>
 8003828:	2310      	movs	r3, #16
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e001      	b.n	8003832 <UART_SetConfig+0x212>
 800382e:	2310      	movs	r3, #16
 8003830:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383a:	d16b      	bne.n	8003914 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800383c:	7ffb      	ldrb	r3, [r7, #31]
 800383e:	2b08      	cmp	r3, #8
 8003840:	d838      	bhi.n	80038b4 <UART_SetConfig+0x294>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <UART_SetConfig+0x228>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	0800386d 	.word	0x0800386d
 800384c:	08003875 	.word	0x08003875
 8003850:	0800387d 	.word	0x0800387d
 8003854:	080038b5 	.word	0x080038b5
 8003858:	08003883 	.word	0x08003883
 800385c:	080038b5 	.word	0x080038b5
 8003860:	080038b5 	.word	0x080038b5
 8003864:	080038b5 	.word	0x080038b5
 8003868:	0800388b 	.word	0x0800388b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800386c:	f7ff fc28 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003870:	61b8      	str	r0, [r7, #24]
        break;
 8003872:	e024      	b.n	80038be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003874:	f7ff fc46 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8003878:	61b8      	str	r0, [r7, #24]
        break;
 800387a:	e020      	b.n	80038be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <UART_SetConfig+0x290>)
 800387e:	61bb      	str	r3, [r7, #24]
        break;
 8003880:	e01d      	b.n	80038be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003882:	f7ff fba7 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8003886:	61b8      	str	r0, [r7, #24]
        break;
 8003888:	e019      	b.n	80038be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800388e:	61bb      	str	r3, [r7, #24]
        break;
 8003890:	e015      	b.n	80038be <UART_SetConfig+0x29e>
 8003892:	bf00      	nop
 8003894:	efff69f3 	.word	0xefff69f3
 8003898:	40013800 	.word	0x40013800
 800389c:	40021000 	.word	0x40021000
 80038a0:	40004400 	.word	0x40004400
 80038a4:	40004800 	.word	0x40004800
 80038a8:	40004c00 	.word	0x40004c00
 80038ac:	40005000 	.word	0x40005000
 80038b0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	77bb      	strb	r3, [r7, #30]
        break;
 80038bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d073      	beq.n	80039ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	005a      	lsls	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	441a      	add	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b0f      	cmp	r3, #15
 80038de:	d916      	bls.n	800390e <UART_SetConfig+0x2ee>
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e6:	d212      	bcs.n	800390e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f023 030f 	bic.w	r3, r3, #15
 80038f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	89fb      	ldrh	r3, [r7, #14]
 8003900:	4313      	orrs	r3, r2
 8003902:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	89fa      	ldrh	r2, [r7, #14]
 800390a:	60da      	str	r2, [r3, #12]
 800390c:	e04e      	b.n	80039ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	77bb      	strb	r3, [r7, #30]
 8003912:	e04b      	b.n	80039ac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003914:	7ffb      	ldrb	r3, [r7, #31]
 8003916:	2b08      	cmp	r3, #8
 8003918:	d827      	bhi.n	800396a <UART_SetConfig+0x34a>
 800391a:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <UART_SetConfig+0x300>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	08003945 	.word	0x08003945
 8003924:	0800394d 	.word	0x0800394d
 8003928:	08003955 	.word	0x08003955
 800392c:	0800396b 	.word	0x0800396b
 8003930:	0800395b 	.word	0x0800395b
 8003934:	0800396b 	.word	0x0800396b
 8003938:	0800396b 	.word	0x0800396b
 800393c:	0800396b 	.word	0x0800396b
 8003940:	08003963 	.word	0x08003963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003944:	f7ff fbbc 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003948:	61b8      	str	r0, [r7, #24]
        break;
 800394a:	e013      	b.n	8003974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800394c:	f7ff fbda 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8003950:	61b8      	str	r0, [r7, #24]
        break;
 8003952:	e00f      	b.n	8003974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <UART_SetConfig+0x3a4>)
 8003956:	61bb      	str	r3, [r7, #24]
        break;
 8003958:	e00c      	b.n	8003974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395a:	f7ff fb3b 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 800395e:	61b8      	str	r0, [r7, #24]
        break;
 8003960:	e008      	b.n	8003974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003966:	61bb      	str	r3, [r7, #24]
        break;
 8003968:	e004      	b.n	8003974 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	77bb      	strb	r3, [r7, #30]
        break;
 8003972:	bf00      	nop
    }

    if (pclk != 0U)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d018      	beq.n	80039ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	085a      	lsrs	r2, r3, #1
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	441a      	add	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b0f      	cmp	r3, #15
 8003992:	d909      	bls.n	80039a8 <UART_SetConfig+0x388>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399a:	d205      	bcs.n	80039a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e001      	b.n	80039ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	007a1200 	.word	0x007a1200

080039c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01a      	beq.n	8003ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac6:	d10a      	bne.n	8003ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b098      	sub	sp, #96	; 0x60
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b1c:	f7fc ffc4 	bl	8000aa8 <HAL_GetTick>
 8003b20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d12e      	bne.n	8003b8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f88c 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d021      	beq.n	8003b8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b68:	647b      	str	r3, [r7, #68]	; 0x44
 8003b6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e6      	bne.n	8003b4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e062      	b.n	8003c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d149      	bne.n	8003c30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f856 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d03c      	beq.n	8003c30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e6      	bne.n	8003bb6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3308      	adds	r3, #8
 8003c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c08:	61fa      	str	r2, [r7, #28]
 8003c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	69b9      	ldr	r1, [r7, #24]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	617b      	str	r3, [r7, #20]
   return(result);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e011      	b.n	8003c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3758      	adds	r7, #88	; 0x58
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6c:	e049      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d045      	beq.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c76:	f7fc ff17 	bl	8000aa8 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d302      	bcc.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e048      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d031      	beq.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d110      	bne.n	8003cce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f838 	bl	8003d2a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e029      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cdc:	d111      	bne.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f81e 	bl	8003d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e00f      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	bf0c      	ite	eq
 8003d12:	2301      	moveq	r3, #1
 8003d14:	2300      	movne	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d0a6      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b095      	sub	sp, #84	; 0x54
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d50:	643b      	str	r3, [r7, #64]	; 0x40
 8003d52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e6      	bne.n	8003d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3308      	adds	r3, #8
 8003d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e5      	bne.n	8003d64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d118      	bne.n	8003dd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f023 0310 	bic.w	r3, r3, #16
 8003db4:	647b      	str	r3, [r7, #68]	; 0x44
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6979      	ldr	r1, [r7, #20]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	613b      	str	r3, [r7, #16]
   return(result);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e6      	bne.n	8003da0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003de6:	bf00      	nop
 8003de8:	3754      	adds	r7, #84	; 0x54
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <memset>:
 8003df2:	4402      	add	r2, r0
 8003df4:	4603      	mov	r3, r0
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d100      	bne.n	8003dfc <memset+0xa>
 8003dfa:	4770      	bx	lr
 8003dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8003e00:	e7f9      	b.n	8003df6 <memset+0x4>
	...

08003e04 <__libc_init_array>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4d0d      	ldr	r5, [pc, #52]	; (8003e3c <__libc_init_array+0x38>)
 8003e08:	4c0d      	ldr	r4, [pc, #52]	; (8003e40 <__libc_init_array+0x3c>)
 8003e0a:	1b64      	subs	r4, r4, r5
 8003e0c:	10a4      	asrs	r4, r4, #2
 8003e0e:	2600      	movs	r6, #0
 8003e10:	42a6      	cmp	r6, r4
 8003e12:	d109      	bne.n	8003e28 <__libc_init_array+0x24>
 8003e14:	4d0b      	ldr	r5, [pc, #44]	; (8003e44 <__libc_init_array+0x40>)
 8003e16:	4c0c      	ldr	r4, [pc, #48]	; (8003e48 <__libc_init_array+0x44>)
 8003e18:	f000 f818 	bl	8003e4c <_init>
 8003e1c:	1b64      	subs	r4, r4, r5
 8003e1e:	10a4      	asrs	r4, r4, #2
 8003e20:	2600      	movs	r6, #0
 8003e22:	42a6      	cmp	r6, r4
 8003e24:	d105      	bne.n	8003e32 <__libc_init_array+0x2e>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2c:	4798      	blx	r3
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7ee      	b.n	8003e10 <__libc_init_array+0xc>
 8003e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e36:	4798      	blx	r3
 8003e38:	3601      	adds	r6, #1
 8003e3a:	e7f2      	b.n	8003e22 <__libc_init_array+0x1e>
 8003e3c:	08003e9c 	.word	0x08003e9c
 8003e40:	08003e9c 	.word	0x08003e9c
 8003e44:	08003e9c 	.word	0x08003e9c
 8003e48:	08003ea0 	.word	0x08003ea0

08003e4c <_init>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr

08003e58 <_fini>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr
