
Pressure_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a4  080049a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049ac  080049ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000fc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bf33  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000190a  00000000  00000000  0002bfb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000074e  00000000  00000000  0002e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f14c  00000000  00000000  0002e966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000da9d  00000000  00000000  0004dab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bd596  00000000  00000000  0005b54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002704  00000000  00000000  00118ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0011b1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004954 	.word	0x08004954

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004954 	.word	0x08004954

080001d4 <__aeabi_frsub>:
 80001d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__addsf3>
 80001da:	bf00      	nop

080001dc <__aeabi_fsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e0 <__addsf3>:
 80001e0:	0042      	lsls	r2, r0, #1
 80001e2:	bf1f      	itttt	ne
 80001e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001e8:	ea92 0f03 	teqne	r2, r3
 80001ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f4:	d06a      	beq.n	80002cc <__addsf3+0xec>
 80001f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001fe:	bfc1      	itttt	gt
 8000200:	18d2      	addgt	r2, r2, r3
 8000202:	4041      	eorgt	r1, r0
 8000204:	4048      	eorgt	r0, r1
 8000206:	4041      	eorgt	r1, r0
 8000208:	bfb8      	it	lt
 800020a:	425b      	neglt	r3, r3
 800020c:	2b19      	cmp	r3, #25
 800020e:	bf88      	it	hi
 8000210:	4770      	bxhi	lr
 8000212:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000216:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4240      	negne	r0, r0
 8000222:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000226:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800022e:	bf18      	it	ne
 8000230:	4249      	negne	r1, r1
 8000232:	ea92 0f03 	teq	r2, r3
 8000236:	d03f      	beq.n	80002b8 <__addsf3+0xd8>
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	fa41 fc03 	asr.w	ip, r1, r3
 8000240:	eb10 000c 	adds.w	r0, r0, ip
 8000244:	f1c3 0320 	rsb	r3, r3, #32
 8000248:	fa01 f103 	lsl.w	r1, r1, r3
 800024c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000250:	d502      	bpl.n	8000258 <__addsf3+0x78>
 8000252:	4249      	negs	r1, r1
 8000254:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000258:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800025c:	d313      	bcc.n	8000286 <__addsf3+0xa6>
 800025e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000262:	d306      	bcc.n	8000272 <__addsf3+0x92>
 8000264:	0840      	lsrs	r0, r0, #1
 8000266:	ea4f 0131 	mov.w	r1, r1, rrx
 800026a:	f102 0201 	add.w	r2, r2, #1
 800026e:	2afe      	cmp	r2, #254	; 0xfe
 8000270:	d251      	bcs.n	8000316 <__addsf3+0x136>
 8000272:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000276:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027a:	bf08      	it	eq
 800027c:	f020 0001 	biceq.w	r0, r0, #1
 8000280:	ea40 0003 	orr.w	r0, r0, r3
 8000284:	4770      	bx	lr
 8000286:	0049      	lsls	r1, r1, #1
 8000288:	eb40 0000 	adc.w	r0, r0, r0
 800028c:	3a01      	subs	r2, #1
 800028e:	bf28      	it	cs
 8000290:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000294:	d2ed      	bcs.n	8000272 <__addsf3+0x92>
 8000296:	fab0 fc80 	clz	ip, r0
 800029a:	f1ac 0c08 	sub.w	ip, ip, #8
 800029e:	ebb2 020c 	subs.w	r2, r2, ip
 80002a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002a6:	bfaa      	itet	ge
 80002a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002ac:	4252      	neglt	r2, r2
 80002ae:	4318      	orrge	r0, r3
 80002b0:	bfbc      	itt	lt
 80002b2:	40d0      	lsrlt	r0, r2
 80002b4:	4318      	orrlt	r0, r3
 80002b6:	4770      	bx	lr
 80002b8:	f092 0f00 	teq	r2, #0
 80002bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c0:	bf06      	itte	eq
 80002c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002c6:	3201      	addeq	r2, #1
 80002c8:	3b01      	subne	r3, #1
 80002ca:	e7b5      	b.n	8000238 <__addsf3+0x58>
 80002cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d4:	bf18      	it	ne
 80002d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002da:	d021      	beq.n	8000320 <__addsf3+0x140>
 80002dc:	ea92 0f03 	teq	r2, r3
 80002e0:	d004      	beq.n	80002ec <__addsf3+0x10c>
 80002e2:	f092 0f00 	teq	r2, #0
 80002e6:	bf08      	it	eq
 80002e8:	4608      	moveq	r0, r1
 80002ea:	4770      	bx	lr
 80002ec:	ea90 0f01 	teq	r0, r1
 80002f0:	bf1c      	itt	ne
 80002f2:	2000      	movne	r0, #0
 80002f4:	4770      	bxne	lr
 80002f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fa:	d104      	bne.n	8000306 <__addsf3+0x126>
 80002fc:	0040      	lsls	r0, r0, #1
 80002fe:	bf28      	it	cs
 8000300:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000304:	4770      	bx	lr
 8000306:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030a:	bf3c      	itt	cc
 800030c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000310:	4770      	bxcc	lr
 8000312:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000316:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031e:	4770      	bx	lr
 8000320:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000324:	bf16      	itet	ne
 8000326:	4608      	movne	r0, r1
 8000328:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800032c:	4601      	movne	r1, r0
 800032e:	0242      	lsls	r2, r0, #9
 8000330:	bf06      	itte	eq
 8000332:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000336:	ea90 0f01 	teqeq	r0, r1
 800033a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800033e:	4770      	bx	lr

08000340 <__aeabi_ui2f>:
 8000340:	f04f 0300 	mov.w	r3, #0
 8000344:	e004      	b.n	8000350 <__aeabi_i2f+0x8>
 8000346:	bf00      	nop

08000348 <__aeabi_i2f>:
 8000348:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800034c:	bf48      	it	mi
 800034e:	4240      	negmi	r0, r0
 8000350:	ea5f 0c00 	movs.w	ip, r0
 8000354:	bf08      	it	eq
 8000356:	4770      	bxeq	lr
 8000358:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800035c:	4601      	mov	r1, r0
 800035e:	f04f 0000 	mov.w	r0, #0
 8000362:	e01c      	b.n	800039e <__aeabi_l2f+0x2a>

08000364 <__aeabi_ul2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	e00a      	b.n	8000388 <__aeabi_l2f+0x14>
 8000372:	bf00      	nop

08000374 <__aeabi_l2f>:
 8000374:	ea50 0201 	orrs.w	r2, r0, r1
 8000378:	bf08      	it	eq
 800037a:	4770      	bxeq	lr
 800037c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000380:	d502      	bpl.n	8000388 <__aeabi_l2f+0x14>
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	ea5f 0c01 	movs.w	ip, r1
 800038c:	bf02      	ittt	eq
 800038e:	4684      	moveq	ip, r0
 8000390:	4601      	moveq	r1, r0
 8000392:	2000      	moveq	r0, #0
 8000394:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000398:	bf08      	it	eq
 800039a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800039e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a2:	fabc f28c 	clz	r2, ip
 80003a6:	3a08      	subs	r2, #8
 80003a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003ac:	db10      	blt.n	80003d0 <__aeabi_l2f+0x5c>
 80003ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b2:	4463      	add	r3, ip
 80003b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003b8:	f1c2 0220 	rsb	r2, r2, #32
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	fa20 f202 	lsr.w	r2, r0, r2
 80003c4:	eb43 0002 	adc.w	r0, r3, r2
 80003c8:	bf08      	it	eq
 80003ca:	f020 0001 	biceq.w	r0, r0, #1
 80003ce:	4770      	bx	lr
 80003d0:	f102 0220 	add.w	r2, r2, #32
 80003d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003d8:	f1c2 0220 	rsb	r2, r2, #32
 80003dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e0:	fa21 f202 	lsr.w	r2, r1, r2
 80003e4:	eb43 0002 	adc.w	r0, r3, r2
 80003e8:	bf08      	it	eq
 80003ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_ldivmod>:
 80003f0:	b97b      	cbnz	r3, 8000412 <__aeabi_ldivmod+0x22>
 80003f2:	b972      	cbnz	r2, 8000412 <__aeabi_ldivmod+0x22>
 80003f4:	2900      	cmp	r1, #0
 80003f6:	bfbe      	ittt	lt
 80003f8:	2000      	movlt	r0, #0
 80003fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003fe:	e006      	blt.n	800040e <__aeabi_ldivmod+0x1e>
 8000400:	bf08      	it	eq
 8000402:	2800      	cmpeq	r0, #0
 8000404:	bf1c      	itt	ne
 8000406:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800040a:	f04f 30ff 	movne.w	r0, #4294967295
 800040e:	f000 b9a3 	b.w	8000758 <__aeabi_idiv0>
 8000412:	f1ad 0c08 	sub.w	ip, sp, #8
 8000416:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800041a:	2900      	cmp	r1, #0
 800041c:	db09      	blt.n	8000432 <__aeabi_ldivmod+0x42>
 800041e:	2b00      	cmp	r3, #0
 8000420:	db1a      	blt.n	8000458 <__aeabi_ldivmod+0x68>
 8000422:	f000 f835 	bl	8000490 <__udivmoddi4>
 8000426:	f8dd e004 	ldr.w	lr, [sp, #4]
 800042a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042e:	b004      	add	sp, #16
 8000430:	4770      	bx	lr
 8000432:	4240      	negs	r0, r0
 8000434:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	db1b      	blt.n	8000474 <__aeabi_ldivmod+0x84>
 800043c:	f000 f828 	bl	8000490 <__udivmoddi4>
 8000440:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000448:	b004      	add	sp, #16
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	4252      	negs	r2, r2
 8000452:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000456:	4770      	bx	lr
 8000458:	4252      	negs	r2, r2
 800045a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800045e:	f000 f817 	bl	8000490 <__udivmoddi4>
 8000462:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046a:	b004      	add	sp, #16
 800046c:	4240      	negs	r0, r0
 800046e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000472:	4770      	bx	lr
 8000474:	4252      	negs	r2, r2
 8000476:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800047a:	f000 f809 	bl	8000490 <__udivmoddi4>
 800047e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000486:	b004      	add	sp, #16
 8000488:	4252      	negs	r2, r2
 800048a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800048e:	4770      	bx	lr

08000490 <__udivmoddi4>:
 8000490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000494:	9e08      	ldr	r6, [sp, #32]
 8000496:	460d      	mov	r5, r1
 8000498:	4604      	mov	r4, r0
 800049a:	460f      	mov	r7, r1
 800049c:	2b00      	cmp	r3, #0
 800049e:	d14a      	bne.n	8000536 <__udivmoddi4+0xa6>
 80004a0:	428a      	cmp	r2, r1
 80004a2:	4694      	mov	ip, r2
 80004a4:	d965      	bls.n	8000572 <__udivmoddi4+0xe2>
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	b143      	cbz	r3, 80004be <__udivmoddi4+0x2e>
 80004ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b0:	f1c3 0220 	rsb	r2, r3, #32
 80004b4:	409f      	lsls	r7, r3
 80004b6:	fa20 f202 	lsr.w	r2, r0, r2
 80004ba:	4317      	orrs	r7, r2
 80004bc:	409c      	lsls	r4, r3
 80004be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004c2:	fa1f f58c 	uxth.w	r5, ip
 80004c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80004ca:	0c22      	lsrs	r2, r4, #16
 80004cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80004d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004d4:	fb01 f005 	mul.w	r0, r1, r5
 80004d8:	4290      	cmp	r0, r2
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x62>
 80004dc:	eb1c 0202 	adds.w	r2, ip, r2
 80004e0:	f101 37ff 	add.w	r7, r1, #4294967295
 80004e4:	f080 811c 	bcs.w	8000720 <__udivmoddi4+0x290>
 80004e8:	4290      	cmp	r0, r2
 80004ea:	f240 8119 	bls.w	8000720 <__udivmoddi4+0x290>
 80004ee:	3902      	subs	r1, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a12      	subs	r2, r2, r0
 80004f4:	b2a4      	uxth	r4, r4
 80004f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80004fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000502:	fb00 f505 	mul.w	r5, r0, r5
 8000506:	42a5      	cmp	r5, r4
 8000508:	d90a      	bls.n	8000520 <__udivmoddi4+0x90>
 800050a:	eb1c 0404 	adds.w	r4, ip, r4
 800050e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000512:	f080 8107 	bcs.w	8000724 <__udivmoddi4+0x294>
 8000516:	42a5      	cmp	r5, r4
 8000518:	f240 8104 	bls.w	8000724 <__udivmoddi4+0x294>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000524:	1b64      	subs	r4, r4, r5
 8000526:	2100      	movs	r1, #0
 8000528:	b11e      	cbz	r6, 8000532 <__udivmoddi4+0xa2>
 800052a:	40dc      	lsrs	r4, r3
 800052c:	2300      	movs	r3, #0
 800052e:	e9c6 4300 	strd	r4, r3, [r6]
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	428b      	cmp	r3, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0xbc>
 800053a:	2e00      	cmp	r6, #0
 800053c:	f000 80ed 	beq.w	800071a <__udivmoddi4+0x28a>
 8000540:	2100      	movs	r1, #0
 8000542:	e9c6 0500 	strd	r0, r5, [r6]
 8000546:	4608      	mov	r0, r1
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	fab3 f183 	clz	r1, r3
 8000550:	2900      	cmp	r1, #0
 8000552:	d149      	bne.n	80005e8 <__udivmoddi4+0x158>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d302      	bcc.n	800055e <__udivmoddi4+0xce>
 8000558:	4282      	cmp	r2, r0
 800055a:	f200 80f8 	bhi.w	800074e <__udivmoddi4+0x2be>
 800055e:	1a84      	subs	r4, r0, r2
 8000560:	eb65 0203 	sbc.w	r2, r5, r3
 8000564:	2001      	movs	r0, #1
 8000566:	4617      	mov	r7, r2
 8000568:	2e00      	cmp	r6, #0
 800056a:	d0e2      	beq.n	8000532 <__udivmoddi4+0xa2>
 800056c:	e9c6 4700 	strd	r4, r7, [r6]
 8000570:	e7df      	b.n	8000532 <__udivmoddi4+0xa2>
 8000572:	b902      	cbnz	r2, 8000576 <__udivmoddi4+0xe6>
 8000574:	deff      	udf	#255	; 0xff
 8000576:	fab2 f382 	clz	r3, r2
 800057a:	2b00      	cmp	r3, #0
 800057c:	f040 8090 	bne.w	80006a0 <__udivmoddi4+0x210>
 8000580:	1a8a      	subs	r2, r1, r2
 8000582:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000586:	fa1f fe8c 	uxth.w	lr, ip
 800058a:	2101      	movs	r1, #1
 800058c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000590:	fb07 2015 	mls	r0, r7, r5, r2
 8000594:	0c22      	lsrs	r2, r4, #16
 8000596:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800059a:	fb0e f005 	mul.w	r0, lr, r5
 800059e:	4290      	cmp	r0, r2
 80005a0:	d908      	bls.n	80005b4 <__udivmoddi4+0x124>
 80005a2:	eb1c 0202 	adds.w	r2, ip, r2
 80005a6:	f105 38ff 	add.w	r8, r5, #4294967295
 80005aa:	d202      	bcs.n	80005b2 <__udivmoddi4+0x122>
 80005ac:	4290      	cmp	r0, r2
 80005ae:	f200 80cb 	bhi.w	8000748 <__udivmoddi4+0x2b8>
 80005b2:	4645      	mov	r5, r8
 80005b4:	1a12      	subs	r2, r2, r0
 80005b6:	b2a4      	uxth	r4, r4
 80005b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80005bc:	fb07 2210 	mls	r2, r7, r0, r2
 80005c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005c4:	fb0e fe00 	mul.w	lr, lr, r0
 80005c8:	45a6      	cmp	lr, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x14e>
 80005cc:	eb1c 0404 	adds.w	r4, ip, r4
 80005d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005d4:	d202      	bcs.n	80005dc <__udivmoddi4+0x14c>
 80005d6:	45a6      	cmp	lr, r4
 80005d8:	f200 80bb 	bhi.w	8000752 <__udivmoddi4+0x2c2>
 80005dc:	4610      	mov	r0, r2
 80005de:	eba4 040e 	sub.w	r4, r4, lr
 80005e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x98>
 80005e8:	f1c1 0720 	rsb	r7, r1, #32
 80005ec:	408b      	lsls	r3, r1
 80005ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80005f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005f6:	fa05 f401 	lsl.w	r4, r5, r1
 80005fa:	fa20 f307 	lsr.w	r3, r0, r7
 80005fe:	40fd      	lsrs	r5, r7
 8000600:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000604:	4323      	orrs	r3, r4
 8000606:	fbb5 f8f9 	udiv	r8, r5, r9
 800060a:	fa1f fe8c 	uxth.w	lr, ip
 800060e:	fb09 5518 	mls	r5, r9, r8, r5
 8000612:	0c1c      	lsrs	r4, r3, #16
 8000614:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000618:	fb08 f50e 	mul.w	r5, r8, lr
 800061c:	42a5      	cmp	r5, r4
 800061e:	fa02 f201 	lsl.w	r2, r2, r1
 8000622:	fa00 f001 	lsl.w	r0, r0, r1
 8000626:	d90b      	bls.n	8000640 <__udivmoddi4+0x1b0>
 8000628:	eb1c 0404 	adds.w	r4, ip, r4
 800062c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000630:	f080 8088 	bcs.w	8000744 <__udivmoddi4+0x2b4>
 8000634:	42a5      	cmp	r5, r4
 8000636:	f240 8085 	bls.w	8000744 <__udivmoddi4+0x2b4>
 800063a:	f1a8 0802 	sub.w	r8, r8, #2
 800063e:	4464      	add	r4, ip
 8000640:	1b64      	subs	r4, r4, r5
 8000642:	b29d      	uxth	r5, r3
 8000644:	fbb4 f3f9 	udiv	r3, r4, r9
 8000648:	fb09 4413 	mls	r4, r9, r3, r4
 800064c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000650:	fb03 fe0e 	mul.w	lr, r3, lr
 8000654:	45a6      	cmp	lr, r4
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x1da>
 8000658:	eb1c 0404 	adds.w	r4, ip, r4
 800065c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000660:	d26c      	bcs.n	800073c <__udivmoddi4+0x2ac>
 8000662:	45a6      	cmp	lr, r4
 8000664:	d96a      	bls.n	800073c <__udivmoddi4+0x2ac>
 8000666:	3b02      	subs	r3, #2
 8000668:	4464      	add	r4, ip
 800066a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066e:	fba3 9502 	umull	r9, r5, r3, r2
 8000672:	eba4 040e 	sub.w	r4, r4, lr
 8000676:	42ac      	cmp	r4, r5
 8000678:	46c8      	mov	r8, r9
 800067a:	46ae      	mov	lr, r5
 800067c:	d356      	bcc.n	800072c <__udivmoddi4+0x29c>
 800067e:	d053      	beq.n	8000728 <__udivmoddi4+0x298>
 8000680:	b156      	cbz	r6, 8000698 <__udivmoddi4+0x208>
 8000682:	ebb0 0208 	subs.w	r2, r0, r8
 8000686:	eb64 040e 	sbc.w	r4, r4, lr
 800068a:	fa04 f707 	lsl.w	r7, r4, r7
 800068e:	40ca      	lsrs	r2, r1
 8000690:	40cc      	lsrs	r4, r1
 8000692:	4317      	orrs	r7, r2
 8000694:	e9c6 7400 	strd	r7, r4, [r6]
 8000698:	4618      	mov	r0, r3
 800069a:	2100      	movs	r1, #0
 800069c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a0:	f1c3 0120 	rsb	r1, r3, #32
 80006a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006a8:	fa20 f201 	lsr.w	r2, r0, r1
 80006ac:	fa25 f101 	lsr.w	r1, r5, r1
 80006b0:	409d      	lsls	r5, r3
 80006b2:	432a      	orrs	r2, r5
 80006b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b8:	fa1f fe8c 	uxth.w	lr, ip
 80006bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80006c0:	fb07 1510 	mls	r5, r7, r0, r1
 80006c4:	0c11      	lsrs	r1, r2, #16
 80006c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80006ca:	fb00 f50e 	mul.w	r5, r0, lr
 80006ce:	428d      	cmp	r5, r1
 80006d0:	fa04 f403 	lsl.w	r4, r4, r3
 80006d4:	d908      	bls.n	80006e8 <__udivmoddi4+0x258>
 80006d6:	eb1c 0101 	adds.w	r1, ip, r1
 80006da:	f100 38ff 	add.w	r8, r0, #4294967295
 80006de:	d22f      	bcs.n	8000740 <__udivmoddi4+0x2b0>
 80006e0:	428d      	cmp	r5, r1
 80006e2:	d92d      	bls.n	8000740 <__udivmoddi4+0x2b0>
 80006e4:	3802      	subs	r0, #2
 80006e6:	4461      	add	r1, ip
 80006e8:	1b49      	subs	r1, r1, r5
 80006ea:	b292      	uxth	r2, r2
 80006ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80006f0:	fb07 1115 	mls	r1, r7, r5, r1
 80006f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006f8:	fb05 f10e 	mul.w	r1, r5, lr
 80006fc:	4291      	cmp	r1, r2
 80006fe:	d908      	bls.n	8000712 <__udivmoddi4+0x282>
 8000700:	eb1c 0202 	adds.w	r2, ip, r2
 8000704:	f105 38ff 	add.w	r8, r5, #4294967295
 8000708:	d216      	bcs.n	8000738 <__udivmoddi4+0x2a8>
 800070a:	4291      	cmp	r1, r2
 800070c:	d914      	bls.n	8000738 <__udivmoddi4+0x2a8>
 800070e:	3d02      	subs	r5, #2
 8000710:	4462      	add	r2, ip
 8000712:	1a52      	subs	r2, r2, r1
 8000714:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000718:	e738      	b.n	800058c <__udivmoddi4+0xfc>
 800071a:	4631      	mov	r1, r6
 800071c:	4630      	mov	r0, r6
 800071e:	e708      	b.n	8000532 <__udivmoddi4+0xa2>
 8000720:	4639      	mov	r1, r7
 8000722:	e6e6      	b.n	80004f2 <__udivmoddi4+0x62>
 8000724:	4610      	mov	r0, r2
 8000726:	e6fb      	b.n	8000520 <__udivmoddi4+0x90>
 8000728:	4548      	cmp	r0, r9
 800072a:	d2a9      	bcs.n	8000680 <__udivmoddi4+0x1f0>
 800072c:	ebb9 0802 	subs.w	r8, r9, r2
 8000730:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000734:	3b01      	subs	r3, #1
 8000736:	e7a3      	b.n	8000680 <__udivmoddi4+0x1f0>
 8000738:	4645      	mov	r5, r8
 800073a:	e7ea      	b.n	8000712 <__udivmoddi4+0x282>
 800073c:	462b      	mov	r3, r5
 800073e:	e794      	b.n	800066a <__udivmoddi4+0x1da>
 8000740:	4640      	mov	r0, r8
 8000742:	e7d1      	b.n	80006e8 <__udivmoddi4+0x258>
 8000744:	46d0      	mov	r8, sl
 8000746:	e77b      	b.n	8000640 <__udivmoddi4+0x1b0>
 8000748:	3d02      	subs	r5, #2
 800074a:	4462      	add	r2, ip
 800074c:	e732      	b.n	80005b4 <__udivmoddi4+0x124>
 800074e:	4608      	mov	r0, r1
 8000750:	e70a      	b.n	8000568 <__udivmoddi4+0xd8>
 8000752:	4464      	add	r4, ip
 8000754:	3802      	subs	r0, #2
 8000756:	e742      	b.n	80005de <__udivmoddi4+0x14e>

08000758 <__aeabi_idiv0>:
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000760:	b0e5      	sub	sp, #404	; 0x194
 8000762:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 feca 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 fc5e 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 fd2c 	bl	80011c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000770:	f000 fcfa 	bl	8001168 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000774:	f000 fcb8 	bl	80010e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Pressure Sensor Loop Variables*/
  	  /* Slave Address of the BMP280 */
  	  uint16_t BMP_Address = 0xEC; /* BMP 280 Address */
 8000778:	23ec      	movs	r3, #236	; 0xec
 800077a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e

  	  /* Register Addresses */
  	  uint8_t regAddress_CTRL_MEAS = 0xF4; /* Oversampling control */
 800077e:	23f4      	movs	r3, #244	; 0xf4
 8000780:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
  	  uint8_t regAddress_CONFIG = 0xF5; /* Data rate/filter and interface */
 8000784:	23f5      	movs	r3, #245	; 0xf5
 8000786:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  	  uint8_t regAddress_PRESS_MSB = 0xF7; /* Pressure Most Significant Bits */
 800078a:	23f7      	movs	r3, #247	; 0xf7
 800078c:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
  	  uint8_t regAddress_PRESS_LSB = 0xF8; /* Pressure Least Significant Bits */
 8000790:	23f8      	movs	r3, #248	; 0xf8
 8000792:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
  	  uint8_t regAddress_PRESS_XLSB = 0xF9; /* Pressure Extreme Least Significant Bits */
 8000796:	23f9      	movs	r3, #249	; 0xf9
 8000798:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
  	  uint8_t regAddress_TEMP_MSB = 0xFA; /* Temperature Most Significant Bits */
 800079c:	23fa      	movs	r3, #250	; 0xfa
 800079e:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
  	  uint8_t regAddress_TEMP_LSB = 0xFB; /* Temperature Least Significant Bits */
 80007a2:	23fb      	movs	r3, #251	; 0xfb
 80007a4:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
  	  uint8_t regAddress_TEMP_XLSB = 0xFC; /* Temperature Extreme Least Significant Bits */
 80007a8:	23fc      	movs	r3, #252	; 0xfc
 80007aa:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176

  	  /* Trimming Register Addresses */
  	  uint8_t regAddress_Dig_T1 = 0x88;
 80007ae:	2388      	movs	r3, #136	; 0x88
 80007b0:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
  	  uint8_t regAddress_Dig_T2 = 0x8A;
 80007b4:	238a      	movs	r3, #138	; 0x8a
 80007b6:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
  	  uint8_t regAddress_Dig_T3 = 0x8C;
 80007ba:	238c      	movs	r3, #140	; 0x8c
 80007bc:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
	  uint8_t regAddress_Dig_P1 = 0x8E;
 80007c0:	238e      	movs	r3, #142	; 0x8e
 80007c2:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
	  uint8_t regAddress_Dig_P2 = 0x90;
 80007c6:	2390      	movs	r3, #144	; 0x90
 80007c8:	f887 3171 	strb.w	r3, [r7, #369]	; 0x171
	  uint8_t regAddress_Dig_P3 = 0x92;
 80007cc:	2392      	movs	r3, #146	; 0x92
 80007ce:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
	  uint8_t regAddress_Dig_P4 = 0x94;
 80007d2:	2394      	movs	r3, #148	; 0x94
 80007d4:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
	  uint8_t regAddress_Dig_P5 = 0x96;
 80007d8:	2396      	movs	r3, #150	; 0x96
 80007da:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
	  uint8_t regAddress_Dig_P6 = 0x98;
 80007de:	2398      	movs	r3, #152	; 0x98
 80007e0:	f887 316d 	strb.w	r3, [r7, #365]	; 0x16d
	  uint8_t regAddress_Dig_P7 = 0x9A;
 80007e4:	239a      	movs	r3, #154	; 0x9a
 80007e6:	f887 316c 	strb.w	r3, [r7, #364]	; 0x16c
	  uint8_t regAddress_Dig_P8 = 0x9C;
 80007ea:	239c      	movs	r3, #156	; 0x9c
 80007ec:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
	  uint8_t regAddress_Dig_P9 = 0x9E;
 80007f0:	239e      	movs	r3, #158	; 0x9e
 80007f2:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a


  	  /* Register Values */
  	  uint8_t regCTRL_MEAS = 0x27; /* Oversampling x1 for Pressure and Temp, Normal Mode 00100111*/
 80007f6:	2327      	movs	r3, #39	; 0x27
 80007f8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  	  uint8_t regCONFIG = 0x00; /* Not sure about this. 0.5ms rate, filter off, SPI off */
 80007fc:	2300      	movs	r3, #0
 80007fe:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a

  	  float pressVal; /* Decimal Pressure */
  	  float tempVal; /* Decimal Temperature */

  	  /* Configuration of the BMP280 */
  	  HAL_I2C_Mem_Write(&hi2c1, BMP_Address, regAddress_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &regCTRL_MEAS, 1, 2000u); /* Writing to the ctrl measurement register */
 8000802:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8000806:	b29a      	uxth	r2, r3
 8000808:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 800080c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000810:	9302      	str	r3, [sp, #8]
 8000812:	2301      	movs	r3, #1
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	f207 132b 	addw	r3, r7, #299	; 0x12b
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2301      	movs	r3, #1
 800081e:	48d5      	ldr	r0, [pc, #852]	; (8000b74 <main+0x418>)
 8000820:	f001 fa0e 	bl	8001c40 <HAL_I2C_Mem_Write>
  	  HAL_I2C_Mem_Write(&hi2c1, BMP_Address, regAddress_CONFIG, I2C_MEMADD_SIZE_8BIT, &regCONFIG, 1, 2000u); /* Writing to the ctrl measurement register */
 8000824:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8000828:	b29a      	uxth	r2, r3
 800082a:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 800082e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	2301      	movs	r3, #1
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	f507 7395 	add.w	r3, r7, #298	; 0x12a
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	48cc      	ldr	r0, [pc, #816]	; (8000b74 <main+0x418>)
 8000842:	f001 f9fd 	bl	8001c40 <HAL_I2C_Mem_Write>

  	  /* Reading the Trimming Values */
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T1, I2C_MEMADD_SIZE_8BIT, &dig_T1, 2, 2000u); /* Getting the Trimming Values */
 8000846:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 800084a:	b29a      	uxth	r2, r3
 800084c:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8000850:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000854:	9302      	str	r3, [sp, #8]
 8000856:	2302      	movs	r3, #2
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	f507 7391 	add.w	r3, r7, #290	; 0x122
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2301      	movs	r3, #1
 8000862:	48c4      	ldr	r0, [pc, #784]	; (8000b74 <main+0x418>)
 8000864:	f001 fb00 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T2, I2C_MEMADD_SIZE_8BIT, &dig_T2, 2, 2000u); /* Getting the Trimming Values */
 8000868:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 800086c:	b29a      	uxth	r2, r3
 800086e:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8000872:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000876:	9302      	str	r3, [sp, #8]
 8000878:	2302      	movs	r3, #2
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2301      	movs	r3, #1
 8000884:	48bb      	ldr	r0, [pc, #748]	; (8000b74 <main+0x418>)
 8000886:	f001 faef 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T3, I2C_MEMADD_SIZE_8BIT, &dig_T3, 2, 2000u); /* Getting the Trimming Values */
 800088a:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 800088e:	b29a      	uxth	r2, r3
 8000890:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8000894:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000898:	9302      	str	r3, [sp, #8]
 800089a:	2302      	movs	r3, #2
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	f507 738f 	add.w	r3, r7, #286	; 0x11e
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2301      	movs	r3, #1
 80008a6:	48b3      	ldr	r0, [pc, #716]	; (8000b74 <main+0x418>)
 80008a8:	f001 fade 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P1, I2C_MEMADD_SIZE_8BIT, &dig_P1, 2, 2000u); /* Getting the Trimming Values */
 80008ac:	f897 3172 	ldrb.w	r3, [r7, #370]	; 0x172
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80008b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	2302      	movs	r3, #2
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2301      	movs	r3, #1
 80008c8:	48aa      	ldr	r0, [pc, #680]	; (8000b74 <main+0x418>)
 80008ca:	f001 facd 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P2, I2C_MEMADD_SIZE_8BIT, &dig_P2, 2, 2000u); /* Getting the Trimming Values */
 80008ce:	f897 3171 	ldrb.w	r3, [r7, #369]	; 0x171
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80008d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008dc:	9302      	str	r3, [sp, #8]
 80008de:	2302      	movs	r3, #2
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	f507 738d 	add.w	r3, r7, #282	; 0x11a
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2301      	movs	r3, #1
 80008ea:	48a2      	ldr	r0, [pc, #648]	; (8000b74 <main+0x418>)
 80008ec:	f001 fabc 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P3, I2C_MEMADD_SIZE_8BIT, &dig_P3, 2, 2000u); /* Getting the Trimming Values */
 80008f0:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80008fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008fe:	9302      	str	r3, [sp, #8]
 8000900:	2302      	movs	r3, #2
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2301      	movs	r3, #1
 800090c:	4899      	ldr	r0, [pc, #612]	; (8000b74 <main+0x418>)
 800090e:	f001 faab 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P4, I2C_MEMADD_SIZE_8BIT, &dig_P4, 2, 2000u); /* Getting the Trimming Values */
 8000912:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000916:	b29a      	uxth	r2, r3
 8000918:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 800091c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000920:	9302      	str	r3, [sp, #8]
 8000922:	2302      	movs	r3, #2
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	f507 738b 	add.w	r3, r7, #278	; 0x116
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2301      	movs	r3, #1
 800092e:	4891      	ldr	r0, [pc, #580]	; (8000b74 <main+0x418>)
 8000930:	f001 fa9a 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P5, I2C_MEMADD_SIZE_8BIT, &dig_P5, 2, 2000u); /* Getting the Trimming Values */
 8000934:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8000938:	b29a      	uxth	r2, r3
 800093a:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 800093e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000942:	9302      	str	r3, [sp, #8]
 8000944:	2302      	movs	r3, #2
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2301      	movs	r3, #1
 8000950:	4888      	ldr	r0, [pc, #544]	; (8000b74 <main+0x418>)
 8000952:	f001 fa89 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P6, I2C_MEMADD_SIZE_8BIT, &dig_P6, 2, 2000u); /* Getting the Trimming Values */
 8000956:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 800095a:	b29a      	uxth	r2, r3
 800095c:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8000960:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	2302      	movs	r3, #2
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	f507 7389 	add.w	r3, r7, #274	; 0x112
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2301      	movs	r3, #1
 8000972:	4880      	ldr	r0, [pc, #512]	; (8000b74 <main+0x418>)
 8000974:	f001 fa78 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P7, I2C_MEMADD_SIZE_8BIT, &dig_P7, 2, 2000u); /* Getting the Trimming Values */
 8000978:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 800097c:	b29a      	uxth	r2, r3
 800097e:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8000982:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000986:	9302      	str	r3, [sp, #8]
 8000988:	2302      	movs	r3, #2
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	4877      	ldr	r0, [pc, #476]	; (8000b74 <main+0x418>)
 8000996:	f001 fa67 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P8, I2C_MEMADD_SIZE_8BIT, &dig_P8, 2, 2000u); /* Getting the Trimming Values */
 800099a:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80009a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	2302      	movs	r3, #2
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	f507 7387 	add.w	r3, r7, #270	; 0x10e
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2301      	movs	r3, #1
 80009b6:	486f      	ldr	r0, [pc, #444]	; (8000b74 <main+0x418>)
 80009b8:	f001 fa56 	bl	8001e68 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P9, I2C_MEMADD_SIZE_8BIT, &dig_P9, 2, 2000u); /* Getting the Trimming Values */
 80009bc:	f897 316a 	ldrb.w	r3, [r7, #362]	; 0x16a
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80009c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009ca:	9302      	str	r3, [sp, #8]
 80009cc:	2302      	movs	r3, #2
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2301      	movs	r3, #1
 80009d8:	4866      	ldr	r0, [pc, #408]	; (8000b74 <main+0x418>)
 80009da:	f001 fa45 	bl	8001e68 <HAL_I2C_Mem_Read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, &data, 6, 2000u); /* Reading pressure and temperature */
 80009de:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80009e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	2306      	movs	r3, #6
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2301      	movs	r3, #1
 80009fa:	485e      	ldr	r0, [pc, #376]	; (8000b74 <main+0x418>)
 80009fc:	f001 fa34 	bl	8001e68 <HAL_I2C_Mem_Read>

	  press = (int32_t)((data[0] << 12) | data[1] << 4 | data[2]);
 8000a00:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8000a04:	031a      	lsls	r2, r3, #12
 8000a06:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8000a12:	4313      	orrs	r3, r2
 8000a14:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	  temp = (int32_t)((data[3] << 12) | data[4] << 4 | data[5]);
 8000a18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000a1c:	031a      	lsls	r2, r3, #12
 8000a1e:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	431a      	orrs	r2, r3
 8000a26:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

	  /* Compensation of Temperature */
	  temp_var1 = ((((temp>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000a30:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000a34:	10da      	asrs	r2, r3, #3
 8000a36:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	1ad2      	subs	r2, r2, r3
 8000a3e:	f9b7 3120 	ldrsh.w	r3, [r7, #288]	; 0x120
 8000a42:	fb02 f303 	mul.w	r3, r2, r3
 8000a46:	12db      	asrs	r3, r3, #11
 8000a48:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	  //var2 = (((((temp >> 17) - ((int32_t)dig_T1 >> 13)) * ((temp >> 17) - ((int32_t)dig_T1))) >> 13) * ((int32_t)dig_T3));
	  temp_var2 = (((((temp>>4) - ((int32_t)dig_T1)) * ((temp>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000a4c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000a50:	111a      	asrs	r2, r3, #4
 8000a52:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8000a56:	1ad1      	subs	r1, r2, r3
 8000a58:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000a5c:	111a      	asrs	r2, r3, #4
 8000a5e:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	fb01 f303 	mul.w	r3, r1, r3
 8000a68:	131a      	asrs	r2, r3, #12
 8000a6a:	f9b7 311e 	ldrsh.w	r3, [r7, #286]	; 0x11e
 8000a6e:	fb02 f303 	mul.w	r3, r2, r3
 8000a72:	139b      	asrs	r3, r3, #14
 8000a74:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	  t_fine = temp_var1 + temp_var2;
 8000a78:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000a7c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000a80:	4413      	add	r3, r2
 8000a82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	  temperature = (t_fine * 5 + 128) >> 8;
 8000a86:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	3380      	adds	r3, #128	; 0x80
 8000a92:	121b      	asrs	r3, r3, #8
 8000a94:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	  tempVal = ((float)temperature)/100;
 8000a98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000a9c:	ee07 3a90 	vmov	s15, r3
 8000aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aa4:	eddf 6a34 	vldr	s13, [pc, #208]	; 8000b78 <main+0x41c>
 8000aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aac:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

	  /* Compensation of Pressure */
	  press_var1 = ((int64_t)t_fine) - 128000;
 8000ab0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000ab4:	17da      	asrs	r2, r3, #31
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ab8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000aba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8000abe:	460b      	mov	r3, r1
 8000ac0:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ace:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ad2:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	  press_var2 = press_var1 * press_var1 * (int64_t)dig_P6;
 8000ad6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000ada:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000ade:	fb03 f102 	mul.w	r1, r3, r2
 8000ae2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000ae6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000aea:	fb02 f303 	mul.w	r3, r2, r3
 8000aee:	18ca      	adds	r2, r1, r3
 8000af0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000af4:	fba3 1303 	umull	r1, r3, r3, r3
 8000af8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000afc:	460b      	mov	r3, r1
 8000afe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000b06:	18d3      	adds	r3, r2, r3
 8000b08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000b0c:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	; 0x112
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	17da      	asrs	r2, r3, #31
 8000b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000b18:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000b1c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8000b20:	460b      	mov	r3, r1
 8000b22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000b26:	fb02 f203 	mul.w	r2, r2, r3
 8000b2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000b2e:	e9c7 0140 	strd	r0, r1, [r7, #256]	; 0x100
 8000b32:	4601      	mov	r1, r0
 8000b34:	fb01 f303 	mul.w	r3, r1, r3
 8000b38:	4413      	add	r3, r2
 8000b3a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000b3e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000b42:	fba2 1201 	umull	r1, r2, r2, r1
 8000b46:	667a      	str	r2, [r7, #100]	; 0x64
 8000b48:	460a      	mov	r2, r1
 8000b4a:	663a      	str	r2, [r7, #96]	; 0x60
 8000b4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b4e:	4413      	add	r3, r2
 8000b50:	667b      	str	r3, [r7, #100]	; 0x64
 8000b52:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000b56:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8000b5a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	  press_var2 = press_var2 + ((press_var1*(int64_t)dig_P5)<<17);
 8000b5e:	f9b7 3114 	ldrsh.w	r3, [r7, #276]	; 0x114
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	17da      	asrs	r2, r3, #31
 8000b66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000b6a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000b6e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000b72:	e003      	b.n	8000b7c <main+0x420>
 8000b74:	20000028 	.word	0x20000028
 8000b78:	42c80000 	.word	0x42c80000
 8000b7c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8000b80:	460a      	mov	r2, r1
 8000b82:	fb02 f203 	mul.w	r2, r2, r3
 8000b86:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000b8a:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
 8000b8e:	4601      	mov	r1, r0
 8000b90:	fb01 f303 	mul.w	r3, r1, r3
 8000b94:	441a      	add	r2, r3
 8000b96:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000b9a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000b9e:	fba3 1301 	umull	r1, r3, r3, r1
 8000ba2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	f04f 0100 	mov.w	r1, #0
 8000bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000bc2:	0459      	lsls	r1, r3, #17
 8000bc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000bc8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000bcc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000bd0:	0458      	lsls	r0, r3, #17
 8000bd2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8000bd6:	1816      	adds	r6, r2, r0
 8000bd8:	62be      	str	r6, [r7, #40]	; 0x28
 8000bda:	414b      	adcs	r3, r1
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000be2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	  press_var2 = 	  press_var2 + (((int64_t)dig_P4)<<35);
 8000be6:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	; 0x116
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	17da      	asrs	r2, r3, #31
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
 8000bf0:	647a      	str	r2, [r7, #68]	; 0x44
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	f04f 0100 	mov.w	r1, #0
 8000bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bfc:	00d9      	lsls	r1, r3, #3
 8000bfe:	2000      	movs	r0, #0
 8000c00:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8000c04:	1816      	adds	r6, r2, r0
 8000c06:	623e      	str	r6, [r7, #32]
 8000c08:	414b      	adcs	r3, r1
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000c10:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	  press_var1 = ((press_var1 * press_var1 * (int64_t)dig_P3)>>8) + ((press_var1 * (int64_t)dig_P2)<<12);
 8000c14:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000c18:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000c1c:	fb03 f102 	mul.w	r1, r3, r2
 8000c20:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000c24:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000c28:	fb02 f303 	mul.w	r3, r2, r3
 8000c2c:	18ca      	adds	r2, r1, r3
 8000c2e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000c32:	fba3 1303 	umull	r1, r3, r3, r3
 8000c36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c44:	18d3      	adds	r3, r2, r3
 8000c46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000c4a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	17da      	asrs	r2, r3, #31
 8000c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000c5a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000c64:	fb02 f203 	mul.w	r2, r2, r3
 8000c68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c6c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
 8000c70:	4601      	mov	r1, r0
 8000c72:	fb01 f303 	mul.w	r3, r1, r3
 8000c76:	4413      	add	r3, r2
 8000c78:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000c7c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000c80:	fba2 1201 	umull	r1, r2, r2, r1
 8000c84:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000c88:	460a      	mov	r2, r1
 8000c8a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8000c8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000c92:	4413      	add	r3, r2
 8000c94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	f04f 0100 	mov.w	r1, #0
 8000ca0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000ca4:	0a18      	lsrs	r0, r3, #8
 8000ca6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000caa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000cb2:	1219      	asrs	r1, r3, #8
 8000cb4:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	17da      	asrs	r2, r3, #31
 8000cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000cc0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000cc4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000cc8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000ccc:	fb02 f203 	mul.w	r2, r2, r3
 8000cd0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000cd4:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8000cd8:	fb06 f303 	mul.w	r3, r6, r3
 8000cdc:	441a      	add	r2, r3
 8000cde:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000ce2:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8000ce6:	fba3 6306 	umull	r6, r3, r3, r6
 8000cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000cee:	4633      	mov	r3, r6
 8000cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000cf8:	18d3      	adds	r3, r2, r3
 8000cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	f04f 0300 	mov.w	r3, #0
 8000d06:	f8d7 60e4 	ldr.w	r6, [r7, #228]	; 0xe4
 8000d0a:	0333      	lsls	r3, r6, #12
 8000d0c:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 8000d10:	ea43 5316 	orr.w	r3, r3, r6, lsr #20
 8000d14:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 8000d18:	0332      	lsls	r2, r6, #12
 8000d1a:	1886      	adds	r6, r0, r2
 8000d1c:	61be      	str	r6, [r7, #24]
 8000d1e:	eb41 0303 	adc.w	r3, r1, r3
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d28:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	  press_var1 = (((((int64_t)1)<<47)+press_var1))*((int64_t)dig_P1)>>33;
 8000d2c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000d30:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000d34:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8000d38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000d3c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	2200      	movs	r2, #0
 8000d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000d48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000d4c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8000d50:	460b      	mov	r3, r1
 8000d52:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000d56:	fb02 f203 	mul.w	r2, r2, r3
 8000d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d5e:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
 8000d62:	4601      	mov	r1, r0
 8000d64:	fb01 f303 	mul.w	r3, r1, r3
 8000d68:	4413      	add	r3, r2
 8000d6a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000d6e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000d72:	fba2 1201 	umull	r1, r2, r2, r1
 8000d76:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8000d80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d84:	4413      	add	r3, r2
 8000d86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8000d96:	104a      	asrs	r2, r1, #1
 8000d98:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8000d9c:	17cb      	asrs	r3, r1, #31
 8000d9e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	  pressure = 1048576 - press;
 8000da2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000da6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000daa:	17da      	asrs	r2, r3, #31
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	617a      	str	r2, [r7, #20]
 8000db0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000db4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	  pressure = (((pressure<<31)-press_var2)*3125)/press_var1;
 8000db8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000dbc:	105b      	asrs	r3, r3, #1
 8000dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000dc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000dc4:	07db      	lsls	r3, r3, #31
 8000dc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8000dc8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8000dcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000dce:	ebb1 0a02 	subs.w	sl, r1, r2
 8000dd2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000dd4:	eb61 0b03 	sbc.w	fp, r1, r3
 8000dd8:	4652      	mov	r2, sl
 8000dda:	465b      	mov	r3, fp
 8000ddc:	1891      	adds	r1, r2, r2
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	415b      	adcs	r3, r3
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000de8:	eb12 010a 	adds.w	r1, r2, sl
 8000dec:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8000df0:	eb43 030b 	adc.w	r3, r3, fp
 8000df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000e04:	018b      	lsls	r3, r1, #6
 8000e06:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000e0e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000e12:	018a      	lsls	r2, r1, #6
 8000e14:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000e18:	eb11 0802 	adds.w	r8, r1, r2
 8000e1c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000e20:	eb41 0903 	adc.w	r9, r1, r3
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8000e30:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8000e34:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8000e38:	4690      	mov	r8, r2
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	eb18 040a 	adds.w	r4, r8, sl
 8000e40:	eb49 050b 	adc.w	r5, r9, fp
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	00ab      	lsls	r3, r5, #2
 8000e4e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000e52:	00a2      	lsls	r2, r4, #2
 8000e54:	4614      	mov	r4, r2
 8000e56:	461d      	mov	r5, r3
 8000e58:	eb14 030a 	adds.w	r3, r4, sl
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e5e:	eb45 030b 	adc.w	r3, r5, fp
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e64:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000e68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000e6c:	f7ff fac0 	bl	80003f0 <__aeabi_ldivmod>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	  press_var1 = (((int64_t)dig_P9) * (pressure>>13) * (pressure>>13)) >> 25;
 8000e78:	f9b7 310c 	ldrsh.w	r3, [r7, #268]	; 0x10c
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	17da      	asrs	r2, r3, #31
 8000e80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000e84:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000e88:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8000e8c:	f04f 0000 	mov.w	r0, #0
 8000e90:	f04f 0100 	mov.w	r1, #0
 8000e94:	0b50      	lsrs	r0, r2, #13
 8000e96:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e9a:	1359      	asrs	r1, r3, #13
 8000e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ea0:	fb00 f203 	mul.w	r2, r0, r3
 8000ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ea8:	fb03 f301 	mul.w	r3, r3, r1
 8000eac:	4413      	add	r3, r2
 8000eae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000eb2:	fba2 1200 	umull	r1, r2, r2, r0
 8000eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000eba:	460a      	mov	r2, r1
 8000ebc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8000ec0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000ec4:	4413      	add	r3, r2
 8000ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000eca:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8000ece:	f04f 0000 	mov.w	r0, #0
 8000ed2:	f04f 0100 	mov.w	r1, #0
 8000ed6:	0b50      	lsrs	r0, r2, #13
 8000ed8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000edc:	1359      	asrs	r1, r3, #13
 8000ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000ee2:	fb00 f203 	mul.w	r2, r0, r3
 8000ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000eea:	fb03 f301 	mul.w	r3, r3, r1
 8000eee:	4413      	add	r3, r2
 8000ef0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000ef4:	fba2 1200 	umull	r1, r2, r2, r0
 8000ef8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000efc:	460a      	mov	r2, r1
 8000efe:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000f02:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000f06:	4413      	add	r3, r2
 8000f08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8000f18:	0e4a      	lsrs	r2, r1, #25
 8000f1a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8000f1e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000f22:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8000f26:	164b      	asrs	r3, r1, #25
 8000f28:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	  press_var2 = (((int64_t)dig_P8) * pressure) >> 19;
 8000f2c:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	; 0x10e
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	17da      	asrs	r2, r3, #31
 8000f34:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000f38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f3c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000f40:	460a      	mov	r2, r1
 8000f42:	fb02 f203 	mul.w	r2, r2, r3
 8000f46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000f4a:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
 8000f4e:	4601      	mov	r1, r0
 8000f50:	fb01 f303 	mul.w	r3, r1, r3
 8000f54:	441a      	add	r2, r3
 8000f56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f5a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000f5c:	fba3 1301 	umull	r1, r3, r3, r1
 8000f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000f64:	460b      	mov	r3, r1
 8000f66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f6e:	18d3      	adds	r3, r2, r3
 8000f70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8000f80:	0cca      	lsrs	r2, r1, #19
 8000f82:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8000f86:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000f8a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8000f8e:	14cb      	asrs	r3, r1, #19
 8000f90:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	  pressure = ((pressure + press_var1 + press_var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000f94:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8000f98:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000f9c:	1886      	adds	r6, r0, r2
 8000f9e:	653e      	str	r6, [r7, #80]	; 0x50
 8000fa0:	eb41 0303 	adc.w	r3, r1, r3
 8000fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8000fa6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8000faa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000fac:	1889      	adds	r1, r1, r2
 8000fae:	6739      	str	r1, [r7, #112]	; 0x70
 8000fb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000fb2:	eb41 0303 	adc.w	r3, r1, r3
 8000fb6:	677b      	str	r3, [r7, #116]	; 0x74
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	f04f 0100 	mov.w	r1, #0
 8000fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fc2:	0a18      	lsrs	r0, r3, #8
 8000fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fc6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fcc:	1219      	asrs	r1, r3, #8
 8000fce:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	17da      	asrs	r2, r3, #31
 8000fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8000fe4:	0133      	lsls	r3, r6, #4
 8000fe6:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8000fe8:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
 8000fec:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8000fee:	0132      	lsls	r2, r6, #4
 8000ff0:	1886      	adds	r6, r0, r2
 8000ff2:	603e      	str	r6, [r7, #0]
 8000ff4:	eb41 0303 	adc.w	r3, r1, r3
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ffe:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	  pressVal = ((float)pressure)/256;
 8001002:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8001006:	f7ff f9b5 	bl	8000374 <__aeabi_l2f>
 800100a:	ee06 0a90 	vmov	s13, r0
 800100e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001024 <main+0x8c8>
 8001012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001016:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c

	  HAL_Delay(2000); /* Delay for 2 seconds */
 800101a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800101e:	f000 fad3 	bl	80015c8 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, &data, 6, 2000u); /* Reading pressure and temperature */
 8001022:	e4dc      	b.n	80009de <main+0x282>
 8001024:	43800000 	.word	0x43800000

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a6      	sub	sp, #152	; 0x98
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001032:	2228      	movs	r2, #40	; 0x28
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fc5f 	bl	80048fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2258      	movs	r2, #88	; 0x58
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fc51 	bl	80048fa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2310      	movs	r3, #16
 8001062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001070:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001074:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001078:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001082:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fb58 	bl	800273c <HAL_RCC_OscConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001092:	f000 f8ff 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001096:	230f      	movs	r3, #15
 8001098:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109a:	2302      	movs	r3, #2
 800109c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010b0:	2102      	movs	r1, #2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fb96 	bl	80037e4 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010be:	f000 f8e9 	bl	8001294 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80010c2:	2322      	movs	r3, #34	; 0x22
 80010c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f002 fdbd 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80010dc:	f000 f8da 	bl	8001294 <Error_Handler>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3798      	adds	r7, #152	; 0x98
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_I2C1_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <MX_I2C1_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_I2C1_Init+0x74>)
 80010f4:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <MX_I2C1_Init+0x7c>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_I2C1_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_I2C1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_I2C1_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_I2C1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_I2C1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001122:	480e      	ldr	r0, [pc, #56]	; (800115c <MX_I2C1_Init+0x74>)
 8001124:	f000 fcfc 	bl	8001b20 <HAL_I2C_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 f8b1 	bl	8001294 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <MX_I2C1_Init+0x74>)
 8001136:	f001 fa69 	bl	800260c <HAL_I2CEx_ConfigAnalogFilter>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001140:	f000 f8a8 	bl	8001294 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_I2C1_Init+0x74>)
 8001148:	f001 faab 	bl	80026a2 <HAL_I2CEx_ConfigDigitalFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 f89f 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000028 	.word	0x20000028
 8001160:	40005400 	.word	0x40005400
 8001164:	0010020a 	.word	0x0010020a

08001168 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 800116e:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <MX_USART2_UART_Init+0x5c>)
 8001170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 8001174:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 80011ac:	f002 ff6e 	bl	800408c <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011b6:	f000 f86d 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000007c 	.word	0x2000007c
 80011c4:	40004400 	.word	0x40004400

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	4b2b      	ldr	r3, [pc, #172]	; (800128c <MX_GPIO_Init+0xc4>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a2a      	ldr	r2, [pc, #168]	; (800128c <MX_GPIO_Init+0xc4>)
 80011e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <MX_GPIO_Init+0xc4>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <MX_GPIO_Init+0xc4>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4a24      	ldr	r2, [pc, #144]	; (800128c <MX_GPIO_Init+0xc4>)
 80011fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001200:	6153      	str	r3, [r2, #20]
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_GPIO_Init+0xc4>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_GPIO_Init+0xc4>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <MX_GPIO_Init+0xc4>)
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_GPIO_Init+0xc4>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_GPIO_Init+0xc4>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <MX_GPIO_Init+0xc4>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001230:	6153      	str	r3, [r2, #20]
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_GPIO_Init+0xc4>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2120      	movs	r1, #32
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f000 fc53 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800124a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001250:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <MX_GPIO_Init+0xc8>)
 8001262:	f000 fabb 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001266:	2320      	movs	r3, #32
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f000 faac 	bl	80017dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	48000800 	.word	0x48000800

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x44>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_MspInit+0x44>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6193      	str	r3, [r2, #24]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_MspInit+0x44>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_MspInit+0x44>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_MspInit+0x44>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_MspInit+0x44>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012d6:	2007      	movs	r0, #7
 80012d8:	f000 fa4c 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <HAL_I2C_MspInit+0xb8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d145      	bne.n	8001396 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <HAL_I2C_MspInit+0xbc>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a25      	ldr	r2, [pc, #148]	; (80013a4 <HAL_I2C_MspInit+0xbc>)
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	6153      	str	r3, [r2, #20]
 8001316:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <HAL_I2C_MspInit+0xbc>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_I2C_MspInit+0xbc>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_I2C_MspInit+0xbc>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_I2C_MspInit+0xbc>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800133a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001340:	2312      	movs	r3, #18
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800134c:	2304      	movs	r3, #4
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f000 fa3f 	bl	80017dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001362:	2312      	movs	r3, #18
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800136e:	2304      	movs	r3, #4
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_I2C_MspInit+0xc0>)
 800137a:	f000 fa2f 	bl	80017dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_I2C_MspInit+0xbc>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_I2C_MspInit+0xbc>)
 8001384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_I2C_MspInit+0xbc>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40005400 	.word	0x40005400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000400 	.word	0x48000400

080013ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_UART_MspInit+0x7c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d128      	bne.n	8001420 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_UART_MspInit+0x80>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a16      	ldr	r2, [pc, #88]	; (800142c <HAL_UART_MspInit+0x80>)
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_UART_MspInit+0x80>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_UART_MspInit+0x80>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_UART_MspInit+0x80>)
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_UART_MspInit+0x80>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013fe:	230c      	movs	r3, #12
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140e:	2307      	movs	r3, #7
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f000 f9de 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40004400 	.word	0x40004400
 800142c:	40021000 	.word	0x40021000

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler+0x4>

08001436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler+0x4>

0800144e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147c:	f000 f884 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ac:	f7ff ffea 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <LoopForever+0xe>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	; (80014f4 <LoopForever+0x16>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f003 fa19 	bl	800490c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014da:	f7ff f93f 	bl	800075c <main>

080014de <LoopForever>:

LoopForever:
    b LoopForever
 80014de:	e7fe      	b.n	80014de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014ec:	080049b4 	.word	0x080049b4
  ldr r2, =_sbss
 80014f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014f4:	20000108 	.word	0x20000108

080014f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC1_2_IRQHandler>
	...

080014fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_Init+0x28>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_Init+0x28>)
 8001506:	f043 0310 	orr.w	r3, r3, #16
 800150a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f931 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001512:	2000      	movs	r0, #0
 8001514:	f000 f808 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001518:	f7ff fec2 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40022000 	.word	0x40022000

08001528 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x54>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f93b 	bl	80017c2 <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f000 f911 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_InitTick+0x5c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000000 	.word	0x20000000
 8001580:	20000008 	.word	0x20000008
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000104 	.word	0x20000104

080015b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000104 	.word	0x20000104

080015c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff8e 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff47 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5c 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff8e 	bl	80016c8 <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5d 	bl	8001674 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb0 	bl	8001730 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	e160      	b.n	8001aae <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8152 	beq.w	8001aa8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d005      	beq.n	800181c <HAL_GPIO_Init+0x40>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b03      	cmp	r3, #3
 8001888:	d017      	beq.n	80018ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d123      	bne.n	800190e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	08da      	lsrs	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3208      	adds	r2, #8
 80018ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	6939      	ldr	r1, [r7, #16]
 800190a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0203 	and.w	r2, r3, #3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80ac 	beq.w	8001aa8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001950:	4b5e      	ldr	r3, [pc, #376]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a5d      	ldr	r2, [pc, #372]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001968:	4a59      	ldr	r2, [pc, #356]	; (8001ad0 <HAL_GPIO_Init+0x2f4>)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001992:	d025      	beq.n	80019e0 <HAL_GPIO_Init+0x204>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4f      	ldr	r2, [pc, #316]	; (8001ad4 <HAL_GPIO_Init+0x2f8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d01f      	beq.n	80019dc <HAL_GPIO_Init+0x200>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <HAL_GPIO_Init+0x2fc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d019      	beq.n	80019d8 <HAL_GPIO_Init+0x1fc>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <HAL_GPIO_Init+0x300>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d013      	beq.n	80019d4 <HAL_GPIO_Init+0x1f8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a4c      	ldr	r2, [pc, #304]	; (8001ae0 <HAL_GPIO_Init+0x304>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d00d      	beq.n	80019d0 <HAL_GPIO_Init+0x1f4>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a4b      	ldr	r2, [pc, #300]	; (8001ae4 <HAL_GPIO_Init+0x308>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d007      	beq.n	80019cc <HAL_GPIO_Init+0x1f0>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a4a      	ldr	r2, [pc, #296]	; (8001ae8 <HAL_GPIO_Init+0x30c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_GPIO_Init+0x1ec>
 80019c4:	2306      	movs	r3, #6
 80019c6:	e00c      	b.n	80019e2 <HAL_GPIO_Init+0x206>
 80019c8:	2307      	movs	r3, #7
 80019ca:	e00a      	b.n	80019e2 <HAL_GPIO_Init+0x206>
 80019cc:	2305      	movs	r3, #5
 80019ce:	e008      	b.n	80019e2 <HAL_GPIO_Init+0x206>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e006      	b.n	80019e2 <HAL_GPIO_Init+0x206>
 80019d4:	2303      	movs	r3, #3
 80019d6:	e004      	b.n	80019e2 <HAL_GPIO_Init+0x206>
 80019d8:	2302      	movs	r3, #2
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x206>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_GPIO_Init+0x206>
 80019e0:	2300      	movs	r3, #0
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	4093      	lsls	r3, r2
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f2:	4937      	ldr	r1, [pc, #220]	; (8001ad0 <HAL_GPIO_Init+0x2f4>)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a00:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a24:	4a31      	ldr	r2, [pc, #196]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a2a:	4b30      	ldr	r3, [pc, #192]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a4e:	4a27      	ldr	r2, [pc, #156]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a78:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f47f ae97 	bne.w	80017ec <HAL_GPIO_Init+0x10>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	48001400 	.word	0x48001400
 8001ae8:	48001800 	.word	0x48001800
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
 8001afc:	4613      	mov	r3, r2
 8001afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b0c:	e002      	b.n	8001b14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e081      	b.n	8001c36 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fbce 	bl	80012e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e006      	b.n	8001ba8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ba6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d104      	bne.n	8001bba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69d9      	ldr	r1, [r3, #28]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1a      	ldr	r2, [r3, #32]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	817b      	strh	r3, [r7, #10]
 8001c52:	460b      	mov	r3, r1
 8001c54:	813b      	strh	r3, [r7, #8]
 8001c56:	4613      	mov	r3, r2
 8001c58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	f040 80f9 	bne.w	8001e5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_I2C_Mem_Write+0x34>
 8001c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0ed      	b.n	8001e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_I2C_Mem_Write+0x4e>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e0e6      	b.n	8001e5c <HAL_I2C_Mem_Write+0x21c>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c96:	f7ff fc8b 	bl	80015b0 <HAL_GetTick>
 8001c9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2319      	movs	r3, #25
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 fac3 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0d1      	b.n	8001e5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2221      	movs	r2, #33	; 0x21
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ce0:	88f8      	ldrh	r0, [r7, #6]
 8001ce2:	893a      	ldrh	r2, [r7, #8]
 8001ce4:	8979      	ldrh	r1, [r7, #10]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	4603      	mov	r3, r0
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f9d3 	bl	800209c <I2C_RequestMemoryWrite>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0a9      	b.n	8001e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2bff      	cmp	r3, #255	; 0xff
 8001d10:	d90e      	bls.n	8001d30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	22ff      	movs	r2, #255	; 0xff
 8001d16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	8979      	ldrh	r1, [r7, #10]
 8001d20:	2300      	movs	r3, #0
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fc3d 	bl	80025a8 <I2C_TransferConfig>
 8001d2e:	e00f      	b.n	8001d50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	8979      	ldrh	r1, [r7, #10]
 8001d42:	2300      	movs	r3, #0
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fc2c 	bl	80025a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 fabc 	bl	80022d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e07b      	b.n	8001e5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d034      	beq.n	8001e08 <HAL_I2C_Mem_Write+0x1c8>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d130      	bne.n	8001e08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	2200      	movs	r2, #0
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fa3f 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e04d      	b.n	8001e5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2bff      	cmp	r3, #255	; 0xff
 8001dc8:	d90e      	bls.n	8001de8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	22ff      	movs	r2, #255	; 0xff
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	8979      	ldrh	r1, [r7, #10]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 fbe1 	bl	80025a8 <I2C_TransferConfig>
 8001de6:	e00f      	b.n	8001e08 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	8979      	ldrh	r1, [r7, #10]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fbd0 	bl	80025a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d19e      	bne.n	8001d50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 faa2 	bl	8002360 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e01a      	b.n	8001e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_I2C_Mem_Write+0x224>)
 8001e3a:	400b      	ands	r3, r1
 8001e3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e5a:	2302      	movs	r3, #2
  }
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	fe00e800 	.word	0xfe00e800

08001e68 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	4608      	mov	r0, r1
 8001e72:	4611      	mov	r1, r2
 8001e74:	461a      	mov	r2, r3
 8001e76:	4603      	mov	r3, r0
 8001e78:	817b      	strh	r3, [r7, #10]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	813b      	strh	r3, [r7, #8]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	f040 80fd 	bne.w	800208a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_I2C_Mem_Read+0x34>
 8001e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0f1      	b.n	800208c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2C_Mem_Read+0x4e>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e0ea      	b.n	800208c <HAL_I2C_Mem_Read+0x224>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ebe:	f7ff fb77 	bl	80015b0 <HAL_GetTick>
 8001ec2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2319      	movs	r3, #25
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f9af 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0d5      	b.n	800208c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2222      	movs	r2, #34	; 0x22
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2240      	movs	r2, #64	; 0x40
 8001eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a3a      	ldr	r2, [r7, #32]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f08:	88f8      	ldrh	r0, [r7, #6]
 8001f0a:	893a      	ldrh	r2, [r7, #8]
 8001f0c:	8979      	ldrh	r1, [r7, #10]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4603      	mov	r3, r0
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f913 	bl	8002144 <I2C_RequestMemoryRead>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0ad      	b.n	800208c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2bff      	cmp	r3, #255	; 0xff
 8001f38:	d90e      	bls.n	8001f58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	22ff      	movs	r2, #255	; 0xff
 8001f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	8979      	ldrh	r1, [r7, #10]
 8001f48:	4b52      	ldr	r3, [pc, #328]	; (8002094 <HAL_I2C_Mem_Read+0x22c>)
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 fb29 	bl	80025a8 <I2C_TransferConfig>
 8001f56:	e00f      	b.n	8001f78 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	8979      	ldrh	r1, [r7, #10]
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_I2C_Mem_Read+0x22c>)
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fb18 	bl	80025a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2104      	movs	r1, #4
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f956 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07c      	b.n	800208c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d034      	beq.n	8002038 <HAL_I2C_Mem_Read+0x1d0>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d130      	bne.n	8002038 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f927 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e04d      	b.n	800208c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2bff      	cmp	r3, #255	; 0xff
 8001ff8:	d90e      	bls.n	8002018 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	22ff      	movs	r2, #255	; 0xff
 8001ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	b2da      	uxtb	r2, r3
 8002006:	8979      	ldrh	r1, [r7, #10]
 8002008:	2300      	movs	r3, #0
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fac9 	bl	80025a8 <I2C_TransferConfig>
 8002016:	e00f      	b.n	8002038 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	b2da      	uxtb	r2, r3
 8002028:	8979      	ldrh	r1, [r7, #10]
 800202a:	2300      	movs	r3, #0
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fab8 	bl	80025a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d19a      	bne.n	8001f78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f98a 	bl	8002360 <I2C_WaitOnSTOPFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e01a      	b.n	800208c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2220      	movs	r2, #32
 800205c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_I2C_Mem_Read+0x230>)
 800206a:	400b      	ands	r3, r1
 800206c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	80002400 	.word	0x80002400
 8002098:	fe00e800 	.word	0xfe00e800

0800209c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	4608      	mov	r0, r1
 80020a6:	4611      	mov	r1, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	817b      	strh	r3, [r7, #10]
 80020ae:	460b      	mov	r3, r1
 80020b0:	813b      	strh	r3, [r7, #8]
 80020b2:	4613      	mov	r3, r2
 80020b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	8979      	ldrh	r1, [r7, #10]
 80020bc:	4b20      	ldr	r3, [pc, #128]	; (8002140 <I2C_RequestMemoryWrite+0xa4>)
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fa6f 	bl	80025a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	69b9      	ldr	r1, [r7, #24]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f8ff 	bl	80022d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e02c      	b.n	8002138 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d105      	bne.n	80020f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020e4:	893b      	ldrh	r3, [r7, #8]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
 80020ee:	e015      	b.n	800211c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020f0:	893b      	ldrh	r3, [r7, #8]
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	69b9      	ldr	r1, [r7, #24]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f8e5 	bl	80022d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e012      	b.n	8002138 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002112:	893b      	ldrh	r3, [r7, #8]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2200      	movs	r2, #0
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f884 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	80002000 	.word	0x80002000

08002144 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	817b      	strh	r3, [r7, #10]
 8002156:	460b      	mov	r3, r1
 8002158:	813b      	strh	r3, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	8979      	ldrh	r1, [r7, #10]
 8002164:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <I2C_RequestMemoryRead+0xa4>)
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2300      	movs	r3, #0
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fa1c 	bl	80025a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	69b9      	ldr	r1, [r7, #24]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f8ac 	bl	80022d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e02c      	b.n	80021de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800218a:	893b      	ldrh	r3, [r7, #8]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
 8002194:	e015      	b.n	80021c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002196:	893b      	ldrh	r3, [r7, #8]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	b29b      	uxth	r3, r3
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	69b9      	ldr	r1, [r7, #24]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f892 	bl	80022d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e012      	b.n	80021de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021b8:	893b      	ldrh	r3, [r7, #8]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2200      	movs	r2, #0
 80021ca:	2140      	movs	r1, #64	; 0x40
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f831 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	80002000 	.word	0x80002000

080021ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d103      	bne.n	800220a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d007      	beq.n	8002228 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	619a      	str	r2, [r3, #24]
  }
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002244:	e031      	b.n	80022aa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d02d      	beq.n	80022aa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224e:	f7ff f9af 	bl	80015b0 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d302      	bcc.n	8002264 <I2C_WaitOnFlagUntilTimeout+0x30>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d122      	bne.n	80022aa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	429a      	cmp	r2, r3
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	429a      	cmp	r2, r3
 8002280:	d113      	bne.n	80022aa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f043 0220 	orr.w	r2, r3, #32
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00f      	b.n	80022ca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4013      	ands	r3, r2
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d0be      	beq.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022de:	e033      	b.n	8002348 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f87f 	bl	80023e8 <I2C_IsErrorOccurred>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e031      	b.n	8002358 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fa:	d025      	beq.n	8002348 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fc:	f7ff f958 	bl	80015b0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	429a      	cmp	r2, r3
 800230a:	d302      	bcc.n	8002312 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11a      	bne.n	8002348 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b02      	cmp	r3, #2
 800231e:	d013      	beq.n	8002348 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	f043 0220 	orr.w	r2, r3, #32
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e007      	b.n	8002358 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d1c4      	bne.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800236c:	e02f      	b.n	80023ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f838 	bl	80023e8 <I2C_IsErrorOccurred>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e02d      	b.n	80023de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002382:	f7ff f915 	bl	80015b0 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	429a      	cmp	r2, r3
 8002390:	d302      	bcc.n	8002398 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d11a      	bne.n	80023ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d013      	beq.n	80023ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f043 0220 	orr.w	r2, r3, #32
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e007      	b.n	80023de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d1c8      	bne.n	800236e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d068      	beq.n	80024e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2210      	movs	r2, #16
 800241a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800241c:	e049      	b.n	80024b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d045      	beq.n	80024b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002426:	f7ff f8c3 	bl	80015b0 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <I2C_IsErrorOccurred+0x54>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d13a      	bne.n	80024b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002446:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800244e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800245a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800245e:	d121      	bne.n	80024a4 <I2C_IsErrorOccurred+0xbc>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002466:	d01d      	beq.n	80024a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	2b20      	cmp	r3, #32
 800246c:	d01a      	beq.n	80024a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800247c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800247e:	f7ff f897 	bl	80015b0 <HAL_GetTick>
 8002482:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002484:	e00e      	b.n	80024a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002486:	f7ff f893 	bl	80015b0 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b19      	cmp	r3, #25
 8002492:	d907      	bls.n	80024a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f043 0320 	orr.w	r3, r3, #32
 800249a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80024a2:	e006      	b.n	80024b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d1e9      	bne.n	8002486 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d003      	beq.n	80024c8 <I2C_IsErrorOccurred+0xe0>
 80024c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0aa      	beq.n	800241e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2220      	movs	r2, #32
 80024d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00b      	beq.n	8002510 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800252a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00b      	beq.n	8002554 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	f043 0302 	orr.w	r3, r3, #2
 8002542:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800254c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01c      	beq.n	8002596 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f7ff fe45 	bl	80021ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <I2C_IsErrorOccurred+0x1bc>)
 800256e:	400b      	ands	r3, r1
 8002570:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	431a      	orrs	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800259a:	4618      	mov	r0, r3
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	fe00e800 	.word	0xfe00e800

080025a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	817b      	strh	r3, [r7, #10]
 80025b6:	4613      	mov	r3, r2
 80025b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ba:	897b      	ldrh	r3, [r7, #10]
 80025bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025c0:	7a7b      	ldrb	r3, [r7, #9]
 80025c2:	041b      	lsls	r3, r3, #16
 80025c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	0d5b      	lsrs	r3, r3, #21
 80025e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <I2C_TransferConfig+0x60>)
 80025e8:	430b      	orrs	r3, r1
 80025ea:	43db      	mvns	r3, r3
 80025ec:	ea02 0103 	and.w	r1, r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	03ff63ff 	.word	0x03ff63ff

0800260c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b20      	cmp	r3, #32
 8002620:	d138      	bne.n	8002694 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800262c:	2302      	movs	r3, #2
 800262e:	e032      	b.n	8002696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	; 0x24
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800265e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d139      	bne.n	800272c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e033      	b.n	800272e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2224      	movs	r2, #36	; 0x24
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002742:	af00      	add	r7, sp, #0
 8002744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800274c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800274e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002752:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	f001 b83a 	b.w	80037d6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002766:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 816f 	beq.w	8002a56 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002778:	4bb5      	ldr	r3, [pc, #724]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b04      	cmp	r3, #4
 8002782:	d00c      	beq.n	800279e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002784:	4bb2      	ldr	r3, [pc, #712]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d15c      	bne.n	800284a <HAL_RCC_OscConfig+0x10e>
 8002790:	4baf      	ldr	r3, [pc, #700]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279c:	d155      	bne.n	800284a <HAL_RCC_OscConfig+0x10e>
 800279e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_RCC_OscConfig+0x94>
 80027ca:	4ba1      	ldr	r3, [pc, #644]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e015      	b.n	80027fc <HAL_RCC_OscConfig+0xc0>
 80027d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80027e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027ec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027f8:	4b95      	ldr	r3, [pc, #596]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002800:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002804:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002808:	fa92 f2a2 	rbit	r2, r2
 800280c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002810:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002814:	fab2 f282 	clz	r2, r2
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f042 0220 	orr.w	r2, r2, #32
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f002 021f 	and.w	r2, r2, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8111 	beq.w	8002a54 <HAL_RCC_OscConfig+0x318>
 8002832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002836:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 8108 	bne.w	8002a54 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	f000 bfc6 	b.w	80037d6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800284e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x12e>
 800285c:	4b7c      	ldr	r3, [pc, #496]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a7b      	ldr	r2, [pc, #492]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	e036      	b.n	80028d8 <HAL_RCC_OscConfig+0x19c>
 800286a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800286e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x158>
 800287a:	4b75      	ldr	r3, [pc, #468]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a74      	ldr	r2, [pc, #464]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b72      	ldr	r3, [pc, #456]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a71      	ldr	r2, [pc, #452]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 800288c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e021      	b.n	80028d8 <HAL_RCC_OscConfig+0x19c>
 8002894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002898:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x184>
 80028a6:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a69      	ldr	r2, [pc, #420]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a66      	ldr	r2, [pc, #408]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0x19c>
 80028c0:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a62      	ldr	r2, [pc, #392]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b60      	ldr	r3, [pc, #384]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a5f      	ldr	r2, [pc, #380]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d059      	beq.n	800299c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fe fe62 	bl	80015b0 <HAL_GetTick>
 80028ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f2:	f7fe fe5d 	bl	80015b0 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d902      	bls.n	8002908 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	f000 bf67 	b.w	80037d6 <HAL_RCC_OscConfig+0x109a>
 8002908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800290c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800291c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d102      	bne.n	800293a <HAL_RCC_OscConfig+0x1fe>
 8002934:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	e015      	b.n	8002966 <HAL_RCC_OscConfig+0x22a>
 800293a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800294e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002952:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002956:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800296a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800296e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002972:	fa92 f2a2 	rbit	r2, r2
 8002976:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800297a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800297e:	fab2 f282 	clz	r2, r2
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f042 0220 	orr.w	r2, r2, #32
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	f002 021f 	and.w	r2, r2, #31
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ab      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1b6>
 800299a:	e05c      	b.n	8002a56 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe fe08 	bl	80015b0 <HAL_GetTick>
 80029a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a6:	f7fe fe03 	bl	80015b0 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d902      	bls.n	80029bc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	f000 bf0d 	b.w	80037d6 <HAL_RCC_OscConfig+0x109a>
 80029bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80029d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_OscConfig+0x2b2>
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x2de>
 80029ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_RCC_OscConfig+0x314>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a1e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002a22:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a26:	fa92 f2a2 	rbit	r2, r2
 8002a2a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002a2e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a32:	fab2 f282 	clz	r2, r2
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f042 0220 	orr.w	r2, r2, #32
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	f002 021f 	and.w	r2, r2, #31
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f202 	lsl.w	r2, r1, r2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1ab      	bne.n	80029a6 <HAL_RCC_OscConfig+0x26a>
 8002a4e:	e002      	b.n	8002a56 <HAL_RCC_OscConfig+0x31a>
 8002a50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 817f 	beq.w	8002d6a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a6c:	4ba7      	ldr	r3, [pc, #668]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00c      	beq.n	8002a92 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a78:	4ba4      	ldr	r3, [pc, #656]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d173      	bne.n	8002b6c <HAL_RCC_OscConfig+0x430>
 8002a84:	4ba1      	ldr	r3, [pc, #644]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a90:	d16c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x430>
 8002a92:	2302      	movs	r3, #2
 8002a94:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002aa4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x386>
 8002abc:	4b93      	ldr	r3, [pc, #588]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	e013      	b.n	8002aea <HAL_RCC_OscConfig+0x3ae>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ada:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ae6:	4b89      	ldr	r3, [pc, #548]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2202      	movs	r2, #2
 8002aec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002af0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002afc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f042 0220 	orr.w	r2, r2, #32
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f002 021f 	and.w	r2, r2, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f202 	lsl.w	r2, r1, r2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCC_OscConfig+0x3f6>
 8002b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d002      	beq.n	8002b32 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f000 be52 	b.w	80037d6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	21f8      	movs	r1, #248	; 0xf8
 8002b48:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002b50:	fa91 f1a1 	rbit	r1, r1
 8002b54:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002b58:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b5c:	fab1 f181 	clz	r1, r1
 8002b60:	b2c9      	uxtb	r1, r1
 8002b62:	408b      	lsls	r3, r1
 8002b64:	4969      	ldr	r1, [pc, #420]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	e0fe      	b.n	8002d6a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8088 	beq.w	8002c8e <HAL_RCC_OscConfig+0x552>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002b90:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe fd01 	bl	80015b0 <HAL_GetTick>
 8002bae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fe fcfc 	bl	80015b0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d902      	bls.n	8002bca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	f000 be06 	b.w	80037d6 <HAL_RCC_OscConfig+0x109a>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002bdc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4be>
 8002bf4:	4b45      	ldr	r3, [pc, #276]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	e013      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e6>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c12:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2202      	movs	r2, #2
 8002c24:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c28:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c2c:	fa92 f2a2 	rbit	r2, r2
 8002c30:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002c34:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c38:	fab2 f282 	clz	r2, r2
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f042 0220 	orr.w	r2, r2, #32
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f002 021f 	and.w	r2, r2, #31
 8002c48:	2101      	movs	r1, #1
 8002c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0af      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	21f8      	movs	r1, #248	; 0xf8
 8002c6a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002c72:	fa91 f1a1 	rbit	r1, r1
 8002c76:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002c7a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c7e:	fab1 f181 	clz	r1, r1
 8002c82:	b2c9      	uxtb	r1, r1
 8002c84:	408b      	lsls	r3, r1
 8002c86:	4921      	ldr	r1, [pc, #132]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]
 8002c8c:	e06d      	b.n	8002d6a <HAL_RCC_OscConfig+0x62e>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002ca0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fc79 	bl	80015b0 <HAL_GetTick>
 8002cbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc4:	f7fe fc74 	bl	80015b0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d902      	bls.n	8002cda <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	f000 bd7e 	b.w	80037d6 <HAL_RCC_OscConfig+0x109a>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002cec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_RCC_OscConfig+0x5d4>
 8002d04:	4b01      	ldr	r3, [pc, #4]	; (8002d0c <HAL_RCC_OscConfig+0x5d0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	e016      	b.n	8002d38 <HAL_RCC_OscConfig+0x5fc>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	2302      	movs	r3, #2
 8002d12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002d22:	2302      	movs	r3, #2
 8002d24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d34:	4bbf      	ldr	r3, [pc, #764]	; (8003034 <HAL_RCC_OscConfig+0x8f8>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d3e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002d42:	fa92 f2a2 	rbit	r2, r2
 8002d46:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002d4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d4e:	fab2 f282 	clz	r2, r2
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f042 0220 	orr.w	r2, r2, #32
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f002 021f 	and.w	r2, r2, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1ac      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8113 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d07c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x74e>
 8002d90:	2301      	movs	r3, #1
 8002d92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002da2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	4ba2      	ldr	r3, [pc, #648]	; (8003038 <HAL_RCC_OscConfig+0x8fc>)
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	461a      	mov	r2, r3
 8002db6:	2301      	movs	r3, #1
 8002db8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fbf9 	bl	80015b0 <HAL_GetTick>
 8002dbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fbf4 	bl	80015b0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d902      	bls.n	8002dda <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	f000 bcfe 	b.w	80037d6 <HAL_RCC_OscConfig+0x109a>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002de4:	fa93 f2a3 	rbit	r2, r3
 8002de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	fa93 f2a3 	rbit	r2, r3
 8002e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e1e:	2202      	movs	r2, #2
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	fa93 f2a3 	rbit	r2, r3
 8002e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	4b7e      	ldr	r3, [pc, #504]	; (8003034 <HAL_RCC_OscConfig+0x8f8>)
 8002e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e46:	2102      	movs	r1, #2
 8002e48:	6019      	str	r1, [r3, #0]
 8002e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f1a3 	rbit	r1, r3
 8002e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e60:	6019      	str	r1, [r3, #0]
  return result;
 8002e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d09d      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x688>
 8002e88:	e08d      	b.n	8002fa6 <HAL_RCC_OscConfig+0x86a>
 8002e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002eac:	601a      	str	r2, [r3, #0]
  return result;
 8002eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002eb6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b5d      	ldr	r3, [pc, #372]	; (8003038 <HAL_RCC_OscConfig+0x8fc>)
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2300      	movs	r3, #0
 8002eca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fb70 	bl	80015b0 <HAL_GetTick>
 8002ed0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fb6b 	bl	80015b0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d902      	bls.n	8002eec <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	f000 bc75 	b.w	80037d6 <HAL_RCC_OscConfig+0x109a>
 8002eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002efc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f2a3 	rbit	r2, r3
 8002f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f18:	2202      	movs	r2, #2
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	fa93 f2a3 	rbit	r2, r3
 8002f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f38:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f2a3 	rbit	r2, r3
 8002f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f58:	4b36      	ldr	r3, [pc, #216]	; (8003034 <HAL_RCC_OscConfig+0x8f8>)
 8002f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f64:	2102      	movs	r1, #2
 8002f66:	6019      	str	r1, [r3, #0]
 8002f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	fa93 f1a3 	rbit	r1, r3
 8002f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f7e:	6019      	str	r1, [r3, #0]
  return result;
 8002f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d197      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002faa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 81a5 	beq.w	8003306 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_RCC_OscConfig+0x8f8>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_RCC_OscConfig+0x8f8>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_RCC_OscConfig+0x8f8>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	61d3      	str	r3, [r2, #28]
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <HAL_RCC_OscConfig+0x8f8>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_RCC_OscConfig+0x900>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d121      	bne.n	800304c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_RCC_OscConfig+0x900>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0b      	ldr	r2, [pc, #44]	; (800303c <HAL_RCC_OscConfig+0x900>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003014:	f7fe facc 	bl	80015b0 <HAL_GetTick>
 8003018:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	e010      	b.n	8003040 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301e:	f7fe fac7 	bl	80015b0 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d908      	bls.n	8003040 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e3d1      	b.n	80037d6 <HAL_RCC_OscConfig+0x109a>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	10908120 	.word	0x10908120
 800303c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b8d      	ldr	r3, [pc, #564]	; (8003278 <HAL_RCC_OscConfig+0xb3c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0e8      	beq.n	800301e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003050:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x92e>
 800305c:	4b87      	ldr	r3, [pc, #540]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a86      	ldr	r2, [pc, #536]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	e035      	b.n	80030d6 <HAL_RCC_OscConfig+0x99a>
 800306a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800306e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x958>
 800307a:	4b80      	ldr	r3, [pc, #512]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4a7f      	ldr	r2, [pc, #508]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	6213      	str	r3, [r2, #32]
 8003086:	4b7d      	ldr	r3, [pc, #500]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4a7c      	ldr	r2, [pc, #496]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	6213      	str	r3, [r2, #32]
 8003092:	e020      	b.n	80030d6 <HAL_RCC_OscConfig+0x99a>
 8003094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003098:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b05      	cmp	r3, #5
 80030a2:	d10c      	bne.n	80030be <HAL_RCC_OscConfig+0x982>
 80030a4:	4b75      	ldr	r3, [pc, #468]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4a74      	ldr	r2, [pc, #464]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 80030aa:	f043 0304 	orr.w	r3, r3, #4
 80030ae:	6213      	str	r3, [r2, #32]
 80030b0:	4b72      	ldr	r3, [pc, #456]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4a71      	ldr	r2, [pc, #452]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	e00b      	b.n	80030d6 <HAL_RCC_OscConfig+0x99a>
 80030be:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4a6e      	ldr	r2, [pc, #440]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	6213      	str	r3, [r2, #32]
 80030ca:	4b6c      	ldr	r3, [pc, #432]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4a6b      	ldr	r2, [pc, #428]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 8081 	beq.w	80031ea <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e8:	f7fe fa62 	bl	80015b0 <HAL_GetTick>
 80030ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f0:	e00b      	b.n	800310a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f2:	f7fe fa5d 	bl	80015b0 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e365      	b.n	80037d6 <HAL_RCC_OscConfig+0x109a>
 800310a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800310e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003112:	2202      	movs	r2, #2
 8003114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800311a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f2a3 	rbit	r2, r3
 8003124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003128:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003132:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003136:	2202      	movs	r2, #2
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800313e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fa93 f2a3 	rbit	r2, r3
 8003148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800314c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003150:	601a      	str	r2, [r3, #0]
  return result;
 8003152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003156:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800315a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f043 0302 	orr.w	r3, r3, #2
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d102      	bne.n	8003176 <HAL_RCC_OscConfig+0xa3a>
 8003170:	4b42      	ldr	r3, [pc, #264]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	e013      	b.n	800319e <HAL_RCC_OscConfig+0xa62>
 8003176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800317e:	2202      	movs	r2, #2
 8003180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003186:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	fa93 f2a3 	rbit	r2, r3
 8003190:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003194:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	4b38      	ldr	r3, [pc, #224]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031a6:	2102      	movs	r1, #2
 80031a8:	6011      	str	r1, [r2, #0]
 80031aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	fa92 f1a2 	rbit	r1, r2
 80031b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031bc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80031c0:	6011      	str	r1, [r2, #0]
  return result;
 80031c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031c6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	fab2 f282 	clz	r2, r2
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	f002 021f 	and.w	r2, r2, #31
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f202 	lsl.w	r2, r1, r2
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d084      	beq.n	80030f2 <HAL_RCC_OscConfig+0x9b6>
 80031e8:	e083      	b.n	80032f2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ea:	f7fe f9e1 	bl	80015b0 <HAL_GetTick>
 80031ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f4:	f7fe f9dc 	bl	80015b0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e2e4      	b.n	80037d6 <HAL_RCC_OscConfig+0x109a>
 800320c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003210:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003214:	2202      	movs	r2, #2
 8003216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800321c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	fa93 f2a3 	rbit	r2, r3
 8003226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003234:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003238:	2202      	movs	r2, #2
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003240:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	fa93 f2a3 	rbit	r2, r3
 800324a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800324e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003252:	601a      	str	r2, [r3, #0]
  return result;
 8003254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003258:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800325c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d106      	bne.n	8003280 <HAL_RCC_OscConfig+0xb44>
 8003272:	4b02      	ldr	r3, [pc, #8]	; (800327c <HAL_RCC_OscConfig+0xb40>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	e017      	b.n	80032a8 <HAL_RCC_OscConfig+0xb6c>
 8003278:	40007000 	.word	0x40007000
 800327c:	40021000 	.word	0x40021000
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003288:	2202      	movs	r2, #2
 800328a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003290:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f2a3 	rbit	r2, r3
 800329a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	4bb3      	ldr	r3, [pc, #716]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032b0:	2102      	movs	r1, #2
 80032b2:	6011      	str	r1, [r2, #0]
 80032b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	fa92 f1a2 	rbit	r1, r2
 80032c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032c6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80032ca:	6011      	str	r1, [r2, #0]
  return result;
 80032cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032d0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	fab2 f282 	clz	r2, r2
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	f002 021f 	and.w	r2, r2, #31
 80032e6:	2101      	movs	r1, #1
 80032e8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d180      	bne.n	80031f4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032f2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d105      	bne.n	8003306 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fa:	4b9e      	ldr	r3, [pc, #632]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	4a9d      	ldr	r2, [pc, #628]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 8003300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003304:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 825e 	beq.w	80037d4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003318:	4b96      	ldr	r3, [pc, #600]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b08      	cmp	r3, #8
 8003322:	f000 821f 	beq.w	8003764 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800332a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b02      	cmp	r3, #2
 8003334:	f040 8170 	bne.w	8003618 <HAL_RCC_OscConfig+0xedc>
 8003338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800333c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	fa93 f2a3 	rbit	r2, r3
 8003354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003358:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800335c:	601a      	str	r2, [r3, #0]
  return result;
 800335e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003362:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003366:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003372:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	461a      	mov	r2, r3
 800337a:	2300      	movs	r3, #0
 800337c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337e:	f7fe f917 	bl	80015b0 <HAL_GetTick>
 8003382:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003386:	e009      	b.n	800339c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe f912 	bl	80015b0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e21c      	b.n	80037d6 <HAL_RCC_OscConfig+0x109a>
 800339c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033c0:	601a      	str	r2, [r3, #0]
  return result;
 80033c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_OscConfig+0xcaa>
 80033e0:	4b64      	ldr	r3, [pc, #400]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	e027      	b.n	8003436 <HAL_RCC_OscConfig+0xcfa>
 80033e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80033ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	fa93 f2a3 	rbit	r2, r3
 8003402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003406:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003410:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	fa93 f2a3 	rbit	r2, r3
 8003428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800342c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	4b50      	ldr	r3, [pc, #320]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800343a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800343e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003442:	6011      	str	r1, [r2, #0]
 8003444:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003448:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	fa92 f1a2 	rbit	r1, r2
 8003452:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003456:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800345a:	6011      	str	r1, [r2, #0]
  return result;
 800345c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003460:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	fab2 f282 	clz	r2, r2
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f042 0220 	orr.w	r2, r2, #32
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f002 021f 	and.w	r2, r2, #31
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d182      	bne.n	8003388 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003482:	4b3c      	ldr	r3, [pc, #240]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	f023 020f 	bic.w	r2, r3, #15
 800348a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	4937      	ldr	r1, [pc, #220]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 8003498:	4313      	orrs	r3, r2
 800349a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800349c:	4b35      	ldr	r3, [pc, #212]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80034a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a19      	ldr	r1, [r3, #32]
 80034b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	430b      	orrs	r3, r1
 80034be:	492d      	ldr	r1, [pc, #180]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
 80034c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	fa93 f2a3 	rbit	r2, r3
 80034e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034e8:	601a      	str	r2, [r3, #0]
  return result;
 80034ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034f2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	461a      	mov	r2, r3
 8003506:	2301      	movs	r3, #1
 8003508:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fe f851 	bl	80015b0 <HAL_GetTick>
 800350e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003512:	e009      	b.n	8003528 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe f84c 	bl	80015b0 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e156      	b.n	80037d6 <HAL_RCC_OscConfig+0x109a>
 8003528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800352c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800353a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	fa93 f2a3 	rbit	r2, r3
 8003544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003548:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800354c:	601a      	str	r2, [r3, #0]
  return result;
 800354e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003552:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003556:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d105      	bne.n	8003578 <HAL_RCC_OscConfig+0xe3c>
 800356c:	4b01      	ldr	r3, [pc, #4]	; (8003574 <HAL_RCC_OscConfig+0xe38>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	e02a      	b.n	80035c8 <HAL_RCC_OscConfig+0xe8c>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	fa93 f2a3 	rbit	r2, r3
 8003594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003598:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	fa93 f2a3 	rbit	r2, r3
 80035ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035be:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	4b86      	ldr	r3, [pc, #536]	; (80037e0 <HAL_RCC_OscConfig+0x10a4>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035d4:	6011      	str	r1, [r2, #0]
 80035d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	fa92 f1a2 	rbit	r1, r2
 80035e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035e8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80035ec:	6011      	str	r1, [r2, #0]
  return result;
 80035ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035f2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	fab2 f282 	clz	r2, r2
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	f042 0220 	orr.w	r2, r2, #32
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	f002 021f 	and.w	r2, r2, #31
 8003608:	2101      	movs	r1, #1
 800360a:	fa01 f202 	lsl.w	r2, r1, r2
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	f43f af7f 	beq.w	8003514 <HAL_RCC_OscConfig+0xdd8>
 8003616:	e0dd      	b.n	80037d4 <HAL_RCC_OscConfig+0x1098>
 8003618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800361c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	fa93 f2a3 	rbit	r2, r3
 8003634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003638:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800363c:	601a      	str	r2, [r3, #0]
  return result;
 800363e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003642:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003646:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003652:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	461a      	mov	r2, r3
 800365a:	2300      	movs	r3, #0
 800365c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7fd ffa7 	bl	80015b0 <HAL_GetTick>
 8003662:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003666:	e009      	b.n	800367c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003668:	f7fd ffa2 	bl	80015b0 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0ac      	b.n	80037d6 <HAL_RCC_OscConfig+0x109a>
 800367c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003680:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800368e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	fa93 f2a3 	rbit	r2, r3
 8003698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800369c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036a0:	601a      	str	r2, [r3, #0]
  return result;
 80036a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_RCC_OscConfig+0xf8a>
 80036c0:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HAL_RCC_OscConfig+0x10a4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	e027      	b.n	8003716 <HAL_RCC_OscConfig+0xfda>
 80036c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ca:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	fa93 f2a3 	rbit	r2, r3
 80036e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	fa93 f2a3 	rbit	r2, r3
 8003708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <HAL_RCC_OscConfig+0x10a4>)
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800371a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800371e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003722:	6011      	str	r1, [r2, #0]
 8003724:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003728:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	fa92 f1a2 	rbit	r1, r2
 8003732:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003736:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800373a:	6011      	str	r1, [r2, #0]
  return result;
 800373c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003740:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	fab2 f282 	clz	r2, r2
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f042 0220 	orr.w	r2, r2, #32
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f002 021f 	and.w	r2, r2, #31
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d182      	bne.n	8003668 <HAL_RCC_OscConfig+0xf2c>
 8003762:	e037      	b.n	80037d4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003768:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e02e      	b.n	80037d6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_OscConfig+0x10a4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003780:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <HAL_RCC_OscConfig+0x10a4>)
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003788:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800378c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003794:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	429a      	cmp	r2, r3
 800379e:	d117      	bne.n	80037d0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80037a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037a4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d10b      	bne.n	80037d0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80037b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000

080037e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b09e      	sub	sp, #120	; 0x78
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e162      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b90      	ldr	r3, [pc, #576]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d910      	bls.n	800382c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	498b      	ldr	r1, [pc, #556]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b89      	ldr	r3, [pc, #548]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e14a      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003838:	4b82      	ldr	r3, [pc, #520]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	497f      	ldr	r1, [pc, #508]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80dc 	beq.w	8003a10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d13c      	bne.n	80038da <HAL_RCC_ClockConfig+0xf6>
 8003860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003864:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800386e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d102      	bne.n	800388a <HAL_RCC_ClockConfig+0xa6>
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	e00f      	b.n	80038aa <HAL_RCC_ClockConfig+0xc6>
 800388a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	667b      	str	r3, [r7, #100]	; 0x64
 8003898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800389c:	663b      	str	r3, [r7, #96]	; 0x60
 800389e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038a6:	4b67      	ldr	r3, [pc, #412]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80038b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038b2:	fa92 f2a2 	rbit	r2, r2
 80038b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038ba:	fab2 f282 	clz	r2, r2
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	f042 0220 	orr.w	r2, r2, #32
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f002 021f 	and.w	r2, r2, #31
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d17b      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0f3      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d13c      	bne.n	800395c <HAL_RCC_ClockConfig+0x178>
 80038e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_RCC_ClockConfig+0x128>
 8003906:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	e00f      	b.n	800392c <HAL_RCC_ClockConfig+0x148>
 800390c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
 800391a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800391e:	643b      	str	r3, [r7, #64]	; 0x40
 8003920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003928:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003930:	63ba      	str	r2, [r7, #56]	; 0x38
 8003932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003934:	fa92 f2a2 	rbit	r2, r2
 8003938:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800393a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800393c:	fab2 f282 	clz	r2, r2
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f042 0220 	orr.w	r2, r2, #32
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	f002 021f 	and.w	r2, r2, #31
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f202 	lsl.w	r2, r1, r2
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d13a      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b2      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
 800395c:	2302      	movs	r3, #2
 800395e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d102      	bne.n	8003984 <HAL_RCC_ClockConfig+0x1a0>
 800397e:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	e00d      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1bc>
 8003984:	2302      	movs	r3, #2
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
 8003990:	2302      	movs	r3, #2
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2202      	movs	r2, #2
 80039a2:	61ba      	str	r2, [r7, #24]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	fa92 f2a2 	rbit	r2, r2
 80039aa:	617a      	str	r2, [r7, #20]
  return result;
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	fab2 f282 	clz	r2, r2
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	f042 0220 	orr.w	r2, r2, #32
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f002 021f 	and.w	r2, r2, #31
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e079      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	491a      	ldr	r1, [pc, #104]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e0:	f7fd fde6 	bl	80015b0 <HAL_GetTick>
 80039e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7fd fde2 	bl	80015b0 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e061      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 020c 	and.w	r2, r3, #12
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d1eb      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d214      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 0207 	bic.w	r2, r3, #7
 8003a26:	4906      	ldr	r1, [pc, #24]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e040      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
 8003a40:	40022000 	.word	0x40022000
 8003a44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	491a      	ldr	r1, [pc, #104]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4912      	ldr	r1, [pc, #72]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a86:	f000 f829 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a94:	22f0      	movs	r2, #240	; 0xf0
 8003a96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	fa92 f2a2 	rbit	r2, r2
 8003a9e:	60fa      	str	r2, [r7, #12]
  return result;
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	fab2 f282 	clz	r2, r2
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	40d3      	lsrs	r3, r2
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x2ec>)
 8003aac:	5cd3      	ldrb	r3, [r2, r3]
 8003aae:	fa21 f303 	lsr.w	r3, r1, r3
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <HAL_RCC_ClockConfig+0x2f0>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <HAL_RCC_ClockConfig+0x2f4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd fd34 	bl	8001528 <HAL_InitTick>
  
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3778      	adds	r7, #120	; 0x78
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	0800496c 	.word	0x0800496c
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000004 	.word	0x20000004

08003adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b08b      	sub	sp, #44	; 0x2c
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003af6:	4b2a      	ldr	r3, [pc, #168]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d002      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x30>
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x36>
 8003b0a:	e03f      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b0e:	623b      	str	r3, [r7, #32]
      break;
 8003b10:	e03f      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	fa92 f2a2 	rbit	r2, r2
 8003b24:	607a      	str	r2, [r7, #4]
  return result;
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	fab2 f282 	clz	r2, r2
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	40d3      	lsrs	r3, r2
 8003b30:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	220f      	movs	r2, #15
 8003b40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	fa92 f2a2 	rbit	r2, r2
 8003b48:	60fa      	str	r2, [r7, #12]
  return result;
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	40d3      	lsrs	r3, r2
 8003b54:	4a15      	ldr	r2, [pc, #84]	; (8003bac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b64:	4a0f      	ldr	r2, [pc, #60]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	e007      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b76:	4a0b      	ldr	r2, [pc, #44]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	623b      	str	r3, [r7, #32]
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b8e:	623b      	str	r3, [r7, #32]
      break;
 8003b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b92:	6a3b      	ldr	r3, [r7, #32]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	372c      	adds	r7, #44	; 0x2c
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	007a1200 	.word	0x007a1200
 8003ba8:	08004984 	.word	0x08004984
 8003bac:	08004994 	.word	0x08004994

08003bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000000 	.word	0x20000000

08003bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003bce:	f7ff ffef 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bdc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003be0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	fa92 f2a2 	rbit	r2, r2
 8003be8:	603a      	str	r2, [r7, #0]
  return result;
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	fab2 f282 	clz	r2, r2
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	40d3      	lsrs	r3, r2
 8003bf4:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bf6:	5cd3      	ldrb	r3, [r2, r3]
 8003bf8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	0800497c 	.word	0x0800497c

08003c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c12:	f7ff ffcd 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003c16:	4601      	mov	r1, r0
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	fa92 f2a2 	rbit	r2, r2
 8003c2c:	603a      	str	r2, [r7, #0]
  return result;
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	fab2 f282 	clz	r2, r2
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	40d3      	lsrs	r3, r2
 8003c38:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	0800497c 	.word	0x0800497c

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b092      	sub	sp, #72	; 0x48
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80d4 	beq.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c74:	4b4e      	ldr	r3, [pc, #312]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10e      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4a4a      	ldr	r2, [pc, #296]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	61d3      	str	r3, [r2, #28]
 8003c8c:	4b48      	ldr	r3, [pc, #288]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4b45      	ldr	r3, [pc, #276]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003caa:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a41      	ldr	r2, [pc, #260]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fc7b 	bl	80015b0 <HAL_GetTick>
 8003cba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7fd fc77 	bl	80015b0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b64      	cmp	r3, #100	; 0x64
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1d6      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cdc:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8084 	beq.w	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d07c      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	461a      	mov	r2, r3
 8003d26:	2301      	movs	r3, #1
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d4e:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d04b      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fd fc27 	bl	80015b0 <HAL_GetTick>
 8003d62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fd fc23 	bl	80015b0 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e180      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
 8003d88:	2302      	movs	r3, #2
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	61fb      	str	r3, [r7, #28]
  return result;
 8003d94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d108      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003daa:	4b01      	ldr	r3, [pc, #4]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	e00d      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	10908100 	.word	0x10908100
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa93 f3a3 	rbit	r3, r3
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	4b9a      	ldr	r3, [pc, #616]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	2202      	movs	r2, #2
 8003dce:	613a      	str	r2, [r7, #16]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	fa92 f2a2 	rbit	r2, r2
 8003dd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	fab2 f282 	clz	r2, r2
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f002 021f 	and.w	r2, r2, #31
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f202 	lsl.w	r2, r1, r2
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0b7      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003df6:	4b8f      	ldr	r3, [pc, #572]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	498c      	ldr	r1, [pc, #560]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b88      	ldr	r3, [pc, #544]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	4a87      	ldr	r2, [pc, #540]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e28:	4b82      	ldr	r3, [pc, #520]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	f023 0203 	bic.w	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	497f      	ldr	r1, [pc, #508]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e46:	4b7b      	ldr	r3, [pc, #492]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4978      	ldr	r1, [pc, #480]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e64:	4b73      	ldr	r3, [pc, #460]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	4970      	ldr	r1, [pc, #448]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e82:	4b6c      	ldr	r3, [pc, #432]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f023 0210 	bic.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	4969      	ldr	r1, [pc, #420]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ea0:	4b64      	ldr	r3, [pc, #400]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	4961      	ldr	r1, [pc, #388]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ebe:	4b5d      	ldr	r3, [pc, #372]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f023 0220 	bic.w	r2, r3, #32
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	495a      	ldr	r1, [pc, #360]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003edc:	4b55      	ldr	r3, [pc, #340]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	4952      	ldr	r1, [pc, #328]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003efa:	4b4e      	ldr	r3, [pc, #312]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	494b      	ldr	r1, [pc, #300]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f18:	4b46      	ldr	r3, [pc, #280]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	4943      	ldr	r1, [pc, #268]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f36:	4b3f      	ldr	r3, [pc, #252]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	493c      	ldr	r1, [pc, #240]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f54:	4b37      	ldr	r3, [pc, #220]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	4934      	ldr	r1, [pc, #208]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003f72:	4b30      	ldr	r3, [pc, #192]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	492d      	ldr	r1, [pc, #180]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f90:	4b28      	ldr	r3, [pc, #160]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9c:	4925      	ldr	r1, [pc, #148]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	491e      	ldr	r1, [pc, #120]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003fcc:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	4916      	ldr	r1, [pc, #88]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	490f      	ldr	r1, [pc, #60]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004014:	4907      	ldr	r1, [pc, #28]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00c      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004026:	4b03      	ldr	r3, [pc, #12]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	e002      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000
 8004038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403a:	4913      	ldr	r1, [pc, #76]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800403c:	4313      	orrs	r3, r2
 800403e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004058:	490b      	ldr	r1, [pc, #44]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800405a:	4313      	orrs	r3, r2
 800405c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	4904      	ldr	r1, [pc, #16]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004078:	4313      	orrs	r3, r2
 800407a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3748      	adds	r7, #72	; 0x48
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000

0800408c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e040      	b.n	8004120 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fd f97c 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	; 0x24
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f82c 	bl	8004128 <UART_SetConfig>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e022      	b.n	8004120 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9f4 	bl	80044d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 fa7b 	bl	8004614 <UART_CheckIdleState>
 800411e:	4603      	mov	r3, r0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b92      	ldr	r3, [pc, #584]	; (800439c <UART_SetConfig+0x274>)
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	6979      	ldr	r1, [r7, #20]
 800415c:	430b      	orrs	r3, r1
 800415e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a80      	ldr	r2, [pc, #512]	; (80043a0 <UART_SetConfig+0x278>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d120      	bne.n	80041e6 <UART_SetConfig+0xbe>
 80041a4:	4b7f      	ldr	r3, [pc, #508]	; (80043a4 <UART_SetConfig+0x27c>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d817      	bhi.n	80041e0 <UART_SetConfig+0xb8>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0x90>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041d5 	.word	0x080041d5
 80041c0:	080041db 	.word	0x080041db
 80041c4:	080041cf 	.word	0x080041cf
 80041c8:	2301      	movs	r3, #1
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e0b5      	b.n	800433a <UART_SetConfig+0x212>
 80041ce:	2302      	movs	r3, #2
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e0b2      	b.n	800433a <UART_SetConfig+0x212>
 80041d4:	2304      	movs	r3, #4
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e0af      	b.n	800433a <UART_SetConfig+0x212>
 80041da:	2308      	movs	r3, #8
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e0ac      	b.n	800433a <UART_SetConfig+0x212>
 80041e0:	2310      	movs	r3, #16
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e0a9      	b.n	800433a <UART_SetConfig+0x212>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6f      	ldr	r2, [pc, #444]	; (80043a8 <UART_SetConfig+0x280>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d124      	bne.n	800423a <UART_SetConfig+0x112>
 80041f0:	4b6c      	ldr	r3, [pc, #432]	; (80043a4 <UART_SetConfig+0x27c>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041fc:	d011      	beq.n	8004222 <UART_SetConfig+0xfa>
 80041fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004202:	d817      	bhi.n	8004234 <UART_SetConfig+0x10c>
 8004204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004208:	d011      	beq.n	800422e <UART_SetConfig+0x106>
 800420a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800420e:	d811      	bhi.n	8004234 <UART_SetConfig+0x10c>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <UART_SetConfig+0xf4>
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004218:	d006      	beq.n	8004228 <UART_SetConfig+0x100>
 800421a:	e00b      	b.n	8004234 <UART_SetConfig+0x10c>
 800421c:	2300      	movs	r3, #0
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e08b      	b.n	800433a <UART_SetConfig+0x212>
 8004222:	2302      	movs	r3, #2
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	e088      	b.n	800433a <UART_SetConfig+0x212>
 8004228:	2304      	movs	r3, #4
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	e085      	b.n	800433a <UART_SetConfig+0x212>
 800422e:	2308      	movs	r3, #8
 8004230:	77fb      	strb	r3, [r7, #31]
 8004232:	e082      	b.n	800433a <UART_SetConfig+0x212>
 8004234:	2310      	movs	r3, #16
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e07f      	b.n	800433a <UART_SetConfig+0x212>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a5b      	ldr	r2, [pc, #364]	; (80043ac <UART_SetConfig+0x284>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d124      	bne.n	800428e <UART_SetConfig+0x166>
 8004244:	4b57      	ldr	r3, [pc, #348]	; (80043a4 <UART_SetConfig+0x27c>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800424c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004250:	d011      	beq.n	8004276 <UART_SetConfig+0x14e>
 8004252:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004256:	d817      	bhi.n	8004288 <UART_SetConfig+0x160>
 8004258:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800425c:	d011      	beq.n	8004282 <UART_SetConfig+0x15a>
 800425e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004262:	d811      	bhi.n	8004288 <UART_SetConfig+0x160>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <UART_SetConfig+0x148>
 8004268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800426c:	d006      	beq.n	800427c <UART_SetConfig+0x154>
 800426e:	e00b      	b.n	8004288 <UART_SetConfig+0x160>
 8004270:	2300      	movs	r3, #0
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e061      	b.n	800433a <UART_SetConfig+0x212>
 8004276:	2302      	movs	r3, #2
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e05e      	b.n	800433a <UART_SetConfig+0x212>
 800427c:	2304      	movs	r3, #4
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e05b      	b.n	800433a <UART_SetConfig+0x212>
 8004282:	2308      	movs	r3, #8
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e058      	b.n	800433a <UART_SetConfig+0x212>
 8004288:	2310      	movs	r3, #16
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e055      	b.n	800433a <UART_SetConfig+0x212>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a47      	ldr	r2, [pc, #284]	; (80043b0 <UART_SetConfig+0x288>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d124      	bne.n	80042e2 <UART_SetConfig+0x1ba>
 8004298:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <UART_SetConfig+0x27c>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80042a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042a4:	d011      	beq.n	80042ca <UART_SetConfig+0x1a2>
 80042a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042aa:	d817      	bhi.n	80042dc <UART_SetConfig+0x1b4>
 80042ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b0:	d011      	beq.n	80042d6 <UART_SetConfig+0x1ae>
 80042b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b6:	d811      	bhi.n	80042dc <UART_SetConfig+0x1b4>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <UART_SetConfig+0x19c>
 80042bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c0:	d006      	beq.n	80042d0 <UART_SetConfig+0x1a8>
 80042c2:	e00b      	b.n	80042dc <UART_SetConfig+0x1b4>
 80042c4:	2300      	movs	r3, #0
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e037      	b.n	800433a <UART_SetConfig+0x212>
 80042ca:	2302      	movs	r3, #2
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e034      	b.n	800433a <UART_SetConfig+0x212>
 80042d0:	2304      	movs	r3, #4
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e031      	b.n	800433a <UART_SetConfig+0x212>
 80042d6:	2308      	movs	r3, #8
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e02e      	b.n	800433a <UART_SetConfig+0x212>
 80042dc:	2310      	movs	r3, #16
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e02b      	b.n	800433a <UART_SetConfig+0x212>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a33      	ldr	r2, [pc, #204]	; (80043b4 <UART_SetConfig+0x28c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d124      	bne.n	8004336 <UART_SetConfig+0x20e>
 80042ec:	4b2d      	ldr	r3, [pc, #180]	; (80043a4 <UART_SetConfig+0x27c>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80042f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042f8:	d011      	beq.n	800431e <UART_SetConfig+0x1f6>
 80042fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042fe:	d817      	bhi.n	8004330 <UART_SetConfig+0x208>
 8004300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004304:	d011      	beq.n	800432a <UART_SetConfig+0x202>
 8004306:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800430a:	d811      	bhi.n	8004330 <UART_SetConfig+0x208>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <UART_SetConfig+0x1f0>
 8004310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004314:	d006      	beq.n	8004324 <UART_SetConfig+0x1fc>
 8004316:	e00b      	b.n	8004330 <UART_SetConfig+0x208>
 8004318:	2300      	movs	r3, #0
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e00d      	b.n	800433a <UART_SetConfig+0x212>
 800431e:	2302      	movs	r3, #2
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e00a      	b.n	800433a <UART_SetConfig+0x212>
 8004324:	2304      	movs	r3, #4
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e007      	b.n	800433a <UART_SetConfig+0x212>
 800432a:	2308      	movs	r3, #8
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e004      	b.n	800433a <UART_SetConfig+0x212>
 8004330:	2310      	movs	r3, #16
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e001      	b.n	800433a <UART_SetConfig+0x212>
 8004336:	2310      	movs	r3, #16
 8004338:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004342:	d16b      	bne.n	800441c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004344:	7ffb      	ldrb	r3, [r7, #31]
 8004346:	2b08      	cmp	r3, #8
 8004348:	d838      	bhi.n	80043bc <UART_SetConfig+0x294>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <UART_SetConfig+0x228>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	08004375 	.word	0x08004375
 8004354:	0800437d 	.word	0x0800437d
 8004358:	08004385 	.word	0x08004385
 800435c:	080043bd 	.word	0x080043bd
 8004360:	0800438b 	.word	0x0800438b
 8004364:	080043bd 	.word	0x080043bd
 8004368:	080043bd 	.word	0x080043bd
 800436c:	080043bd 	.word	0x080043bd
 8004370:	08004393 	.word	0x08004393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004374:	f7ff fc28 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8004378:	61b8      	str	r0, [r7, #24]
        break;
 800437a:	e024      	b.n	80043c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800437c:	f7ff fc46 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8004380:	61b8      	str	r0, [r7, #24]
        break;
 8004382:	e020      	b.n	80043c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <UART_SetConfig+0x290>)
 8004386:	61bb      	str	r3, [r7, #24]
        break;
 8004388:	e01d      	b.n	80043c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438a:	f7ff fba7 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 800438e:	61b8      	str	r0, [r7, #24]
        break;
 8004390:	e019      	b.n	80043c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004396:	61bb      	str	r3, [r7, #24]
        break;
 8004398:	e015      	b.n	80043c6 <UART_SetConfig+0x29e>
 800439a:	bf00      	nop
 800439c:	efff69f3 	.word	0xefff69f3
 80043a0:	40013800 	.word	0x40013800
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40004400 	.word	0x40004400
 80043ac:	40004800 	.word	0x40004800
 80043b0:	40004c00 	.word	0x40004c00
 80043b4:	40005000 	.word	0x40005000
 80043b8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	77bb      	strb	r3, [r7, #30]
        break;
 80043c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d073      	beq.n	80044b4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	005a      	lsls	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	441a      	add	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b0f      	cmp	r3, #15
 80043e6:	d916      	bls.n	8004416 <UART_SetConfig+0x2ee>
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ee:	d212      	bcs.n	8004416 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f023 030f 	bic.w	r3, r3, #15
 80043f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	b29a      	uxth	r2, r3
 8004406:	89fb      	ldrh	r3, [r7, #14]
 8004408:	4313      	orrs	r3, r2
 800440a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	89fa      	ldrh	r2, [r7, #14]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	e04e      	b.n	80044b4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	77bb      	strb	r3, [r7, #30]
 800441a:	e04b      	b.n	80044b4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800441c:	7ffb      	ldrb	r3, [r7, #31]
 800441e:	2b08      	cmp	r3, #8
 8004420:	d827      	bhi.n	8004472 <UART_SetConfig+0x34a>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0x300>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	0800444d 	.word	0x0800444d
 800442c:	08004455 	.word	0x08004455
 8004430:	0800445d 	.word	0x0800445d
 8004434:	08004473 	.word	0x08004473
 8004438:	08004463 	.word	0x08004463
 800443c:	08004473 	.word	0x08004473
 8004440:	08004473 	.word	0x08004473
 8004444:	08004473 	.word	0x08004473
 8004448:	0800446b 	.word	0x0800446b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800444c:	f7ff fbbc 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8004450:	61b8      	str	r0, [r7, #24]
        break;
 8004452:	e013      	b.n	800447c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004454:	f7ff fbda 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8004458:	61b8      	str	r0, [r7, #24]
        break;
 800445a:	e00f      	b.n	800447c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445c:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <UART_SetConfig+0x3a4>)
 800445e:	61bb      	str	r3, [r7, #24]
        break;
 8004460:	e00c      	b.n	800447c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7ff fb3b 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8004466:	61b8      	str	r0, [r7, #24]
        break;
 8004468:	e008      	b.n	800447c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446e:	61bb      	str	r3, [r7, #24]
        break;
 8004470:	e004      	b.n	800447c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	77bb      	strb	r3, [r7, #30]
        break;
 800447a:	bf00      	nop
    }

    if (pclk != 0U)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d018      	beq.n	80044b4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	085a      	lsrs	r2, r3, #1
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	441a      	add	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d909      	bls.n	80044b0 <UART_SetConfig+0x388>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a2:	d205      	bcs.n	80044b0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	e001      	b.n	80044b4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	007a1200 	.word	0x007a1200

080044d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01a      	beq.n	80045e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ce:	d10a      	bne.n	80045e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b098      	sub	sp, #96	; 0x60
 8004618:	af02      	add	r7, sp, #8
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004624:	f7fc ffc4 	bl	80015b0 <HAL_GetTick>
 8004628:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b08      	cmp	r3, #8
 8004636:	d12e      	bne.n	8004696 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004640:	2200      	movs	r2, #0
 8004642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f88c 	bl	8004764 <UART_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d021      	beq.n	8004696 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004666:	653b      	str	r3, [r7, #80]	; 0x50
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004670:	647b      	str	r3, [r7, #68]	; 0x44
 8004672:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800467e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e6      	bne.n	8004652 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e062      	b.n	800475c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d149      	bne.n	8004738 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ac:	2200      	movs	r2, #0
 80046ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f856 	bl	8004764 <UART_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d03c      	beq.n	8004738 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	623b      	str	r3, [r7, #32]
   return(result);
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046dc:	633b      	str	r3, [r7, #48]	; 0x30
 80046de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e6      	bne.n	80046be <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	64bb      	str	r3, [r7, #72]	; 0x48
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3308      	adds	r3, #8
 800470e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004710:	61fa      	str	r2, [r7, #28]
 8004712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	69b9      	ldr	r1, [r7, #24]
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	617b      	str	r3, [r7, #20]
   return(result);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e5      	bne.n	80046f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e011      	b.n	800475c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3758      	adds	r7, #88	; 0x58
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004774:	e049      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d045      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7fc ff17 	bl	80015b0 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <UART_WaitOnFlagUntilTimeout+0x30>
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e048      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d031      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d110      	bne.n	80047d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2208      	movs	r2, #8
 80047ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f838 	bl	8004832 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2208      	movs	r2, #8
 80047c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e029      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e4:	d111      	bne.n	800480a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f81e 	bl	8004832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e00f      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	429a      	cmp	r2, r3
 8004818:	bf0c      	ite	eq
 800481a:	2301      	moveq	r3, #1
 800481c:	2300      	movne	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	429a      	cmp	r2, r3
 8004826:	d0a6      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004832:	b480      	push	{r7}
 8004834:	b095      	sub	sp, #84	; 0x54
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004858:	643b      	str	r3, [r7, #64]	; 0x40
 800485a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800485e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e6      	bne.n	800483a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3308      	adds	r3, #8
 8004872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	61fb      	str	r3, [r7, #28]
   return(result);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f023 0301 	bic.w	r3, r3, #1
 8004882:	64bb      	str	r3, [r7, #72]	; 0x48
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800488c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e5      	bne.n	800486c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d118      	bne.n	80048da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f023 0310 	bic.w	r3, r3, #16
 80048bc:	647b      	str	r3, [r7, #68]	; 0x44
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6979      	ldr	r1, [r7, #20]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	613b      	str	r3, [r7, #16]
   return(result);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e6      	bne.n	80048a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048ee:	bf00      	nop
 80048f0:	3754      	adds	r7, #84	; 0x54
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <memset>:
 80048fa:	4402      	add	r2, r0
 80048fc:	4603      	mov	r3, r0
 80048fe:	4293      	cmp	r3, r2
 8004900:	d100      	bne.n	8004904 <memset+0xa>
 8004902:	4770      	bx	lr
 8004904:	f803 1b01 	strb.w	r1, [r3], #1
 8004908:	e7f9      	b.n	80048fe <memset+0x4>
	...

0800490c <__libc_init_array>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4d0d      	ldr	r5, [pc, #52]	; (8004944 <__libc_init_array+0x38>)
 8004910:	4c0d      	ldr	r4, [pc, #52]	; (8004948 <__libc_init_array+0x3c>)
 8004912:	1b64      	subs	r4, r4, r5
 8004914:	10a4      	asrs	r4, r4, #2
 8004916:	2600      	movs	r6, #0
 8004918:	42a6      	cmp	r6, r4
 800491a:	d109      	bne.n	8004930 <__libc_init_array+0x24>
 800491c:	4d0b      	ldr	r5, [pc, #44]	; (800494c <__libc_init_array+0x40>)
 800491e:	4c0c      	ldr	r4, [pc, #48]	; (8004950 <__libc_init_array+0x44>)
 8004920:	f000 f818 	bl	8004954 <_init>
 8004924:	1b64      	subs	r4, r4, r5
 8004926:	10a4      	asrs	r4, r4, #2
 8004928:	2600      	movs	r6, #0
 800492a:	42a6      	cmp	r6, r4
 800492c:	d105      	bne.n	800493a <__libc_init_array+0x2e>
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	f855 3b04 	ldr.w	r3, [r5], #4
 8004934:	4798      	blx	r3
 8004936:	3601      	adds	r6, #1
 8004938:	e7ee      	b.n	8004918 <__libc_init_array+0xc>
 800493a:	f855 3b04 	ldr.w	r3, [r5], #4
 800493e:	4798      	blx	r3
 8004940:	3601      	adds	r6, #1
 8004942:	e7f2      	b.n	800492a <__libc_init_array+0x1e>
 8004944:	080049ac 	.word	0x080049ac
 8004948:	080049ac 	.word	0x080049ac
 800494c:	080049ac 	.word	0x080049ac
 8004950:	080049b0 	.word	0x080049b0

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
