
Pressure_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006028  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080061c0  080061c0  000161c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006228  08006228  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006230  08006230  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006238  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000234  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bf31  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000191d  00000000  00000000  0002c014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002d938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000074e  00000000  00000000  0002e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f14c  00000000  00000000  0002e9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000dace  00000000  00000000  0004db2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bd546  00000000  00000000  0005b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002d34  00000000  00000000  00118b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0011b874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080061a8 	.word	0x080061a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080061a8 	.word	0x080061a8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ldivmod>:
 8000d6c:	b97b      	cbnz	r3, 8000d8e <__aeabi_ldivmod+0x22>
 8000d6e:	b972      	cbnz	r2, 8000d8e <__aeabi_ldivmod+0x22>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bfbe      	ittt	lt
 8000d74:	2000      	movlt	r0, #0
 8000d76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000d7a:	e006      	blt.n	8000d8a <__aeabi_ldivmod+0x1e>
 8000d7c:	bf08      	it	eq
 8000d7e:	2800      	cmpeq	r0, #0
 8000d80:	bf1c      	itt	ne
 8000d82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d86:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8a:	f000 b9a3 	b.w	80010d4 <__aeabi_idiv0>
 8000d8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d96:	2900      	cmp	r1, #0
 8000d98:	db09      	blt.n	8000dae <__aeabi_ldivmod+0x42>
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db1a      	blt.n	8000dd4 <__aeabi_ldivmod+0x68>
 8000d9e:	f000 f835 	bl	8000e0c <__udivmoddi4>
 8000da2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000daa:	b004      	add	sp, #16
 8000dac:	4770      	bx	lr
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db1b      	blt.n	8000df0 <__aeabi_ldivmod+0x84>
 8000db8:	f000 f828 	bl	8000e0c <__udivmoddi4>
 8000dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dc4:	b004      	add	sp, #16
 8000dc6:	4240      	negs	r0, r0
 8000dc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dcc:	4252      	negs	r2, r2
 8000dce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dd2:	4770      	bx	lr
 8000dd4:	4252      	negs	r2, r2
 8000dd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dda:	f000 f817 	bl	8000e0c <__udivmoddi4>
 8000dde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de6:	b004      	add	sp, #16
 8000de8:	4240      	negs	r0, r0
 8000dea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dee:	4770      	bx	lr
 8000df0:	4252      	negs	r2, r2
 8000df2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000df6:	f000 f809 	bl	8000e0c <__udivmoddi4>
 8000dfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e02:	b004      	add	sp, #16
 8000e04:	4252      	negs	r2, r2
 8000e06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e0a:	4770      	bx	lr

08000e0c <__udivmoddi4>:
 8000e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e10:	9e08      	ldr	r6, [sp, #32]
 8000e12:	460d      	mov	r5, r1
 8000e14:	4604      	mov	r4, r0
 8000e16:	460f      	mov	r7, r1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d14a      	bne.n	8000eb2 <__udivmoddi4+0xa6>
 8000e1c:	428a      	cmp	r2, r1
 8000e1e:	4694      	mov	ip, r2
 8000e20:	d965      	bls.n	8000eee <__udivmoddi4+0xe2>
 8000e22:	fab2 f382 	clz	r3, r2
 8000e26:	b143      	cbz	r3, 8000e3a <__udivmoddi4+0x2e>
 8000e28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e2c:	f1c3 0220 	rsb	r2, r3, #32
 8000e30:	409f      	lsls	r7, r3
 8000e32:	fa20 f202 	lsr.w	r2, r0, r2
 8000e36:	4317      	orrs	r7, r2
 8000e38:	409c      	lsls	r4, r3
 8000e3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e3e:	fa1f f58c 	uxth.w	r5, ip
 8000e42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e46:	0c22      	lsrs	r2, r4, #16
 8000e48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e50:	fb01 f005 	mul.w	r0, r1, r5
 8000e54:	4290      	cmp	r0, r2
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x62>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e60:	f080 811c 	bcs.w	800109c <__udivmoddi4+0x290>
 8000e64:	4290      	cmp	r0, r2
 8000e66:	f240 8119 	bls.w	800109c <__udivmoddi4+0x290>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a12      	subs	r2, r2, r0
 8000e70:	b2a4      	uxth	r4, r4
 8000e72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e7e:	fb00 f505 	mul.w	r5, r0, r5
 8000e82:	42a5      	cmp	r5, r4
 8000e84:	d90a      	bls.n	8000e9c <__udivmoddi4+0x90>
 8000e86:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e8e:	f080 8107 	bcs.w	80010a0 <__udivmoddi4+0x294>
 8000e92:	42a5      	cmp	r5, r4
 8000e94:	f240 8104 	bls.w	80010a0 <__udivmoddi4+0x294>
 8000e98:	4464      	add	r4, ip
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea0:	1b64      	subs	r4, r4, r5
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	b11e      	cbz	r6, 8000eae <__udivmoddi4+0xa2>
 8000ea6:	40dc      	lsrs	r4, r3
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e9c6 4300 	strd	r4, r3, [r6]
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0xbc>
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	f000 80ed 	beq.w	8001096 <__udivmoddi4+0x28a>
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	e9c6 0500 	strd	r0, r5, [r6]
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	fab3 f183 	clz	r1, r3
 8000ecc:	2900      	cmp	r1, #0
 8000ece:	d149      	bne.n	8000f64 <__udivmoddi4+0x158>
 8000ed0:	42ab      	cmp	r3, r5
 8000ed2:	d302      	bcc.n	8000eda <__udivmoddi4+0xce>
 8000ed4:	4282      	cmp	r2, r0
 8000ed6:	f200 80f8 	bhi.w	80010ca <__udivmoddi4+0x2be>
 8000eda:	1a84      	subs	r4, r0, r2
 8000edc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	4617      	mov	r7, r2
 8000ee4:	2e00      	cmp	r6, #0
 8000ee6:	d0e2      	beq.n	8000eae <__udivmoddi4+0xa2>
 8000ee8:	e9c6 4700 	strd	r4, r7, [r6]
 8000eec:	e7df      	b.n	8000eae <__udivmoddi4+0xa2>
 8000eee:	b902      	cbnz	r2, 8000ef2 <__udivmoddi4+0xe6>
 8000ef0:	deff      	udf	#255	; 0xff
 8000ef2:	fab2 f382 	clz	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 8090 	bne.w	800101c <__udivmoddi4+0x210>
 8000efc:	1a8a      	subs	r2, r1, r2
 8000efe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f02:	fa1f fe8c 	uxth.w	lr, ip
 8000f06:	2101      	movs	r1, #1
 8000f08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000f10:	0c22      	lsrs	r2, r4, #16
 8000f12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f16:	fb0e f005 	mul.w	r0, lr, r5
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x124>
 8000f1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000f22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f26:	d202      	bcs.n	8000f2e <__udivmoddi4+0x122>
 8000f28:	4290      	cmp	r0, r2
 8000f2a:	f200 80cb 	bhi.w	80010c4 <__udivmoddi4+0x2b8>
 8000f2e:	4645      	mov	r5, r8
 8000f30:	1a12      	subs	r2, r2, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f38:	fb07 2210 	mls	r2, r7, r0, r2
 8000f3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f40:	fb0e fe00 	mul.w	lr, lr, r0
 8000f44:	45a6      	cmp	lr, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x14e>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f50:	d202      	bcs.n	8000f58 <__udivmoddi4+0x14c>
 8000f52:	45a6      	cmp	lr, r4
 8000f54:	f200 80bb 	bhi.w	80010ce <__udivmoddi4+0x2c2>
 8000f58:	4610      	mov	r0, r2
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f62:	e79f      	b.n	8000ea4 <__udivmoddi4+0x98>
 8000f64:	f1c1 0720 	rsb	r7, r1, #32
 8000f68:	408b      	lsls	r3, r1
 8000f6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f72:	fa05 f401 	lsl.w	r4, r5, r1
 8000f76:	fa20 f307 	lsr.w	r3, r0, r7
 8000f7a:	40fd      	lsrs	r5, r7
 8000f7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f80:	4323      	orrs	r3, r4
 8000f82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f86:	fa1f fe8c 	uxth.w	lr, ip
 8000f8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000f8e:	0c1c      	lsrs	r4, r3, #16
 8000f90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f94:	fb08 f50e 	mul.w	r5, r8, lr
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000fa2:	d90b      	bls.n	8000fbc <__udivmoddi4+0x1b0>
 8000fa4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fac:	f080 8088 	bcs.w	80010c0 <__udivmoddi4+0x2b4>
 8000fb0:	42a5      	cmp	r5, r4
 8000fb2:	f240 8085 	bls.w	80010c0 <__udivmoddi4+0x2b4>
 8000fb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fba:	4464      	add	r4, ip
 8000fbc:	1b64      	subs	r4, r4, r5
 8000fbe:	b29d      	uxth	r5, r3
 8000fc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000fc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd0:	45a6      	cmp	lr, r4
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x1da>
 8000fd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fdc:	d26c      	bcs.n	80010b8 <__udivmoddi4+0x2ac>
 8000fde:	45a6      	cmp	lr, r4
 8000fe0:	d96a      	bls.n	80010b8 <__udivmoddi4+0x2ac>
 8000fe2:	3b02      	subs	r3, #2
 8000fe4:	4464      	add	r4, ip
 8000fe6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fea:	fba3 9502 	umull	r9, r5, r3, r2
 8000fee:	eba4 040e 	sub.w	r4, r4, lr
 8000ff2:	42ac      	cmp	r4, r5
 8000ff4:	46c8      	mov	r8, r9
 8000ff6:	46ae      	mov	lr, r5
 8000ff8:	d356      	bcc.n	80010a8 <__udivmoddi4+0x29c>
 8000ffa:	d053      	beq.n	80010a4 <__udivmoddi4+0x298>
 8000ffc:	b156      	cbz	r6, 8001014 <__udivmoddi4+0x208>
 8000ffe:	ebb0 0208 	subs.w	r2, r0, r8
 8001002:	eb64 040e 	sbc.w	r4, r4, lr
 8001006:	fa04 f707 	lsl.w	r7, r4, r7
 800100a:	40ca      	lsrs	r2, r1
 800100c:	40cc      	lsrs	r4, r1
 800100e:	4317      	orrs	r7, r2
 8001010:	e9c6 7400 	strd	r7, r4, [r6]
 8001014:	4618      	mov	r0, r3
 8001016:	2100      	movs	r1, #0
 8001018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101c:	f1c3 0120 	rsb	r1, r3, #32
 8001020:	fa02 fc03 	lsl.w	ip, r2, r3
 8001024:	fa20 f201 	lsr.w	r2, r0, r1
 8001028:	fa25 f101 	lsr.w	r1, r5, r1
 800102c:	409d      	lsls	r5, r3
 800102e:	432a      	orrs	r2, r5
 8001030:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001034:	fa1f fe8c 	uxth.w	lr, ip
 8001038:	fbb1 f0f7 	udiv	r0, r1, r7
 800103c:	fb07 1510 	mls	r5, r7, r0, r1
 8001040:	0c11      	lsrs	r1, r2, #16
 8001042:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001046:	fb00 f50e 	mul.w	r5, r0, lr
 800104a:	428d      	cmp	r5, r1
 800104c:	fa04 f403 	lsl.w	r4, r4, r3
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x258>
 8001052:	eb1c 0101 	adds.w	r1, ip, r1
 8001056:	f100 38ff 	add.w	r8, r0, #4294967295
 800105a:	d22f      	bcs.n	80010bc <__udivmoddi4+0x2b0>
 800105c:	428d      	cmp	r5, r1
 800105e:	d92d      	bls.n	80010bc <__udivmoddi4+0x2b0>
 8001060:	3802      	subs	r0, #2
 8001062:	4461      	add	r1, ip
 8001064:	1b49      	subs	r1, r1, r5
 8001066:	b292      	uxth	r2, r2
 8001068:	fbb1 f5f7 	udiv	r5, r1, r7
 800106c:	fb07 1115 	mls	r1, r7, r5, r1
 8001070:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001074:	fb05 f10e 	mul.w	r1, r5, lr
 8001078:	4291      	cmp	r1, r2
 800107a:	d908      	bls.n	800108e <__udivmoddi4+0x282>
 800107c:	eb1c 0202 	adds.w	r2, ip, r2
 8001080:	f105 38ff 	add.w	r8, r5, #4294967295
 8001084:	d216      	bcs.n	80010b4 <__udivmoddi4+0x2a8>
 8001086:	4291      	cmp	r1, r2
 8001088:	d914      	bls.n	80010b4 <__udivmoddi4+0x2a8>
 800108a:	3d02      	subs	r5, #2
 800108c:	4462      	add	r2, ip
 800108e:	1a52      	subs	r2, r2, r1
 8001090:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001094:	e738      	b.n	8000f08 <__udivmoddi4+0xfc>
 8001096:	4631      	mov	r1, r6
 8001098:	4630      	mov	r0, r6
 800109a:	e708      	b.n	8000eae <__udivmoddi4+0xa2>
 800109c:	4639      	mov	r1, r7
 800109e:	e6e6      	b.n	8000e6e <__udivmoddi4+0x62>
 80010a0:	4610      	mov	r0, r2
 80010a2:	e6fb      	b.n	8000e9c <__udivmoddi4+0x90>
 80010a4:	4548      	cmp	r0, r9
 80010a6:	d2a9      	bcs.n	8000ffc <__udivmoddi4+0x1f0>
 80010a8:	ebb9 0802 	subs.w	r8, r9, r2
 80010ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b0:	3b01      	subs	r3, #1
 80010b2:	e7a3      	b.n	8000ffc <__udivmoddi4+0x1f0>
 80010b4:	4645      	mov	r5, r8
 80010b6:	e7ea      	b.n	800108e <__udivmoddi4+0x282>
 80010b8:	462b      	mov	r3, r5
 80010ba:	e794      	b.n	8000fe6 <__udivmoddi4+0x1da>
 80010bc:	4640      	mov	r0, r8
 80010be:	e7d1      	b.n	8001064 <__udivmoddi4+0x258>
 80010c0:	46d0      	mov	r8, sl
 80010c2:	e77b      	b.n	8000fbc <__udivmoddi4+0x1b0>
 80010c4:	3d02      	subs	r5, #2
 80010c6:	4462      	add	r2, ip
 80010c8:	e732      	b.n	8000f30 <__udivmoddi4+0x124>
 80010ca:	4608      	mov	r0, r1
 80010cc:	e70a      	b.n	8000ee4 <__udivmoddi4+0xd8>
 80010ce:	4464      	add	r4, ip
 80010d0:	3802      	subs	r0, #2
 80010d2:	e742      	b.n	8000f5a <__udivmoddi4+0x14e>

080010d4 <__aeabi_idiv0>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010dc:	b0e5      	sub	sp, #404	; 0x194
 80010de:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f000 fef8 	bl	8001ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 fc8c 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e8:	f000 fd5a 	bl	8001ba0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ec:	f000 fd28 	bl	8001b40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010f0:	f000 fce6 	bl	8001ac0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Pressure Sensor Loop Variables*/
  	  /* Slave Address of the BMP280 */
  	  uint16_t BMP_Address = 0xEC; /* BMP 280 Address */
 80010f4:	23ec      	movs	r3, #236	; 0xec
 80010f6:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e

  	  /* Register Addresses */
  	  uint8_t regAddress_CTRL_MEAS = 0xF4; /* Oversampling control */
 80010fa:	23f4      	movs	r3, #244	; 0xf4
 80010fc:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
  	  uint8_t regAddress_CONFIG = 0xF5; /* Data rate/filter and interface */
 8001100:	23f5      	movs	r3, #245	; 0xf5
 8001102:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  	  uint8_t regAddress_PRESS_MSB = 0xF7; /* Pressure Most Significant Bits */
 8001106:	23f7      	movs	r3, #247	; 0xf7
 8001108:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b

  	  /* Trimming Register Addresses */
  	  uint8_t regAddress_Dig_T1 = 0x88;
 800110c:	2388      	movs	r3, #136	; 0x88
 800110e:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
  	  uint8_t regAddress_Dig_T2 = 0x8A;
 8001112:	238a      	movs	r3, #138	; 0x8a
 8001114:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
  	  uint8_t regAddress_Dig_T3 = 0x8C;
 8001118:	238c      	movs	r3, #140	; 0x8c
 800111a:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	  uint8_t regAddress_Dig_P1 = 0x8E;
 800111e:	238e      	movs	r3, #142	; 0x8e
 8001120:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	  uint8_t regAddress_Dig_P2 = 0x90;
 8001124:	2390      	movs	r3, #144	; 0x90
 8001126:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
	  uint8_t regAddress_Dig_P3 = 0x92;
 800112a:	2392      	movs	r3, #146	; 0x92
 800112c:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
	  uint8_t regAddress_Dig_P4 = 0x94;
 8001130:	2394      	movs	r3, #148	; 0x94
 8001132:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
	  uint8_t regAddress_Dig_P5 = 0x96;
 8001136:	2396      	movs	r3, #150	; 0x96
 8001138:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
	  uint8_t regAddress_Dig_P6 = 0x98;
 800113c:	2398      	movs	r3, #152	; 0x98
 800113e:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
	  uint8_t regAddress_Dig_P7 = 0x9A;
 8001142:	239a      	movs	r3, #154	; 0x9a
 8001144:	f887 3171 	strb.w	r3, [r7, #369]	; 0x171
	  uint8_t regAddress_Dig_P8 = 0x9C;
 8001148:	239c      	movs	r3, #156	; 0x9c
 800114a:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
	  uint8_t regAddress_Dig_P9 = 0x9E;
 800114e:	239e      	movs	r3, #158	; 0x9e
 8001150:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f


  	  /* Register Values */
  	  uint8_t regCTRL_MEAS = 0x27; /* Oversampling x1 for Pressure and Temp, Normal Mode 00100111*/
 8001154:	2327      	movs	r3, #39	; 0x27
 8001156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  	  uint8_t regCONFIG = 0x00; /* Not sure about this. 0.5ms rate, filter off, SPI off */
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
	  int64_t pressure;

  	  float pressVal; /* Decimal Pressure */
  	  float tempVal; /* Decimal Temperature */
  	  float altitude; /* Altitude */
  	  float seaLevel_Press = 102300; /* Sea Level Pressure Equivalent (Update by day) */
 8001160:	4bd3      	ldr	r3, [pc, #844]	; (80014b0 <main+0x3d8>)
 8001162:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

  	  /* Configuration of the BMP280 */
  	  HAL_I2C_Mem_Write(&hi2c1, BMP_Address, regAddress_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &regCTRL_MEAS, 1, 2000u); /* Writing to the ctrl measurement register */
 8001166:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 800116a:	b29a      	uxth	r2, r3
 800116c:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8001170:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	f207 1327 	addw	r3, r7, #295	; 0x127
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	48cc      	ldr	r0, [pc, #816]	; (80014b4 <main+0x3dc>)
 8001184:	f001 fa48 	bl	8002618 <HAL_I2C_Mem_Write>
  	  HAL_I2C_Mem_Write(&hi2c1, BMP_Address, regAddress_CONFIG, I2C_MEMADD_SIZE_8BIT, &regCONFIG, 1, 2000u); /* Writing to the ctrl measurement register */
 8001188:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800118c:	b29a      	uxth	r2, r3
 800118e:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8001192:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2301      	movs	r3, #1
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	f507 7393 	add.w	r3, r7, #294	; 0x126
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	48c3      	ldr	r0, [pc, #780]	; (80014b4 <main+0x3dc>)
 80011a6:	f001 fa37 	bl	8002618 <HAL_I2C_Mem_Write>

  	  /* Reading the Trimming Values */
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T1, I2C_MEMADD_SIZE_8BIT, &dig_T1, 2, 2000u); /* Getting the Trimming Values */
 80011aa:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80011b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2302      	movs	r3, #2
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	f507 738f 	add.w	r3, r7, #286	; 0x11e
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	48bb      	ldr	r0, [pc, #748]	; (80014b4 <main+0x3dc>)
 80011c8:	f001 fb3a 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T2, I2C_MEMADD_SIZE_8BIT, &dig_T2, 2, 2000u); /* Getting the Trimming Values */
 80011cc:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80011d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2302      	movs	r3, #2
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	48b2      	ldr	r0, [pc, #712]	; (80014b4 <main+0x3dc>)
 80011ea:	f001 fb29 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T3, I2C_MEMADD_SIZE_8BIT, &dig_T3, 2, 2000u); /* Getting the Trimming Values */
 80011ee:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80011f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	2302      	movs	r3, #2
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	f507 738d 	add.w	r3, r7, #282	; 0x11a
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	48aa      	ldr	r0, [pc, #680]	; (80014b4 <main+0x3dc>)
 800120c:	f001 fb18 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P1, I2C_MEMADD_SIZE_8BIT, &dig_P1, 2, 2000u); /* Getting the Trimming Values */
 8001210:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001214:	b29a      	uxth	r2, r3
 8001216:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 800121a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2302      	movs	r3, #2
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	48a1      	ldr	r0, [pc, #644]	; (80014b4 <main+0x3dc>)
 800122e:	f001 fb07 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P2, I2C_MEMADD_SIZE_8BIT, &dig_P2, 2, 2000u); /* Getting the Trimming Values */
 8001232:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8001236:	b29a      	uxth	r2, r3
 8001238:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 800123c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2302      	movs	r3, #2
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f507 738b 	add.w	r3, r7, #278	; 0x116
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	4899      	ldr	r0, [pc, #612]	; (80014b4 <main+0x3dc>)
 8001250:	f001 faf6 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P3, I2C_MEMADD_SIZE_8BIT, &dig_P3, 2, 2000u); /* Getting the Trimming Values */
 8001254:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8001258:	b29a      	uxth	r2, r3
 800125a:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 800125e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2302      	movs	r3, #2
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	4890      	ldr	r0, [pc, #576]	; (80014b4 <main+0x3dc>)
 8001272:	f001 fae5 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P4, I2C_MEMADD_SIZE_8BIT, &dig_P4, 2, 2000u); /* Getting the Trimming Values */
 8001276:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 800127a:	b29a      	uxth	r2, r3
 800127c:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8001280:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2302      	movs	r3, #2
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	f507 7389 	add.w	r3, r7, #274	; 0x112
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	4888      	ldr	r0, [pc, #544]	; (80014b4 <main+0x3dc>)
 8001294:	f001 fad4 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P5, I2C_MEMADD_SIZE_8BIT, &dig_P5, 2, 2000u); /* Getting the Trimming Values */
 8001298:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 800129c:	b29a      	uxth	r2, r3
 800129e:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80012a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	2302      	movs	r3, #2
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	487f      	ldr	r0, [pc, #508]	; (80014b4 <main+0x3dc>)
 80012b6:	f001 fac3 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P6, I2C_MEMADD_SIZE_8BIT, &dig_P6, 2, 2000u); /* Getting the Trimming Values */
 80012ba:	f897 3172 	ldrb.w	r3, [r7, #370]	; 0x172
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80012c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2302      	movs	r3, #2
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f507 7387 	add.w	r3, r7, #270	; 0x10e
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	4877      	ldr	r0, [pc, #476]	; (80014b4 <main+0x3dc>)
 80012d8:	f001 fab2 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P7, I2C_MEMADD_SIZE_8BIT, &dig_P7, 2, 2000u); /* Getting the Trimming Values */
 80012dc:	f897 3171 	ldrb.w	r3, [r7, #369]	; 0x171
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 80012e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	2302      	movs	r3, #2
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	486e      	ldr	r0, [pc, #440]	; (80014b4 <main+0x3dc>)
 80012fa:	f001 faa1 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P8, I2C_MEMADD_SIZE_8BIT, &dig_P8, 2, 2000u); /* Getting the Trimming Values */
 80012fe:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 8001302:	b29a      	uxth	r2, r3
 8001304:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8001308:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2302      	movs	r3, #2
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	f507 7385 	add.w	r3, r7, #266	; 0x10a
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	4866      	ldr	r0, [pc, #408]	; (80014b4 <main+0x3dc>)
 800131c:	f001 fa90 	bl	8002840 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P9, I2C_MEMADD_SIZE_8BIT, &dig_P9, 2, 2000u); /* Getting the Trimming Values */
 8001320:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8001324:	b29a      	uxth	r2, r3
 8001326:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 800132a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	2302      	movs	r3, #2
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	485d      	ldr	r0, [pc, #372]	; (80014b4 <main+0x3dc>)
 800133e:	f001 fa7f 	bl	8002840 <HAL_I2C_Mem_Read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, &data, 6, 2000u); /* Reading pressure and temperature */
 8001342:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001346:	b29a      	uxth	r2, r3
 8001348:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 800134c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2306      	movs	r3, #6
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	4855      	ldr	r0, [pc, #340]	; (80014b4 <main+0x3dc>)
 8001360:	f001 fa6e 	bl	8002840 <HAL_I2C_Mem_Read>

	  press = (int32_t)((data[0] << 12) | data[1] << 4 | data[2]);
 8001364:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8001368:	031a      	lsls	r2, r3, #12
 800136a:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	431a      	orrs	r2, r3
 8001372:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8001376:	4313      	orrs	r3, r2
 8001378:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	  temp = (int32_t)((data[3] << 12) | data[4] << 4 | data[5]);
 800137c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8001380:	031a      	lsls	r2, r3, #12
 8001382:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	431a      	orrs	r2, r3
 800138a:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 800138e:	4313      	orrs	r3, r2
 8001390:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

	  /* Compensation of Temperature */
	  temp_var1 = ((((temp>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001394:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001398:	10da      	asrs	r2, r3, #3
 800139a:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	1ad2      	subs	r2, r2, r3
 80013a2:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	; 0x11c
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	12db      	asrs	r3, r3, #11
 80013ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	  //var2 = (((((temp >> 17) - ((int32_t)dig_T1 >> 13)) * ((temp >> 17) - ((int32_t)dig_T1))) >> 13) * ((int32_t)dig_T3));
	  temp_var2 = (((((temp>>4) - ((int32_t)dig_T1)) * ((temp>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80013b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013b4:	111a      	asrs	r2, r3, #4
 80013b6:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80013ba:	1ad1      	subs	r1, r2, r3
 80013bc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013c0:	111a      	asrs	r2, r3, #4
 80013c2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	fb01 f303 	mul.w	r3, r1, r3
 80013cc:	131a      	asrs	r2, r3, #12
 80013ce:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	139b      	asrs	r3, r3, #14
 80013d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	  t_fine = temp_var1 + temp_var2;
 80013dc:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80013e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013e4:	4413      	add	r3, r2
 80013e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	  temperature = (t_fine * 5 + 128) >> 8;
 80013ea:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	3380      	adds	r3, #128	; 0x80
 80013f6:	121b      	asrs	r3, r3, #8
 80013f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	  tempVal = ((float)temperature)/100;
 80013fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001408:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80014b8 <main+0x3e0>
 800140c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001410:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

	  /* Compensation of Pressure */
	  press_var1 = ((int64_t)t_fine) - 128000;
 8001414:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001418:	17da      	asrs	r2, r3, #31
 800141a:	64bb      	str	r3, [r7, #72]	; 0x48
 800141c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800141e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001422:	460b      	mov	r3, r1
 8001424:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
 800142a:	4613      	mov	r3, r2
 800142c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
 8001432:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001436:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	  press_var2 = press_var1 * press_var1 * (int64_t)dig_P6;
 800143a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800143e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001442:	fb03 f102 	mul.w	r1, r3, r2
 8001446:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800144a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	18ca      	adds	r2, r1, r3
 8001454:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001458:	fba3 1303 	umull	r1, r3, r3, r3
 800145c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001460:	460b      	mov	r3, r1
 8001462:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800146a:	18d3      	adds	r3, r2, r3
 800146c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001470:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	; 0x10e
 8001474:	b21b      	sxth	r3, r3
 8001476:	17da      	asrs	r2, r3, #31
 8001478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800147c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001480:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001484:	460b      	mov	r3, r1
 8001486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800148a:	fb02 f203 	mul.w	r2, r2, r3
 800148e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001492:	e9c7 0140 	strd	r0, r1, [r7, #256]	; 0x100
 8001496:	4601      	mov	r1, r0
 8001498:	fb01 f303 	mul.w	r3, r1, r3
 800149c:	4413      	add	r3, r2
 800149e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80014a2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80014a6:	fba2 1201 	umull	r1, r2, r2, r1
 80014aa:	667a      	str	r2, [r7, #100]	; 0x64
 80014ac:	460a      	mov	r2, r1
 80014ae:	e005      	b.n	80014bc <main+0x3e4>
 80014b0:	47c7ce00 	.word	0x47c7ce00
 80014b4:	2000008c 	.word	0x2000008c
 80014b8:	42c80000 	.word	0x42c80000
 80014bc:	663a      	str	r2, [r7, #96]	; 0x60
 80014be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014c0:	4413      	add	r3, r2
 80014c2:	667b      	str	r3, [r7, #100]	; 0x64
 80014c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014c8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 80014cc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	  press_var2 = press_var2 + ((press_var1*(int64_t)dig_P5)<<17);
 80014d0:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	17da      	asrs	r2, r3, #31
 80014d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80014dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80014e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80014e4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80014e8:	460a      	mov	r2, r1
 80014ea:	fb02 f203 	mul.w	r2, r2, r3
 80014ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80014f2:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
 80014f6:	4601      	mov	r1, r0
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	441a      	add	r2, r3
 80014fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001502:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001506:	fba3 1301 	umull	r1, r3, r3, r1
 800150a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800150e:	460b      	mov	r3, r1
 8001510:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001518:	18d3      	adds	r3, r2, r3
 800151a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800151e:	f04f 0000 	mov.w	r0, #0
 8001522:	f04f 0100 	mov.w	r1, #0
 8001526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800152a:	0459      	lsls	r1, r3, #17
 800152c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001530:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001534:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001538:	0458      	lsls	r0, r3, #17
 800153a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800153e:	1816      	adds	r6, r2, r0
 8001540:	62be      	str	r6, [r7, #40]	; 0x28
 8001542:	414b      	adcs	r3, r1
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800154a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	  press_var2 = 	  press_var2 + (((int64_t)dig_P4)<<35);
 800154e:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	; 0x112
 8001552:	b21b      	sxth	r3, r3
 8001554:	17da      	asrs	r2, r3, #31
 8001556:	643b      	str	r3, [r7, #64]	; 0x40
 8001558:	647a      	str	r2, [r7, #68]	; 0x44
 800155a:	f04f 0000 	mov.w	r0, #0
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001564:	00d9      	lsls	r1, r3, #3
 8001566:	2000      	movs	r0, #0
 8001568:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800156c:	1816      	adds	r6, r2, r0
 800156e:	623e      	str	r6, [r7, #32]
 8001570:	414b      	adcs	r3, r1
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
 8001574:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001578:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	  press_var1 = ((press_var1 * press_var1 * (int64_t)dig_P3)>>8) + ((press_var1 * (int64_t)dig_P2)<<12);
 800157c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001580:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001584:	fb03 f102 	mul.w	r1, r3, r2
 8001588:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800158c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	18ca      	adds	r2, r1, r3
 8001596:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800159a:	fba3 1303 	umull	r1, r3, r3, r3
 800159e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015a2:	460b      	mov	r3, r1
 80015a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80015a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015ac:	18d3      	adds	r3, r2, r3
 80015ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015b2:	f9b7 3114 	ldrsh.w	r3, [r7, #276]	; 0x114
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	17da      	asrs	r2, r3, #31
 80015ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80015c2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80015c6:	460b      	mov	r3, r1
 80015c8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80015cc:	fb02 f203 	mul.w	r2, r2, r3
 80015d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015d4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
 80015d8:	4601      	mov	r1, r0
 80015da:	fb01 f303 	mul.w	r3, r1, r3
 80015de:	4413      	add	r3, r2
 80015e0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80015e4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80015e8:	fba2 1201 	umull	r1, r2, r2, r1
 80015ec:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80015f0:	460a      	mov	r2, r1
 80015f2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80015f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80015fa:	4413      	add	r3, r2
 80015fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001600:	f04f 0000 	mov.w	r0, #0
 8001604:	f04f 0100 	mov.w	r1, #0
 8001608:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800160c:	0a18      	lsrs	r0, r3, #8
 800160e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001612:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001616:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800161a:	1219      	asrs	r1, r3, #8
 800161c:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	; 0x116
 8001620:	b21b      	sxth	r3, r3
 8001622:	17da      	asrs	r2, r3, #31
 8001624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001628:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800162c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001630:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001634:	fb02 f203 	mul.w	r2, r2, r3
 8001638:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800163c:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8001640:	fb06 f303 	mul.w	r3, r6, r3
 8001644:	441a      	add	r2, r3
 8001646:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800164a:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800164e:	fba3 6306 	umull	r6, r3, r3, r6
 8001652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001656:	4633      	mov	r3, r6
 8001658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800165c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	f8d7 60e4 	ldr.w	r6, [r7, #228]	; 0xe4
 8001672:	0333      	lsls	r3, r6, #12
 8001674:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 8001678:	ea43 5316 	orr.w	r3, r3, r6, lsr #20
 800167c:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 8001680:	0332      	lsls	r2, r6, #12
 8001682:	1886      	adds	r6, r0, r2
 8001684:	61be      	str	r6, [r7, #24]
 8001686:	eb41 0303 	adc.w	r3, r1, r3
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001690:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	  press_var1 = (((((int64_t)1)<<47)+press_var1))*((int64_t)dig_P1)>>33;
 8001694:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001698:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800169c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016a0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016a4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2200      	movs	r2, #0
 80016ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016b4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80016b8:	460b      	mov	r3, r1
 80016ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80016be:	fb02 f203 	mul.w	r2, r2, r3
 80016c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016c6:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
 80016ca:	4601      	mov	r1, r0
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80016d6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80016da:	fba2 1201 	umull	r1, r2, r2, r1
 80016de:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80016e2:	460a      	mov	r2, r1
 80016e4:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80016e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016ec:	4413      	add	r3, r2
 80016ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80016fe:	104a      	asrs	r2, r1, #1
 8001700:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001704:	17cb      	asrs	r3, r1, #31
 8001706:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	  pressure = 1048576 - press;
 800170a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800170e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001712:	17da      	asrs	r2, r3, #31
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	617a      	str	r2, [r7, #20]
 8001718:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800171c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	  pressure = (((pressure<<31)-press_var2)*3125)/press_var1;
 8001720:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001724:	105b      	asrs	r3, r3, #1
 8001726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001728:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800172c:	07db      	lsls	r3, r3, #31
 800172e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001730:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001734:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001736:	ebb1 0a02 	subs.w	sl, r1, r2
 800173a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800173c:	eb61 0b03 	sbc.w	fp, r1, r3
 8001740:	4652      	mov	r2, sl
 8001742:	465b      	mov	r3, fp
 8001744:	1891      	adds	r1, r2, r2
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	415b      	adcs	r3, r3
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001750:	eb12 010a 	adds.w	r1, r2, sl
 8001754:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001758:	eb43 030b 	adc.w	r3, r3, fp
 800175c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800176c:	018b      	lsls	r3, r1, #6
 800176e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001776:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800177a:	018a      	lsls	r2, r1, #6
 800177c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001780:	eb11 0802 	adds.w	r8, r1, r2
 8001784:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001788:	eb41 0903 	adc.w	r9, r1, r3
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8001798:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800179c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80017a0:	4690      	mov	r8, r2
 80017a2:	4699      	mov	r9, r3
 80017a4:	eb18 040a 	adds.w	r4, r8, sl
 80017a8:	eb49 050b 	adc.w	r5, r9, fp
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	00ab      	lsls	r3, r5, #2
 80017b6:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80017ba:	00a2      	lsls	r2, r4, #2
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	eb14 030a 	adds.w	r3, r4, sl
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c6:	eb45 030b 	adc.w	r3, r5, fp
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017cc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80017d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80017d4:	f7ff faca 	bl	8000d6c <__aeabi_ldivmod>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	  press_var1 = (((int64_t)dig_P9) * (pressure>>13) * (pressure>>13)) >> 25;
 80017e0:	f9b7 3108 	ldrsh.w	r3, [r7, #264]	; 0x108
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	17da      	asrs	r2, r3, #31
 80017e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80017f0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80017f4:	f04f 0000 	mov.w	r0, #0
 80017f8:	f04f 0100 	mov.w	r1, #0
 80017fc:	0b50      	lsrs	r0, r2, #13
 80017fe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001802:	1359      	asrs	r1, r3, #13
 8001804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001808:	fb00 f203 	mul.w	r2, r0, r3
 800180c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001810:	fb03 f301 	mul.w	r3, r3, r1
 8001814:	4413      	add	r3, r2
 8001816:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800181a:	fba2 1200 	umull	r1, r2, r2, r0
 800181e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001822:	460a      	mov	r2, r1
 8001824:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001828:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800182c:	4413      	add	r3, r2
 800182e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001832:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001836:	f04f 0000 	mov.w	r0, #0
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	0b50      	lsrs	r0, r2, #13
 8001840:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001844:	1359      	asrs	r1, r3, #13
 8001846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800184a:	fb00 f203 	mul.w	r2, r0, r3
 800184e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001852:	fb03 f301 	mul.w	r3, r3, r1
 8001856:	4413      	add	r3, r2
 8001858:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800185c:	fba2 1200 	umull	r1, r2, r2, r0
 8001860:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001864:	460a      	mov	r2, r1
 8001866:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800186a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800186e:	4413      	add	r3, r2
 8001870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001880:	0e4a      	lsrs	r2, r1, #25
 8001882:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001886:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800188a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800188e:	164b      	asrs	r3, r1, #25
 8001890:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	  press_var2 = (((int64_t)dig_P8) * pressure) >> 19;
 8001894:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
 8001898:	b21b      	sxth	r3, r3
 800189a:	17da      	asrs	r2, r3, #31
 800189c:	67bb      	str	r3, [r7, #120]	; 0x78
 800189e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80018a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80018a8:	460a      	mov	r2, r1
 80018aa:	fb02 f203 	mul.w	r2, r2, r3
 80018ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018b2:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
 80018b6:	4601      	mov	r1, r0
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	441a      	add	r2, r3
 80018be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80018c4:	fba3 1301 	umull	r1, r3, r3, r1
 80018c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80018cc:	460b      	mov	r3, r1
 80018ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80018d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018d6:	18d3      	adds	r3, r2, r3
 80018d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80018e8:	0cca      	lsrs	r2, r1, #19
 80018ea:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80018ee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018f2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80018f6:	14cb      	asrs	r3, r1, #19
 80018f8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	  pressure = ((pressure + press_var1 + press_var2) >> 8) + (((int64_t)dig_P7)<<4);
 80018fc:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8001900:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001904:	1886      	adds	r6, r0, r2
 8001906:	653e      	str	r6, [r7, #80]	; 0x50
 8001908:	eb41 0303 	adc.w	r3, r1, r3
 800190c:	657b      	str	r3, [r7, #84]	; 0x54
 800190e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001912:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001914:	1889      	adds	r1, r1, r2
 8001916:	6739      	str	r1, [r7, #112]	; 0x70
 8001918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800191a:	eb41 0303 	adc.w	r3, r1, r3
 800191e:	677b      	str	r3, [r7, #116]	; 0x74
 8001920:	f04f 0000 	mov.w	r0, #0
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800192a:	0a18      	lsrs	r0, r3, #8
 800192c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800192e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001934:	1219      	asrs	r1, r3, #8
 8001936:	f9b7 310c 	ldrsh.w	r3, [r7, #268]	; 0x10c
 800193a:	b21b      	sxth	r3, r3
 800193c:	17da      	asrs	r2, r3, #31
 800193e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001940:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 800194c:	0133      	lsls	r3, r6, #4
 800194e:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8001950:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
 8001954:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8001956:	0132      	lsls	r2, r6, #4
 8001958:	1886      	adds	r6, r0, r2
 800195a:	603e      	str	r6, [r7, #0]
 800195c:	eb41 0303 	adc.w	r3, r1, r3
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001966:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	  pressVal = ((float)pressure)/256;
 800196a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800196e:	f7ff f9bf 	bl	8000cf0 <__aeabi_l2f>
 8001972:	ee06 0a90 	vmov	s13, r0
 8001976:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80019f8 <main+0x920>
 800197a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800197e:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c

	  altitude = 44330 * (1 - pow((pressVal/seaLevel_Press),(1/5.255)));
 8001982:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8001986:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 800198a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800198e:	ee16 0a90 	vmov	r0, s13
 8001992:	f7fe fd85 	bl	80004a0 <__aeabi_f2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80019e8 <main+0x910>
 800199e:	ec43 2b10 	vmov	d0, r2, r3
 80019a2:	f003 fcc9 	bl	8005338 <pow>
 80019a6:	ec53 2b10 	vmov	r2, r3, d0
 80019aa:	f04f 0000 	mov.w	r0, #0
 80019ae:	4913      	ldr	r1, [pc, #76]	; (80019fc <main+0x924>)
 80019b0:	f7fe fc16 	bl	80001e0 <__aeabi_dsub>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	a30c      	add	r3, pc, #48	; (adr r3, 80019f0 <main+0x918>)
 80019be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c2:	f7fe fdc5 	bl	8000550 <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f86f 	bl	8000ab0 <__aeabi_d2f>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	  HAL_Delay(2000); /* Delay for 2 seconds */
 80019d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019dc:	f000 fae0 	bl	8001fa0 <HAL_Delay>
  {
 80019e0:	e4af      	b.n	8001342 <main+0x26a>
 80019e2:	bf00      	nop
 80019e4:	f3af 8000 	nop.w
 80019e8:	ccd9456c 	.word	0xccd9456c
 80019ec:	3fc85b95 	.word	0x3fc85b95
 80019f0:	00000000 	.word	0x00000000
 80019f4:	40e5a540 	.word	0x40e5a540
 80019f8:	43800000 	.word	0x43800000
 80019fc:	3ff00000 	.word	0x3ff00000

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0a6      	sub	sp, #152	; 0x98
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a0a:	2228      	movs	r2, #40	; 0x28
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fc5f 	bl	80052d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2258      	movs	r2, #88	; 0x58
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fc51 	bl	80052d2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a30:	2302      	movs	r3, #2
 8001a32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a34:	2301      	movs	r3, #1
 8001a36:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a38:	2310      	movs	r3, #16
 8001a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a4c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f001 fb58 	bl	8003114 <HAL_RCC_OscConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a6a:	f000 f8ff 	bl	8001c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6e:	230f      	movs	r3, #15
 8001a70:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a72:	2302      	movs	r3, #2
 8001a74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a88:	2102      	movs	r1, #2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fb96 	bl	80041bc <HAL_RCC_ClockConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a96:	f000 f8e9 	bl	8001c6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001a9a:	2322      	movs	r3, #34	; 0x22
 8001a9c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 fdbd 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ab4:	f000 f8da 	bl	8001c6c <Error_Handler>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3798      	adds	r7, #152	; 0x98
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001ac6:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <MX_I2C1_Init+0x78>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <MX_I2C1_Init+0x7c>)
 8001ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001afc:	f000 fcfc 	bl	80024f8 <HAL_I2C_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b06:	f000 f8b1 	bl	8001c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4809      	ldr	r0, [pc, #36]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001b0e:	f001 fa69 	bl	8002fe4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b18:	f000 f8a8 	bl	8001c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001b20:	f001 faab 	bl	800307a <HAL_I2CEx_ConfigDigitalFilter>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b2a:	f000 f89f 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000008c 	.word	0x2000008c
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	0010020a 	.word	0x0010020a

08001b40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b46:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <MX_USART2_UART_Init+0x5c>)
 8001b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b4c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b84:	f002 ff6e 	bl	8004a64 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b8e:	f000 f86d 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200000e0 	.word	0x200000e0
 8001b9c:	40004400 	.word	0x40004400

08001ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	4a2a      	ldr	r2, [pc, #168]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bc0:	6153      	str	r3, [r2, #20]
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001bd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bd8:	6153      	str	r3, [r2, #20]
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	6153      	str	r3, [r2, #20]
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6153      	str	r3, [r2, #20]
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <MX_GPIO_Init+0xc4>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2120      	movs	r1, #32
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f000 fc53 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	480b      	ldr	r0, [pc, #44]	; (8001c68 <MX_GPIO_Init+0xc8>)
 8001c3a:	f000 fabb 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c58:	f000 faac 	bl	80021b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	48000800 	.word	0x48000800

08001c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c70:	b672      	cpsid	i
}
 8001c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <Error_Handler+0x8>
	...

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_MspInit+0x44>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <HAL_MspInit+0x44>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6193      	str	r3, [r2, #24]
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_MspInit+0x44>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_MspInit+0x44>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_MspInit+0x44>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_MspInit+0x44>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cae:	2007      	movs	r0, #7
 8001cb0:	f000 fa4c 	bl	800214c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a26      	ldr	r2, [pc, #152]	; (8001d78 <HAL_I2C_MspInit+0xb8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d145      	bne.n	8001d6e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_I2C_MspInit+0xbc>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4a25      	ldr	r2, [pc, #148]	; (8001d7c <HAL_I2C_MspInit+0xbc>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	6153      	str	r3, [r2, #20]
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <HAL_I2C_MspInit+0xbc>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_I2C_MspInit+0xbc>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_I2C_MspInit+0xbc>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d04:	6153      	str	r3, [r2, #20]
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_I2C_MspInit+0xbc>)
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d18:	2312      	movs	r3, #18
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d24:	2304      	movs	r3, #4
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d32:	f000 fa3f 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3a:	2312      	movs	r3, #18
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d46:	2304      	movs	r3, #4
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480b      	ldr	r0, [pc, #44]	; (8001d80 <HAL_I2C_MspInit+0xc0>)
 8001d52:	f000 fa2f 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_I2C_MspInit+0xbc>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_I2C_MspInit+0xbc>)
 8001d5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_I2C_MspInit+0xbc>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	; 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40005400 	.word	0x40005400
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	48000400 	.word	0x48000400

08001d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_UART_MspInit+0x7c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d128      	bne.n	8001df8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_UART_MspInit+0x80>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_UART_MspInit+0x80>)
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_UART_MspInit+0x80>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_UART_MspInit+0x80>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <HAL_UART_MspInit+0x80>)
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	6153      	str	r3, [r2, #20]
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_UART_MspInit+0x80>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de6:	2307      	movs	r3, #7
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df4:	f000 f9de 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40004400 	.word	0x40004400
 8001e04:	40021000 	.word	0x40021000

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <NMI_Handler+0x4>

08001e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e54:	f000 f884 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <SystemInit+0x20>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <SystemInit+0x20>)
 8001e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e84:	f7ff ffea 	bl	8001e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e88:	480c      	ldr	r0, [pc, #48]	; (8001ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8001e8a:	490d      	ldr	r1, [pc, #52]	; (8001ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <LoopForever+0xe>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e90:	e002      	b.n	8001e98 <LoopCopyDataInit>

08001e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e96:	3304      	adds	r3, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e9c:	d3f9      	bcc.n	8001e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea0:	4c0a      	ldr	r4, [pc, #40]	; (8001ecc <LoopForever+0x16>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea4:	e001      	b.n	8001eaa <LoopFillZerobss>

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea8:	3204      	adds	r2, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eae:	f003 fa1f 	bl	80052f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eb2:	f7ff f911 	bl	80010d8 <main>

08001eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001eb6:	e7fe      	b.n	8001eb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001eb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ec4:	08006238 	.word	0x08006238
  ldr r2, =_sbss
 8001ec8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ecc:	200002a4 	.word	0x200002a4

08001ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed0:	e7fe      	b.n	8001ed0 <ADC1_2_IRQHandler>
	...

08001ed4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_Init+0x28>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_Init+0x28>)
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f931 	bl	800214c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f808 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef0:	f7ff fec2 	bl	8001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40022000 	.word	0x40022000

08001f00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_InitTick+0x54>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_InitTick+0x58>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f93b 	bl	800219a <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00e      	b.n	8001f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d80a      	bhi.n	8001f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f000 f911 	bl	8002162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f40:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <HAL_InitTick+0x5c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000168 	.word	0x20000168

08001f88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000168 	.word	0x20000168

08001fa0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000008 	.word	0x20000008

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db0a      	blt.n	8002076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <__NVIC_SetPriority+0x4c>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	440b      	add	r3, r1
 8002070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002074:	e00a      	b.n	800208c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <__NVIC_SetPriority+0x50>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3b04      	subs	r3, #4
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	440b      	add	r3, r1
 800208a:	761a      	strb	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f1c3 0307 	rsb	r3, r3, #7
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	bf28      	it	cs
 80020be:	2304      	movcs	r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d902      	bls.n	80020d0 <NVIC_EncodePriority+0x30>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3b03      	subs	r3, #3
 80020ce:	e000      	b.n	80020d2 <NVIC_EncodePriority+0x32>
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	401a      	ands	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43d9      	mvns	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	4313      	orrs	r3, r2
         );
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002118:	d301      	bcc.n	800211e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211a:	2301      	movs	r3, #1
 800211c:	e00f      	b.n	800213e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <SysTick_Config+0x40>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002126:	210f      	movs	r1, #15
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f7ff ff8e 	bl	800204c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <SysTick_Config+0x40>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SysTick_Config+0x40>)
 8002138:	2207      	movs	r2, #7
 800213a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	e000e010 	.word	0xe000e010

0800214c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff47 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002174:	f7ff ff5c 	bl	8002030 <__NVIC_GetPriorityGrouping>
 8002178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f7ff ff8e 	bl	80020a0 <NVIC_EncodePriority>
 8002184:	4602      	mov	r2, r0
 8002186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff5d 	bl	800204c <__NVIC_SetPriority>
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffb0 	bl	8002108 <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c2:	e160      	b.n	8002486 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	4013      	ands	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8152 	beq.w	8002480 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d005      	beq.n	80021f4 <HAL_GPIO_Init+0x40>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d130      	bne.n	8002256 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800222a:	2201      	movs	r2, #1
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	f003 0201 	and.w	r2, r3, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b03      	cmp	r3, #3
 8002260:	d017      	beq.n	8002292 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d123      	bne.n	80022e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	08da      	lsrs	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3208      	adds	r2, #8
 80022a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	6939      	ldr	r1, [r7, #16]
 80022e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0203 	and.w	r2, r3, #3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80ac 	beq.w	8002480 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002328:	4b5e      	ldr	r3, [pc, #376]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a5d      	ldr	r2, [pc, #372]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b5b      	ldr	r3, [pc, #364]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002340:	4a59      	ldr	r2, [pc, #356]	; (80024a8 <HAL_GPIO_Init+0x2f4>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	220f      	movs	r2, #15
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800236a:	d025      	beq.n	80023b8 <HAL_GPIO_Init+0x204>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a4f      	ldr	r2, [pc, #316]	; (80024ac <HAL_GPIO_Init+0x2f8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d01f      	beq.n	80023b4 <HAL_GPIO_Init+0x200>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a4e      	ldr	r2, [pc, #312]	; (80024b0 <HAL_GPIO_Init+0x2fc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d019      	beq.n	80023b0 <HAL_GPIO_Init+0x1fc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a4d      	ldr	r2, [pc, #308]	; (80024b4 <HAL_GPIO_Init+0x300>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d013      	beq.n	80023ac <HAL_GPIO_Init+0x1f8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a4c      	ldr	r2, [pc, #304]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d00d      	beq.n	80023a8 <HAL_GPIO_Init+0x1f4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a4b      	ldr	r2, [pc, #300]	; (80024bc <HAL_GPIO_Init+0x308>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d007      	beq.n	80023a4 <HAL_GPIO_Init+0x1f0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <HAL_GPIO_Init+0x30c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_GPIO_Init+0x1ec>
 800239c:	2306      	movs	r3, #6
 800239e:	e00c      	b.n	80023ba <HAL_GPIO_Init+0x206>
 80023a0:	2307      	movs	r3, #7
 80023a2:	e00a      	b.n	80023ba <HAL_GPIO_Init+0x206>
 80023a4:	2305      	movs	r3, #5
 80023a6:	e008      	b.n	80023ba <HAL_GPIO_Init+0x206>
 80023a8:	2304      	movs	r3, #4
 80023aa:	e006      	b.n	80023ba <HAL_GPIO_Init+0x206>
 80023ac:	2303      	movs	r3, #3
 80023ae:	e004      	b.n	80023ba <HAL_GPIO_Init+0x206>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e002      	b.n	80023ba <HAL_GPIO_Init+0x206>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_GPIO_Init+0x206>
 80023b8:	2300      	movs	r3, #0
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	f002 0203 	and.w	r2, r2, #3
 80023c0:	0092      	lsls	r2, r2, #2
 80023c2:	4093      	lsls	r3, r2
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ca:	4937      	ldr	r1, [pc, #220]	; (80024a8 <HAL_GPIO_Init+0x2f4>)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d8:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_GPIO_Init+0x310>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023fc:	4a31      	ldr	r2, [pc, #196]	; (80024c4 <HAL_GPIO_Init+0x310>)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_GPIO_Init+0x310>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002426:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_GPIO_Init+0x310>)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_GPIO_Init+0x310>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002450:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_GPIO_Init+0x310>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_GPIO_Init+0x310>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <HAL_GPIO_Init+0x310>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	f47f ae97 	bne.w	80021c4 <HAL_GPIO_Init+0x10>
  }
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010000 	.word	0x40010000
 80024ac:	48000400 	.word	0x48000400
 80024b0:	48000800 	.word	0x48000800
 80024b4:	48000c00 	.word	0x48000c00
 80024b8:	48001000 	.word	0x48001000
 80024bc:	48001400 	.word	0x48001400
 80024c0:	48001800 	.word	0x48001800
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e081      	b.n	800260e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fbce 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002548:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002558:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	e006      	b.n	8002580 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800257e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d104      	bne.n	8002592 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002590:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69d9      	ldr	r1, [r3, #28]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1a      	ldr	r2, [r3, #32]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	4608      	mov	r0, r1
 8002622:	4611      	mov	r1, r2
 8002624:	461a      	mov	r2, r3
 8002626:	4603      	mov	r3, r0
 8002628:	817b      	strh	r3, [r7, #10]
 800262a:	460b      	mov	r3, r1
 800262c:	813b      	strh	r3, [r7, #8]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	f040 80f9 	bne.w	8002832 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_I2C_Mem_Write+0x34>
 8002646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0ed      	b.n	8002834 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_I2C_Mem_Write+0x4e>
 8002662:	2302      	movs	r3, #2
 8002664:	e0e6      	b.n	8002834 <HAL_I2C_Mem_Write+0x21c>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800266e:	f7ff fc8b 	bl	8001f88 <HAL_GetTick>
 8002672:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2319      	movs	r3, #25
 800267a:	2201      	movs	r2, #1
 800267c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fac3 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0d1      	b.n	8002834 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2221      	movs	r2, #33	; 0x21
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2240      	movs	r2, #64	; 0x40
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a3a      	ldr	r2, [r7, #32]
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026b8:	88f8      	ldrh	r0, [r7, #6]
 80026ba:	893a      	ldrh	r2, [r7, #8]
 80026bc:	8979      	ldrh	r1, [r7, #10]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	4603      	mov	r3, r0
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f9d3 	bl	8002a74 <I2C_RequestMemoryWrite>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0a9      	b.n	8002834 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2bff      	cmp	r3, #255	; 0xff
 80026e8:	d90e      	bls.n	8002708 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	22ff      	movs	r2, #255	; 0xff
 80026ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	8979      	ldrh	r1, [r7, #10]
 80026f8:	2300      	movs	r3, #0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fc3d 	bl	8002f80 <I2C_TransferConfig>
 8002706:	e00f      	b.n	8002728 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	b2da      	uxtb	r2, r3
 8002718:	8979      	ldrh	r1, [r7, #10]
 800271a:	2300      	movs	r3, #0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fc2c 	bl	8002f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fabc 	bl	8002caa <I2C_WaitOnTXISFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e07b      	b.n	8002834 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d034      	beq.n	80027e0 <HAL_I2C_Mem_Write+0x1c8>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	d130      	bne.n	80027e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	2200      	movs	r2, #0
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fa3f 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e04d      	b.n	8002834 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	2bff      	cmp	r3, #255	; 0xff
 80027a0:	d90e      	bls.n	80027c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	22ff      	movs	r2, #255	; 0xff
 80027a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	8979      	ldrh	r1, [r7, #10]
 80027b0:	2300      	movs	r3, #0
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fbe1 	bl	8002f80 <I2C_TransferConfig>
 80027be:	e00f      	b.n	80027e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	8979      	ldrh	r1, [r7, #10]
 80027d2:	2300      	movs	r3, #0
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fbd0 	bl	8002f80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d19e      	bne.n	8002728 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 faa2 	bl	8002d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e01a      	b.n	8002834 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2220      	movs	r2, #32
 8002804:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_I2C_Mem_Write+0x224>)
 8002812:	400b      	ands	r3, r1
 8002814:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002832:	2302      	movs	r3, #2
  }
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	fe00e800 	.word	0xfe00e800

08002840 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4603      	mov	r3, r0
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	460b      	mov	r3, r1
 8002854:	813b      	strh	r3, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b20      	cmp	r3, #32
 8002864:	f040 80fd 	bne.w	8002a62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_I2C_Mem_Read+0x34>
 800286e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0f1      	b.n	8002a64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_I2C_Mem_Read+0x4e>
 800288a:	2302      	movs	r3, #2
 800288c:	e0ea      	b.n	8002a64 <HAL_I2C_Mem_Read+0x224>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002896:	f7ff fb77 	bl	8001f88 <HAL_GetTick>
 800289a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2319      	movs	r3, #25
 80028a2:	2201      	movs	r2, #1
 80028a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f9af 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0d5      	b.n	8002a64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2222      	movs	r2, #34	; 0x22
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a3a      	ldr	r2, [r7, #32]
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028e0:	88f8      	ldrh	r0, [r7, #6]
 80028e2:	893a      	ldrh	r2, [r7, #8]
 80028e4:	8979      	ldrh	r1, [r7, #10]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4603      	mov	r3, r0
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f913 	bl	8002b1c <I2C_RequestMemoryRead>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0ad      	b.n	8002a64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	2bff      	cmp	r3, #255	; 0xff
 8002910:	d90e      	bls.n	8002930 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	22ff      	movs	r2, #255	; 0xff
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	b2da      	uxtb	r2, r3
 800291e:	8979      	ldrh	r1, [r7, #10]
 8002920:	4b52      	ldr	r3, [pc, #328]	; (8002a6c <HAL_I2C_Mem_Read+0x22c>)
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fb29 	bl	8002f80 <I2C_TransferConfig>
 800292e:	e00f      	b.n	8002950 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	b2da      	uxtb	r2, r3
 8002940:	8979      	ldrh	r1, [r7, #10]
 8002942:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <HAL_I2C_Mem_Read+0x22c>)
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fb18 	bl	8002f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	2200      	movs	r2, #0
 8002958:	2104      	movs	r1, #4
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f956 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e07c      	b.n	8002a64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d034      	beq.n	8002a10 <HAL_I2C_Mem_Read+0x1d0>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d130      	bne.n	8002a10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	2200      	movs	r2, #0
 80029b6:	2180      	movs	r1, #128	; 0x80
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f927 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e04d      	b.n	8002a64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2bff      	cmp	r3, #255	; 0xff
 80029d0:	d90e      	bls.n	80029f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	22ff      	movs	r2, #255	; 0xff
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	8979      	ldrh	r1, [r7, #10]
 80029e0:	2300      	movs	r3, #0
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fac9 	bl	8002f80 <I2C_TransferConfig>
 80029ee:	e00f      	b.n	8002a10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	8979      	ldrh	r1, [r7, #10]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 fab8 	bl	8002f80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d19a      	bne.n	8002950 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f98a 	bl	8002d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e01a      	b.n	8002a64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2220      	movs	r2, #32
 8002a34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_I2C_Mem_Read+0x230>)
 8002a42:	400b      	ands	r3, r1
 8002a44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	80002400 	.word	0x80002400
 8002a70:	fe00e800 	.word	0xfe00e800

08002a74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	460b      	mov	r3, r1
 8002a88:	813b      	strh	r3, [r7, #8]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	8979      	ldrh	r1, [r7, #10]
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <I2C_RequestMemoryWrite+0xa4>)
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fa6f 	bl	8002f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	69b9      	ldr	r1, [r7, #24]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8ff 	bl	8002caa <I2C_WaitOnTXISFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e02c      	b.n	8002b10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002abc:	893b      	ldrh	r3, [r7, #8]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac6:	e015      	b.n	8002af4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ac8:	893b      	ldrh	r3, [r7, #8]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	69b9      	ldr	r1, [r7, #24]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f8e5 	bl	8002caa <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e012      	b.n	8002b10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aea:	893b      	ldrh	r3, [r7, #8]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2200      	movs	r2, #0
 8002afc:	2180      	movs	r1, #128	; 0x80
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f884 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	80002000 	.word	0x80002000

08002b1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	817b      	strh	r3, [r7, #10]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	813b      	strh	r3, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	8979      	ldrh	r1, [r7, #10]
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <I2C_RequestMemoryRead+0xa4>)
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2300      	movs	r3, #0
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fa1c 	bl	8002f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	69b9      	ldr	r1, [r7, #24]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f8ac 	bl	8002caa <I2C_WaitOnTXISFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e02c      	b.n	8002bb6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b62:	893b      	ldrh	r3, [r7, #8]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b6c:	e015      	b.n	8002b9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b6e:	893b      	ldrh	r3, [r7, #8]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	69b9      	ldr	r1, [r7, #24]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f892 	bl	8002caa <I2C_WaitOnTXISFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e012      	b.n	8002bb6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b90:	893b      	ldrh	r3, [r7, #8]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2140      	movs	r1, #64	; 0x40
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f831 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	80002000 	.word	0x80002000

08002bc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d103      	bne.n	8002be2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d007      	beq.n	8002c00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	619a      	str	r2, [r3, #24]
  }
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c1c:	e031      	b.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d02d      	beq.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7ff f9af 	bl	8001f88 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d122      	bne.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4013      	ands	r3, r2
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d113      	bne.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f043 0220 	orr.w	r2, r3, #32
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699a      	ldr	r2, [r3, #24]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d0be      	beq.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cb6:	e033      	b.n	8002d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f87f 	bl	8002dc0 <I2C_IsErrorOccurred>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e031      	b.n	8002d30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d025      	beq.n	8002d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd4:	f7ff f958 	bl	8001f88 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d302      	bcc.n	8002cea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11a      	bne.n	8002d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d013      	beq.n	8002d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e007      	b.n	8002d30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d1c4      	bne.n	8002cb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d44:	e02f      	b.n	8002da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f838 	bl	8002dc0 <I2C_IsErrorOccurred>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e02d      	b.n	8002db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7ff f915 	bl	8001f88 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11a      	bne.n	8002da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d013      	beq.n	8002da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e007      	b.n	8002db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d1c8      	bne.n	8002d46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d068      	beq.n	8002ebe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2210      	movs	r2, #16
 8002df2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002df4:	e049      	b.n	8002e8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d045      	beq.n	8002e8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7ff f8c3 	bl	8001f88 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <I2C_IsErrorOccurred+0x54>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d13a      	bne.n	8002e8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e36:	d121      	bne.n	8002e7c <I2C_IsErrorOccurred+0xbc>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e3e:	d01d      	beq.n	8002e7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d01a      	beq.n	8002e7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e56:	f7ff f897 	bl	8001f88 <HAL_GetTick>
 8002e5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e5c:	e00e      	b.n	8002e7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e5e:	f7ff f893 	bl	8001f88 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b19      	cmp	r3, #25
 8002e6a:	d907      	bls.n	8002e7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	f043 0320 	orr.w	r3, r3, #32
 8002e72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e7a:	e006      	b.n	8002e8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d1e9      	bne.n	8002e5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d003      	beq.n	8002ea0 <I2C_IsErrorOccurred+0xe0>
 8002e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0aa      	beq.n	8002df6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2220      	movs	r2, #32
 8002eae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00b      	beq.n	8002ee8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01c      	beq.n	8002f6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff fe45 	bl	8002bc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <I2C_IsErrorOccurred+0x1bc>)
 8002f46:	400b      	ands	r3, r1
 8002f48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3728      	adds	r7, #40	; 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	fe00e800 	.word	0xfe00e800

08002f80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	817b      	strh	r3, [r7, #10]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f98:	7a7b      	ldrb	r3, [r7, #9]
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fa0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	0d5b      	lsrs	r3, r3, #21
 8002fba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <I2C_TransferConfig+0x60>)
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	ea02 0103 	and.w	r1, r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	03ff63ff 	.word	0x03ff63ff

08002fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d138      	bne.n	800306c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003004:	2302      	movs	r3, #2
 8003006:	e032      	b.n	800306e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	; 0x24
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003036:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800307a:	b480      	push	{r7}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b20      	cmp	r3, #32
 800308e:	d139      	bne.n	8003104 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800309a:	2302      	movs	r3, #2
 800309c:	e033      	b.n	8003106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2224      	movs	r2, #36	; 0x24
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e000      	b.n	8003106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003104:	2302      	movs	r3, #2
  }
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800311a:	af00      	add	r7, sp, #0
 800311c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003120:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003124:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800312a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f001 b83a 	b.w	80041ae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800313e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 816f 	beq.w	800342e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003150:	4bb5      	ldr	r3, [pc, #724]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b04      	cmp	r3, #4
 800315a:	d00c      	beq.n	8003176 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800315c:	4bb2      	ldr	r3, [pc, #712]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b08      	cmp	r3, #8
 8003166:	d15c      	bne.n	8003222 <HAL_RCC_OscConfig+0x10e>
 8003168:	4baf      	ldr	r3, [pc, #700]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003174:	d155      	bne.n	8003222 <HAL_RCC_OscConfig+0x10e>
 8003176:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800318a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d102      	bne.n	80031a8 <HAL_RCC_OscConfig+0x94>
 80031a2:	4ba1      	ldr	r3, [pc, #644]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	e015      	b.n	80031d4 <HAL_RCC_OscConfig+0xc0>
 80031a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80031bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80031c4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80031d0:	4b95      	ldr	r3, [pc, #596]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031d8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80031dc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80031e0:	fa92 f2a2 	rbit	r2, r2
 80031e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80031e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80031ec:	fab2 f282 	clz	r2, r2
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	f042 0220 	orr.w	r2, r2, #32
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	f002 021f 	and.w	r2, r2, #31
 80031fc:	2101      	movs	r1, #1
 80031fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8111 	beq.w	800342c <HAL_RCC_OscConfig+0x318>
 800320a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800320e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 8108 	bne.w	800342c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f000 bfc6 	b.w	80041ae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003226:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x12e>
 8003234:	4b7c      	ldr	r3, [pc, #496]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a7b      	ldr	r2, [pc, #492]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e036      	b.n	80032b0 <HAL_RCC_OscConfig+0x19c>
 8003242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003246:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0x158>
 8003252:	4b75      	ldr	r3, [pc, #468]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a74      	ldr	r2, [pc, #464]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 8003258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b72      	ldr	r3, [pc, #456]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a71      	ldr	r2, [pc, #452]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 8003264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e021      	b.n	80032b0 <HAL_RCC_OscConfig+0x19c>
 800326c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003270:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x184>
 800327e:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a69      	ldr	r2, [pc, #420]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b67      	ldr	r3, [pc, #412]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a66      	ldr	r2, [pc, #408]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0x19c>
 8003298:	4b63      	ldr	r3, [pc, #396]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a62      	ldr	r2, [pc, #392]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b60      	ldr	r3, [pc, #384]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a5f      	ldr	r2, [pc, #380]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d059      	beq.n	8003374 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe fe62 	bl	8001f88 <HAL_GetTick>
 80032c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ca:	f7fe fe5d 	bl	8001f88 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d902      	bls.n	80032e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	f000 bf67 	b.w	80041ae <HAL_RCC_OscConfig+0x109a>
 80032e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80032f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d102      	bne.n	8003312 <HAL_RCC_OscConfig+0x1fe>
 800330c:	4b46      	ldr	r3, [pc, #280]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	e015      	b.n	800333e <HAL_RCC_OscConfig+0x22a>
 8003312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003316:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800332a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800332e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800333a:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003342:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003346:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800334a:	fa92 f2a2 	rbit	r2, r2
 800334e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003352:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003356:	fab2 f282 	clz	r2, r2
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	f042 0220 	orr.w	r2, r2, #32
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f002 021f 	and.w	r2, r2, #31
 8003366:	2101      	movs	r1, #1
 8003368:	fa01 f202 	lsl.w	r2, r1, r2
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0ab      	beq.n	80032ca <HAL_RCC_OscConfig+0x1b6>
 8003372:	e05c      	b.n	800342e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fe08 	bl	8001f88 <HAL_GetTick>
 8003378:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337e:	f7fe fe03 	bl	8001f88 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d902      	bls.n	8003394 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	f000 bf0d 	b.w	80041ae <HAL_RCC_OscConfig+0x109a>
 8003394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003398:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80033a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d102      	bne.n	80033c6 <HAL_RCC_OscConfig+0x2b2>
 80033c0:	4b19      	ldr	r3, [pc, #100]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	e015      	b.n	80033f2 <HAL_RCC_OscConfig+0x2de>
 80033c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80033da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80033e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <HAL_RCC_OscConfig+0x314>)
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80033fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80033fe:	fa92 f2a2 	rbit	r2, r2
 8003402:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003406:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800340a:	fab2 f282 	clz	r2, r2
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	f042 0220 	orr.w	r2, r2, #32
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	f002 021f 	and.w	r2, r2, #31
 800341a:	2101      	movs	r1, #1
 800341c:	fa01 f202 	lsl.w	r2, r1, r2
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ab      	bne.n	800337e <HAL_RCC_OscConfig+0x26a>
 8003426:	e002      	b.n	800342e <HAL_RCC_OscConfig+0x31a>
 8003428:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003432:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 817f 	beq.w	8003742 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003444:	4ba7      	ldr	r3, [pc, #668]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003450:	4ba4      	ldr	r3, [pc, #656]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d173      	bne.n	8003544 <HAL_RCC_OscConfig+0x430>
 800345c:	4ba1      	ldr	r3, [pc, #644]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003468:	d16c      	bne.n	8003544 <HAL_RCC_OscConfig+0x430>
 800346a:	2302      	movs	r3, #2
 800346c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800347c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d102      	bne.n	800349a <HAL_RCC_OscConfig+0x386>
 8003494:	4b93      	ldr	r3, [pc, #588]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	e013      	b.n	80034c2 <HAL_RCC_OscConfig+0x3ae>
 800349a:	2302      	movs	r3, #2
 800349c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80034ac:	2302      	movs	r3, #2
 80034ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80034b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80034be:	4b89      	ldr	r3, [pc, #548]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2202      	movs	r2, #2
 80034c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80034c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80034d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80034d8:	fab2 f282 	clz	r2, r2
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	f042 0220 	orr.w	r2, r2, #32
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	f002 021f 	and.w	r2, r2, #31
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCC_OscConfig+0x3f6>
 80034f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d002      	beq.n	800350a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f000 be52 	b.w	80041ae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003516:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	21f8      	movs	r1, #248	; 0xf8
 8003520:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003528:	fa91 f1a1 	rbit	r1, r1
 800352c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003530:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003534:	fab1 f181 	clz	r1, r1
 8003538:	b2c9      	uxtb	r1, r1
 800353a:	408b      	lsls	r3, r1
 800353c:	4969      	ldr	r1, [pc, #420]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	e0fe      	b.n	8003742 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003548:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8088 	beq.w	8003666 <HAL_RCC_OscConfig+0x552>
 8003556:	2301      	movs	r3, #1
 8003558:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003568:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003576:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	461a      	mov	r2, r3
 800357e:	2301      	movs	r3, #1
 8003580:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fe fd01 	bl	8001f88 <HAL_GetTick>
 8003586:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358c:	f7fe fcfc 	bl	8001f88 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d902      	bls.n	80035a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	f000 be06 	b.w	80041ae <HAL_RCC_OscConfig+0x109a>
 80035a2:	2302      	movs	r3, #2
 80035a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80035b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_OscConfig+0x4be>
 80035cc:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	e013      	b.n	80035fa <HAL_RCC_OscConfig+0x4e6>
 80035d2:	2302      	movs	r3, #2
 80035d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80035e4:	2302      	movs	r3, #2
 80035e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035f6:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	2202      	movs	r2, #2
 80035fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003600:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003604:	fa92 f2a2 	rbit	r2, r2
 8003608:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800360c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003610:	fab2 f282 	clz	r2, r2
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	f042 0220 	orr.w	r2, r2, #32
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f002 021f 	and.w	r2, r2, #31
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f202 	lsl.w	r2, r1, r2
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0af      	beq.n	800358c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362c:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003638:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	21f8      	movs	r1, #248	; 0xf8
 8003642:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800364a:	fa91 f1a1 	rbit	r1, r1
 800364e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003652:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003656:	fab1 f181 	clz	r1, r1
 800365a:	b2c9      	uxtb	r1, r1
 800365c:	408b      	lsls	r3, r1
 800365e:	4921      	ldr	r1, [pc, #132]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
 8003664:	e06d      	b.n	8003742 <HAL_RCC_OscConfig+0x62e>
 8003666:	2301      	movs	r3, #1
 8003668:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003678:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003686:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	461a      	mov	r2, r3
 800368e:	2300      	movs	r3, #0
 8003690:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003692:	f7fe fc79 	bl	8001f88 <HAL_GetTick>
 8003696:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369c:	f7fe fc74 	bl	8001f88 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d902      	bls.n	80036b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	f000 bd7e 	b.w	80041ae <HAL_RCC_OscConfig+0x109a>
 80036b2:	2302      	movs	r3, #2
 80036b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80036c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c8:	fab3 f383 	clz	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_RCC_OscConfig+0x5d4>
 80036dc:	4b01      	ldr	r3, [pc, #4]	; (80036e4 <HAL_RCC_OscConfig+0x5d0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	e016      	b.n	8003710 <HAL_RCC_OscConfig+0x5fc>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	2302      	movs	r3, #2
 80036ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80036fa:	2302      	movs	r3, #2
 80036fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003700:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800370c:	4bbf      	ldr	r3, [pc, #764]	; (8003a0c <HAL_RCC_OscConfig+0x8f8>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2202      	movs	r2, #2
 8003712:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003716:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800371a:	fa92 f2a2 	rbit	r2, r2
 800371e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003722:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003726:	fab2 f282 	clz	r2, r2
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	f042 0220 	orr.w	r2, r2, #32
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	f002 021f 	and.w	r2, r2, #31
 8003736:	2101      	movs	r1, #1
 8003738:	fa01 f202 	lsl.w	r2, r1, r2
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ac      	bne.n	800369c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003746:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8113 	beq.w	800397e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d07c      	beq.n	8003862 <HAL_RCC_OscConfig+0x74e>
 8003768:	2301      	movs	r3, #1
 800376a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003772:	fa93 f3a3 	rbit	r3, r3
 8003776:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800377a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	4ba2      	ldr	r3, [pc, #648]	; (8003a10 <HAL_RCC_OscConfig+0x8fc>)
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	461a      	mov	r2, r3
 800378e:	2301      	movs	r3, #1
 8003790:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003792:	f7fe fbf9 	bl	8001f88 <HAL_GetTick>
 8003796:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379c:	f7fe fbf4 	bl	8001f88 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d902      	bls.n	80037b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	f000 bcfe 	b.w	80041ae <HAL_RCC_OscConfig+0x109a>
 80037b2:	2302      	movs	r3, #2
 80037b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037bc:	fa93 f2a3 	rbit	r2, r3
 80037c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037d2:	2202      	movs	r2, #2
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	fa93 f2a3 	rbit	r2, r3
 80037e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037f6:	2202      	movs	r2, #2
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	fa93 f2a3 	rbit	r2, r3
 8003808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003810:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	4b7e      	ldr	r3, [pc, #504]	; (8003a0c <HAL_RCC_OscConfig+0x8f8>)
 8003814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800381a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800381e:	2102      	movs	r1, #2
 8003820:	6019      	str	r1, [r3, #0]
 8003822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003826:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	fa93 f1a3 	rbit	r1, r3
 8003830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003834:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003838:	6019      	str	r1, [r3, #0]
  return result;
 800383a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	4013      	ands	r3, r2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d09d      	beq.n	800379c <HAL_RCC_OscConfig+0x688>
 8003860:	e08d      	b.n	800397e <HAL_RCC_OscConfig+0x86a>
 8003862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003866:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003872:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	fa93 f2a3 	rbit	r2, r3
 800387c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003880:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003884:	601a      	str	r2, [r3, #0]
  return result;
 8003886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800388a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800388e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_RCC_OscConfig+0x8fc>)
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	461a      	mov	r2, r3
 80038a0:	2300      	movs	r3, #0
 80038a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a4:	f7fe fb70 	bl	8001f88 <HAL_GetTick>
 80038a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ae:	f7fe fb6b 	bl	8001f88 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d902      	bls.n	80038c4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	f000 bc75 	b.w	80041ae <HAL_RCC_OscConfig+0x109a>
 80038c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038cc:	2202      	movs	r2, #2
 80038ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038f0:	2202      	movs	r2, #2
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003910:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003914:	2202      	movs	r2, #2
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	fa93 f2a3 	rbit	r2, r3
 8003926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800392a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800392e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <HAL_RCC_OscConfig+0x8f8>)
 8003932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003938:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800393c:	2102      	movs	r1, #2
 800393e:	6019      	str	r1, [r3, #0]
 8003940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003944:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	fa93 f1a3 	rbit	r1, r3
 800394e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003952:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003956:	6019      	str	r1, [r3, #0]
  return result;
 8003958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800395c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	2101      	movs	r1, #1
 8003974:	fa01 f303 	lsl.w	r3, r1, r3
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d197      	bne.n	80038ae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003982:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 81a5 	beq.w	8003cde <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003994:	2300      	movs	r3, #0
 8003996:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399a:	4b1c      	ldr	r3, [pc, #112]	; (8003a0c <HAL_RCC_OscConfig+0x8f8>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d116      	bne.n	80039d4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_OscConfig+0x8f8>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <HAL_RCC_OscConfig+0x8f8>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b0:	61d3      	str	r3, [r2, #28]
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_RCC_OscConfig+0x8f8>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCC_OscConfig+0x900>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d121      	bne.n	8003a24 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <HAL_RCC_OscConfig+0x900>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <HAL_RCC_OscConfig+0x900>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ec:	f7fe facc 	bl	8001f88 <HAL_GetTick>
 80039f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	e010      	b.n	8003a18 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f6:	f7fe fac7 	bl	8001f88 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d908      	bls.n	8003a18 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e3d1      	b.n	80041ae <HAL_RCC_OscConfig+0x109a>
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	10908120 	.word	0x10908120
 8003a14:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	4b8d      	ldr	r3, [pc, #564]	; (8003c50 <HAL_RCC_OscConfig+0xb3c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0e8      	beq.n	80039f6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x92e>
 8003a34:	4b87      	ldr	r3, [pc, #540]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a86      	ldr	r2, [pc, #536]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	e035      	b.n	8003aae <HAL_RCC_OscConfig+0x99a>
 8003a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x958>
 8003a52:	4b80      	ldr	r3, [pc, #512]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	4a7f      	ldr	r2, [pc, #508]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	6213      	str	r3, [r2, #32]
 8003a5e:	4b7d      	ldr	r3, [pc, #500]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4a7c      	ldr	r2, [pc, #496]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a64:	f023 0304 	bic.w	r3, r3, #4
 8003a68:	6213      	str	r3, [r2, #32]
 8003a6a:	e020      	b.n	8003aae <HAL_RCC_OscConfig+0x99a>
 8003a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b05      	cmp	r3, #5
 8003a7a:	d10c      	bne.n	8003a96 <HAL_RCC_OscConfig+0x982>
 8003a7c:	4b75      	ldr	r3, [pc, #468]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4a74      	ldr	r2, [pc, #464]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a82:	f043 0304 	orr.w	r3, r3, #4
 8003a86:	6213      	str	r3, [r2, #32]
 8003a88:	4b72      	ldr	r3, [pc, #456]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4a71      	ldr	r2, [pc, #452]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6213      	str	r3, [r2, #32]
 8003a94:	e00b      	b.n	8003aae <HAL_RCC_OscConfig+0x99a>
 8003a96:	4b6f      	ldr	r3, [pc, #444]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4a6e      	ldr	r2, [pc, #440]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	6213      	str	r3, [r2, #32]
 8003aa2:	4b6c      	ldr	r3, [pc, #432]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4a6b      	ldr	r2, [pc, #428]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8081 	beq.w	8003bc2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac0:	f7fe fa62 	bl	8001f88 <HAL_GetTick>
 8003ac4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fe fa5d 	bl	8001f88 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e365      	b.n	80041ae <HAL_RCC_OscConfig+0x109a>
 8003ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003aea:	2202      	movs	r2, #2
 8003aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	fa93 f2a3 	rbit	r2, r3
 8003afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b0e:	2202      	movs	r2, #2
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	fa93 f2a3 	rbit	r2, r3
 8003b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b28:	601a      	str	r2, [r3, #0]
  return result;
 8003b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b2e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f043 0302 	orr.w	r3, r3, #2
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d102      	bne.n	8003b4e <HAL_RCC_OscConfig+0xa3a>
 8003b48:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	e013      	b.n	8003b76 <HAL_RCC_OscConfig+0xa62>
 8003b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b56:	2202      	movs	r2, #2
 8003b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	fa93 f2a3 	rbit	r2, r3
 8003b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	4b38      	ldr	r3, [pc, #224]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b7e:	2102      	movs	r1, #2
 8003b80:	6011      	str	r1, [r2, #0]
 8003b82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fa92 f1a2 	rbit	r1, r2
 8003b90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b94:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b98:	6011      	str	r1, [r2, #0]
  return result;
 8003b9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b9e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	fab2 f282 	clz	r2, r2
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	f002 021f 	and.w	r2, r2, #31
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d084      	beq.n	8003aca <HAL_RCC_OscConfig+0x9b6>
 8003bc0:	e083      	b.n	8003cca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe f9e1 	bl	8001f88 <HAL_GetTick>
 8003bc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bca:	e00b      	b.n	8003be4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bcc:	f7fe f9dc 	bl	8001f88 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e2e4      	b.n	80041ae <HAL_RCC_OscConfig+0x109a>
 8003be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bec:	2202      	movs	r2, #2
 8003bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	fa93 f2a3 	rbit	r2, r3
 8003bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c10:	2202      	movs	r2, #2
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	fa93 f2a3 	rbit	r2, r3
 8003c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c2a:	601a      	str	r2, [r3, #0]
  return result;
 8003c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c30:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d106      	bne.n	8003c58 <HAL_RCC_OscConfig+0xb44>
 8003c4a:	4b02      	ldr	r3, [pc, #8]	; (8003c54 <HAL_RCC_OscConfig+0xb40>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	e017      	b.n	8003c80 <HAL_RCC_OscConfig+0xb6c>
 8003c50:	40007000 	.word	0x40007000
 8003c54:	40021000 	.word	0x40021000
 8003c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c60:	2202      	movs	r2, #2
 8003c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	fa93 f2a3 	rbit	r2, r3
 8003c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c76:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	4bb3      	ldr	r3, [pc, #716]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c88:	2102      	movs	r1, #2
 8003c8a:	6011      	str	r1, [r2, #0]
 8003c8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	fa92 f1a2 	rbit	r1, r2
 8003c9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c9e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003ca2:	6011      	str	r1, [r2, #0]
  return result;
 8003ca4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ca8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	fab2 f282 	clz	r2, r2
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	f002 021f 	and.w	r2, r2, #31
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d180      	bne.n	8003bcc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d105      	bne.n	8003cde <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd2:	4b9e      	ldr	r3, [pc, #632]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	4a9d      	ldr	r2, [pc, #628]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 825e 	beq.w	80041ac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf0:	4b96      	ldr	r3, [pc, #600]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	f000 821f 	beq.w	800413c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	f040 8170 	bne.w	8003ff0 <HAL_RCC_OscConfig+0xedc>
 8003d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	fa93 f2a3 	rbit	r2, r3
 8003d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d34:	601a      	str	r2, [r3, #0]
  return result;
 8003d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d3e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d40:	fab3 f383 	clz	r3, r3
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	461a      	mov	r2, r3
 8003d52:	2300      	movs	r3, #0
 8003d54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d56:	f7fe f917 	bl	8001f88 <HAL_GetTick>
 8003d5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5e:	e009      	b.n	8003d74 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fe f912 	bl	8001f88 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e21c      	b.n	80041ae <HAL_RCC_OscConfig+0x109a>
 8003d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	fa93 f2a3 	rbit	r2, r3
 8003d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d98:	601a      	str	r2, [r3, #0]
  return result;
 8003d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003da2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_RCC_OscConfig+0xcaa>
 8003db8:	4b64      	ldr	r3, [pc, #400]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	e027      	b.n	8003e0e <HAL_RCC_OscConfig+0xcfa>
 8003dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	fa93 f2a3 	rbit	r2, r3
 8003dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dde:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	fa93 f2a3 	rbit	r2, r3
 8003e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e04:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e1a:	6011      	str	r1, [r2, #0]
 8003e1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e20:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	fa92 f1a2 	rbit	r1, r2
 8003e2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e2e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003e32:	6011      	str	r1, [r2, #0]
  return result;
 8003e34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e38:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	fab2 f282 	clz	r2, r2
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	f042 0220 	orr.w	r2, r2, #32
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	f002 021f 	and.w	r2, r2, #31
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f202 	lsl.w	r2, r1, r2
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d182      	bne.n	8003d60 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e5a:	4b3c      	ldr	r3, [pc, #240]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	f023 020f 	bic.w	r2, r3, #15
 8003e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	4937      	ldr	r1, [pc, #220]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003e74:	4b35      	ldr	r3, [pc, #212]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a19      	ldr	r1, [r3, #32]
 8003e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	492d      	ldr	r1, [pc, #180]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
 8003e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	fa93 f2a3 	rbit	r2, r3
 8003eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ebc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ec0:	601a      	str	r2, [r3, #0]
  return result;
 8003ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003eca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ed6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	461a      	mov	r2, r3
 8003ede:	2301      	movs	r3, #1
 8003ee0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fe f851 	bl	8001f88 <HAL_GetTick>
 8003ee6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eea:	e009      	b.n	8003f00 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fe f84c 	bl	8001f88 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e156      	b.n	80041ae <HAL_RCC_OscConfig+0x109a>
 8003f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f04:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f12:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	fa93 f2a3 	rbit	r2, r3
 8003f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f24:	601a      	str	r2, [r3, #0]
  return result;
 8003f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f30:	fab3 f383 	clz	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_RCC_OscConfig+0xe3c>
 8003f44:	4b01      	ldr	r3, [pc, #4]	; (8003f4c <HAL_RCC_OscConfig+0xe38>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	e02a      	b.n	8003fa0 <HAL_RCC_OscConfig+0xe8c>
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	fa93 f2a3 	rbit	r2, r3
 8003f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f88:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	fa93 f2a3 	rbit	r2, r3
 8003f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f96:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	4b86      	ldr	r3, [pc, #536]	; (80041b8 <HAL_RCC_OscConfig+0x10a4>)
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fa4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003fa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fac:	6011      	str	r1, [r2, #0]
 8003fae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fb2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	fa92 f1a2 	rbit	r1, r2
 8003fbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fc0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003fc4:	6011      	str	r1, [r2, #0]
  return result;
 8003fc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	fab2 f282 	clz	r2, r2
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	f042 0220 	orr.w	r2, r2, #32
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	f002 021f 	and.w	r2, r2, #31
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f43f af7f 	beq.w	8003eec <HAL_RCC_OscConfig+0xdd8>
 8003fee:	e0dd      	b.n	80041ac <HAL_RCC_OscConfig+0x1098>
 8003ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004002:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	fa93 f2a3 	rbit	r2, r3
 800400c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004010:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004014:	601a      	str	r2, [r3, #0]
  return result;
 8004016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800401e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800402a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	461a      	mov	r2, r3
 8004032:	2300      	movs	r3, #0
 8004034:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fd ffa7 	bl	8001f88 <HAL_GetTick>
 800403a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403e:	e009      	b.n	8004054 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004040:	f7fd ffa2 	bl	8001f88 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e0ac      	b.n	80041ae <HAL_RCC_OscConfig+0x109a>
 8004054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004058:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800405c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004066:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	fa93 f2a3 	rbit	r2, r3
 8004070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004074:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004078:	601a      	str	r2, [r3, #0]
  return result;
 800407a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800407e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004082:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004084:	fab3 f383 	clz	r3, r3
 8004088:	b2db      	uxtb	r3, r3
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d102      	bne.n	800409e <HAL_RCC_OscConfig+0xf8a>
 8004098:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_RCC_OscConfig+0x10a4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	e027      	b.n	80040ee <HAL_RCC_OscConfig+0xfda>
 800409e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80040a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	fa93 f2a3 	rbit	r2, r3
 80040ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	fa93 f2a3 	rbit	r2, r3
 80040e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <HAL_RCC_OscConfig+0x10a4>)
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040f2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040fa:	6011      	str	r1, [r2, #0]
 80040fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004100:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	fa92 f1a2 	rbit	r1, r2
 800410a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800410e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004112:	6011      	str	r1, [r2, #0]
  return result;
 8004114:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004118:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	fab2 f282 	clz	r2, r2
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	f042 0220 	orr.w	r2, r2, #32
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	f002 021f 	and.w	r2, r2, #31
 800412e:	2101      	movs	r1, #1
 8004130:	fa01 f202 	lsl.w	r2, r1, r2
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d182      	bne.n	8004040 <HAL_RCC_OscConfig+0xf2c>
 800413a:	e037      	b.n	80041ac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800413c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004140:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e02e      	b.n	80041ae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RCC_OscConfig+0x10a4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004158:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <HAL_RCC_OscConfig+0x10a4>)
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004160:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004164:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800416c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	429a      	cmp	r2, r3
 8004176:	d117      	bne.n	80041a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004178:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800417c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004184:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800418c:	429a      	cmp	r2, r3
 800418e:	d10b      	bne.n	80041a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004190:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004194:	f003 020f 	and.w	r2, r3, #15
 8004198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800419c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021000 	.word	0x40021000

080041bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b09e      	sub	sp, #120	; 0x78
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e162      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d4:	4b90      	ldr	r3, [pc, #576]	; (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d910      	bls.n	8004204 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b8d      	ldr	r3, [pc, #564]	; (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 0207 	bic.w	r2, r3, #7
 80041ea:	498b      	ldr	r1, [pc, #556]	; (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f2:	4b89      	ldr	r3, [pc, #548]	; (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e14a      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004210:	4b82      	ldr	r3, [pc, #520]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	497f      	ldr	r1, [pc, #508]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 800421e:	4313      	orrs	r3, r2
 8004220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80dc 	beq.w	80043e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d13c      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xf6>
 8004238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800423c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <HAL_RCC_ClockConfig+0xa6>
 800425c:	4b6f      	ldr	r3, [pc, #444]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	e00f      	b.n	8004282 <HAL_RCC_ClockConfig+0xc6>
 8004262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004266:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	667b      	str	r3, [r7, #100]	; 0x64
 8004270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004274:	663b      	str	r3, [r7, #96]	; 0x60
 8004276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800427e:	4b67      	ldr	r3, [pc, #412]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004286:	65ba      	str	r2, [r7, #88]	; 0x58
 8004288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800428a:	fa92 f2a2 	rbit	r2, r2
 800428e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004290:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004292:	fab2 f282 	clz	r2, r2
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	f042 0220 	orr.w	r2, r2, #32
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	f002 021f 	and.w	r2, r2, #31
 80042a2:	2101      	movs	r1, #1
 80042a4:	fa01 f202 	lsl.w	r2, r1, r2
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d17b      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0f3      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d13c      	bne.n	8004334 <HAL_RCC_ClockConfig+0x178>
 80042ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d102      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x128>
 80042de:	4b4f      	ldr	r3, [pc, #316]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	e00f      	b.n	8004304 <HAL_RCC_ClockConfig+0x148>
 80042e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ec:	fa93 f3a3 	rbit	r3, r3
 80042f0:	647b      	str	r3, [r7, #68]	; 0x44
 80042f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042f6:	643b      	str	r3, [r7, #64]	; 0x40
 80042f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004300:	4b46      	ldr	r3, [pc, #280]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004308:	63ba      	str	r2, [r7, #56]	; 0x38
 800430a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800430c:	fa92 f2a2 	rbit	r2, r2
 8004310:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004314:	fab2 f282 	clz	r2, r2
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	f042 0220 	orr.w	r2, r2, #32
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	f002 021f 	and.w	r2, r2, #31
 8004324:	2101      	movs	r1, #1
 8004326:	fa01 f202 	lsl.w	r2, r1, r2
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d13a      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0b2      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
 8004334:	2302      	movs	r3, #2
 8004336:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d102      	bne.n	800435c <HAL_RCC_ClockConfig+0x1a0>
 8004356:	4b31      	ldr	r3, [pc, #196]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	e00d      	b.n	8004378 <HAL_RCC_ClockConfig+0x1bc>
 800435c:	2302      	movs	r3, #2
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	fa93 f3a3 	rbit	r3, r3
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
 8004368:	2302      	movs	r3, #2
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	4b29      	ldr	r3, [pc, #164]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	2202      	movs	r2, #2
 800437a:	61ba      	str	r2, [r7, #24]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	fa92 f2a2 	rbit	r2, r2
 8004382:	617a      	str	r2, [r7, #20]
  return result;
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	fab2 f282 	clz	r2, r2
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	f042 0220 	orr.w	r2, r2, #32
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	f002 021f 	and.w	r2, r2, #31
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f202 	lsl.w	r2, r1, r2
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e079      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f023 0203 	bic.w	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	491a      	ldr	r1, [pc, #104]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b8:	f7fd fde6 	bl	8001f88 <HAL_GetTick>
 80043bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c0:	f7fd fde2 	bl	8001f88 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e061      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <HAL_RCC_ClockConfig+0x260>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 020c 	and.w	r2, r3, #12
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d1eb      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d214      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 0207 	bic.w	r2, r3, #7
 80043fe:	4906      	ldr	r1, [pc, #24]	; (8004418 <HAL_RCC_ClockConfig+0x25c>)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b04      	ldr	r3, [pc, #16]	; (8004418 <HAL_RCC_ClockConfig+0x25c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e040      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
 8004418:	40022000 	.word	0x40022000
 800441c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800442c:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <HAL_RCC_ClockConfig+0x2e8>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	491a      	ldr	r1, [pc, #104]	; (80044a4 <HAL_RCC_ClockConfig+0x2e8>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444a:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <HAL_RCC_ClockConfig+0x2e8>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4912      	ldr	r1, [pc, #72]	; (80044a4 <HAL_RCC_ClockConfig+0x2e8>)
 800445a:	4313      	orrs	r3, r2
 800445c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800445e:	f000 f829 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 8004462:	4601      	mov	r1, r0
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <HAL_RCC_ClockConfig+0x2e8>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446c:	22f0      	movs	r2, #240	; 0xf0
 800446e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	fa92 f2a2 	rbit	r2, r2
 8004476:	60fa      	str	r2, [r7, #12]
  return result;
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	fab2 f282 	clz	r2, r2
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	40d3      	lsrs	r3, r2
 8004482:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <HAL_RCC_ClockConfig+0x2ec>)
 8004484:	5cd3      	ldrb	r3, [r2, r3]
 8004486:	fa21 f303 	lsr.w	r3, r1, r3
 800448a:	4a08      	ldr	r2, [pc, #32]	; (80044ac <HAL_RCC_ClockConfig+0x2f0>)
 800448c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_RCC_ClockConfig+0x2f4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fd fd34 	bl	8001f00 <HAL_InitTick>
  
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3778      	adds	r7, #120	; 0x78
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	080061c0 	.word	0x080061c0
 80044ac:	20000000 	.word	0x20000000
 80044b0:	20000004 	.word	0x20000004

080044b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b08b      	sub	sp, #44	; 0x2c
 80044b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	2300      	movs	r3, #0
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	2300      	movs	r3, #0
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80044ce:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d002      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x30>
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d003      	beq.n	80044ea <HAL_RCC_GetSysClockFreq+0x36>
 80044e2:	e03f      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_RCC_GetSysClockFreq+0xc8>)
 80044e6:	623b      	str	r3, [r7, #32]
      break;
 80044e8:	e03f      	b.n	800456a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	fa92 f2a2 	rbit	r2, r2
 80044fc:	607a      	str	r2, [r7, #4]
  return result;
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	fab2 f282 	clz	r2, r2
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	40d3      	lsrs	r3, r2
 8004508:	4a1d      	ldr	r2, [pc, #116]	; (8004580 <HAL_RCC_GetSysClockFreq+0xcc>)
 800450a:	5cd3      	ldrb	r3, [r2, r3]
 800450c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800450e:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	220f      	movs	r2, #15
 8004518:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	fa92 f2a2 	rbit	r2, r2
 8004520:	60fa      	str	r2, [r7, #12]
  return result;
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	fab2 f282 	clz	r2, r2
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	40d3      	lsrs	r3, r2
 800452c:	4a15      	ldr	r2, [pc, #84]	; (8004584 <HAL_RCC_GetSysClockFreq+0xd0>)
 800452e:	5cd3      	ldrb	r3, [r2, r3]
 8004530:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800453c:	4a0f      	ldr	r2, [pc, #60]	; (800457c <HAL_RCC_GetSysClockFreq+0xc8>)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	fbb2 f2f3 	udiv	r2, r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	e007      	b.n	800455e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800454e:	4a0b      	ldr	r2, [pc, #44]	; (800457c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	fbb2 f2f3 	udiv	r2, r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	623b      	str	r3, [r7, #32]
      break;
 8004562:	e002      	b.n	800456a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004566:	623b      	str	r3, [r7, #32]
      break;
 8004568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800456a:	6a3b      	ldr	r3, [r7, #32]
}
 800456c:	4618      	mov	r0, r3
 800456e:	372c      	adds	r7, #44	; 0x2c
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	40021000 	.word	0x40021000
 800457c:	007a1200 	.word	0x007a1200
 8004580:	080061d8 	.word	0x080061d8
 8004584:	080061e8 	.word	0x080061e8

08004588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <HAL_RCC_GetHCLKFreq+0x14>)
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000000 	.word	0x20000000

080045a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045a6:	f7ff ffef 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045aa:	4601      	mov	r1, r0
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	fa92 f2a2 	rbit	r2, r2
 80045c0:	603a      	str	r2, [r7, #0]
  return result;
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	fab2 f282 	clz	r2, r2
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	40d3      	lsrs	r3, r2
 80045cc:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80045ce:	5cd3      	ldrb	r3, [r2, r3]
 80045d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021000 	.word	0x40021000
 80045e0:	080061d0 	.word	0x080061d0

080045e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045ea:	f7ff ffcd 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045ee:	4601      	mov	r1, r0
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	fa92 f2a2 	rbit	r2, r2
 8004604:	603a      	str	r2, [r7, #0]
  return result;
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	fab2 f282 	clz	r2, r2
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	40d3      	lsrs	r3, r2
 8004610:	4a04      	ldr	r2, [pc, #16]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004612:	5cd3      	ldrb	r3, [r2, r3]
 8004614:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40021000 	.word	0x40021000
 8004624:	080061d0 	.word	0x080061d0

08004628 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b092      	sub	sp, #72	; 0x48
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004638:	2300      	movs	r3, #0
 800463a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80d4 	beq.w	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464c:	4b4e      	ldr	r3, [pc, #312]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10e      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004658:	4b4b      	ldr	r3, [pc, #300]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	4a4a      	ldr	r2, [pc, #296]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004662:	61d3      	str	r3, [r2, #28]
 8004664:	4b48      	ldr	r3, [pc, #288]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004670:	2301      	movs	r3, #1
 8004672:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	4b45      	ldr	r3, [pc, #276]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d118      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004682:	4b42      	ldr	r3, [pc, #264]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a41      	ldr	r2, [pc, #260]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468e:	f7fd fc7b 	bl	8001f88 <HAL_GetTick>
 8004692:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	e008      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004696:	f7fd fc77 	bl	8001f88 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b64      	cmp	r3, #100	; 0x64
 80046a2:	d901      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e1d6      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	4b38      	ldr	r3, [pc, #224]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b4:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8084 	beq.w	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d07c      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d4:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	fa93 f3a3 	rbit	r3, r3
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b26      	ldr	r3, [pc, #152]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	461a      	mov	r2, r3
 80046fe:	2301      	movs	r3, #1
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	461a      	mov	r2, r3
 8004722:	2300      	movs	r3, #0
 8004724:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004726:	4a18      	ldr	r2, [pc, #96]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800472c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d04b      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004736:	f7fd fc27 	bl	8001f88 <HAL_GetTick>
 800473a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473c:	e00a      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473e:	f7fd fc23 	bl	8001f88 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f241 3288 	movw	r2, #5000	; 0x1388
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e180      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004754:	2302      	movs	r3, #2
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
 8004760:	2302      	movs	r3, #2
 8004762:	623b      	str	r3, [r7, #32]
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	61fb      	str	r3, [r7, #28]
  return result;
 800476c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f043 0302 	orr.w	r3, r3, #2
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d108      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004782:	4b01      	ldr	r3, [pc, #4]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	e00d      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
 8004790:	10908100 	.word	0x10908100
 8004794:	2302      	movs	r3, #2
 8004796:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	fa93 f3a3 	rbit	r3, r3
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	4b9a      	ldr	r3, [pc, #616]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	2202      	movs	r2, #2
 80047a6:	613a      	str	r2, [r7, #16]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	fa92 f2a2 	rbit	r2, r2
 80047ae:	60fa      	str	r2, [r7, #12]
  return result;
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	fab2 f282 	clz	r2, r2
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	f002 021f 	and.w	r2, r2, #31
 80047c2:	2101      	movs	r1, #1
 80047c4:	fa01 f202 	lsl.w	r2, r1, r2
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0b7      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047ce:	4b8f      	ldr	r3, [pc, #572]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	498c      	ldr	r1, [pc, #560]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e8:	4b88      	ldr	r3, [pc, #544]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	4a87      	ldr	r2, [pc, #540]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004800:	4b82      	ldr	r3, [pc, #520]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	f023 0203 	bic.w	r2, r3, #3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	497f      	ldr	r1, [pc, #508]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800481e:	4b7b      	ldr	r3, [pc, #492]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	4978      	ldr	r1, [pc, #480]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482c:	4313      	orrs	r3, r2
 800482e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800483c:	4b73      	ldr	r3, [pc, #460]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	4970      	ldr	r1, [pc, #448]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484a:	4313      	orrs	r3, r2
 800484c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800485a:	4b6c      	ldr	r3, [pc, #432]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f023 0210 	bic.w	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4969      	ldr	r1, [pc, #420]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004878:	4b64      	ldr	r3, [pc, #400]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	4961      	ldr	r1, [pc, #388]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004896:	4b5d      	ldr	r3, [pc, #372]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f023 0220 	bic.w	r2, r3, #32
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	495a      	ldr	r1, [pc, #360]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048b4:	4b55      	ldr	r3, [pc, #340]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	4952      	ldr	r1, [pc, #328]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048d2:	4b4e      	ldr	r3, [pc, #312]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	494b      	ldr	r1, [pc, #300]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048f0:	4b46      	ldr	r3, [pc, #280]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	4943      	ldr	r1, [pc, #268]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800490e:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	493c      	ldr	r1, [pc, #240]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800492c:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	4934      	ldr	r1, [pc, #208]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800494a:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	492d      	ldr	r1, [pc, #180]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004968:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	4925      	ldr	r1, [pc, #148]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004976:	4313      	orrs	r3, r2
 8004978:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004986:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	491e      	ldr	r1, [pc, #120]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004994:	4313      	orrs	r3, r2
 8004996:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	4916      	ldr	r1, [pc, #88]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	490f      	ldr	r1, [pc, #60]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ec:	4907      	ldr	r1, [pc, #28]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80049fe:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	e002      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a0a:	bf00      	nop
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a12:	4913      	ldr	r1, [pc, #76]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004a24:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a30:	490b      	ldr	r1, [pc, #44]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d008      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004a42:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4e:	4904      	ldr	r1, [pc, #16]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3748      	adds	r7, #72	; 0x48
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40021000 	.word	0x40021000

08004a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e040      	b.n	8004af8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd f97c 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2224      	movs	r2, #36	; 0x24
 8004a90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f82c 	bl	8004b00 <UART_SetConfig>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e022      	b.n	8004af8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9f4 	bl	8004ea8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fa7b 	bl	8004fec <UART_CheckIdleState>
 8004af6:	4603      	mov	r3, r0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b92      	ldr	r3, [pc, #584]	; (8004d74 <UART_SetConfig+0x274>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	6979      	ldr	r1, [r7, #20]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a80      	ldr	r2, [pc, #512]	; (8004d78 <UART_SetConfig+0x278>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d120      	bne.n	8004bbe <UART_SetConfig+0xbe>
 8004b7c:	4b7f      	ldr	r3, [pc, #508]	; (8004d7c <UART_SetConfig+0x27c>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d817      	bhi.n	8004bb8 <UART_SetConfig+0xb8>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x90>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004bad 	.word	0x08004bad
 8004b98:	08004bb3 	.word	0x08004bb3
 8004b9c:	08004ba7 	.word	0x08004ba7
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e0b5      	b.n	8004d12 <UART_SetConfig+0x212>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	77fb      	strb	r3, [r7, #31]
 8004baa:	e0b2      	b.n	8004d12 <UART_SetConfig+0x212>
 8004bac:	2304      	movs	r3, #4
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e0af      	b.n	8004d12 <UART_SetConfig+0x212>
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	77fb      	strb	r3, [r7, #31]
 8004bb6:	e0ac      	b.n	8004d12 <UART_SetConfig+0x212>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e0a9      	b.n	8004d12 <UART_SetConfig+0x212>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a6f      	ldr	r2, [pc, #444]	; (8004d80 <UART_SetConfig+0x280>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d124      	bne.n	8004c12 <UART_SetConfig+0x112>
 8004bc8:	4b6c      	ldr	r3, [pc, #432]	; (8004d7c <UART_SetConfig+0x27c>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bd4:	d011      	beq.n	8004bfa <UART_SetConfig+0xfa>
 8004bd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bda:	d817      	bhi.n	8004c0c <UART_SetConfig+0x10c>
 8004bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be0:	d011      	beq.n	8004c06 <UART_SetConfig+0x106>
 8004be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be6:	d811      	bhi.n	8004c0c <UART_SetConfig+0x10c>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <UART_SetConfig+0xf4>
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d006      	beq.n	8004c00 <UART_SetConfig+0x100>
 8004bf2:	e00b      	b.n	8004c0c <UART_SetConfig+0x10c>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	e08b      	b.n	8004d12 <UART_SetConfig+0x212>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	77fb      	strb	r3, [r7, #31]
 8004bfe:	e088      	b.n	8004d12 <UART_SetConfig+0x212>
 8004c00:	2304      	movs	r3, #4
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e085      	b.n	8004d12 <UART_SetConfig+0x212>
 8004c06:	2308      	movs	r3, #8
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	e082      	b.n	8004d12 <UART_SetConfig+0x212>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e07f      	b.n	8004d12 <UART_SetConfig+0x212>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a5b      	ldr	r2, [pc, #364]	; (8004d84 <UART_SetConfig+0x284>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d124      	bne.n	8004c66 <UART_SetConfig+0x166>
 8004c1c:	4b57      	ldr	r3, [pc, #348]	; (8004d7c <UART_SetConfig+0x27c>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c28:	d011      	beq.n	8004c4e <UART_SetConfig+0x14e>
 8004c2a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c2e:	d817      	bhi.n	8004c60 <UART_SetConfig+0x160>
 8004c30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c34:	d011      	beq.n	8004c5a <UART_SetConfig+0x15a>
 8004c36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c3a:	d811      	bhi.n	8004c60 <UART_SetConfig+0x160>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <UART_SetConfig+0x148>
 8004c40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c44:	d006      	beq.n	8004c54 <UART_SetConfig+0x154>
 8004c46:	e00b      	b.n	8004c60 <UART_SetConfig+0x160>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e061      	b.n	8004d12 <UART_SetConfig+0x212>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e05e      	b.n	8004d12 <UART_SetConfig+0x212>
 8004c54:	2304      	movs	r3, #4
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e05b      	b.n	8004d12 <UART_SetConfig+0x212>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e058      	b.n	8004d12 <UART_SetConfig+0x212>
 8004c60:	2310      	movs	r3, #16
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e055      	b.n	8004d12 <UART_SetConfig+0x212>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a47      	ldr	r2, [pc, #284]	; (8004d88 <UART_SetConfig+0x288>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d124      	bne.n	8004cba <UART_SetConfig+0x1ba>
 8004c70:	4b42      	ldr	r3, [pc, #264]	; (8004d7c <UART_SetConfig+0x27c>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c7c:	d011      	beq.n	8004ca2 <UART_SetConfig+0x1a2>
 8004c7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c82:	d817      	bhi.n	8004cb4 <UART_SetConfig+0x1b4>
 8004c84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c88:	d011      	beq.n	8004cae <UART_SetConfig+0x1ae>
 8004c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8e:	d811      	bhi.n	8004cb4 <UART_SetConfig+0x1b4>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <UART_SetConfig+0x19c>
 8004c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c98:	d006      	beq.n	8004ca8 <UART_SetConfig+0x1a8>
 8004c9a:	e00b      	b.n	8004cb4 <UART_SetConfig+0x1b4>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e037      	b.n	8004d12 <UART_SetConfig+0x212>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	77fb      	strb	r3, [r7, #31]
 8004ca6:	e034      	b.n	8004d12 <UART_SetConfig+0x212>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	77fb      	strb	r3, [r7, #31]
 8004cac:	e031      	b.n	8004d12 <UART_SetConfig+0x212>
 8004cae:	2308      	movs	r3, #8
 8004cb0:	77fb      	strb	r3, [r7, #31]
 8004cb2:	e02e      	b.n	8004d12 <UART_SetConfig+0x212>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e02b      	b.n	8004d12 <UART_SetConfig+0x212>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a33      	ldr	r2, [pc, #204]	; (8004d8c <UART_SetConfig+0x28c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d124      	bne.n	8004d0e <UART_SetConfig+0x20e>
 8004cc4:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <UART_SetConfig+0x27c>)
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ccc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cd0:	d011      	beq.n	8004cf6 <UART_SetConfig+0x1f6>
 8004cd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cd6:	d817      	bhi.n	8004d08 <UART_SetConfig+0x208>
 8004cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cdc:	d011      	beq.n	8004d02 <UART_SetConfig+0x202>
 8004cde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ce2:	d811      	bhi.n	8004d08 <UART_SetConfig+0x208>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <UART_SetConfig+0x1f0>
 8004ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cec:	d006      	beq.n	8004cfc <UART_SetConfig+0x1fc>
 8004cee:	e00b      	b.n	8004d08 <UART_SetConfig+0x208>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e00d      	b.n	8004d12 <UART_SetConfig+0x212>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e00a      	b.n	8004d12 <UART_SetConfig+0x212>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e007      	b.n	8004d12 <UART_SetConfig+0x212>
 8004d02:	2308      	movs	r3, #8
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	e004      	b.n	8004d12 <UART_SetConfig+0x212>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e001      	b.n	8004d12 <UART_SetConfig+0x212>
 8004d0e:	2310      	movs	r3, #16
 8004d10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1a:	d16b      	bne.n	8004df4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004d1c:	7ffb      	ldrb	r3, [r7, #31]
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d838      	bhi.n	8004d94 <UART_SetConfig+0x294>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0x228>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d5d 	.word	0x08004d5d
 8004d34:	08004d95 	.word	0x08004d95
 8004d38:	08004d63 	.word	0x08004d63
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004d95 	.word	0x08004d95
 8004d44:	08004d95 	.word	0x08004d95
 8004d48:	08004d6b 	.word	0x08004d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d4c:	f7ff fc28 	bl	80045a0 <HAL_RCC_GetPCLK1Freq>
 8004d50:	61b8      	str	r0, [r7, #24]
        break;
 8004d52:	e024      	b.n	8004d9e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d54:	f7ff fc46 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 8004d58:	61b8      	str	r0, [r7, #24]
        break;
 8004d5a:	e020      	b.n	8004d9e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <UART_SetConfig+0x290>)
 8004d5e:	61bb      	str	r3, [r7, #24]
        break;
 8004d60:	e01d      	b.n	8004d9e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d62:	f7ff fba7 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 8004d66:	61b8      	str	r0, [r7, #24]
        break;
 8004d68:	e019      	b.n	8004d9e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6e:	61bb      	str	r3, [r7, #24]
        break;
 8004d70:	e015      	b.n	8004d9e <UART_SetConfig+0x29e>
 8004d72:	bf00      	nop
 8004d74:	efff69f3 	.word	0xefff69f3
 8004d78:	40013800 	.word	0x40013800
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40004400 	.word	0x40004400
 8004d84:	40004800 	.word	0x40004800
 8004d88:	40004c00 	.word	0x40004c00
 8004d8c:	40005000 	.word	0x40005000
 8004d90:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	77bb      	strb	r3, [r7, #30]
        break;
 8004d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d073      	beq.n	8004e8c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	005a      	lsls	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	441a      	add	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b0f      	cmp	r3, #15
 8004dbe:	d916      	bls.n	8004dee <UART_SetConfig+0x2ee>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc6:	d212      	bcs.n	8004dee <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f023 030f 	bic.w	r3, r3, #15
 8004dd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	89fb      	ldrh	r3, [r7, #14]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	89fa      	ldrh	r2, [r7, #14]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	e04e      	b.n	8004e8c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	77bb      	strb	r3, [r7, #30]
 8004df2:	e04b      	b.n	8004e8c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df4:	7ffb      	ldrb	r3, [r7, #31]
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d827      	bhi.n	8004e4a <UART_SetConfig+0x34a>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x300>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e3b 	.word	0x08004e3b
 8004e14:	08004e4b 	.word	0x08004e4b
 8004e18:	08004e4b 	.word	0x08004e4b
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	08004e43 	.word	0x08004e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7ff fbbc 	bl	80045a0 <HAL_RCC_GetPCLK1Freq>
 8004e28:	61b8      	str	r0, [r7, #24]
        break;
 8004e2a:	e013      	b.n	8004e54 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7ff fbda 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 8004e30:	61b8      	str	r0, [r7, #24]
        break;
 8004e32:	e00f      	b.n	8004e54 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <UART_SetConfig+0x3a4>)
 8004e36:	61bb      	str	r3, [r7, #24]
        break;
 8004e38:	e00c      	b.n	8004e54 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7ff fb3b 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 8004e3e:	61b8      	str	r0, [r7, #24]
        break;
 8004e40:	e008      	b.n	8004e54 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e46:	61bb      	str	r3, [r7, #24]
        break;
 8004e48:	e004      	b.n	8004e54 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	77bb      	strb	r3, [r7, #30]
        break;
 8004e52:	bf00      	nop
    }

    if (pclk != 0U)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d018      	beq.n	8004e8c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	085a      	lsrs	r2, r3, #1
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	441a      	add	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b0f      	cmp	r3, #15
 8004e72:	d909      	bls.n	8004e88 <UART_SetConfig+0x388>
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7a:	d205      	bcs.n	8004e88 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	e001      	b.n	8004e8c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e98:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	007a1200 	.word	0x007a1200

08004ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01a      	beq.n	8004fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa6:	d10a      	bne.n	8004fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b098      	sub	sp, #96	; 0x60
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ffc:	f7fc ffc4 	bl	8001f88 <HAL_GetTick>
 8005000:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d12e      	bne.n	800506e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005018:	2200      	movs	r2, #0
 800501a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f88c 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d021      	beq.n	800506e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503e:	653b      	str	r3, [r7, #80]	; 0x50
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005048:	647b      	str	r3, [r7, #68]	; 0x44
 800504a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800504e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e6      	bne.n	800502a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e062      	b.n	8005134 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b04      	cmp	r3, #4
 800507a:	d149      	bne.n	8005110 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800507c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005084:	2200      	movs	r2, #0
 8005086:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f856 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d03c      	beq.n	8005110 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	623b      	str	r3, [r7, #32]
   return(result);
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
 80050b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e6      	bne.n	8005096 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0301 	bic.w	r3, r3, #1
 80050de:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3308      	adds	r3, #8
 80050e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e8:	61fa      	str	r2, [r7, #28]
 80050ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	69b9      	ldr	r1, [r7, #24]
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	617b      	str	r3, [r7, #20]
   return(result);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e5      	bne.n	80050c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e011      	b.n	8005134 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3758      	adds	r7, #88	; 0x58
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514c:	e049      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d045      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005156:	f7fc ff17 	bl	8001f88 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	429a      	cmp	r2, r3
 8005164:	d302      	bcc.n	800516c <UART_WaitOnFlagUntilTimeout+0x30>
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e048      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d031      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b08      	cmp	r3, #8
 800518a:	d110      	bne.n	80051ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2208      	movs	r2, #8
 8005192:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f838 	bl	800520a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2208      	movs	r2, #8
 800519e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e029      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051bc:	d111      	bne.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f81e 	bl	800520a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e00f      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4013      	ands	r3, r2
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d0a6      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800520a:	b480      	push	{r7}
 800520c:	b095      	sub	sp, #84	; 0x54
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005230:	643b      	str	r3, [r7, #64]	; 0x40
 8005232:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005236:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e6      	bne.n	8005212 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3308      	adds	r3, #8
 800524a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	61fb      	str	r3, [r7, #28]
   return(result);
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	64bb      	str	r3, [r7, #72]	; 0x48
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3308      	adds	r3, #8
 8005262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005264:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800526a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e5      	bne.n	8005244 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527c:	2b01      	cmp	r3, #1
 800527e:	d118      	bne.n	80052b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	60bb      	str	r3, [r7, #8]
   return(result);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f023 0310 	bic.w	r3, r3, #16
 8005294:	647b      	str	r3, [r7, #68]	; 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6979      	ldr	r1, [r7, #20]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	613b      	str	r3, [r7, #16]
   return(result);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e6      	bne.n	8005280 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052c6:	bf00      	nop
 80052c8:	3754      	adds	r7, #84	; 0x54
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <memset>:
 80052d2:	4402      	add	r2, r0
 80052d4:	4603      	mov	r3, r0
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d100      	bne.n	80052dc <memset+0xa>
 80052da:	4770      	bx	lr
 80052dc:	f803 1b01 	strb.w	r1, [r3], #1
 80052e0:	e7f9      	b.n	80052d6 <memset+0x4>
	...

080052e4 <__errno>:
 80052e4:	4b01      	ldr	r3, [pc, #4]	; (80052ec <__errno+0x8>)
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000058 	.word	0x20000058

080052f0 <__libc_init_array>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	4d0d      	ldr	r5, [pc, #52]	; (8005328 <__libc_init_array+0x38>)
 80052f4:	4c0d      	ldr	r4, [pc, #52]	; (800532c <__libc_init_array+0x3c>)
 80052f6:	1b64      	subs	r4, r4, r5
 80052f8:	10a4      	asrs	r4, r4, #2
 80052fa:	2600      	movs	r6, #0
 80052fc:	42a6      	cmp	r6, r4
 80052fe:	d109      	bne.n	8005314 <__libc_init_array+0x24>
 8005300:	4d0b      	ldr	r5, [pc, #44]	; (8005330 <__libc_init_array+0x40>)
 8005302:	4c0c      	ldr	r4, [pc, #48]	; (8005334 <__libc_init_array+0x44>)
 8005304:	f000 ff50 	bl	80061a8 <_init>
 8005308:	1b64      	subs	r4, r4, r5
 800530a:	10a4      	asrs	r4, r4, #2
 800530c:	2600      	movs	r6, #0
 800530e:	42a6      	cmp	r6, r4
 8005310:	d105      	bne.n	800531e <__libc_init_array+0x2e>
 8005312:	bd70      	pop	{r4, r5, r6, pc}
 8005314:	f855 3b04 	ldr.w	r3, [r5], #4
 8005318:	4798      	blx	r3
 800531a:	3601      	adds	r6, #1
 800531c:	e7ee      	b.n	80052fc <__libc_init_array+0xc>
 800531e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005322:	4798      	blx	r3
 8005324:	3601      	adds	r6, #1
 8005326:	e7f2      	b.n	800530e <__libc_init_array+0x1e>
 8005328:	08006230 	.word	0x08006230
 800532c:	08006230 	.word	0x08006230
 8005330:	08006230 	.word	0x08006230
 8005334:	08006234 	.word	0x08006234

08005338 <pow>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	ed2d 8b02 	vpush	{d8}
 800533e:	eeb0 8a40 	vmov.f32	s16, s0
 8005342:	eef0 8a60 	vmov.f32	s17, s1
 8005346:	ec55 4b11 	vmov	r4, r5, d1
 800534a:	f000 f871 	bl	8005430 <__ieee754_pow>
 800534e:	4622      	mov	r2, r4
 8005350:	462b      	mov	r3, r5
 8005352:	4620      	mov	r0, r4
 8005354:	4629      	mov	r1, r5
 8005356:	ec57 6b10 	vmov	r6, r7, d0
 800535a:	f7fb fb93 	bl	8000a84 <__aeabi_dcmpun>
 800535e:	2800      	cmp	r0, #0
 8005360:	d13b      	bne.n	80053da <pow+0xa2>
 8005362:	ec51 0b18 	vmov	r0, r1, d8
 8005366:	2200      	movs	r2, #0
 8005368:	2300      	movs	r3, #0
 800536a:	f7fb fb59 	bl	8000a20 <__aeabi_dcmpeq>
 800536e:	b1b8      	cbz	r0, 80053a0 <pow+0x68>
 8005370:	2200      	movs	r2, #0
 8005372:	2300      	movs	r3, #0
 8005374:	4620      	mov	r0, r4
 8005376:	4629      	mov	r1, r5
 8005378:	f7fb fb52 	bl	8000a20 <__aeabi_dcmpeq>
 800537c:	2800      	cmp	r0, #0
 800537e:	d146      	bne.n	800540e <pow+0xd6>
 8005380:	ec45 4b10 	vmov	d0, r4, r5
 8005384:	f000 f848 	bl	8005418 <finite>
 8005388:	b338      	cbz	r0, 80053da <pow+0xa2>
 800538a:	2200      	movs	r2, #0
 800538c:	2300      	movs	r3, #0
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	f7fb fb4f 	bl	8000a34 <__aeabi_dcmplt>
 8005396:	b300      	cbz	r0, 80053da <pow+0xa2>
 8005398:	f7ff ffa4 	bl	80052e4 <__errno>
 800539c:	2322      	movs	r3, #34	; 0x22
 800539e:	e01b      	b.n	80053d8 <pow+0xa0>
 80053a0:	ec47 6b10 	vmov	d0, r6, r7
 80053a4:	f000 f838 	bl	8005418 <finite>
 80053a8:	b9e0      	cbnz	r0, 80053e4 <pow+0xac>
 80053aa:	eeb0 0a48 	vmov.f32	s0, s16
 80053ae:	eef0 0a68 	vmov.f32	s1, s17
 80053b2:	f000 f831 	bl	8005418 <finite>
 80053b6:	b1a8      	cbz	r0, 80053e4 <pow+0xac>
 80053b8:	ec45 4b10 	vmov	d0, r4, r5
 80053bc:	f000 f82c 	bl	8005418 <finite>
 80053c0:	b180      	cbz	r0, 80053e4 <pow+0xac>
 80053c2:	4632      	mov	r2, r6
 80053c4:	463b      	mov	r3, r7
 80053c6:	4630      	mov	r0, r6
 80053c8:	4639      	mov	r1, r7
 80053ca:	f7fb fb5b 	bl	8000a84 <__aeabi_dcmpun>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d0e2      	beq.n	8005398 <pow+0x60>
 80053d2:	f7ff ff87 	bl	80052e4 <__errno>
 80053d6:	2321      	movs	r3, #33	; 0x21
 80053d8:	6003      	str	r3, [r0, #0]
 80053da:	ecbd 8b02 	vpop	{d8}
 80053de:	ec47 6b10 	vmov	d0, r6, r7
 80053e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053e4:	2200      	movs	r2, #0
 80053e6:	2300      	movs	r3, #0
 80053e8:	4630      	mov	r0, r6
 80053ea:	4639      	mov	r1, r7
 80053ec:	f7fb fb18 	bl	8000a20 <__aeabi_dcmpeq>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d0f2      	beq.n	80053da <pow+0xa2>
 80053f4:	eeb0 0a48 	vmov.f32	s0, s16
 80053f8:	eef0 0a68 	vmov.f32	s1, s17
 80053fc:	f000 f80c 	bl	8005418 <finite>
 8005400:	2800      	cmp	r0, #0
 8005402:	d0ea      	beq.n	80053da <pow+0xa2>
 8005404:	ec45 4b10 	vmov	d0, r4, r5
 8005408:	f000 f806 	bl	8005418 <finite>
 800540c:	e7c3      	b.n	8005396 <pow+0x5e>
 800540e:	4f01      	ldr	r7, [pc, #4]	; (8005414 <pow+0xdc>)
 8005410:	2600      	movs	r6, #0
 8005412:	e7e2      	b.n	80053da <pow+0xa2>
 8005414:	3ff00000 	.word	0x3ff00000

08005418 <finite>:
 8005418:	b082      	sub	sp, #8
 800541a:	ed8d 0b00 	vstr	d0, [sp]
 800541e:	9801      	ldr	r0, [sp, #4]
 8005420:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005424:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005428:	0fc0      	lsrs	r0, r0, #31
 800542a:	b002      	add	sp, #8
 800542c:	4770      	bx	lr
	...

08005430 <__ieee754_pow>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	ed2d 8b06 	vpush	{d8-d10}
 8005438:	b089      	sub	sp, #36	; 0x24
 800543a:	ed8d 1b00 	vstr	d1, [sp]
 800543e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005442:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005446:	ea58 0102 	orrs.w	r1, r8, r2
 800544a:	ec57 6b10 	vmov	r6, r7, d0
 800544e:	d115      	bne.n	800547c <__ieee754_pow+0x4c>
 8005450:	19b3      	adds	r3, r6, r6
 8005452:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005456:	4152      	adcs	r2, r2
 8005458:	4299      	cmp	r1, r3
 800545a:	4b89      	ldr	r3, [pc, #548]	; (8005680 <__ieee754_pow+0x250>)
 800545c:	4193      	sbcs	r3, r2
 800545e:	f080 84d1 	bcs.w	8005e04 <__ieee754_pow+0x9d4>
 8005462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005466:	4630      	mov	r0, r6
 8005468:	4639      	mov	r1, r7
 800546a:	f7fa febb 	bl	80001e4 <__adddf3>
 800546e:	ec41 0b10 	vmov	d0, r0, r1
 8005472:	b009      	add	sp, #36	; 0x24
 8005474:	ecbd 8b06 	vpop	{d8-d10}
 8005478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547c:	4b81      	ldr	r3, [pc, #516]	; (8005684 <__ieee754_pow+0x254>)
 800547e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005482:	429c      	cmp	r4, r3
 8005484:	ee10 aa10 	vmov	sl, s0
 8005488:	463d      	mov	r5, r7
 800548a:	dc06      	bgt.n	800549a <__ieee754_pow+0x6a>
 800548c:	d101      	bne.n	8005492 <__ieee754_pow+0x62>
 800548e:	2e00      	cmp	r6, #0
 8005490:	d1e7      	bne.n	8005462 <__ieee754_pow+0x32>
 8005492:	4598      	cmp	r8, r3
 8005494:	dc01      	bgt.n	800549a <__ieee754_pow+0x6a>
 8005496:	d10f      	bne.n	80054b8 <__ieee754_pow+0x88>
 8005498:	b172      	cbz	r2, 80054b8 <__ieee754_pow+0x88>
 800549a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800549e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80054a2:	ea55 050a 	orrs.w	r5, r5, sl
 80054a6:	d1dc      	bne.n	8005462 <__ieee754_pow+0x32>
 80054a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80054ac:	18db      	adds	r3, r3, r3
 80054ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80054b2:	4152      	adcs	r2, r2
 80054b4:	429d      	cmp	r5, r3
 80054b6:	e7d0      	b.n	800545a <__ieee754_pow+0x2a>
 80054b8:	2d00      	cmp	r5, #0
 80054ba:	da3b      	bge.n	8005534 <__ieee754_pow+0x104>
 80054bc:	4b72      	ldr	r3, [pc, #456]	; (8005688 <__ieee754_pow+0x258>)
 80054be:	4598      	cmp	r8, r3
 80054c0:	dc51      	bgt.n	8005566 <__ieee754_pow+0x136>
 80054c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80054c6:	4598      	cmp	r8, r3
 80054c8:	f340 84ab 	ble.w	8005e22 <__ieee754_pow+0x9f2>
 80054cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80054d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054d4:	2b14      	cmp	r3, #20
 80054d6:	dd0f      	ble.n	80054f8 <__ieee754_pow+0xc8>
 80054d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80054dc:	fa22 f103 	lsr.w	r1, r2, r3
 80054e0:	fa01 f303 	lsl.w	r3, r1, r3
 80054e4:	4293      	cmp	r3, r2
 80054e6:	f040 849c 	bne.w	8005e22 <__ieee754_pow+0x9f2>
 80054ea:	f001 0101 	and.w	r1, r1, #1
 80054ee:	f1c1 0302 	rsb	r3, r1, #2
 80054f2:	9304      	str	r3, [sp, #16]
 80054f4:	b182      	cbz	r2, 8005518 <__ieee754_pow+0xe8>
 80054f6:	e05f      	b.n	80055b8 <__ieee754_pow+0x188>
 80054f8:	2a00      	cmp	r2, #0
 80054fa:	d15b      	bne.n	80055b4 <__ieee754_pow+0x184>
 80054fc:	f1c3 0314 	rsb	r3, r3, #20
 8005500:	fa48 f103 	asr.w	r1, r8, r3
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	4543      	cmp	r3, r8
 800550a:	f040 8487 	bne.w	8005e1c <__ieee754_pow+0x9ec>
 800550e:	f001 0101 	and.w	r1, r1, #1
 8005512:	f1c1 0302 	rsb	r3, r1, #2
 8005516:	9304      	str	r3, [sp, #16]
 8005518:	4b5c      	ldr	r3, [pc, #368]	; (800568c <__ieee754_pow+0x25c>)
 800551a:	4598      	cmp	r8, r3
 800551c:	d132      	bne.n	8005584 <__ieee754_pow+0x154>
 800551e:	f1b9 0f00 	cmp.w	r9, #0
 8005522:	f280 8477 	bge.w	8005e14 <__ieee754_pow+0x9e4>
 8005526:	4959      	ldr	r1, [pc, #356]	; (800568c <__ieee754_pow+0x25c>)
 8005528:	4632      	mov	r2, r6
 800552a:	463b      	mov	r3, r7
 800552c:	2000      	movs	r0, #0
 800552e:	f7fb f939 	bl	80007a4 <__aeabi_ddiv>
 8005532:	e79c      	b.n	800546e <__ieee754_pow+0x3e>
 8005534:	2300      	movs	r3, #0
 8005536:	9304      	str	r3, [sp, #16]
 8005538:	2a00      	cmp	r2, #0
 800553a:	d13d      	bne.n	80055b8 <__ieee754_pow+0x188>
 800553c:	4b51      	ldr	r3, [pc, #324]	; (8005684 <__ieee754_pow+0x254>)
 800553e:	4598      	cmp	r8, r3
 8005540:	d1ea      	bne.n	8005518 <__ieee754_pow+0xe8>
 8005542:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005546:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800554a:	ea53 030a 	orrs.w	r3, r3, sl
 800554e:	f000 8459 	beq.w	8005e04 <__ieee754_pow+0x9d4>
 8005552:	4b4f      	ldr	r3, [pc, #316]	; (8005690 <__ieee754_pow+0x260>)
 8005554:	429c      	cmp	r4, r3
 8005556:	dd08      	ble.n	800556a <__ieee754_pow+0x13a>
 8005558:	f1b9 0f00 	cmp.w	r9, #0
 800555c:	f2c0 8456 	blt.w	8005e0c <__ieee754_pow+0x9dc>
 8005560:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005564:	e783      	b.n	800546e <__ieee754_pow+0x3e>
 8005566:	2302      	movs	r3, #2
 8005568:	e7e5      	b.n	8005536 <__ieee754_pow+0x106>
 800556a:	f1b9 0f00 	cmp.w	r9, #0
 800556e:	f04f 0000 	mov.w	r0, #0
 8005572:	f04f 0100 	mov.w	r1, #0
 8005576:	f6bf af7a 	bge.w	800546e <__ieee754_pow+0x3e>
 800557a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800557e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005582:	e774      	b.n	800546e <__ieee754_pow+0x3e>
 8005584:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005588:	d106      	bne.n	8005598 <__ieee754_pow+0x168>
 800558a:	4632      	mov	r2, r6
 800558c:	463b      	mov	r3, r7
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fa ffdd 	bl	8000550 <__aeabi_dmul>
 8005596:	e76a      	b.n	800546e <__ieee754_pow+0x3e>
 8005598:	4b3e      	ldr	r3, [pc, #248]	; (8005694 <__ieee754_pow+0x264>)
 800559a:	4599      	cmp	r9, r3
 800559c:	d10c      	bne.n	80055b8 <__ieee754_pow+0x188>
 800559e:	2d00      	cmp	r5, #0
 80055a0:	db0a      	blt.n	80055b8 <__ieee754_pow+0x188>
 80055a2:	ec47 6b10 	vmov	d0, r6, r7
 80055a6:	b009      	add	sp, #36	; 0x24
 80055a8:	ecbd 8b06 	vpop	{d8-d10}
 80055ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b0:	f000 bd20 	b.w	8005ff4 <__ieee754_sqrt>
 80055b4:	2300      	movs	r3, #0
 80055b6:	9304      	str	r3, [sp, #16]
 80055b8:	ec47 6b10 	vmov	d0, r6, r7
 80055bc:	f000 fc62 	bl	8005e84 <fabs>
 80055c0:	ec51 0b10 	vmov	r0, r1, d0
 80055c4:	f1ba 0f00 	cmp.w	sl, #0
 80055c8:	d129      	bne.n	800561e <__ieee754_pow+0x1ee>
 80055ca:	b124      	cbz	r4, 80055d6 <__ieee754_pow+0x1a6>
 80055cc:	4b2f      	ldr	r3, [pc, #188]	; (800568c <__ieee754_pow+0x25c>)
 80055ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d123      	bne.n	800561e <__ieee754_pow+0x1ee>
 80055d6:	f1b9 0f00 	cmp.w	r9, #0
 80055da:	da05      	bge.n	80055e8 <__ieee754_pow+0x1b8>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	2000      	movs	r0, #0
 80055e2:	492a      	ldr	r1, [pc, #168]	; (800568c <__ieee754_pow+0x25c>)
 80055e4:	f7fb f8de 	bl	80007a4 <__aeabi_ddiv>
 80055e8:	2d00      	cmp	r5, #0
 80055ea:	f6bf af40 	bge.w	800546e <__ieee754_pow+0x3e>
 80055ee:	9b04      	ldr	r3, [sp, #16]
 80055f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80055f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80055f8:	431c      	orrs	r4, r3
 80055fa:	d108      	bne.n	800560e <__ieee754_pow+0x1de>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	f7fa fdec 	bl	80001e0 <__aeabi_dsub>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	e78f      	b.n	800552e <__ieee754_pow+0xfe>
 800560e:	9b04      	ldr	r3, [sp, #16]
 8005610:	2b01      	cmp	r3, #1
 8005612:	f47f af2c 	bne.w	800546e <__ieee754_pow+0x3e>
 8005616:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800561a:	4619      	mov	r1, r3
 800561c:	e727      	b.n	800546e <__ieee754_pow+0x3e>
 800561e:	0feb      	lsrs	r3, r5, #31
 8005620:	3b01      	subs	r3, #1
 8005622:	9306      	str	r3, [sp, #24]
 8005624:	9a06      	ldr	r2, [sp, #24]
 8005626:	9b04      	ldr	r3, [sp, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	d102      	bne.n	8005632 <__ieee754_pow+0x202>
 800562c:	4632      	mov	r2, r6
 800562e:	463b      	mov	r3, r7
 8005630:	e7e6      	b.n	8005600 <__ieee754_pow+0x1d0>
 8005632:	4b19      	ldr	r3, [pc, #100]	; (8005698 <__ieee754_pow+0x268>)
 8005634:	4598      	cmp	r8, r3
 8005636:	f340 80fb 	ble.w	8005830 <__ieee754_pow+0x400>
 800563a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800563e:	4598      	cmp	r8, r3
 8005640:	4b13      	ldr	r3, [pc, #76]	; (8005690 <__ieee754_pow+0x260>)
 8005642:	dd0c      	ble.n	800565e <__ieee754_pow+0x22e>
 8005644:	429c      	cmp	r4, r3
 8005646:	dc0f      	bgt.n	8005668 <__ieee754_pow+0x238>
 8005648:	f1b9 0f00 	cmp.w	r9, #0
 800564c:	da0f      	bge.n	800566e <__ieee754_pow+0x23e>
 800564e:	2000      	movs	r0, #0
 8005650:	b009      	add	sp, #36	; 0x24
 8005652:	ecbd 8b06 	vpop	{d8-d10}
 8005656:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565a:	f000 bcc2 	b.w	8005fe2 <__math_oflow>
 800565e:	429c      	cmp	r4, r3
 8005660:	dbf2      	blt.n	8005648 <__ieee754_pow+0x218>
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <__ieee754_pow+0x25c>)
 8005664:	429c      	cmp	r4, r3
 8005666:	dd19      	ble.n	800569c <__ieee754_pow+0x26c>
 8005668:	f1b9 0f00 	cmp.w	r9, #0
 800566c:	dcef      	bgt.n	800564e <__ieee754_pow+0x21e>
 800566e:	2000      	movs	r0, #0
 8005670:	b009      	add	sp, #36	; 0x24
 8005672:	ecbd 8b06 	vpop	{d8-d10}
 8005676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567a:	f000 bca9 	b.w	8005fd0 <__math_uflow>
 800567e:	bf00      	nop
 8005680:	fff00000 	.word	0xfff00000
 8005684:	7ff00000 	.word	0x7ff00000
 8005688:	433fffff 	.word	0x433fffff
 800568c:	3ff00000 	.word	0x3ff00000
 8005690:	3fefffff 	.word	0x3fefffff
 8005694:	3fe00000 	.word	0x3fe00000
 8005698:	41e00000 	.word	0x41e00000
 800569c:	4b60      	ldr	r3, [pc, #384]	; (8005820 <__ieee754_pow+0x3f0>)
 800569e:	2200      	movs	r2, #0
 80056a0:	f7fa fd9e 	bl	80001e0 <__aeabi_dsub>
 80056a4:	a354      	add	r3, pc, #336	; (adr r3, 80057f8 <__ieee754_pow+0x3c8>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	4604      	mov	r4, r0
 80056ac:	460d      	mov	r5, r1
 80056ae:	f7fa ff4f 	bl	8000550 <__aeabi_dmul>
 80056b2:	a353      	add	r3, pc, #332	; (adr r3, 8005800 <__ieee754_pow+0x3d0>)
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	4606      	mov	r6, r0
 80056ba:	460f      	mov	r7, r1
 80056bc:	4620      	mov	r0, r4
 80056be:	4629      	mov	r1, r5
 80056c0:	f7fa ff46 	bl	8000550 <__aeabi_dmul>
 80056c4:	4b57      	ldr	r3, [pc, #348]	; (8005824 <__ieee754_pow+0x3f4>)
 80056c6:	4682      	mov	sl, r0
 80056c8:	468b      	mov	fp, r1
 80056ca:	2200      	movs	r2, #0
 80056cc:	4620      	mov	r0, r4
 80056ce:	4629      	mov	r1, r5
 80056d0:	f7fa ff3e 	bl	8000550 <__aeabi_dmul>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	a14b      	add	r1, pc, #300	; (adr r1, 8005808 <__ieee754_pow+0x3d8>)
 80056da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056de:	f7fa fd7f 	bl	80001e0 <__aeabi_dsub>
 80056e2:	4622      	mov	r2, r4
 80056e4:	462b      	mov	r3, r5
 80056e6:	f7fa ff33 	bl	8000550 <__aeabi_dmul>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	2000      	movs	r0, #0
 80056f0:	494d      	ldr	r1, [pc, #308]	; (8005828 <__ieee754_pow+0x3f8>)
 80056f2:	f7fa fd75 	bl	80001e0 <__aeabi_dsub>
 80056f6:	4622      	mov	r2, r4
 80056f8:	4680      	mov	r8, r0
 80056fa:	4689      	mov	r9, r1
 80056fc:	462b      	mov	r3, r5
 80056fe:	4620      	mov	r0, r4
 8005700:	4629      	mov	r1, r5
 8005702:	f7fa ff25 	bl	8000550 <__aeabi_dmul>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fa ff1f 	bl	8000550 <__aeabi_dmul>
 8005712:	a33f      	add	r3, pc, #252	; (adr r3, 8005810 <__ieee754_pow+0x3e0>)
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f7fa ff1a 	bl	8000550 <__aeabi_dmul>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4650      	mov	r0, sl
 8005722:	4659      	mov	r1, fp
 8005724:	f7fa fd5c 	bl	80001e0 <__aeabi_dsub>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4680      	mov	r8, r0
 800572e:	4689      	mov	r9, r1
 8005730:	4630      	mov	r0, r6
 8005732:	4639      	mov	r1, r7
 8005734:	f7fa fd56 	bl	80001e4 <__adddf3>
 8005738:	2000      	movs	r0, #0
 800573a:	4632      	mov	r2, r6
 800573c:	463b      	mov	r3, r7
 800573e:	4604      	mov	r4, r0
 8005740:	460d      	mov	r5, r1
 8005742:	f7fa fd4d 	bl	80001e0 <__aeabi_dsub>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4640      	mov	r0, r8
 800574c:	4649      	mov	r1, r9
 800574e:	f7fa fd47 	bl	80001e0 <__aeabi_dsub>
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	9a06      	ldr	r2, [sp, #24]
 8005756:	3b01      	subs	r3, #1
 8005758:	4313      	orrs	r3, r2
 800575a:	4682      	mov	sl, r0
 800575c:	468b      	mov	fp, r1
 800575e:	f040 81e7 	bne.w	8005b30 <__ieee754_pow+0x700>
 8005762:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005818 <__ieee754_pow+0x3e8>
 8005766:	eeb0 8a47 	vmov.f32	s16, s14
 800576a:	eef0 8a67 	vmov.f32	s17, s15
 800576e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005772:	2600      	movs	r6, #0
 8005774:	4632      	mov	r2, r6
 8005776:	463b      	mov	r3, r7
 8005778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800577c:	f7fa fd30 	bl	80001e0 <__aeabi_dsub>
 8005780:	4622      	mov	r2, r4
 8005782:	462b      	mov	r3, r5
 8005784:	f7fa fee4 	bl	8000550 <__aeabi_dmul>
 8005788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800578c:	4680      	mov	r8, r0
 800578e:	4689      	mov	r9, r1
 8005790:	4650      	mov	r0, sl
 8005792:	4659      	mov	r1, fp
 8005794:	f7fa fedc 	bl	8000550 <__aeabi_dmul>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4640      	mov	r0, r8
 800579e:	4649      	mov	r1, r9
 80057a0:	f7fa fd20 	bl	80001e4 <__adddf3>
 80057a4:	4632      	mov	r2, r6
 80057a6:	463b      	mov	r3, r7
 80057a8:	4680      	mov	r8, r0
 80057aa:	4689      	mov	r9, r1
 80057ac:	4620      	mov	r0, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7fa fece 	bl	8000550 <__aeabi_dmul>
 80057b4:	460b      	mov	r3, r1
 80057b6:	4604      	mov	r4, r0
 80057b8:	460d      	mov	r5, r1
 80057ba:	4602      	mov	r2, r0
 80057bc:	4649      	mov	r1, r9
 80057be:	4640      	mov	r0, r8
 80057c0:	f7fa fd10 	bl	80001e4 <__adddf3>
 80057c4:	4b19      	ldr	r3, [pc, #100]	; (800582c <__ieee754_pow+0x3fc>)
 80057c6:	4299      	cmp	r1, r3
 80057c8:	ec45 4b19 	vmov	d9, r4, r5
 80057cc:	4606      	mov	r6, r0
 80057ce:	460f      	mov	r7, r1
 80057d0:	468b      	mov	fp, r1
 80057d2:	f340 82f0 	ble.w	8005db6 <__ieee754_pow+0x986>
 80057d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80057da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80057de:	4303      	orrs	r3, r0
 80057e0:	f000 81e4 	beq.w	8005bac <__ieee754_pow+0x77c>
 80057e4:	ec51 0b18 	vmov	r0, r1, d8
 80057e8:	2200      	movs	r2, #0
 80057ea:	2300      	movs	r3, #0
 80057ec:	f7fb f922 	bl	8000a34 <__aeabi_dcmplt>
 80057f0:	3800      	subs	r0, #0
 80057f2:	bf18      	it	ne
 80057f4:	2001      	movne	r0, #1
 80057f6:	e72b      	b.n	8005650 <__ieee754_pow+0x220>
 80057f8:	60000000 	.word	0x60000000
 80057fc:	3ff71547 	.word	0x3ff71547
 8005800:	f85ddf44 	.word	0xf85ddf44
 8005804:	3e54ae0b 	.word	0x3e54ae0b
 8005808:	55555555 	.word	0x55555555
 800580c:	3fd55555 	.word	0x3fd55555
 8005810:	652b82fe 	.word	0x652b82fe
 8005814:	3ff71547 	.word	0x3ff71547
 8005818:	00000000 	.word	0x00000000
 800581c:	bff00000 	.word	0xbff00000
 8005820:	3ff00000 	.word	0x3ff00000
 8005824:	3fd00000 	.word	0x3fd00000
 8005828:	3fe00000 	.word	0x3fe00000
 800582c:	408fffff 	.word	0x408fffff
 8005830:	4bd5      	ldr	r3, [pc, #852]	; (8005b88 <__ieee754_pow+0x758>)
 8005832:	402b      	ands	r3, r5
 8005834:	2200      	movs	r2, #0
 8005836:	b92b      	cbnz	r3, 8005844 <__ieee754_pow+0x414>
 8005838:	4bd4      	ldr	r3, [pc, #848]	; (8005b8c <__ieee754_pow+0x75c>)
 800583a:	f7fa fe89 	bl	8000550 <__aeabi_dmul>
 800583e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005842:	460c      	mov	r4, r1
 8005844:	1523      	asrs	r3, r4, #20
 8005846:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800584a:	4413      	add	r3, r2
 800584c:	9305      	str	r3, [sp, #20]
 800584e:	4bd0      	ldr	r3, [pc, #832]	; (8005b90 <__ieee754_pow+0x760>)
 8005850:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005854:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005858:	429c      	cmp	r4, r3
 800585a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800585e:	dd08      	ble.n	8005872 <__ieee754_pow+0x442>
 8005860:	4bcc      	ldr	r3, [pc, #816]	; (8005b94 <__ieee754_pow+0x764>)
 8005862:	429c      	cmp	r4, r3
 8005864:	f340 8162 	ble.w	8005b2c <__ieee754_pow+0x6fc>
 8005868:	9b05      	ldr	r3, [sp, #20]
 800586a:	3301      	adds	r3, #1
 800586c:	9305      	str	r3, [sp, #20]
 800586e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005872:	2400      	movs	r4, #0
 8005874:	00e3      	lsls	r3, r4, #3
 8005876:	9307      	str	r3, [sp, #28]
 8005878:	4bc7      	ldr	r3, [pc, #796]	; (8005b98 <__ieee754_pow+0x768>)
 800587a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800587e:	ed93 7b00 	vldr	d7, [r3]
 8005882:	4629      	mov	r1, r5
 8005884:	ec53 2b17 	vmov	r2, r3, d7
 8005888:	eeb0 9a47 	vmov.f32	s18, s14
 800588c:	eef0 9a67 	vmov.f32	s19, s15
 8005890:	4682      	mov	sl, r0
 8005892:	f7fa fca5 	bl	80001e0 <__aeabi_dsub>
 8005896:	4652      	mov	r2, sl
 8005898:	4606      	mov	r6, r0
 800589a:	460f      	mov	r7, r1
 800589c:	462b      	mov	r3, r5
 800589e:	ec51 0b19 	vmov	r0, r1, d9
 80058a2:	f7fa fc9f 	bl	80001e4 <__adddf3>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	2000      	movs	r0, #0
 80058ac:	49bb      	ldr	r1, [pc, #748]	; (8005b9c <__ieee754_pow+0x76c>)
 80058ae:	f7fa ff79 	bl	80007a4 <__aeabi_ddiv>
 80058b2:	ec41 0b1a 	vmov	d10, r0, r1
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4630      	mov	r0, r6
 80058bc:	4639      	mov	r1, r7
 80058be:	f7fa fe47 	bl	8000550 <__aeabi_dmul>
 80058c2:	2300      	movs	r3, #0
 80058c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058ce:	46ab      	mov	fp, r5
 80058d0:	106d      	asrs	r5, r5, #1
 80058d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80058d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80058da:	ec41 0b18 	vmov	d8, r0, r1
 80058de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80058e2:	2200      	movs	r2, #0
 80058e4:	4640      	mov	r0, r8
 80058e6:	4649      	mov	r1, r9
 80058e8:	4614      	mov	r4, r2
 80058ea:	461d      	mov	r5, r3
 80058ec:	f7fa fe30 	bl	8000550 <__aeabi_dmul>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4630      	mov	r0, r6
 80058f6:	4639      	mov	r1, r7
 80058f8:	f7fa fc72 	bl	80001e0 <__aeabi_dsub>
 80058fc:	ec53 2b19 	vmov	r2, r3, d9
 8005900:	4606      	mov	r6, r0
 8005902:	460f      	mov	r7, r1
 8005904:	4620      	mov	r0, r4
 8005906:	4629      	mov	r1, r5
 8005908:	f7fa fc6a 	bl	80001e0 <__aeabi_dsub>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4650      	mov	r0, sl
 8005912:	4659      	mov	r1, fp
 8005914:	f7fa fc64 	bl	80001e0 <__aeabi_dsub>
 8005918:	4642      	mov	r2, r8
 800591a:	464b      	mov	r3, r9
 800591c:	f7fa fe18 	bl	8000550 <__aeabi_dmul>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4630      	mov	r0, r6
 8005926:	4639      	mov	r1, r7
 8005928:	f7fa fc5a 	bl	80001e0 <__aeabi_dsub>
 800592c:	ec53 2b1a 	vmov	r2, r3, d10
 8005930:	f7fa fe0e 	bl	8000550 <__aeabi_dmul>
 8005934:	ec53 2b18 	vmov	r2, r3, d8
 8005938:	ec41 0b19 	vmov	d9, r0, r1
 800593c:	ec51 0b18 	vmov	r0, r1, d8
 8005940:	f7fa fe06 	bl	8000550 <__aeabi_dmul>
 8005944:	a37c      	add	r3, pc, #496	; (adr r3, 8005b38 <__ieee754_pow+0x708>)
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	4604      	mov	r4, r0
 800594c:	460d      	mov	r5, r1
 800594e:	f7fa fdff 	bl	8000550 <__aeabi_dmul>
 8005952:	a37b      	add	r3, pc, #492	; (adr r3, 8005b40 <__ieee754_pow+0x710>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fc44 	bl	80001e4 <__adddf3>
 800595c:	4622      	mov	r2, r4
 800595e:	462b      	mov	r3, r5
 8005960:	f7fa fdf6 	bl	8000550 <__aeabi_dmul>
 8005964:	a378      	add	r3, pc, #480	; (adr r3, 8005b48 <__ieee754_pow+0x718>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f7fa fc3b 	bl	80001e4 <__adddf3>
 800596e:	4622      	mov	r2, r4
 8005970:	462b      	mov	r3, r5
 8005972:	f7fa fded 	bl	8000550 <__aeabi_dmul>
 8005976:	a376      	add	r3, pc, #472	; (adr r3, 8005b50 <__ieee754_pow+0x720>)
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f7fa fc32 	bl	80001e4 <__adddf3>
 8005980:	4622      	mov	r2, r4
 8005982:	462b      	mov	r3, r5
 8005984:	f7fa fde4 	bl	8000550 <__aeabi_dmul>
 8005988:	a373      	add	r3, pc, #460	; (adr r3, 8005b58 <__ieee754_pow+0x728>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f7fa fc29 	bl	80001e4 <__adddf3>
 8005992:	4622      	mov	r2, r4
 8005994:	462b      	mov	r3, r5
 8005996:	f7fa fddb 	bl	8000550 <__aeabi_dmul>
 800599a:	a371      	add	r3, pc, #452	; (adr r3, 8005b60 <__ieee754_pow+0x730>)
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	f7fa fc20 	bl	80001e4 <__adddf3>
 80059a4:	4622      	mov	r2, r4
 80059a6:	4606      	mov	r6, r0
 80059a8:	460f      	mov	r7, r1
 80059aa:	462b      	mov	r3, r5
 80059ac:	4620      	mov	r0, r4
 80059ae:	4629      	mov	r1, r5
 80059b0:	f7fa fdce 	bl	8000550 <__aeabi_dmul>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	f7fa fdc8 	bl	8000550 <__aeabi_dmul>
 80059c0:	4642      	mov	r2, r8
 80059c2:	4604      	mov	r4, r0
 80059c4:	460d      	mov	r5, r1
 80059c6:	464b      	mov	r3, r9
 80059c8:	ec51 0b18 	vmov	r0, r1, d8
 80059cc:	f7fa fc0a 	bl	80001e4 <__adddf3>
 80059d0:	ec53 2b19 	vmov	r2, r3, d9
 80059d4:	f7fa fdbc 	bl	8000550 <__aeabi_dmul>
 80059d8:	4622      	mov	r2, r4
 80059da:	462b      	mov	r3, r5
 80059dc:	f7fa fc02 	bl	80001e4 <__adddf3>
 80059e0:	4642      	mov	r2, r8
 80059e2:	4682      	mov	sl, r0
 80059e4:	468b      	mov	fp, r1
 80059e6:	464b      	mov	r3, r9
 80059e8:	4640      	mov	r0, r8
 80059ea:	4649      	mov	r1, r9
 80059ec:	f7fa fdb0 	bl	8000550 <__aeabi_dmul>
 80059f0:	4b6b      	ldr	r3, [pc, #428]	; (8005ba0 <__ieee754_pow+0x770>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	4606      	mov	r6, r0
 80059f6:	460f      	mov	r7, r1
 80059f8:	f7fa fbf4 	bl	80001e4 <__adddf3>
 80059fc:	4652      	mov	r2, sl
 80059fe:	465b      	mov	r3, fp
 8005a00:	f7fa fbf0 	bl	80001e4 <__adddf3>
 8005a04:	2000      	movs	r0, #0
 8005a06:	4604      	mov	r4, r0
 8005a08:	460d      	mov	r5, r1
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4649      	mov	r1, r9
 8005a12:	f7fa fd9d 	bl	8000550 <__aeabi_dmul>
 8005a16:	4b62      	ldr	r3, [pc, #392]	; (8005ba0 <__ieee754_pow+0x770>)
 8005a18:	4680      	mov	r8, r0
 8005a1a:	4689      	mov	r9, r1
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4620      	mov	r0, r4
 8005a20:	4629      	mov	r1, r5
 8005a22:	f7fa fbdd 	bl	80001e0 <__aeabi_dsub>
 8005a26:	4632      	mov	r2, r6
 8005a28:	463b      	mov	r3, r7
 8005a2a:	f7fa fbd9 	bl	80001e0 <__aeabi_dsub>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4650      	mov	r0, sl
 8005a34:	4659      	mov	r1, fp
 8005a36:	f7fa fbd3 	bl	80001e0 <__aeabi_dsub>
 8005a3a:	ec53 2b18 	vmov	r2, r3, d8
 8005a3e:	f7fa fd87 	bl	8000550 <__aeabi_dmul>
 8005a42:	4622      	mov	r2, r4
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	462b      	mov	r3, r5
 8005a4a:	ec51 0b19 	vmov	r0, r1, d9
 8005a4e:	f7fa fd7f 	bl	8000550 <__aeabi_dmul>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4630      	mov	r0, r6
 8005a58:	4639      	mov	r1, r7
 8005a5a:	f7fa fbc3 	bl	80001e4 <__adddf3>
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460f      	mov	r7, r1
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4640      	mov	r0, r8
 8005a68:	4649      	mov	r1, r9
 8005a6a:	f7fa fbbb 	bl	80001e4 <__adddf3>
 8005a6e:	a33e      	add	r3, pc, #248	; (adr r3, 8005b68 <__ieee754_pow+0x738>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	2000      	movs	r0, #0
 8005a76:	4604      	mov	r4, r0
 8005a78:	460d      	mov	r5, r1
 8005a7a:	f7fa fd69 	bl	8000550 <__aeabi_dmul>
 8005a7e:	4642      	mov	r2, r8
 8005a80:	ec41 0b18 	vmov	d8, r0, r1
 8005a84:	464b      	mov	r3, r9
 8005a86:	4620      	mov	r0, r4
 8005a88:	4629      	mov	r1, r5
 8005a8a:	f7fa fba9 	bl	80001e0 <__aeabi_dsub>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4630      	mov	r0, r6
 8005a94:	4639      	mov	r1, r7
 8005a96:	f7fa fba3 	bl	80001e0 <__aeabi_dsub>
 8005a9a:	a335      	add	r3, pc, #212	; (adr r3, 8005b70 <__ieee754_pow+0x740>)
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f7fa fd56 	bl	8000550 <__aeabi_dmul>
 8005aa4:	a334      	add	r3, pc, #208	; (adr r3, 8005b78 <__ieee754_pow+0x748>)
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460f      	mov	r7, r1
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	f7fa fd4d 	bl	8000550 <__aeabi_dmul>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4630      	mov	r0, r6
 8005abc:	4639      	mov	r1, r7
 8005abe:	f7fa fb91 	bl	80001e4 <__adddf3>
 8005ac2:	9a07      	ldr	r2, [sp, #28]
 8005ac4:	4b37      	ldr	r3, [pc, #220]	; (8005ba4 <__ieee754_pow+0x774>)
 8005ac6:	4413      	add	r3, r2
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa fb8a 	bl	80001e4 <__adddf3>
 8005ad0:	4682      	mov	sl, r0
 8005ad2:	9805      	ldr	r0, [sp, #20]
 8005ad4:	468b      	mov	fp, r1
 8005ad6:	f7fa fcd1 	bl	800047c <__aeabi_i2d>
 8005ada:	9a07      	ldr	r2, [sp, #28]
 8005adc:	4b32      	ldr	r3, [pc, #200]	; (8005ba8 <__ieee754_pow+0x778>)
 8005ade:	4413      	add	r3, r2
 8005ae0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	460f      	mov	r7, r1
 8005ae8:	4652      	mov	r2, sl
 8005aea:	465b      	mov	r3, fp
 8005aec:	ec51 0b18 	vmov	r0, r1, d8
 8005af0:	f7fa fb78 	bl	80001e4 <__adddf3>
 8005af4:	4642      	mov	r2, r8
 8005af6:	464b      	mov	r3, r9
 8005af8:	f7fa fb74 	bl	80001e4 <__adddf3>
 8005afc:	4632      	mov	r2, r6
 8005afe:	463b      	mov	r3, r7
 8005b00:	f7fa fb70 	bl	80001e4 <__adddf3>
 8005b04:	2000      	movs	r0, #0
 8005b06:	4632      	mov	r2, r6
 8005b08:	463b      	mov	r3, r7
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	460d      	mov	r5, r1
 8005b0e:	f7fa fb67 	bl	80001e0 <__aeabi_dsub>
 8005b12:	4642      	mov	r2, r8
 8005b14:	464b      	mov	r3, r9
 8005b16:	f7fa fb63 	bl	80001e0 <__aeabi_dsub>
 8005b1a:	ec53 2b18 	vmov	r2, r3, d8
 8005b1e:	f7fa fb5f 	bl	80001e0 <__aeabi_dsub>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4650      	mov	r0, sl
 8005b28:	4659      	mov	r1, fp
 8005b2a:	e610      	b.n	800574e <__ieee754_pow+0x31e>
 8005b2c:	2401      	movs	r4, #1
 8005b2e:	e6a1      	b.n	8005874 <__ieee754_pow+0x444>
 8005b30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005b80 <__ieee754_pow+0x750>
 8005b34:	e617      	b.n	8005766 <__ieee754_pow+0x336>
 8005b36:	bf00      	nop
 8005b38:	4a454eef 	.word	0x4a454eef
 8005b3c:	3fca7e28 	.word	0x3fca7e28
 8005b40:	93c9db65 	.word	0x93c9db65
 8005b44:	3fcd864a 	.word	0x3fcd864a
 8005b48:	a91d4101 	.word	0xa91d4101
 8005b4c:	3fd17460 	.word	0x3fd17460
 8005b50:	518f264d 	.word	0x518f264d
 8005b54:	3fd55555 	.word	0x3fd55555
 8005b58:	db6fabff 	.word	0xdb6fabff
 8005b5c:	3fdb6db6 	.word	0x3fdb6db6
 8005b60:	33333303 	.word	0x33333303
 8005b64:	3fe33333 	.word	0x3fe33333
 8005b68:	e0000000 	.word	0xe0000000
 8005b6c:	3feec709 	.word	0x3feec709
 8005b70:	dc3a03fd 	.word	0xdc3a03fd
 8005b74:	3feec709 	.word	0x3feec709
 8005b78:	145b01f5 	.word	0x145b01f5
 8005b7c:	be3e2fe0 	.word	0xbe3e2fe0
 8005b80:	00000000 	.word	0x00000000
 8005b84:	3ff00000 	.word	0x3ff00000
 8005b88:	7ff00000 	.word	0x7ff00000
 8005b8c:	43400000 	.word	0x43400000
 8005b90:	0003988e 	.word	0x0003988e
 8005b94:	000bb679 	.word	0x000bb679
 8005b98:	080061f8 	.word	0x080061f8
 8005b9c:	3ff00000 	.word	0x3ff00000
 8005ba0:	40080000 	.word	0x40080000
 8005ba4:	08006218 	.word	0x08006218
 8005ba8:	08006208 	.word	0x08006208
 8005bac:	a3b3      	add	r3, pc, #716	; (adr r3, 8005e7c <__ieee754_pow+0xa4c>)
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	f7fa fb15 	bl	80001e4 <__adddf3>
 8005bba:	4622      	mov	r2, r4
 8005bbc:	ec41 0b1a 	vmov	d10, r0, r1
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	f7fa fb0b 	bl	80001e0 <__aeabi_dsub>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	ec51 0b1a 	vmov	r0, r1, d10
 8005bd2:	f7fa ff4d 	bl	8000a70 <__aeabi_dcmpgt>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f47f ae04 	bne.w	80057e4 <__ieee754_pow+0x3b4>
 8005bdc:	4aa2      	ldr	r2, [pc, #648]	; (8005e68 <__ieee754_pow+0xa38>)
 8005bde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005be2:	4293      	cmp	r3, r2
 8005be4:	f340 8107 	ble.w	8005df6 <__ieee754_pow+0x9c6>
 8005be8:	151b      	asrs	r3, r3, #20
 8005bea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005bee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005bf2:	fa4a fa03 	asr.w	sl, sl, r3
 8005bf6:	44da      	add	sl, fp
 8005bf8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005bfc:	489b      	ldr	r0, [pc, #620]	; (8005e6c <__ieee754_pow+0xa3c>)
 8005bfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005c02:	4108      	asrs	r0, r1
 8005c04:	ea00 030a 	and.w	r3, r0, sl
 8005c08:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005c0c:	f1c1 0114 	rsb	r1, r1, #20
 8005c10:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005c14:	fa4a fa01 	asr.w	sl, sl, r1
 8005c18:	f1bb 0f00 	cmp.w	fp, #0
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	4620      	mov	r0, r4
 8005c22:	4629      	mov	r1, r5
 8005c24:	bfb8      	it	lt
 8005c26:	f1ca 0a00 	rsblt	sl, sl, #0
 8005c2a:	f7fa fad9 	bl	80001e0 <__aeabi_dsub>
 8005c2e:	ec41 0b19 	vmov	d9, r0, r1
 8005c32:	4642      	mov	r2, r8
 8005c34:	464b      	mov	r3, r9
 8005c36:	ec51 0b19 	vmov	r0, r1, d9
 8005c3a:	f7fa fad3 	bl	80001e4 <__adddf3>
 8005c3e:	a37a      	add	r3, pc, #488	; (adr r3, 8005e28 <__ieee754_pow+0x9f8>)
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	2000      	movs	r0, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	460d      	mov	r5, r1
 8005c4a:	f7fa fc81 	bl	8000550 <__aeabi_dmul>
 8005c4e:	ec53 2b19 	vmov	r2, r3, d9
 8005c52:	4606      	mov	r6, r0
 8005c54:	460f      	mov	r7, r1
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa fac1 	bl	80001e0 <__aeabi_dsub>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4640      	mov	r0, r8
 8005c64:	4649      	mov	r1, r9
 8005c66:	f7fa fabb 	bl	80001e0 <__aeabi_dsub>
 8005c6a:	a371      	add	r3, pc, #452	; (adr r3, 8005e30 <__ieee754_pow+0xa00>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f7fa fc6e 	bl	8000550 <__aeabi_dmul>
 8005c74:	a370      	add	r3, pc, #448	; (adr r3, 8005e38 <__ieee754_pow+0xa08>)
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	4680      	mov	r8, r0
 8005c7c:	4689      	mov	r9, r1
 8005c7e:	4620      	mov	r0, r4
 8005c80:	4629      	mov	r1, r5
 8005c82:	f7fa fc65 	bl	8000550 <__aeabi_dmul>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	f7fa faa9 	bl	80001e4 <__adddf3>
 8005c92:	4604      	mov	r4, r0
 8005c94:	460d      	mov	r5, r1
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	f7fa faa1 	bl	80001e4 <__adddf3>
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	4689      	mov	r9, r1
 8005caa:	f7fa fa99 	bl	80001e0 <__aeabi_dsub>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	f7fa fa93 	bl	80001e0 <__aeabi_dsub>
 8005cba:	4642      	mov	r2, r8
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	460f      	mov	r7, r1
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	f7fa fc43 	bl	8000550 <__aeabi_dmul>
 8005cca:	a35d      	add	r3, pc, #372	; (adr r3, 8005e40 <__ieee754_pow+0xa10>)
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	460d      	mov	r5, r1
 8005cd4:	f7fa fc3c 	bl	8000550 <__aeabi_dmul>
 8005cd8:	a35b      	add	r3, pc, #364	; (adr r3, 8005e48 <__ieee754_pow+0xa18>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fa7f 	bl	80001e0 <__aeabi_dsub>
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	f7fa fc33 	bl	8000550 <__aeabi_dmul>
 8005cea:	a359      	add	r3, pc, #356	; (adr r3, 8005e50 <__ieee754_pow+0xa20>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fa78 	bl	80001e4 <__adddf3>
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	462b      	mov	r3, r5
 8005cf8:	f7fa fc2a 	bl	8000550 <__aeabi_dmul>
 8005cfc:	a356      	add	r3, pc, #344	; (adr r3, 8005e58 <__ieee754_pow+0xa28>)
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f7fa fa6d 	bl	80001e0 <__aeabi_dsub>
 8005d06:	4622      	mov	r2, r4
 8005d08:	462b      	mov	r3, r5
 8005d0a:	f7fa fc21 	bl	8000550 <__aeabi_dmul>
 8005d0e:	a354      	add	r3, pc, #336	; (adr r3, 8005e60 <__ieee754_pow+0xa30>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fa66 	bl	80001e4 <__adddf3>
 8005d18:	4622      	mov	r2, r4
 8005d1a:	462b      	mov	r3, r5
 8005d1c:	f7fa fc18 	bl	8000550 <__aeabi_dmul>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4640      	mov	r0, r8
 8005d26:	4649      	mov	r1, r9
 8005d28:	f7fa fa5a 	bl	80001e0 <__aeabi_dsub>
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	460d      	mov	r5, r1
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4640      	mov	r0, r8
 8005d36:	4649      	mov	r1, r9
 8005d38:	f7fa fc0a 	bl	8000550 <__aeabi_dmul>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	ec41 0b19 	vmov	d9, r0, r1
 8005d42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d46:	4620      	mov	r0, r4
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f7fa fa49 	bl	80001e0 <__aeabi_dsub>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	ec51 0b19 	vmov	r0, r1, d9
 8005d56:	f7fa fd25 	bl	80007a4 <__aeabi_ddiv>
 8005d5a:	4632      	mov	r2, r6
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	460d      	mov	r5, r1
 8005d60:	463b      	mov	r3, r7
 8005d62:	4640      	mov	r0, r8
 8005d64:	4649      	mov	r1, r9
 8005d66:	f7fa fbf3 	bl	8000550 <__aeabi_dmul>
 8005d6a:	4632      	mov	r2, r6
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	f7fa fa39 	bl	80001e4 <__adddf3>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa fa31 	bl	80001e0 <__aeabi_dsub>
 8005d7e:	4642      	mov	r2, r8
 8005d80:	464b      	mov	r3, r9
 8005d82:	f7fa fa2d 	bl	80001e0 <__aeabi_dsub>
 8005d86:	460b      	mov	r3, r1
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4939      	ldr	r1, [pc, #228]	; (8005e70 <__ieee754_pow+0xa40>)
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	f7fa fa27 	bl	80001e0 <__aeabi_dsub>
 8005d92:	ec41 0b10 	vmov	d0, r0, r1
 8005d96:	ee10 3a90 	vmov	r3, s1
 8005d9a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da2:	da2b      	bge.n	8005dfc <__ieee754_pow+0x9cc>
 8005da4:	4650      	mov	r0, sl
 8005da6:	f000 f877 	bl	8005e98 <scalbn>
 8005daa:	ec51 0b10 	vmov	r0, r1, d0
 8005dae:	ec53 2b18 	vmov	r2, r3, d8
 8005db2:	f7ff bbee 	b.w	8005592 <__ieee754_pow+0x162>
 8005db6:	4b2f      	ldr	r3, [pc, #188]	; (8005e74 <__ieee754_pow+0xa44>)
 8005db8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005dbc:	429e      	cmp	r6, r3
 8005dbe:	f77f af0d 	ble.w	8005bdc <__ieee754_pow+0x7ac>
 8005dc2:	4b2d      	ldr	r3, [pc, #180]	; (8005e78 <__ieee754_pow+0xa48>)
 8005dc4:	440b      	add	r3, r1
 8005dc6:	4303      	orrs	r3, r0
 8005dc8:	d009      	beq.n	8005dde <__ieee754_pow+0x9ae>
 8005dca:	ec51 0b18 	vmov	r0, r1, d8
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f7fa fe2f 	bl	8000a34 <__aeabi_dcmplt>
 8005dd6:	3800      	subs	r0, #0
 8005dd8:	bf18      	it	ne
 8005dda:	2001      	movne	r0, #1
 8005ddc:	e448      	b.n	8005670 <__ieee754_pow+0x240>
 8005dde:	4622      	mov	r2, r4
 8005de0:	462b      	mov	r3, r5
 8005de2:	f7fa f9fd 	bl	80001e0 <__aeabi_dsub>
 8005de6:	4642      	mov	r2, r8
 8005de8:	464b      	mov	r3, r9
 8005dea:	f7fa fe37 	bl	8000a5c <__aeabi_dcmpge>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f43f aef4 	beq.w	8005bdc <__ieee754_pow+0x7ac>
 8005df4:	e7e9      	b.n	8005dca <__ieee754_pow+0x99a>
 8005df6:	f04f 0a00 	mov.w	sl, #0
 8005dfa:	e71a      	b.n	8005c32 <__ieee754_pow+0x802>
 8005dfc:	ec51 0b10 	vmov	r0, r1, d0
 8005e00:	4619      	mov	r1, r3
 8005e02:	e7d4      	b.n	8005dae <__ieee754_pow+0x97e>
 8005e04:	491a      	ldr	r1, [pc, #104]	; (8005e70 <__ieee754_pow+0xa40>)
 8005e06:	2000      	movs	r0, #0
 8005e08:	f7ff bb31 	b.w	800546e <__ieee754_pow+0x3e>
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	2100      	movs	r1, #0
 8005e10:	f7ff bb2d 	b.w	800546e <__ieee754_pow+0x3e>
 8005e14:	4630      	mov	r0, r6
 8005e16:	4639      	mov	r1, r7
 8005e18:	f7ff bb29 	b.w	800546e <__ieee754_pow+0x3e>
 8005e1c:	9204      	str	r2, [sp, #16]
 8005e1e:	f7ff bb7b 	b.w	8005518 <__ieee754_pow+0xe8>
 8005e22:	2300      	movs	r3, #0
 8005e24:	f7ff bb65 	b.w	80054f2 <__ieee754_pow+0xc2>
 8005e28:	00000000 	.word	0x00000000
 8005e2c:	3fe62e43 	.word	0x3fe62e43
 8005e30:	fefa39ef 	.word	0xfefa39ef
 8005e34:	3fe62e42 	.word	0x3fe62e42
 8005e38:	0ca86c39 	.word	0x0ca86c39
 8005e3c:	be205c61 	.word	0xbe205c61
 8005e40:	72bea4d0 	.word	0x72bea4d0
 8005e44:	3e663769 	.word	0x3e663769
 8005e48:	c5d26bf1 	.word	0xc5d26bf1
 8005e4c:	3ebbbd41 	.word	0x3ebbbd41
 8005e50:	af25de2c 	.word	0xaf25de2c
 8005e54:	3f11566a 	.word	0x3f11566a
 8005e58:	16bebd93 	.word	0x16bebd93
 8005e5c:	3f66c16c 	.word	0x3f66c16c
 8005e60:	5555553e 	.word	0x5555553e
 8005e64:	3fc55555 	.word	0x3fc55555
 8005e68:	3fe00000 	.word	0x3fe00000
 8005e6c:	fff00000 	.word	0xfff00000
 8005e70:	3ff00000 	.word	0x3ff00000
 8005e74:	4090cbff 	.word	0x4090cbff
 8005e78:	3f6f3400 	.word	0x3f6f3400
 8005e7c:	652b82fe 	.word	0x652b82fe
 8005e80:	3c971547 	.word	0x3c971547

08005e84 <fabs>:
 8005e84:	ec51 0b10 	vmov	r0, r1, d0
 8005e88:	ee10 2a10 	vmov	r2, s0
 8005e8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e90:	ec43 2b10 	vmov	d0, r2, r3
 8005e94:	4770      	bx	lr
	...

08005e98 <scalbn>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	ec55 4b10 	vmov	r4, r5, d0
 8005e9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	b999      	cbnz	r1, 8005ed0 <scalbn+0x38>
 8005ea8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005eac:	4323      	orrs	r3, r4
 8005eae:	d03f      	beq.n	8005f30 <scalbn+0x98>
 8005eb0:	4b35      	ldr	r3, [pc, #212]	; (8005f88 <scalbn+0xf0>)
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	ee10 0a10 	vmov	r0, s0
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f7fa fb49 	bl	8000550 <__aeabi_dmul>
 8005ebe:	4b33      	ldr	r3, [pc, #204]	; (8005f8c <scalbn+0xf4>)
 8005ec0:	429e      	cmp	r6, r3
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	460d      	mov	r5, r1
 8005ec6:	da10      	bge.n	8005eea <scalbn+0x52>
 8005ec8:	a327      	add	r3, pc, #156	; (adr r3, 8005f68 <scalbn+0xd0>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	e01f      	b.n	8005f10 <scalbn+0x78>
 8005ed0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005ed4:	4291      	cmp	r1, r2
 8005ed6:	d10c      	bne.n	8005ef2 <scalbn+0x5a>
 8005ed8:	ee10 2a10 	vmov	r2, s0
 8005edc:	4620      	mov	r0, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f7fa f980 	bl	80001e4 <__adddf3>
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	460d      	mov	r5, r1
 8005ee8:	e022      	b.n	8005f30 <scalbn+0x98>
 8005eea:	460b      	mov	r3, r1
 8005eec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005ef0:	3936      	subs	r1, #54	; 0x36
 8005ef2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005ef6:	4296      	cmp	r6, r2
 8005ef8:	dd0d      	ble.n	8005f16 <scalbn+0x7e>
 8005efa:	2d00      	cmp	r5, #0
 8005efc:	a11c      	add	r1, pc, #112	; (adr r1, 8005f70 <scalbn+0xd8>)
 8005efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f02:	da02      	bge.n	8005f0a <scalbn+0x72>
 8005f04:	a11c      	add	r1, pc, #112	; (adr r1, 8005f78 <scalbn+0xe0>)
 8005f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f0a:	a319      	add	r3, pc, #100	; (adr r3, 8005f70 <scalbn+0xd8>)
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	f7fa fb1e 	bl	8000550 <__aeabi_dmul>
 8005f14:	e7e6      	b.n	8005ee4 <scalbn+0x4c>
 8005f16:	1872      	adds	r2, r6, r1
 8005f18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005f1c:	428a      	cmp	r2, r1
 8005f1e:	dcec      	bgt.n	8005efa <scalbn+0x62>
 8005f20:	2a00      	cmp	r2, #0
 8005f22:	dd08      	ble.n	8005f36 <scalbn+0x9e>
 8005f24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005f30:	ec45 4b10 	vmov	d0, r4, r5
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
 8005f36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005f3a:	da08      	bge.n	8005f4e <scalbn+0xb6>
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	a10a      	add	r1, pc, #40	; (adr r1, 8005f68 <scalbn+0xd0>)
 8005f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f44:	dac0      	bge.n	8005ec8 <scalbn+0x30>
 8005f46:	a10e      	add	r1, pc, #56	; (adr r1, 8005f80 <scalbn+0xe8>)
 8005f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f4c:	e7bc      	b.n	8005ec8 <scalbn+0x30>
 8005f4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f52:	3236      	adds	r2, #54	; 0x36
 8005f54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <scalbn+0xf8>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	e7d5      	b.n	8005f10 <scalbn+0x78>
 8005f64:	f3af 8000 	nop.w
 8005f68:	c2f8f359 	.word	0xc2f8f359
 8005f6c:	01a56e1f 	.word	0x01a56e1f
 8005f70:	8800759c 	.word	0x8800759c
 8005f74:	7e37e43c 	.word	0x7e37e43c
 8005f78:	8800759c 	.word	0x8800759c
 8005f7c:	fe37e43c 	.word	0xfe37e43c
 8005f80:	c2f8f359 	.word	0xc2f8f359
 8005f84:	81a56e1f 	.word	0x81a56e1f
 8005f88:	43500000 	.word	0x43500000
 8005f8c:	ffff3cb0 	.word	0xffff3cb0
 8005f90:	3c900000 	.word	0x3c900000

08005f94 <with_errno>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4604      	mov	r4, r0
 8005f98:	460d      	mov	r5, r1
 8005f9a:	4616      	mov	r6, r2
 8005f9c:	f7ff f9a2 	bl	80052e4 <__errno>
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	6006      	str	r6, [r0, #0]
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}

08005fa8 <xflow>:
 8005fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005faa:	4614      	mov	r4, r2
 8005fac:	461d      	mov	r5, r3
 8005fae:	b108      	cbz	r0, 8005fb4 <xflow+0xc>
 8005fb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005fb4:	e9cd 2300 	strd	r2, r3, [sp]
 8005fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	f7fa fac6 	bl	8000550 <__aeabi_dmul>
 8005fc4:	2222      	movs	r2, #34	; 0x22
 8005fc6:	b003      	add	sp, #12
 8005fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fcc:	f7ff bfe2 	b.w	8005f94 <with_errno>

08005fd0 <__math_uflow>:
 8005fd0:	b508      	push	{r3, lr}
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005fd8:	f7ff ffe6 	bl	8005fa8 <xflow>
 8005fdc:	ec41 0b10 	vmov	d0, r0, r1
 8005fe0:	bd08      	pop	{r3, pc}

08005fe2 <__math_oflow>:
 8005fe2:	b508      	push	{r3, lr}
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005fea:	f7ff ffdd 	bl	8005fa8 <xflow>
 8005fee:	ec41 0b10 	vmov	d0, r0, r1
 8005ff2:	bd08      	pop	{r3, pc}

08005ff4 <__ieee754_sqrt>:
 8005ff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff8:	ec55 4b10 	vmov	r4, r5, d0
 8005ffc:	4e67      	ldr	r6, [pc, #412]	; (800619c <__ieee754_sqrt+0x1a8>)
 8005ffe:	43ae      	bics	r6, r5
 8006000:	ee10 0a10 	vmov	r0, s0
 8006004:	ee10 2a10 	vmov	r2, s0
 8006008:	4629      	mov	r1, r5
 800600a:	462b      	mov	r3, r5
 800600c:	d10d      	bne.n	800602a <__ieee754_sqrt+0x36>
 800600e:	f7fa fa9f 	bl	8000550 <__aeabi_dmul>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa f8e3 	bl	80001e4 <__adddf3>
 800601e:	4604      	mov	r4, r0
 8006020:	460d      	mov	r5, r1
 8006022:	ec45 4b10 	vmov	d0, r4, r5
 8006026:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602a:	2d00      	cmp	r5, #0
 800602c:	dc0b      	bgt.n	8006046 <__ieee754_sqrt+0x52>
 800602e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006032:	4326      	orrs	r6, r4
 8006034:	d0f5      	beq.n	8006022 <__ieee754_sqrt+0x2e>
 8006036:	b135      	cbz	r5, 8006046 <__ieee754_sqrt+0x52>
 8006038:	f7fa f8d2 	bl	80001e0 <__aeabi_dsub>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	f7fa fbb0 	bl	80007a4 <__aeabi_ddiv>
 8006044:	e7eb      	b.n	800601e <__ieee754_sqrt+0x2a>
 8006046:	1509      	asrs	r1, r1, #20
 8006048:	f000 808d 	beq.w	8006166 <__ieee754_sqrt+0x172>
 800604c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006050:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006058:	07c9      	lsls	r1, r1, #31
 800605a:	bf5c      	itt	pl
 800605c:	005b      	lslpl	r3, r3, #1
 800605e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006062:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006066:	bf58      	it	pl
 8006068:	0052      	lslpl	r2, r2, #1
 800606a:	2500      	movs	r5, #0
 800606c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006070:	1076      	asrs	r6, r6, #1
 8006072:	0052      	lsls	r2, r2, #1
 8006074:	f04f 0e16 	mov.w	lr, #22
 8006078:	46ac      	mov	ip, r5
 800607a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800607e:	eb0c 0001 	add.w	r0, ip, r1
 8006082:	4298      	cmp	r0, r3
 8006084:	bfde      	ittt	le
 8006086:	1a1b      	suble	r3, r3, r0
 8006088:	eb00 0c01 	addle.w	ip, r0, r1
 800608c:	186d      	addle	r5, r5, r1
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	f1be 0e01 	subs.w	lr, lr, #1
 8006094:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006098:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800609c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80060a0:	d1ed      	bne.n	800607e <__ieee754_sqrt+0x8a>
 80060a2:	4674      	mov	r4, lr
 80060a4:	2720      	movs	r7, #32
 80060a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80060aa:	4563      	cmp	r3, ip
 80060ac:	eb01 000e 	add.w	r0, r1, lr
 80060b0:	dc02      	bgt.n	80060b8 <__ieee754_sqrt+0xc4>
 80060b2:	d113      	bne.n	80060dc <__ieee754_sqrt+0xe8>
 80060b4:	4290      	cmp	r0, r2
 80060b6:	d811      	bhi.n	80060dc <__ieee754_sqrt+0xe8>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	eb00 0e01 	add.w	lr, r0, r1
 80060be:	da57      	bge.n	8006170 <__ieee754_sqrt+0x17c>
 80060c0:	f1be 0f00 	cmp.w	lr, #0
 80060c4:	db54      	blt.n	8006170 <__ieee754_sqrt+0x17c>
 80060c6:	f10c 0801 	add.w	r8, ip, #1
 80060ca:	eba3 030c 	sub.w	r3, r3, ip
 80060ce:	4290      	cmp	r0, r2
 80060d0:	bf88      	it	hi
 80060d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80060d6:	1a12      	subs	r2, r2, r0
 80060d8:	440c      	add	r4, r1
 80060da:	46c4      	mov	ip, r8
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	3f01      	subs	r7, #1
 80060e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80060e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80060e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80060ec:	d1dd      	bne.n	80060aa <__ieee754_sqrt+0xb6>
 80060ee:	4313      	orrs	r3, r2
 80060f0:	d01b      	beq.n	800612a <__ieee754_sqrt+0x136>
 80060f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80061a0 <__ieee754_sqrt+0x1ac>
 80060f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80061a4 <__ieee754_sqrt+0x1b0>
 80060fa:	e9da 0100 	ldrd	r0, r1, [sl]
 80060fe:	e9db 2300 	ldrd	r2, r3, [fp]
 8006102:	f7fa f86d 	bl	80001e0 <__aeabi_dsub>
 8006106:	e9da 8900 	ldrd	r8, r9, [sl]
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4640      	mov	r0, r8
 8006110:	4649      	mov	r1, r9
 8006112:	f7fa fc99 	bl	8000a48 <__aeabi_dcmple>
 8006116:	b140      	cbz	r0, 800612a <__ieee754_sqrt+0x136>
 8006118:	f1b4 3fff 	cmp.w	r4, #4294967295
 800611c:	e9da 0100 	ldrd	r0, r1, [sl]
 8006120:	e9db 2300 	ldrd	r2, r3, [fp]
 8006124:	d126      	bne.n	8006174 <__ieee754_sqrt+0x180>
 8006126:	3501      	adds	r5, #1
 8006128:	463c      	mov	r4, r7
 800612a:	106a      	asrs	r2, r5, #1
 800612c:	0863      	lsrs	r3, r4, #1
 800612e:	07e9      	lsls	r1, r5, #31
 8006130:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006134:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006138:	bf48      	it	mi
 800613a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800613e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006142:	461c      	mov	r4, r3
 8006144:	e76d      	b.n	8006022 <__ieee754_sqrt+0x2e>
 8006146:	0ad3      	lsrs	r3, r2, #11
 8006148:	3815      	subs	r0, #21
 800614a:	0552      	lsls	r2, r2, #21
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0fa      	beq.n	8006146 <__ieee754_sqrt+0x152>
 8006150:	02dc      	lsls	r4, r3, #11
 8006152:	d50a      	bpl.n	800616a <__ieee754_sqrt+0x176>
 8006154:	f1c1 0420 	rsb	r4, r1, #32
 8006158:	fa22 f404 	lsr.w	r4, r2, r4
 800615c:	1e4d      	subs	r5, r1, #1
 800615e:	408a      	lsls	r2, r1
 8006160:	4323      	orrs	r3, r4
 8006162:	1b41      	subs	r1, r0, r5
 8006164:	e772      	b.n	800604c <__ieee754_sqrt+0x58>
 8006166:	4608      	mov	r0, r1
 8006168:	e7f0      	b.n	800614c <__ieee754_sqrt+0x158>
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	3101      	adds	r1, #1
 800616e:	e7ef      	b.n	8006150 <__ieee754_sqrt+0x15c>
 8006170:	46e0      	mov	r8, ip
 8006172:	e7aa      	b.n	80060ca <__ieee754_sqrt+0xd6>
 8006174:	f7fa f836 	bl	80001e4 <__adddf3>
 8006178:	e9da 8900 	ldrd	r8, r9, [sl]
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4640      	mov	r0, r8
 8006182:	4649      	mov	r1, r9
 8006184:	f7fa fc56 	bl	8000a34 <__aeabi_dcmplt>
 8006188:	b120      	cbz	r0, 8006194 <__ieee754_sqrt+0x1a0>
 800618a:	1ca0      	adds	r0, r4, #2
 800618c:	bf08      	it	eq
 800618e:	3501      	addeq	r5, #1
 8006190:	3402      	adds	r4, #2
 8006192:	e7ca      	b.n	800612a <__ieee754_sqrt+0x136>
 8006194:	3401      	adds	r4, #1
 8006196:	f024 0401 	bic.w	r4, r4, #1
 800619a:	e7c6      	b.n	800612a <__ieee754_sqrt+0x136>
 800619c:	7ff00000 	.word	0x7ff00000
 80061a0:	20000060 	.word	0x20000060
 80061a4:	20000068 	.word	0x20000068

080061a8 <_init>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	bf00      	nop
 80061ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ae:	bc08      	pop	{r3}
 80061b0:	469e      	mov	lr, r3
 80061b2:	4770      	bx	lr

080061b4 <_fini>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	bf00      	nop
 80061b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ba:	bc08      	pop	{r3}
 80061bc:	469e      	mov	lr, r3
 80061be:	4770      	bx	lr
