
Pressure_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f8c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003158  08003158  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003158  08003158  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003158  08003158  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000fc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bbc7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000190d  00000000  00000000  0002bc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000074d  00000000  00000000  0002deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f14c  00000000  00000000  0002e5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d7f2  00000000  00000000  0004d749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bd342  00000000  00000000  0005af3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002630  00000000  00000000  00118280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0011a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003108 	.word	0x08003108

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003108 	.word	0x08003108

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fa75 	bl	80006c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f809 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f8d7 	bl	8000394 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 f8a5 	bl	8000334 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001ea:	f000 f863 	bl	80002b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Pressure Sensor Loop Variables*/
  	  /* Slave Address of the BMP280 */
  	  uint16_t BMP_Address = 0xEC; /* BMP 280 Address */
 80001ee:	23ec      	movs	r3, #236	; 0xec
 80001f0:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <main+0x1e>

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b0a6      	sub	sp, #152	; 0x98
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 ff53 	bl	80030ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2258      	movs	r2, #88	; 0x58
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 ff45 	bl	80030ae <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000224:	2302      	movs	r3, #2
 8000226:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022c:	2310      	movs	r3, #16
 800022e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2302      	movs	r3, #2
 8000234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000240:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000244:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fe4c 	bl	8000ef0 <HAL_RCC_OscConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025e:	f000 f8ff 	bl	8000460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000262:	230f      	movs	r3, #15
 8000264:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000266:	2302      	movs	r3, #2
 8000268:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000272:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000278:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800027c:	2102      	movs	r1, #2
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fe8a 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800028a:	f000 f8e9 	bl	8000460 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800028e:	2322      	movs	r3, #34	; 0x22
 8000290:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000296:	2300      	movs	r3, #0
 8000298:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f002 f8b1 	bl	8002404 <HAL_RCCEx_PeriphCLKConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002a8:	f000 f8da 	bl	8000460 <Error_Handler>
  }
}
 80002ac:	bf00      	nop
 80002ae:	3798      	adds	r7, #152	; 0x98
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <MX_I2C1_Init+0x74>)
 80002ba:	4a1c      	ldr	r2, [pc, #112]	; (800032c <MX_I2C1_Init+0x78>)
 80002bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <MX_I2C1_Init+0x74>)
 80002c0:	4a1b      	ldr	r2, [pc, #108]	; (8000330 <MX_I2C1_Init+0x7c>)
 80002c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002c4:	4b18      	ldr	r3, [pc, #96]	; (8000328 <MX_I2C1_Init+0x74>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <MX_I2C1_Init+0x74>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d0:	4b15      	ldr	r3, [pc, #84]	; (8000328 <MX_I2C1_Init+0x74>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_I2C1_Init+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002dc:	4b12      	ldr	r3, [pc, #72]	; (8000328 <MX_I2C1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_I2C1_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_I2C1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002ee:	480e      	ldr	r0, [pc, #56]	; (8000328 <MX_I2C1_Init+0x74>)
 80002f0:	f000 fcd8 	bl	8000ca4 <HAL_I2C_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002fa:	f000 f8b1 	bl	8000460 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002fe:	2100      	movs	r1, #0
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <MX_I2C1_Init+0x74>)
 8000302:	f000 fd5e 	bl	8000dc2 <HAL_I2CEx_ConfigAnalogFilter>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800030c:	f000 f8a8 	bl	8000460 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000310:	2100      	movs	r1, #0
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <MX_I2C1_Init+0x74>)
 8000314:	f000 fda0 	bl	8000e58 <HAL_I2CEx_ConfigDigitalFilter>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800031e:	f000 f89f 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000028 	.word	0x20000028
 800032c:	40005400 	.word	0x40005400
 8000330:	2000090e 	.word	0x2000090e

08000334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <MX_USART2_UART_Init+0x58>)
 800033a:	4a15      	ldr	r2, [pc, #84]	; (8000390 <MX_USART2_UART_Init+0x5c>)
 800033c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <MX_USART2_UART_Init+0x58>)
 8000340:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_USART2_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <MX_USART2_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_USART2_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_USART2_UART_Init+0x58>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_USART2_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_USART2_UART_Init+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_USART2_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_USART2_UART_Init+0x58>)
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_USART2_UART_Init+0x58>)
 8000378:	f002 fa62 	bl	8002840 <HAL_UART_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000382:	f000 f86d 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	2000007c 	.word	0x2000007c
 8000390:	40004400 	.word	0x40004400

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08a      	sub	sp, #40	; 0x28
 8000398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003aa:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a2a      	ldr	r2, [pc, #168]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b28      	ldr	r3, [pc, #160]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003be:	613b      	str	r3, [r7, #16]
 80003c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c2:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a24      	ldr	r2, [pc, #144]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a1e      	ldr	r2, [pc, #120]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a18      	ldr	r2, [pc, #96]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b16      	ldr	r3, [pc, #88]	; (8000458 <MX_GPIO_Init+0xc4>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	2120      	movs	r1, #32
 800040e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000412:	f000 fc2f 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800041c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	4619      	mov	r1, r3
 800042c:	480b      	ldr	r0, [pc, #44]	; (800045c <MX_GPIO_Init+0xc8>)
 800042e:	f000 fa97 	bl	8000960 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000432:	2320      	movs	r3, #32
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	4619      	mov	r1, r3
 8000448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044c:	f000 fa88 	bl	8000960 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000450:	bf00      	nop
 8000452:	3728      	adds	r7, #40	; 0x28
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	48000800 	.word	0x48000800

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	e7fe      	b.n	8000468 <Error_Handler+0x8>
	...

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x44>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_MspInit+0x44>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_MspInit+0x44>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_MspInit+0x44>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_MspInit+0x44>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_MspInit+0x44>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004a2:	2007      	movs	r0, #7
 80004a4:	f000 fa28 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000

080004b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a26      	ldr	r2, [pc, #152]	; (800056c <HAL_I2C_MspInit+0xb8>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d145      	bne.n	8000562 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b26      	ldr	r3, [pc, #152]	; (8000570 <HAL_I2C_MspInit+0xbc>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a25      	ldr	r2, [pc, #148]	; (8000570 <HAL_I2C_MspInit+0xbc>)
 80004dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <HAL_I2C_MspInit+0xbc>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <HAL_I2C_MspInit+0xbc>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <HAL_I2C_MspInit+0xbc>)
 80004f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <HAL_I2C_MspInit+0xbc>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800050c:	2312      	movs	r3, #18
 800050e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000514:	2303      	movs	r3, #3
 8000516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000518:	2304      	movs	r3, #4
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4619      	mov	r1, r3
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f000 fa1b 	bl	8000960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800052a:	2380      	movs	r3, #128	; 0x80
 800052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800052e:	2312      	movs	r3, #18
 8000530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	2303      	movs	r3, #3
 8000538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800053a:	2304      	movs	r3, #4
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <HAL_I2C_MspInit+0xc0>)
 8000546:	f000 fa0b 	bl	8000960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <HAL_I2C_MspInit+0xbc>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <HAL_I2C_MspInit+0xbc>)
 8000550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_I2C_MspInit+0xbc>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000562:	bf00      	nop
 8000564:	3728      	adds	r7, #40	; 0x28
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40005400 	.word	0x40005400
 8000570:	40021000 	.word	0x40021000
 8000574:	48000400 	.word	0x48000400

08000578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <HAL_UART_MspInit+0x7c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d128      	bne.n	80005ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <HAL_UART_MspInit+0x80>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a16      	ldr	r2, [pc, #88]	; (80005f8 <HAL_UART_MspInit+0x80>)
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_UART_MspInit+0x80>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <HAL_UART_MspInit+0x80>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a10      	ldr	r2, [pc, #64]	; (80005f8 <HAL_UART_MspInit+0x80>)
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_UART_MspInit+0x80>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005ca:	230c      	movs	r3, #12
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005da:	2307      	movs	r3, #7
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e8:	f000 f9ba 	bl	8000960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3728      	adds	r7, #40	; 0x28
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40004400 	.word	0x40004400
 80005f8:	40021000 	.word	0x40021000

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000648:	f000 f884 	bl	8000754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <SystemInit+0x20>)
 8000656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <SystemInit+0x20>)
 800065c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000678:	f7ff ffea 	bl	8000650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	; (80006b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <LoopForever+0xe>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	; (80006c0 <LoopForever+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006a2:	f002 fd0d 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006a6:	f7ff fd95 	bl	80001d4 <main>

080006aa <LoopForever>:

LoopForever:
    b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b8:	08003160 	.word	0x08003160
  ldr r2, =_sbss
 80006bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c0:	20000108 	.word	0x20000108

080006c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC1_2_IRQHandler>
	...

080006c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_Init+0x28>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_Init+0x28>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f90d 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f808 	bl	80006f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e4:	f7ff fec2 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x54>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x58>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f917 	bl	8000946 <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d80a      	bhi.n	800073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f8ed 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <HAL_InitTick+0x5c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	e000      	b.n	8000740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_IncTick+0x20>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_IncTick+0x24>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_IncTick+0x24>)
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000008 	.word	0x20000008
 8000778:	20000104 	.word	0x20000104

0800077c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <HAL_GetTick+0x14>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000104 	.word	0x20000104

08000794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	60d3      	str	r3, [r2, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	; (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	; 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f7ff ff8e 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff47 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff5c 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ff8e 	bl	800084c <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff5d 	bl	80007f8 <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffb0 	bl	80008b4 <SysTick_Config>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b480      	push	{r7}
 8000962:	b087      	sub	sp, #28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096e:	e160      	b.n	8000c32 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	2101      	movs	r1, #1
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	4013      	ands	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b00      	cmp	r3, #0
 8000984:	f000 8152 	beq.w	8000c2c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b01      	cmp	r3, #1
 8000992:	d005      	beq.n	80009a0 <HAL_GPIO_Init+0x40>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0303 	and.w	r3, r3, #3
 800099c:	2b02      	cmp	r3, #2
 800099e:	d130      	bne.n	8000a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d6:	2201      	movs	r2, #1
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	091b      	lsrs	r3, r3, #4
 80009ec:	f003 0201 	and.w	r2, r3, #1
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f003 0303 	and.w	r3, r3, #3
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d017      	beq.n	8000a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f003 0303 	and.w	r3, r3, #3
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d123      	bne.n	8000a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	08da      	lsrs	r2, r3, #3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3208      	adds	r2, #8
 8000a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	220f      	movs	r2, #15
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	691a      	ldr	r2, [r3, #16]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	f003 0307 	and.w	r3, r3, #7
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	08da      	lsrs	r2, r3, #3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3208      	adds	r2, #8
 8000a8c:	6939      	ldr	r1, [r7, #16]
 8000a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f003 0203 	and.w	r2, r3, #3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f000 80ac 	beq.w	8000c2c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad4:	4b5e      	ldr	r3, [pc, #376]	; (8000c50 <HAL_GPIO_Init+0x2f0>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a5d      	ldr	r2, [pc, #372]	; (8000c50 <HAL_GPIO_Init+0x2f0>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b5b      	ldr	r3, [pc, #364]	; (8000c50 <HAL_GPIO_Init+0x2f0>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aec:	4a59      	ldr	r2, [pc, #356]	; (8000c54 <HAL_GPIO_Init+0x2f4>)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	3302      	adds	r3, #2
 8000af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	220f      	movs	r2, #15
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b16:	d025      	beq.n	8000b64 <HAL_GPIO_Init+0x204>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4f      	ldr	r2, [pc, #316]	; (8000c58 <HAL_GPIO_Init+0x2f8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d01f      	beq.n	8000b60 <HAL_GPIO_Init+0x200>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4e      	ldr	r2, [pc, #312]	; (8000c5c <HAL_GPIO_Init+0x2fc>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d019      	beq.n	8000b5c <HAL_GPIO_Init+0x1fc>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a4d      	ldr	r2, [pc, #308]	; (8000c60 <HAL_GPIO_Init+0x300>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d013      	beq.n	8000b58 <HAL_GPIO_Init+0x1f8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a4c      	ldr	r2, [pc, #304]	; (8000c64 <HAL_GPIO_Init+0x304>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d00d      	beq.n	8000b54 <HAL_GPIO_Init+0x1f4>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a4b      	ldr	r2, [pc, #300]	; (8000c68 <HAL_GPIO_Init+0x308>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0x1f0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a4a      	ldr	r2, [pc, #296]	; (8000c6c <HAL_GPIO_Init+0x30c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <HAL_GPIO_Init+0x1ec>
 8000b48:	2306      	movs	r3, #6
 8000b4a:	e00c      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	e00a      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b50:	2305      	movs	r3, #5
 8000b52:	e008      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e006      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e004      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b64:	2300      	movs	r3, #0
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	f002 0203 	and.w	r2, r2, #3
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	4093      	lsls	r3, r2
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b76:	4937      	ldr	r1, [pc, #220]	; (8000c54 <HAL_GPIO_Init+0x2f4>)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b84:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ba8:	4a31      	ldr	r2, [pc, #196]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bd2:	4a27      	ldr	r2, [pc, #156]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bfc:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f47f ae97 	bne.w	8000970 <HAL_GPIO_Init+0x10>
  }
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010000 	.word	0x40010000
 8000c58:	48000400 	.word	0x48000400
 8000c5c:	48000800 	.word	0x48000800
 8000c60:	48000c00 	.word	0x48000c00
 8000c64:	48001000 	.word	0x48001000
 8000c68:	48001400 	.word	0x48001400
 8000c6c:	48001800 	.word	0x48001800
 8000c70:	40010400 	.word	0x40010400

08000c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
 8000c80:	4613      	mov	r3, r2
 8000c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c84:	787b      	ldrb	r3, [r7, #1]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c90:	e002      	b.n	8000c98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c92:	887a      	ldrh	r2, [r7, #2]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e081      	b.n	8000dba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d106      	bne.n	8000cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fbf2 	bl	80004b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2224      	movs	r2, #36	; 0x24
 8000cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 0201 	bic.w	r2, r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cf4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d107      	bne.n	8000d1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	e006      	b.n	8000d2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d104      	bne.n	8000d3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6812      	ldr	r2, [r2, #0]
 8000d48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691a      	ldr	r2, [r3, #16]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69d9      	ldr	r1, [r3, #28]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a1a      	ldr	r2, [r3, #32]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2220      	movs	r2, #32
 8000da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b20      	cmp	r3, #32
 8000dd6:	d138      	bne.n	8000e4a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e032      	b.n	8000e4c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2224      	movs	r2, #36	; 0x24
 8000df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0201 	bic.w	r2, r2, #1
 8000e04:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e14:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6819      	ldr	r1, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f042 0201 	orr.w	r2, r2, #1
 8000e34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2220      	movs	r2, #32
 8000e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000e4a:	2302      	movs	r3, #2
  }
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b20      	cmp	r3, #32
 8000e6c:	d139      	bne.n	8000ee2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d101      	bne.n	8000e7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000e78:	2302      	movs	r3, #2
 8000e7a:	e033      	b.n	8000ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2224      	movs	r2, #36	; 0x24
 8000e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0201 	bic.w	r2, r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000eaa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 0201 	orr.w	r2, r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000ee2:	2302      	movs	r3, #2
  }
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000efc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	f001 b83a 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 816f 	beq.w	800120a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f2c:	4bb5      	ldr	r3, [pc, #724]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d00c      	beq.n	8000f52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f38:	4bb2      	ldr	r3, [pc, #712]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 030c 	and.w	r3, r3, #12
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d15c      	bne.n	8000ffe <HAL_RCC_OscConfig+0x10e>
 8000f44:	4baf      	ldr	r3, [pc, #700]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f50:	d155      	bne.n	8000ffe <HAL_RCC_OscConfig+0x10e>
 8000f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f56:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6a:	fab3 f383 	clz	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	095b      	lsrs	r3, r3, #5
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d102      	bne.n	8000f84 <HAL_RCC_OscConfig+0x94>
 8000f7e:	4ba1      	ldr	r3, [pc, #644]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	e015      	b.n	8000fb0 <HAL_RCC_OscConfig+0xc0>
 8000f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f88:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fa0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fac:	4b95      	ldr	r3, [pc, #596]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000fb8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000fbc:	fa92 f2a2 	rbit	r2, r2
 8000fc0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000fc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fc8:	fab2 f282 	clz	r2, r2
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	f042 0220 	orr.w	r2, r2, #32
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	f002 021f 	and.w	r2, r2, #31
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 8111 	beq.w	8001208 <HAL_RCC_OscConfig+0x318>
 8000fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f040 8108 	bne.w	8001208 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f000 bfc6 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001002:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100e:	d106      	bne.n	800101e <HAL_RCC_OscConfig+0x12e>
 8001010:	4b7c      	ldr	r3, [pc, #496]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a7b      	ldr	r2, [pc, #492]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	e036      	b.n	800108c <HAL_RCC_OscConfig+0x19c>
 800101e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001022:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x158>
 800102e:	4b75      	ldr	r3, [pc, #468]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a74      	ldr	r2, [pc, #464]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b72      	ldr	r3, [pc, #456]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a71      	ldr	r2, [pc, #452]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e021      	b.n	800108c <HAL_RCC_OscConfig+0x19c>
 8001048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800104c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0x184>
 800105a:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a69      	ldr	r2, [pc, #420]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a66      	ldr	r2, [pc, #408]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e00b      	b.n	800108c <HAL_RCC_OscConfig+0x19c>
 8001074:	4b63      	ldr	r3, [pc, #396]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a62      	ldr	r2, [pc, #392]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 800107a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b60      	ldr	r3, [pc, #384]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a5f      	ldr	r2, [pc, #380]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800108c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001090:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d059      	beq.n	8001150 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fb6e 	bl	800077c <HAL_GetTick>
 80010a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	e00a      	b.n	80010bc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a6:	f7ff fb69 	bl	800077c <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d902      	bls.n	80010bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	f000 bf67 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 80010bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80010d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d102      	bne.n	80010ee <HAL_RCC_OscConfig+0x1fe>
 80010e8:	4b46      	ldr	r3, [pc, #280]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x22a>
 80010ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001106:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800110a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001122:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001126:	fa92 f2a2 	rbit	r2, r2
 800112a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800112e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001132:	fab2 f282 	clz	r2, r2
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	f042 0220 	orr.w	r2, r2, #32
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	f002 021f 	and.w	r2, r2, #31
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0ab      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1b6>
 800114e:	e05c      	b.n	800120a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fb14 	bl	800077c <HAL_GetTick>
 8001154:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001158:	e00a      	b.n	8001170 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115a:	f7ff fb0f 	bl	800077c <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d902      	bls.n	8001170 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	f000 bf0d 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 8001170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001174:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001184:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d102      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2b2>
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0x2de>
 80011a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011d2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011d6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011da:	fa92 f2a2 	rbit	r2, r2
 80011de:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80011e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011e6:	fab2 f282 	clz	r2, r2
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f042 0220 	orr.w	r2, r2, #32
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f002 021f 	and.w	r2, r2, #31
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ab      	bne.n	800115a <HAL_RCC_OscConfig+0x26a>
 8001202:	e002      	b.n	800120a <HAL_RCC_OscConfig+0x31a>
 8001204:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800120e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 817f 	beq.w	800151e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001220:	4ba7      	ldr	r3, [pc, #668]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00c      	beq.n	8001246 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800122c:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b08      	cmp	r3, #8
 8001236:	d173      	bne.n	8001320 <HAL_RCC_OscConfig+0x430>
 8001238:	4ba1      	ldr	r3, [pc, #644]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001244:	d16c      	bne.n	8001320 <HAL_RCC_OscConfig+0x430>
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001258:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125c:	fab3 f383 	clz	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d102      	bne.n	8001276 <HAL_RCC_OscConfig+0x386>
 8001270:	4b93      	ldr	r3, [pc, #588]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	e013      	b.n	800129e <HAL_RCC_OscConfig+0x3ae>
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800128e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800129a:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	2202      	movs	r2, #2
 80012a0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80012a4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80012a8:	fa92 f2a2 	rbit	r2, r2
 80012ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80012b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012b4:	fab2 f282 	clz	r2, r2
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	f042 0220 	orr.w	r2, r2, #32
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f002 021f 	and.w	r2, r2, #31
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00a      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3f6>
 80012d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d002      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f000 be52 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	21f8      	movs	r1, #248	; 0xf8
 80012fc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001300:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001304:	fa91 f1a1 	rbit	r1, r1
 8001308:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800130c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001310:	fab1 f181 	clz	r1, r1
 8001314:	b2c9      	uxtb	r1, r1
 8001316:	408b      	lsls	r3, r1
 8001318:	4969      	ldr	r1, [pc, #420]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	e0fe      	b.n	800151e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001324:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8088 	beq.w	8001442 <HAL_RCC_OscConfig+0x552>
 8001332:	2301      	movs	r3, #1
 8001334:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001344:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001352:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	461a      	mov	r2, r3
 800135a:	2301      	movs	r3, #1
 800135c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff fa0d 	bl	800077c <HAL_GetTick>
 8001362:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	e00a      	b.n	800137e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fa08 	bl	800077c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d902      	bls.n	800137e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	f000 be06 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001390:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	fab3 f383 	clz	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d102      	bne.n	80013ae <HAL_RCC_OscConfig+0x4be>
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	e013      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e6>
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	2202      	movs	r2, #2
 80013d8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013e0:	fa92 f2a2 	rbit	r2, r2
 80013e4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80013e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013ec:	fab2 f282 	clz	r2, r2
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	f042 0220 	orr.w	r2, r2, #32
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	f002 021f 	and.w	r2, r2, #31
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0af      	beq.n	8001368 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001414:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	21f8      	movs	r1, #248	; 0xf8
 800141e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001426:	fa91 f1a1 	rbit	r1, r1
 800142a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800142e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001432:	fab1 f181 	clz	r1, r1
 8001436:	b2c9      	uxtb	r1, r1
 8001438:	408b      	lsls	r3, r1
 800143a:	4921      	ldr	r1, [pc, #132]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e06d      	b.n	800151e <HAL_RCC_OscConfig+0x62e>
 8001442:	2301      	movs	r3, #1
 8001444:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001454:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001458:	fab3 f383 	clz	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001462:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	461a      	mov	r2, r3
 800146a:	2300      	movs	r3, #0
 800146c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff f985 	bl	800077c <HAL_GetTick>
 8001472:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff f980 	bl	800077c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d902      	bls.n	800148e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	f000 bd7e 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80014a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_RCC_OscConfig+0x5d4>
 80014b8:	4b01      	ldr	r3, [pc, #4]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	e016      	b.n	80014ec <HAL_RCC_OscConfig+0x5fc>
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014e8:	4bbf      	ldr	r3, [pc, #764]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	2202      	movs	r2, #2
 80014ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80014f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014f6:	fa92 f2a2 	rbit	r2, r2
 80014fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80014fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001502:	fab2 f282 	clz	r2, r2
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	f042 0220 	orr.w	r2, r2, #32
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	f002 021f 	and.w	r2, r2, #31
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1ac      	bne.n	8001478 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001522:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8113 	beq.w	800175a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001538:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d07c      	beq.n	800163e <HAL_RCC_OscConfig+0x74e>
 8001544:	2301      	movs	r3, #1
 8001546:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800154e:	fa93 f3a3 	rbit	r3, r3
 8001552:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001556:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	4ba2      	ldr	r3, [pc, #648]	; (80017ec <HAL_RCC_OscConfig+0x8fc>)
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	461a      	mov	r2, r3
 800156a:	2301      	movs	r3, #1
 800156c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff f905 	bl	800077c <HAL_GetTick>
 8001572:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff f900 	bl	800077c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d902      	bls.n	800158e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	f000 bcfe 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001598:	fa93 f2a3 	rbit	r2, r3
 800159c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fa93 f2a3 	rbit	r2, r3
 80015e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	4b7e      	ldr	r3, [pc, #504]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 80015f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015fa:	2102      	movs	r1, #2
 80015fc:	6019      	str	r1, [r3, #0]
 80015fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001602:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f1a3 	rbit	r1, r3
 800160c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001610:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001614:	6019      	str	r1, [r3, #0]
  return result;
 8001616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800161a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fab3 f383 	clz	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d09d      	beq.n	8001578 <HAL_RCC_OscConfig+0x688>
 800163c:	e08d      	b.n	800175a <HAL_RCC_OscConfig+0x86a>
 800163e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001642:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fa93 f2a3 	rbit	r2, r3
 8001658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001660:	601a      	str	r2, [r3, #0]
  return result;
 8001662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001666:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800166a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_RCC_OscConfig+0x8fc>)
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	461a      	mov	r2, r3
 800167c:	2300      	movs	r3, #0
 800167e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff f87c 	bl	800077c <HAL_GetTick>
 8001684:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff f877 	bl	800077c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d902      	bls.n	80016a0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	f000 bc75 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 80016a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016a8:	2202      	movs	r2, #2
 80016aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016cc:	2202      	movs	r2, #2
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fa93 f2a3 	rbit	r2, r3
 80016de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	fa93 f2a3 	rbit	r2, r3
 8001702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001706:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800170a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 800170e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001714:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001718:	2102      	movs	r1, #2
 800171a:	6019      	str	r1, [r3, #0]
 800171c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001720:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fa93 f1a3 	rbit	r1, r3
 800172a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001732:	6019      	str	r1, [r3, #0]
  return result;
 8001734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001738:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d197      	bne.n	800168a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 81a5 	beq.w	8001aba <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_RCC_OscConfig+0x900>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d121      	bne.n	8001800 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_RCC_OscConfig+0x900>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_RCC_OscConfig+0x900>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c8:	f7fe ffd8 	bl	800077c <HAL_GetTick>
 80017cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	e010      	b.n	80017f4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d2:	f7fe ffd3 	bl	800077c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d908      	bls.n	80017f4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e3d1      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	10908120 	.word	0x10908120
 80017f0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b8d      	ldr	r3, [pc, #564]	; (8001a2c <HAL_RCC_OscConfig+0xb3c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0e8      	beq.n	80017d2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001804:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x92e>
 8001810:	4b87      	ldr	r3, [pc, #540]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a86      	ldr	r2, [pc, #536]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	e035      	b.n	800188a <HAL_RCC_OscConfig+0x99a>
 800181e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001822:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x958>
 800182e:	4b80      	ldr	r3, [pc, #512]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a7f      	ldr	r2, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	4b7d      	ldr	r3, [pc, #500]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a7c      	ldr	r2, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	6213      	str	r3, [r2, #32]
 8001846:	e020      	b.n	800188a <HAL_RCC_OscConfig+0x99a>
 8001848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b05      	cmp	r3, #5
 8001856:	d10c      	bne.n	8001872 <HAL_RCC_OscConfig+0x982>
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4a74      	ldr	r2, [pc, #464]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a71      	ldr	r2, [pc, #452]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	e00b      	b.n	800188a <HAL_RCC_OscConfig+0x99a>
 8001872:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6213      	str	r3, [r2, #32]
 800187e:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a6b      	ldr	r2, [pc, #428]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8081 	beq.w	800199e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7fe ff6e 	bl	800077c <HAL_GetTick>
 80018a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7fe ff69 	bl	800077c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e365      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 80018be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018c6:	2202      	movs	r2, #2
 80018c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018ea:	2202      	movs	r2, #2
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001900:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001904:	601a      	str	r2, [r3, #0]
  return result;
 8001906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800190e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d102      	bne.n	800192a <HAL_RCC_OscConfig+0xa3a>
 8001924:	4b42      	ldr	r3, [pc, #264]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	e013      	b.n	8001952 <HAL_RCC_OscConfig+0xa62>
 800192a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fa93 f2a3 	rbit	r2, r3
 8001944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001948:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001956:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800195a:	2102      	movs	r1, #2
 800195c:	6011      	str	r1, [r2, #0]
 800195e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001962:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	fa92 f1a2 	rbit	r1, r2
 800196c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001970:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001974:	6011      	str	r1, [r2, #0]
  return result;
 8001976:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800197a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	fab2 f282 	clz	r2, r2
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f002 021f 	and.w	r2, r2, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f202 	lsl.w	r2, r1, r2
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d084      	beq.n	80018a6 <HAL_RCC_OscConfig+0x9b6>
 800199c:	e083      	b.n	8001aa6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7fe feed 	bl	800077c <HAL_GetTick>
 80019a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a8:	f7fe fee8 	bl	800077c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e2e4      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 80019c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019ec:	2202      	movs	r2, #2
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a06:	601a      	str	r2, [r3, #0]
  return result;
 8001a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	095b      	lsrs	r3, r3, #5
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d106      	bne.n	8001a34 <HAL_RCC_OscConfig+0xb44>
 8001a26:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	e017      	b.n	8001a5c <HAL_RCC_OscConfig+0xb6c>
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	40021000 	.word	0x40021000
 8001a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a38:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fa93 f2a3 	rbit	r2, r3
 8001a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a52:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4bb3      	ldr	r3, [pc, #716]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a60:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a64:	2102      	movs	r1, #2
 8001a66:	6011      	str	r1, [r2, #0]
 8001a68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	fa92 f1a2 	rbit	r1, r2
 8001a76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a7a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a7e:	6011      	str	r1, [r2, #0]
  return result;
 8001a80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a84:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	fab2 f282 	clz	r2, r2
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f002 021f 	and.w	r2, r2, #31
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d180      	bne.n	80019a8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aa6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b9e      	ldr	r3, [pc, #632]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a9d      	ldr	r2, [pc, #628]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 825e 	beq.w	8001f88 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001acc:	4b96      	ldr	r3, [pc, #600]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	f000 821f 	beq.w	8001f18 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ade:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f040 8170 	bne.w	8001dcc <HAL_RCC_OscConfig+0xedc>
 8001aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b10:	601a      	str	r2, [r3, #0]
  return result;
 8001b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b1a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2300      	movs	r3, #0
 8001b30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe fe23 	bl	800077c <HAL_GetTick>
 8001b36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3a:	e009      	b.n	8001b50 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7fe fe1e 	bl	800077c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e21c      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 8001b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b62:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b70:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b74:	601a      	str	r2, [r3, #0]
  return result;
 8001b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_OscConfig+0xcaa>
 8001b94:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	e027      	b.n	8001bea <HAL_RCC_OscConfig+0xcfa>
 8001b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bac:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bf2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf6:	6011      	str	r1, [r2, #0]
 8001bf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bfc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	fa92 f1a2 	rbit	r1, r2
 8001c06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c0a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c0e:	6011      	str	r1, [r2, #0]
  return result;
 8001c10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c14:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	fab2 f282 	clz	r2, r2
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f042 0220 	orr.w	r2, r2, #32
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f002 021f 	and.w	r2, r2, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d182      	bne.n	8001b3c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c36:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	f023 020f 	bic.w	r2, r3, #15
 8001c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	4937      	ldr	r1, [pc, #220]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c50:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6a19      	ldr	r1, [r3, #32]
 8001c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	492d      	ldr	r1, [pc, #180]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c98:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c9c:	601a      	str	r2, [r3, #0]
  return result;
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ca6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2301      	movs	r3, #1
 8001cbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fd5d 	bl	800077c <HAL_GetTick>
 8001cc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc6:	e009      	b.n	8001cdc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7fe fd58 	bl	800077c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e156      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 8001cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d00:	601a      	str	r2, [r3, #0]
  return result;
 8001d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d06:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0xe3c>
 8001d20:	4b01      	ldr	r3, [pc, #4]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e02a      	b.n	8001d7c <HAL_RCC_OscConfig+0xe8c>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d64:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	4b86      	ldr	r3, [pc, #536]	; (8001f94 <HAL_RCC_OscConfig+0x10a4>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d88:	6011      	str	r1, [r2, #0]
 8001d8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d8e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	fa92 f1a2 	rbit	r1, r2
 8001d98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d9c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001da0:	6011      	str	r1, [r2, #0]
  return result;
 8001da2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001da6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	fab2 f282 	clz	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f042 0220 	orr.w	r2, r2, #32
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f002 021f 	and.w	r2, r2, #31
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f43f af7f 	beq.w	8001cc8 <HAL_RCC_OscConfig+0xdd8>
 8001dca:	e0dd      	b.n	8001f88 <HAL_RCC_OscConfig+0x1098>
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001df0:	601a      	str	r2, [r3, #0]
  return result;
 8001df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dfa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2300      	movs	r3, #0
 8001e10:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7fe fcb3 	bl	800077c <HAL_GetTick>
 8001e16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1a:	e009      	b.n	8001e30 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe fcae 	bl	800077c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0ac      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e54:	601a      	str	r2, [r3, #0]
  return result;
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_OscConfig+0xf8a>
 8001e74:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_RCC_OscConfig+0x10a4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	e027      	b.n	8001eca <HAL_RCC_OscConfig+0xfda>
 8001e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f2a3 	rbit	r2, r3
 8001e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_RCC_OscConfig+0x10a4>)
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ece:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ed2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ed6:	6011      	str	r1, [r2, #0]
 8001ed8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001edc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	fa92 f1a2 	rbit	r1, r2
 8001ee6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eea:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001eee:	6011      	str	r1, [r2, #0]
  return result;
 8001ef0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ef4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	fab2 f282 	clz	r2, r2
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f042 0220 	orr.w	r2, r2, #32
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	f002 021f 	and.w	r2, r2, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d182      	bne.n	8001e1c <HAL_RCC_OscConfig+0xf2c>
 8001f16:	e037      	b.n	8001f88 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e02e      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_OscConfig+0x10a4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_RCC_OscConfig+0x10a4>)
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f40:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d117      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f58:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f70:	f003 020f 	and.w	r2, r3, #15
 8001f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b09e      	sub	sp, #120	; 0x78
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e162      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b90      	ldr	r3, [pc, #576]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d910      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b8d      	ldr	r3, [pc, #564]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	498b      	ldr	r1, [pc, #556]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b89      	ldr	r3, [pc, #548]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e14a      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	497f      	ldr	r1, [pc, #508]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 80dc 	beq.w	80021c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d13c      	bne.n	800208e <HAL_RCC_ClockConfig+0xf6>
 8002014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002018:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d102      	bne.n	800203e <HAL_RCC_ClockConfig+0xa6>
 8002038:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	e00f      	b.n	800205e <HAL_RCC_ClockConfig+0xc6>
 800203e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002042:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	667b      	str	r3, [r7, #100]	; 0x64
 800204c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002050:	663b      	str	r3, [r7, #96]	; 0x60
 8002052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002062:	65ba      	str	r2, [r7, #88]	; 0x58
 8002064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002066:	fa92 f2a2 	rbit	r2, r2
 800206a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800206c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800206e:	fab2 f282 	clz	r2, r2
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f042 0220 	orr.w	r2, r2, #32
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	f002 021f 	and.w	r2, r2, #31
 800207e:	2101      	movs	r1, #1
 8002080:	fa01 f202 	lsl.w	r2, r1, r2
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d17b      	bne.n	8002182 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0f3      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d13c      	bne.n	8002110 <HAL_RCC_ClockConfig+0x178>
 8002096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800209a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d102      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x128>
 80020ba:	4b4f      	ldr	r3, [pc, #316]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	e00f      	b.n	80020e0 <HAL_RCC_ClockConfig+0x148>
 80020c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	647b      	str	r3, [r7, #68]	; 0x44
 80020ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d2:	643b      	str	r3, [r7, #64]	; 0x40
 80020d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020dc:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80020e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020e8:	fa92 f2a2 	rbit	r2, r2
 80020ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f0:	fab2 f282 	clz	r2, r2
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f042 0220 	orr.w	r2, r2, #32
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f002 021f 	and.w	r2, r2, #31
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d13a      	bne.n	8002182 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b2      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
 8002110:	2302      	movs	r3, #2
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_RCC_ClockConfig+0x1a0>
 8002132:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	e00d      	b.n	8002154 <HAL_RCC_ClockConfig+0x1bc>
 8002138:	2302      	movs	r3, #2
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	2302      	movs	r3, #2
 8002146:	623b      	str	r3, [r7, #32]
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2202      	movs	r2, #2
 8002156:	61ba      	str	r2, [r7, #24]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	fa92 f2a2 	rbit	r2, r2
 800215e:	617a      	str	r2, [r7, #20]
  return result;
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0220 	orr.w	r2, r2, #32
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e079      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 0203 	bic.w	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	491a      	ldr	r1, [pc, #104]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002194:	f7fe faf2 	bl	800077c <HAL_GetTick>
 8002198:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219c:	f7fe faee 	bl	800077c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e061      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 020c 	and.w	r2, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1eb      	bne.n	800219c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d214      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	4906      	ldr	r1, [pc, #24]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e040      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
 80021f4:	40022000 	.word	0x40022000
 80021f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCC_ClockConfig+0x2e8>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	491a      	ldr	r1, [pc, #104]	; (8002280 <HAL_RCC_ClockConfig+0x2e8>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_RCC_ClockConfig+0x2e8>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4912      	ldr	r1, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x2e8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800223a:	f000 f829 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800223e:	4601      	mov	r1, r0
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_RCC_ClockConfig+0x2e8>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002248:	22f0      	movs	r2, #240	; 0xf0
 800224a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	fa92 f2a2 	rbit	r2, r2
 8002252:	60fa      	str	r2, [r7, #12]
  return result;
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	40d3      	lsrs	r3, r2
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x2ec>)
 8002260:	5cd3      	ldrb	r3, [r2, r3]
 8002262:	fa21 f303 	lsr.w	r3, r1, r3
 8002266:	4a08      	ldr	r2, [pc, #32]	; (8002288 <HAL_RCC_ClockConfig+0x2f0>)
 8002268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_ClockConfig+0x2f4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fa40 	bl	80006f4 <HAL_InitTick>
  
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3778      	adds	r7, #120	; 0x78
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	08003120 	.word	0x08003120
 8002288:	20000000 	.word	0x20000000
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b08b      	sub	sp, #44	; 0x2c
 8002294:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x36>
 80022be:	e03f      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022c2:	623b      	str	r3, [r7, #32]
      break;
 80022c4:	e03f      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	fa92 f2a2 	rbit	r2, r2
 80022d8:	607a      	str	r2, [r7, #4]
  return result;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	40d3      	lsrs	r3, r2
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HAL_RCC_GetSysClockFreq+0xcc>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022ea:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	220f      	movs	r2, #15
 80022f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	fa92 f2a2 	rbit	r2, r2
 80022fc:	60fa      	str	r2, [r7, #12]
  return result;
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	fab2 f282 	clz	r2, r2
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	40d3      	lsrs	r3, r2
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_RCC_GetSysClockFreq+0xd0>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002318:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_RCC_GetSysClockFreq+0xc8>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	e007      	b.n	800233a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <HAL_RCC_GetSysClockFreq+0xc8>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	623b      	str	r3, [r7, #32]
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002342:	623b      	str	r3, [r7, #32]
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	6a3b      	ldr	r3, [r7, #32]
}
 8002348:	4618      	mov	r0, r3
 800234a:	372c      	adds	r7, #44	; 0x2c
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	08003138 	.word	0x08003138
 8002360:	08003148 	.word	0x08003148

08002364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_RCC_GetHCLKFreq+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000000 	.word	0x20000000

0800237c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002382:	f7ff ffef 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 8002386:	4601      	mov	r1, r0
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002390:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002394:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	fa92 f2a2 	rbit	r2, r2
 800239c:	603a      	str	r2, [r7, #0]
  return result;
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	fab2 f282 	clz	r2, r2
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	40d3      	lsrs	r3, r2
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08003130 	.word	0x08003130

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023c6:	f7ff ffcd 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 80023ca:	4601      	mov	r1, r0
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	fa92 f2a2 	rbit	r2, r2
 80023e0:	603a      	str	r2, [r7, #0]
  return result;
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	40d3      	lsrs	r3, r2
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08003130 	.word	0x08003130

08002404 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b092      	sub	sp, #72	; 0x48
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002414:	2300      	movs	r3, #0
 8002416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80d4 	beq.w	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002428:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10e      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	4a4a      	ldr	r2, [pc, #296]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243e:	61d3      	str	r3, [r2, #28]
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244c:	2301      	movs	r3, #1
 800244e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b45      	ldr	r3, [pc, #276]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245e:	4b42      	ldr	r3, [pc, #264]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a41      	ldr	r2, [pc, #260]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7fe f987 	bl	800077c <HAL_GetTick>
 800246e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7fe f983 	bl	800077c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b64      	cmp	r3, #100	; 0x64
 800247e:	d901      	bls.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1d6      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b38      	ldr	r3, [pc, #224]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002498:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800249a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8084 	beq.w	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d07c      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024b0:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	2301      	movs	r3, #1
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	461a      	mov	r2, r3
 80024fe:	2300      	movs	r3, #0
 8002500:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002502:	4a18      	ldr	r2, [pc, #96]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002506:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d04b      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe f933 	bl	800077c <HAL_GetTick>
 8002516:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe f92f 	bl	800077c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e180      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002530:	2302      	movs	r3, #2
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	2302      	movs	r3, #2
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	61fb      	str	r3, [r7, #28]
  return result;
 8002548:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d108      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800255e:	4b01      	ldr	r3, [pc, #4]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	e00d      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000
 800256c:	10908100 	.word	0x10908100
 8002570:	2302      	movs	r3, #2
 8002572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	4b9a      	ldr	r3, [pc, #616]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2202      	movs	r2, #2
 8002582:	613a      	str	r2, [r7, #16]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	fa92 f2a2 	rbit	r2, r2
 800258a:	60fa      	str	r2, [r7, #12]
  return result;
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	fab2 f282 	clz	r2, r2
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f002 021f 	and.w	r2, r2, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0b7      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025aa:	4b8f      	ldr	r3, [pc, #572]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	498c      	ldr	r1, [pc, #560]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c4:	4b88      	ldr	r3, [pc, #544]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a87      	ldr	r2, [pc, #540]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025dc:	4b82      	ldr	r3, [pc, #520]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f023 0203 	bic.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	497f      	ldr	r1, [pc, #508]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025fa:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	4978      	ldr	r1, [pc, #480]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002618:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	4970      	ldr	r1, [pc, #448]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002636:	4b6c      	ldr	r3, [pc, #432]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f023 0210 	bic.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4969      	ldr	r1, [pc, #420]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002654:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	4961      	ldr	r1, [pc, #388]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002672:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f023 0220 	bic.w	r2, r3, #32
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	495a      	ldr	r1, [pc, #360]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002690:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	4952      	ldr	r1, [pc, #328]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026ae:	4b4e      	ldr	r3, [pc, #312]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	494b      	ldr	r1, [pc, #300]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4943      	ldr	r1, [pc, #268]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ea:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	493c      	ldr	r1, [pc, #240]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002708:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	4934      	ldr	r1, [pc, #208]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	492d      	ldr	r1, [pc, #180]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002744:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	4925      	ldr	r1, [pc, #148]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	491e      	ldr	r1, [pc, #120]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	4916      	ldr	r1, [pc, #88]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	490f      	ldr	r1, [pc, #60]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	4907      	ldr	r1, [pc, #28]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80027da:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	e002      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ee:	4913      	ldr	r1, [pc, #76]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	490b      	ldr	r1, [pc, #44]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800280e:	4313      	orrs	r3, r2
 8002810:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282a:	4904      	ldr	r1, [pc, #16]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800282c:	4313      	orrs	r3, r2
 800282e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3748      	adds	r7, #72	; 0x48
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e040      	b.n	80028d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fd fe88 	bl	8000578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f82c 	bl	80028dc <UART_SetConfig>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e022      	b.n	80028d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f9f4 	bl	8002c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fa7b 	bl	8002dc8 <UART_CheckIdleState>
 80028d2:	4603      	mov	r3, r0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b92      	ldr	r3, [pc, #584]	; (8002b50 <UART_SetConfig+0x274>)
 8002908:	4013      	ands	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	6979      	ldr	r1, [r7, #20]
 8002910:	430b      	orrs	r3, r1
 8002912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a80      	ldr	r2, [pc, #512]	; (8002b54 <UART_SetConfig+0x278>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d120      	bne.n	800299a <UART_SetConfig+0xbe>
 8002958:	4b7f      	ldr	r3, [pc, #508]	; (8002b58 <UART_SetConfig+0x27c>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b03      	cmp	r3, #3
 8002962:	d817      	bhi.n	8002994 <UART_SetConfig+0xb8>
 8002964:	a201      	add	r2, pc, #4	; (adr r2, 800296c <UART_SetConfig+0x90>)
 8002966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296a:	bf00      	nop
 800296c:	0800297d 	.word	0x0800297d
 8002970:	08002989 	.word	0x08002989
 8002974:	0800298f 	.word	0x0800298f
 8002978:	08002983 	.word	0x08002983
 800297c:	2301      	movs	r3, #1
 800297e:	77fb      	strb	r3, [r7, #31]
 8002980:	e0b5      	b.n	8002aee <UART_SetConfig+0x212>
 8002982:	2302      	movs	r3, #2
 8002984:	77fb      	strb	r3, [r7, #31]
 8002986:	e0b2      	b.n	8002aee <UART_SetConfig+0x212>
 8002988:	2304      	movs	r3, #4
 800298a:	77fb      	strb	r3, [r7, #31]
 800298c:	e0af      	b.n	8002aee <UART_SetConfig+0x212>
 800298e:	2308      	movs	r3, #8
 8002990:	77fb      	strb	r3, [r7, #31]
 8002992:	e0ac      	b.n	8002aee <UART_SetConfig+0x212>
 8002994:	2310      	movs	r3, #16
 8002996:	77fb      	strb	r3, [r7, #31]
 8002998:	e0a9      	b.n	8002aee <UART_SetConfig+0x212>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6f      	ldr	r2, [pc, #444]	; (8002b5c <UART_SetConfig+0x280>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d124      	bne.n	80029ee <UART_SetConfig+0x112>
 80029a4:	4b6c      	ldr	r3, [pc, #432]	; (8002b58 <UART_SetConfig+0x27c>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029b0:	d011      	beq.n	80029d6 <UART_SetConfig+0xfa>
 80029b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029b6:	d817      	bhi.n	80029e8 <UART_SetConfig+0x10c>
 80029b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029bc:	d011      	beq.n	80029e2 <UART_SetConfig+0x106>
 80029be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029c2:	d811      	bhi.n	80029e8 <UART_SetConfig+0x10c>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <UART_SetConfig+0xf4>
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d006      	beq.n	80029dc <UART_SetConfig+0x100>
 80029ce:	e00b      	b.n	80029e8 <UART_SetConfig+0x10c>
 80029d0:	2300      	movs	r3, #0
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	e08b      	b.n	8002aee <UART_SetConfig+0x212>
 80029d6:	2302      	movs	r3, #2
 80029d8:	77fb      	strb	r3, [r7, #31]
 80029da:	e088      	b.n	8002aee <UART_SetConfig+0x212>
 80029dc:	2304      	movs	r3, #4
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e085      	b.n	8002aee <UART_SetConfig+0x212>
 80029e2:	2308      	movs	r3, #8
 80029e4:	77fb      	strb	r3, [r7, #31]
 80029e6:	e082      	b.n	8002aee <UART_SetConfig+0x212>
 80029e8:	2310      	movs	r3, #16
 80029ea:	77fb      	strb	r3, [r7, #31]
 80029ec:	e07f      	b.n	8002aee <UART_SetConfig+0x212>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a5b      	ldr	r2, [pc, #364]	; (8002b60 <UART_SetConfig+0x284>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d124      	bne.n	8002a42 <UART_SetConfig+0x166>
 80029f8:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <UART_SetConfig+0x27c>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002a00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a04:	d011      	beq.n	8002a2a <UART_SetConfig+0x14e>
 8002a06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a0a:	d817      	bhi.n	8002a3c <UART_SetConfig+0x160>
 8002a0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a10:	d011      	beq.n	8002a36 <UART_SetConfig+0x15a>
 8002a12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a16:	d811      	bhi.n	8002a3c <UART_SetConfig+0x160>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <UART_SetConfig+0x148>
 8002a1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a20:	d006      	beq.n	8002a30 <UART_SetConfig+0x154>
 8002a22:	e00b      	b.n	8002a3c <UART_SetConfig+0x160>
 8002a24:	2300      	movs	r3, #0
 8002a26:	77fb      	strb	r3, [r7, #31]
 8002a28:	e061      	b.n	8002aee <UART_SetConfig+0x212>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	77fb      	strb	r3, [r7, #31]
 8002a2e:	e05e      	b.n	8002aee <UART_SetConfig+0x212>
 8002a30:	2304      	movs	r3, #4
 8002a32:	77fb      	strb	r3, [r7, #31]
 8002a34:	e05b      	b.n	8002aee <UART_SetConfig+0x212>
 8002a36:	2308      	movs	r3, #8
 8002a38:	77fb      	strb	r3, [r7, #31]
 8002a3a:	e058      	b.n	8002aee <UART_SetConfig+0x212>
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	77fb      	strb	r3, [r7, #31]
 8002a40:	e055      	b.n	8002aee <UART_SetConfig+0x212>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a47      	ldr	r2, [pc, #284]	; (8002b64 <UART_SetConfig+0x288>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d124      	bne.n	8002a96 <UART_SetConfig+0x1ba>
 8002a4c:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <UART_SetConfig+0x27c>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a58:	d011      	beq.n	8002a7e <UART_SetConfig+0x1a2>
 8002a5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a5e:	d817      	bhi.n	8002a90 <UART_SetConfig+0x1b4>
 8002a60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a64:	d011      	beq.n	8002a8a <UART_SetConfig+0x1ae>
 8002a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a6a:	d811      	bhi.n	8002a90 <UART_SetConfig+0x1b4>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <UART_SetConfig+0x19c>
 8002a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a74:	d006      	beq.n	8002a84 <UART_SetConfig+0x1a8>
 8002a76:	e00b      	b.n	8002a90 <UART_SetConfig+0x1b4>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	e037      	b.n	8002aee <UART_SetConfig+0x212>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	77fb      	strb	r3, [r7, #31]
 8002a82:	e034      	b.n	8002aee <UART_SetConfig+0x212>
 8002a84:	2304      	movs	r3, #4
 8002a86:	77fb      	strb	r3, [r7, #31]
 8002a88:	e031      	b.n	8002aee <UART_SetConfig+0x212>
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	77fb      	strb	r3, [r7, #31]
 8002a8e:	e02e      	b.n	8002aee <UART_SetConfig+0x212>
 8002a90:	2310      	movs	r3, #16
 8002a92:	77fb      	strb	r3, [r7, #31]
 8002a94:	e02b      	b.n	8002aee <UART_SetConfig+0x212>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a33      	ldr	r2, [pc, #204]	; (8002b68 <UART_SetConfig+0x28c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d124      	bne.n	8002aea <UART_SetConfig+0x20e>
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <UART_SetConfig+0x27c>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002aa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aac:	d011      	beq.n	8002ad2 <UART_SetConfig+0x1f6>
 8002aae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ab2:	d817      	bhi.n	8002ae4 <UART_SetConfig+0x208>
 8002ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab8:	d011      	beq.n	8002ade <UART_SetConfig+0x202>
 8002aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002abe:	d811      	bhi.n	8002ae4 <UART_SetConfig+0x208>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <UART_SetConfig+0x1f0>
 8002ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac8:	d006      	beq.n	8002ad8 <UART_SetConfig+0x1fc>
 8002aca:	e00b      	b.n	8002ae4 <UART_SetConfig+0x208>
 8002acc:	2300      	movs	r3, #0
 8002ace:	77fb      	strb	r3, [r7, #31]
 8002ad0:	e00d      	b.n	8002aee <UART_SetConfig+0x212>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	77fb      	strb	r3, [r7, #31]
 8002ad6:	e00a      	b.n	8002aee <UART_SetConfig+0x212>
 8002ad8:	2304      	movs	r3, #4
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	e007      	b.n	8002aee <UART_SetConfig+0x212>
 8002ade:	2308      	movs	r3, #8
 8002ae0:	77fb      	strb	r3, [r7, #31]
 8002ae2:	e004      	b.n	8002aee <UART_SetConfig+0x212>
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	77fb      	strb	r3, [r7, #31]
 8002ae8:	e001      	b.n	8002aee <UART_SetConfig+0x212>
 8002aea:	2310      	movs	r3, #16
 8002aec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af6:	d16b      	bne.n	8002bd0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002af8:	7ffb      	ldrb	r3, [r7, #31]
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d838      	bhi.n	8002b70 <UART_SetConfig+0x294>
 8002afe:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <UART_SetConfig+0x228>)
 8002b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b04:	08002b29 	.word	0x08002b29
 8002b08:	08002b31 	.word	0x08002b31
 8002b0c:	08002b39 	.word	0x08002b39
 8002b10:	08002b71 	.word	0x08002b71
 8002b14:	08002b3f 	.word	0x08002b3f
 8002b18:	08002b71 	.word	0x08002b71
 8002b1c:	08002b71 	.word	0x08002b71
 8002b20:	08002b71 	.word	0x08002b71
 8002b24:	08002b47 	.word	0x08002b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b28:	f7ff fc28 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 8002b2c:	61b8      	str	r0, [r7, #24]
        break;
 8002b2e:	e024      	b.n	8002b7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b30:	f7ff fc46 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8002b34:	61b8      	str	r0, [r7, #24]
        break;
 8002b36:	e020      	b.n	8002b7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <UART_SetConfig+0x290>)
 8002b3a:	61bb      	str	r3, [r7, #24]
        break;
 8002b3c:	e01d      	b.n	8002b7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b3e:	f7ff fba7 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8002b42:	61b8      	str	r0, [r7, #24]
        break;
 8002b44:	e019      	b.n	8002b7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b4a:	61bb      	str	r3, [r7, #24]
        break;
 8002b4c:	e015      	b.n	8002b7a <UART_SetConfig+0x29e>
 8002b4e:	bf00      	nop
 8002b50:	efff69f3 	.word	0xefff69f3
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40004400 	.word	0x40004400
 8002b60:	40004800 	.word	0x40004800
 8002b64:	40004c00 	.word	0x40004c00
 8002b68:	40005000 	.word	0x40005000
 8002b6c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	77bb      	strb	r3, [r7, #30]
        break;
 8002b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d073      	beq.n	8002c68 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	005a      	lsls	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	441a      	add	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d916      	bls.n	8002bca <UART_SetConfig+0x2ee>
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba2:	d212      	bcs.n	8002bca <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f023 030f 	bic.w	r3, r3, #15
 8002bac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	89fb      	ldrh	r3, [r7, #14]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	89fa      	ldrh	r2, [r7, #14]
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	e04e      	b.n	8002c68 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	77bb      	strb	r3, [r7, #30]
 8002bce:	e04b      	b.n	8002c68 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bd0:	7ffb      	ldrb	r3, [r7, #31]
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d827      	bhi.n	8002c26 <UART_SetConfig+0x34a>
 8002bd6:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <UART_SetConfig+0x300>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002c01 	.word	0x08002c01
 8002be0:	08002c09 	.word	0x08002c09
 8002be4:	08002c11 	.word	0x08002c11
 8002be8:	08002c27 	.word	0x08002c27
 8002bec:	08002c17 	.word	0x08002c17
 8002bf0:	08002c27 	.word	0x08002c27
 8002bf4:	08002c27 	.word	0x08002c27
 8002bf8:	08002c27 	.word	0x08002c27
 8002bfc:	08002c1f 	.word	0x08002c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c00:	f7ff fbbc 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 8002c04:	61b8      	str	r0, [r7, #24]
        break;
 8002c06:	e013      	b.n	8002c30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c08:	f7ff fbda 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8002c0c:	61b8      	str	r0, [r7, #24]
        break;
 8002c0e:	e00f      	b.n	8002c30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <UART_SetConfig+0x3a4>)
 8002c12:	61bb      	str	r3, [r7, #24]
        break;
 8002c14:	e00c      	b.n	8002c30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c16:	f7ff fb3b 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8002c1a:	61b8      	str	r0, [r7, #24]
        break;
 8002c1c:	e008      	b.n	8002c30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c22:	61bb      	str	r3, [r7, #24]
        break;
 8002c24:	e004      	b.n	8002c30 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c2e:	bf00      	nop
    }

    if (pclk != 0U)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d018      	beq.n	8002c68 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	085a      	lsrs	r2, r3, #1
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	441a      	add	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d909      	bls.n	8002c64 <UART_SetConfig+0x388>
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c56:	d205      	bcs.n	8002c64 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	e001      	b.n	8002c68 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c74:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	007a1200 	.word	0x007a1200

08002c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01a      	beq.n	8002d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d82:	d10a      	bne.n	8002d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b098      	sub	sp, #96	; 0x60
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dd8:	f7fd fcd0 	bl	800077c <HAL_GetTick>
 8002ddc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d12e      	bne.n	8002e4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df4:	2200      	movs	r2, #0
 8002df6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f88c 	bl	8002f18 <UART_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d021      	beq.n	8002e4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e24:	647b      	str	r3, [r7, #68]	; 0x44
 8002e26:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e6      	bne.n	8002e06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e062      	b.n	8002f10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d149      	bne.n	8002eec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e60:	2200      	movs	r2, #0
 8002e62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f856 	bl	8002f18 <UART_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d03c      	beq.n	8002eec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	623b      	str	r3, [r7, #32]
   return(result);
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
 8002e92:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e6      	bne.n	8002e72 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ec4:	61fa      	str	r2, [r7, #28]
 8002ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	69b9      	ldr	r1, [r7, #24]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e5      	bne.n	8002ea4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e011      	b.n	8002f10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3758      	adds	r7, #88	; 0x58
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f28:	e049      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d045      	beq.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fd fc23 	bl	800077c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d302      	bcc.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e048      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d031      	beq.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d110      	bne.n	8002f8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f838 	bl	8002fe6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e029      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f98:	d111      	bne.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f81e 	bl	8002fe6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e00f      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d0a6      	beq.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b095      	sub	sp, #84	; 0x54
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300c:	643b      	str	r3, [r7, #64]	; 0x40
 800300e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003010:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003012:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003014:	e841 2300 	strex	r3, r2, [r1]
 8003018:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e6      	bne.n	8002fee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3308      	adds	r3, #8
 8003026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	e853 3f00 	ldrex	r3, [r3]
 800302e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3308      	adds	r3, #8
 800303e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003040:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e5      	bne.n	8003020 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003058:	2b01      	cmp	r3, #1
 800305a:	d118      	bne.n	800308e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	60bb      	str	r3, [r7, #8]
   return(result);
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f023 0310 	bic.w	r3, r3, #16
 8003070:	647b      	str	r3, [r7, #68]	; 0x44
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307e:	6979      	ldr	r1, [r7, #20]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	e841 2300 	strex	r3, r2, [r1]
 8003086:	613b      	str	r3, [r7, #16]
   return(result);
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e6      	bne.n	800305c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80030a2:	bf00      	nop
 80030a4:	3754      	adds	r7, #84	; 0x54
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <memset>:
 80030ae:	4402      	add	r2, r0
 80030b0:	4603      	mov	r3, r0
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d100      	bne.n	80030b8 <memset+0xa>
 80030b6:	4770      	bx	lr
 80030b8:	f803 1b01 	strb.w	r1, [r3], #1
 80030bc:	e7f9      	b.n	80030b2 <memset+0x4>
	...

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4d0d      	ldr	r5, [pc, #52]	; (80030f8 <__libc_init_array+0x38>)
 80030c4:	4c0d      	ldr	r4, [pc, #52]	; (80030fc <__libc_init_array+0x3c>)
 80030c6:	1b64      	subs	r4, r4, r5
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	2600      	movs	r6, #0
 80030cc:	42a6      	cmp	r6, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	4d0b      	ldr	r5, [pc, #44]	; (8003100 <__libc_init_array+0x40>)
 80030d2:	4c0c      	ldr	r4, [pc, #48]	; (8003104 <__libc_init_array+0x44>)
 80030d4:	f000 f818 	bl	8003108 <_init>
 80030d8:	1b64      	subs	r4, r4, r5
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	2600      	movs	r6, #0
 80030de:	42a6      	cmp	r6, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e8:	4798      	blx	r3
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f2:	4798      	blx	r3
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003158 	.word	0x08003158
 80030fc:	08003158 	.word	0x08003158
 8003100:	08003158 	.word	0x08003158
 8003104:	0800315c 	.word	0x0800315c

08003108 <_init>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr

08003114 <_fini>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr
