
Pressure_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e88  08003e88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e88  08003e88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e88  08003e88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000fc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bf27  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000192c  00000000  00000000  0002bfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000074e  00000000  00000000  0002e230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f14c  00000000  00000000  0002e97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d941  00000000  00000000  0004daca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bd575  00000000  00000000  0005b40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002630  00000000  00000000  00118980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0011afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e38 	.word	0x08003e38

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003e38 	.word	0x08003e38

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b0b8      	sub	sp, #224	; 0xe0
 80001d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fc01 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f995 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 fa63 	bl	80006ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 fa31 	bl	800064c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001ea:	f000 f9ef 	bl	80005cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Pressure Sensor Loop Variables*/
  	  /* Slave Address of the BMP280 */
  	  uint16_t BMP_Address = 0xEC; /* BMP 280 Address */
 80001ee:	23ec      	movs	r3, #236	; 0xec
 80001f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

  	  /* Register Addresses */
  	  uint8_t regAddress_CTRL_MEAS = 0xF4; /* Oversampling control */
 80001f4:	23f4      	movs	r3, #244	; 0xf4
 80001f6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
  	  uint8_t regAddress_CONFIG = 0xF5; /* Data rate/filter and interface */
 80001fa:	23f5      	movs	r3, #245	; 0xf5
 80001fc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
  	  uint8_t regAddress_PRESS_MSB = 0xF7; /* Pressure Most Significant Bits */
 8000200:	23f7      	movs	r3, #247	; 0xf7
 8000202:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
  	  uint8_t regAddress_PRESS_LSB = 0xF8; /* Pressure Least Significant Bits */
 8000206:	23f8      	movs	r3, #248	; 0xf8
 8000208:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
  	  uint8_t regAddress_PRESS_XLSB = 0xF9; /* Pressure Extreme Least Significant Bits */
 800020c:	23f9      	movs	r3, #249	; 0xf9
 800020e:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
  	  uint8_t regAddress_TEMP_MSB = 0xFA; /* Temperature Most Significant Bits */
 8000212:	23fa      	movs	r3, #250	; 0xfa
 8000214:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
  	  uint8_t regAddress_TEMP_LSB = 0xFB; /* Temperature Least Significant Bits */
 8000218:	23fb      	movs	r3, #251	; 0xfb
 800021a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  	  uint8_t regAddress_TEMP_XLSB = 0xFC; /* Temperature Extreme Least Significant Bits */
 800021e:	23fc      	movs	r3, #252	; 0xfc
 8000220:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6

  	  /* Trimming Register Addresses */
  	  uint8_t regAddress_Dig_T1 = 0x88;
 8000224:	2388      	movs	r3, #136	; 0x88
 8000226:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
  	  uint8_t regAddress_Dig_T2 = 0x8A;
 800022a:	238a      	movs	r3, #138	; 0x8a
 800022c:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
  	  uint8_t regAddress_Dig_T3 = 0x8C;
 8000230:	238c      	movs	r3, #140	; 0x8c
 8000232:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	  uint8_t regAddress_Dig_P1 = 0x8E;
 8000236:	238e      	movs	r3, #142	; 0x8e
 8000238:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	  uint8_t regAddress_Dig_P2 = 0x90;
 800023c:	2390      	movs	r3, #144	; 0x90
 800023e:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
	  uint8_t regAddress_Dig_P3 = 0x92;
 8000242:	2392      	movs	r3, #146	; 0x92
 8000244:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
	  uint8_t regAddress_Dig_P4 = 0x94;
 8000248:	2394      	movs	r3, #148	; 0x94
 800024a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	  uint8_t regAddress_Dig_P5 = 0x96;
 800024e:	2396      	movs	r3, #150	; 0x96
 8000250:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
	  uint8_t regAddress_Dig_P6 = 0x98;
 8000254:	2398      	movs	r3, #152	; 0x98
 8000256:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
	  uint8_t regAddress_Dig_P7 = 0x9A;
 800025a:	239a      	movs	r3, #154	; 0x9a
 800025c:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
	  uint8_t regAddress_Dig_P8 = 0x9C;
 8000260:	239c      	movs	r3, #156	; 0x9c
 8000262:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	  uint8_t regAddress_Dig_P9 = 0x9E;
 8000266:	239e      	movs	r3, #158	; 0x9e
 8000268:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba


  	  /* Register Values */
  	  uint8_t regCTRL_MEAS = 0x27; /* Oversampling x1 for Pressure and Temp, Normal Mode 00100111*/
 800026c:	2327      	movs	r3, #39	; 0x27
 800026e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  	  uint8_t regCONFIG = 0x00; /* Not sure about this. 0.5ms rate, filter off, SPI off */
 8000272:	2300      	movs	r3, #0
 8000274:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
  	  float tempVal; /* Decimal Temperature */
  	  char pressure[64]; /* String Pressure Output */
  	  char temperature[64]; /* String Temperature Output */

  	  /* Configuration of the BMP280 */
  	  HAL_I2C_Mem_Write(&hi2c1, BMP_Address, regAddress_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &regCTRL_MEAS, 1, 2000u); /* Writing to the ctrl measurement register */
 8000278:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800027c:	b29a      	uxth	r2, r3
 800027e:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 8000282:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000286:	9302      	str	r3, [sp, #8]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	f107 039f 	add.w	r3, r7, #159	; 0x9f
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2301      	movs	r3, #1
 8000294:	489c      	ldr	r0, [pc, #624]	; (8000508 <main+0x334>)
 8000296:	f000 ff45 	bl	8001124 <HAL_I2C_Mem_Write>
  	  HAL_I2C_Mem_Write(&hi2c1, BMP_Address, regAddress_CONFIG, I2C_MEMADD_SIZE_8BIT, &regCONFIG, 1, 2000u); /* Writing to the ctrl measurement register */
 800029a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800029e:	b29a      	uxth	r2, r3
 80002a0:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80002a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002a8:	9302      	str	r3, [sp, #8]
 80002aa:	2301      	movs	r3, #1
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	f107 039e 	add.w	r3, r7, #158	; 0x9e
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	2301      	movs	r3, #1
 80002b6:	4894      	ldr	r0, [pc, #592]	; (8000508 <main+0x334>)
 80002b8:	f000 ff34 	bl	8001124 <HAL_I2C_Mem_Write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, &data, 6, 2000u); /* Reading pressure and temperature */
 80002bc:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80002c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002ca:	9302      	str	r3, [sp, #8]
 80002cc:	2306      	movs	r3, #6
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2301      	movs	r3, #1
 80002d8:	488b      	ldr	r0, [pc, #556]	; (8000508 <main+0x334>)
 80002da:	f001 f837 	bl	800134c <HAL_I2C_Mem_Read>

	  temp = (((int32_t)data[0] << 8) | data[1]);
 80002de:	f997 3098 	ldrsb.w	r3, [r7, #152]	; 0x98
 80002e2:	021b      	lsls	r3, r3, #8
 80002e4:	f997 2099 	ldrsb.w	r2, [r7, #153]	; 0x99
 80002e8:	4313      	orrs	r3, r2
 80002ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  press = (((int32_t)data[3] << 8) | data[4]);
 80002ee:	f997 309b 	ldrsb.w	r3, [r7, #155]	; 0x9b
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	f997 209c 	ldrsb.w	r2, [r7, #156]	; 0x9c
 80002f8:	4313      	orrs	r3, r2
 80002fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	  /* Reading the Trimming Values */
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T1, I2C_MEMADD_SIZE_8BIT, &dig_T1, 2, 2000u); /* Getting the Trimming Values */
 80002fe:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8000302:	b29a      	uxth	r2, r3
 8000304:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 8000308:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800030c:	9302      	str	r3, [sp, #8]
 800030e:	2302      	movs	r3, #2
 8000310:	9301      	str	r3, [sp, #4]
 8000312:	f107 0396 	add.w	r3, r7, #150	; 0x96
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2301      	movs	r3, #1
 800031a:	487b      	ldr	r0, [pc, #492]	; (8000508 <main+0x334>)
 800031c:	f001 f816 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T2, I2C_MEMADD_SIZE_8BIT, &dig_T2, 2, 2000u); /* Getting the Trimming Values */
 8000320:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8000324:	b29a      	uxth	r2, r3
 8000326:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800032a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800032e:	9302      	str	r3, [sp, #8]
 8000330:	2302      	movs	r3, #2
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	2301      	movs	r3, #1
 800033c:	4872      	ldr	r0, [pc, #456]	; (8000508 <main+0x334>)
 800033e:	f001 f805 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_T3, I2C_MEMADD_SIZE_8BIT, &dig_T3, 2, 2000u); /* Getting the Trimming Values */
 8000342:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000346:	b29a      	uxth	r2, r3
 8000348:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800034c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000350:	9302      	str	r3, [sp, #8]
 8000352:	2302      	movs	r3, #2
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	f107 0392 	add.w	r3, r7, #146	; 0x92
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2301      	movs	r3, #1
 800035e:	486a      	ldr	r0, [pc, #424]	; (8000508 <main+0x334>)
 8000360:	f000 fff4 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P1, I2C_MEMADD_SIZE_8BIT, &dig_P1, 2, 2000u); /* Getting the Trimming Values */
 8000364:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8000368:	b29a      	uxth	r2, r3
 800036a:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800036e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000372:	9302      	str	r3, [sp, #8]
 8000374:	2302      	movs	r3, #2
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2301      	movs	r3, #1
 8000380:	4861      	ldr	r0, [pc, #388]	; (8000508 <main+0x334>)
 8000382:	f000 ffe3 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P2, I2C_MEMADD_SIZE_8BIT, &dig_P2, 2, 2000u); /* Getting the Trimming Values */
 8000386:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 800038a:	b29a      	uxth	r2, r3
 800038c:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 8000390:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000394:	9302      	str	r3, [sp, #8]
 8000396:	2302      	movs	r3, #2
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2301      	movs	r3, #1
 80003a2:	4859      	ldr	r0, [pc, #356]	; (8000508 <main+0x334>)
 80003a4:	f000 ffd2 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P3, I2C_MEMADD_SIZE_8BIT, &dig_P3, 2, 2000u); /* Getting the Trimming Values */
 80003a8:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80003ac:	b29a      	uxth	r2, r3
 80003ae:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80003b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003b6:	9302      	str	r3, [sp, #8]
 80003b8:	2302      	movs	r3, #2
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	2301      	movs	r3, #1
 80003c4:	4850      	ldr	r0, [pc, #320]	; (8000508 <main+0x334>)
 80003c6:	f000 ffc1 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P4, I2C_MEMADD_SIZE_8BIT, &dig_P4, 2, 2000u); /* Getting the Trimming Values */
 80003ca:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80003ce:	b29a      	uxth	r2, r3
 80003d0:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80003d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003d8:	9302      	str	r3, [sp, #8]
 80003da:	2302      	movs	r3, #2
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2301      	movs	r3, #1
 80003e6:	4848      	ldr	r0, [pc, #288]	; (8000508 <main+0x334>)
 80003e8:	f000 ffb0 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P5, I2C_MEMADD_SIZE_8BIT, &dig_P5, 2, 2000u); /* Getting the Trimming Values */
 80003ec:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80003f0:	b29a      	uxth	r2, r3
 80003f2:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80003f6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003fa:	9302      	str	r3, [sp, #8]
 80003fc:	2302      	movs	r3, #2
 80003fe:	9301      	str	r3, [sp, #4]
 8000400:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000404:	9300      	str	r3, [sp, #0]
 8000406:	2301      	movs	r3, #1
 8000408:	483f      	ldr	r0, [pc, #252]	; (8000508 <main+0x334>)
 800040a:	f000 ff9f 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P6, I2C_MEMADD_SIZE_8BIT, &dig_P6, 2, 2000u); /* Getting the Trimming Values */
 800040e:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8000412:	b29a      	uxth	r2, r3
 8000414:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 8000418:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800041c:	9302      	str	r3, [sp, #8]
 800041e:	2302      	movs	r3, #2
 8000420:	9301      	str	r3, [sp, #4]
 8000422:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2301      	movs	r3, #1
 800042a:	4837      	ldr	r0, [pc, #220]	; (8000508 <main+0x334>)
 800042c:	f000 ff8e 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P7, I2C_MEMADD_SIZE_8BIT, &dig_P7, 2, 2000u); /* Getting the Trimming Values */
 8000430:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8000434:	b29a      	uxth	r2, r3
 8000436:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800043a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800043e:	9302      	str	r3, [sp, #8]
 8000440:	2302      	movs	r3, #2
 8000442:	9301      	str	r3, [sp, #4]
 8000444:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	482e      	ldr	r0, [pc, #184]	; (8000508 <main+0x334>)
 800044e:	f000 ff7d 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P8, I2C_MEMADD_SIZE_8BIT, &dig_P8, 2, 2000u); /* Getting the Trimming Values */
 8000452:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000456:	b29a      	uxth	r2, r3
 8000458:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800045c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000460:	9302      	str	r3, [sp, #8]
 8000462:	2302      	movs	r3, #2
 8000464:	9301      	str	r3, [sp, #4]
 8000466:	f107 0382 	add.w	r3, r7, #130	; 0x82
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	2301      	movs	r3, #1
 800046e:	4826      	ldr	r0, [pc, #152]	; (8000508 <main+0x334>)
 8000470:	f000 ff6c 	bl	800134c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_Dig_P9, I2C_MEMADD_SIZE_8BIT, &dig_P9, 2, 2000u); /* Getting the Trimming Values */
 8000474:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000478:	b29a      	uxth	r2, r3
 800047a:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800047e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000482:	9302      	str	r3, [sp, #8]
 8000484:	2302      	movs	r3, #2
 8000486:	9301      	str	r3, [sp, #4]
 8000488:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800048c:	9300      	str	r3, [sp, #0]
 800048e:	2301      	movs	r3, #1
 8000490:	481d      	ldr	r0, [pc, #116]	; (8000508 <main+0x334>)
 8000492:	f000 ff5b 	bl	800134c <HAL_I2C_Mem_Read>


	  /* Compensation of Temperature */
	  var1 = ((((temp >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 8000496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800049a:	10da      	asrs	r2, r3, #3
 800049c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	1ad3      	subs	r3, r2, r3
 80004a4:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 80004a8:	fb02 f303 	mul.w	r3, r2, r3
 80004ac:	12db      	asrs	r3, r3, #11
 80004ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	  var2 = (((((temp >> 4) - ((int32_t)dig_T1)) * ((temp >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80004b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80004b6:	111b      	asrs	r3, r3, #4
 80004b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80004bc:	1a9b      	subs	r3, r3, r2
 80004be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80004c2:	1112      	asrs	r2, r2, #4
 80004c4:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 80004c8:	1a52      	subs	r2, r2, r1
 80004ca:	fb02 f303 	mul.w	r3, r2, r3
 80004ce:	131b      	asrs	r3, r3, #12
 80004d0:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80004d4:	fb02 f303 	mul.w	r3, r2, r3
 80004d8:	139b      	asrs	r3, r3, #14
 80004da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  t_fine = var1 + var2;
 80004de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80004e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80004e6:	4413      	add	r3, r2
 80004e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  T = (t_fine * 5 + 128) >> 8;
 80004ec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80004f0:	4613      	mov	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4413      	add	r3, r2
 80004f6:	3380      	adds	r3, #128	; 0x80
 80004f8:	121b      	asrs	r3, r3, #8
 80004fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	  HAL_Delay(2000); /* Delay for 2 seconds */
 80004fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000502:	f000 fad3 	bl	8000aac <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, BMP_Address, regAddress_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, &data, 6, 2000u); /* Reading pressure and temperature */
 8000506:	e6d9      	b.n	80002bc <main+0xe8>
 8000508:	20000028 	.word	0x20000028

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b0a6      	sub	sp, #152	; 0x98
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 fc5f 	bl	8003dde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2258      	movs	r2, #88	; 0x58
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 fc51 	bl	8003dde <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053c:	2302      	movs	r3, #2
 800053e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000544:	2310      	movs	r3, #16
 8000546:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000558:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800055c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800056a:	4618      	mov	r0, r3
 800056c:	f001 fb58 	bl	8001c20 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000576:	f000 f8ff 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2302      	movs	r3, #2
 8000580:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000590:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000594:	2102      	movs	r1, #2
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fb96 	bl	8002cc8 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005a2:	f000 f8e9 	bl	8000778 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005a6:	2322      	movs	r3, #34	; 0x22
 80005a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005ae:	2300      	movs	r3, #0
 80005b0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fdbd 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005c0:	f000 f8da 	bl	8000778 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3798      	adds	r7, #152	; 0x98
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_I2C1_Init+0x74>)
 80005d2:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <MX_I2C1_Init+0x78>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_I2C1_Init+0x74>)
 80005d8:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <MX_I2C1_Init+0x7c>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_I2C1_Init+0x74>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <MX_I2C1_Init+0x74>)
 8000608:	f000 fcfc 	bl	8001004 <HAL_I2C_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000612:	f000 f8b1 	bl	8000778 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000616:	2100      	movs	r1, #0
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <MX_I2C1_Init+0x74>)
 800061a:	f001 fa69 	bl	8001af0 <HAL_I2CEx_ConfigAnalogFilter>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000624:	f000 f8a8 	bl	8000778 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000628:	2100      	movs	r1, #0
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_I2C1_Init+0x74>)
 800062c:	f001 faab 	bl	8001b86 <HAL_I2CEx_ConfigDigitalFilter>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000636:	f000 f89f 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000028 	.word	0x20000028
 8000644:	40005400 	.word	0x40005400
 8000648:	0010020a 	.word	0x0010020a

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_USART2_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000658:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000690:	f002 ff6e 	bl	8003570 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 f86d 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000007c 	.word	0x2000007c
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a24      	ldr	r2, [pc, #144]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_GPIO_Init+0xc4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fc53 	bl	8000fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000734:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <MX_GPIO_Init+0xc8>)
 8000746:	f000 fabb 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800074a:	2320      	movs	r3, #32
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f000 faac 	bl	8000cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40021000 	.word	0x40021000
 8000774:	48000800 	.word	0x48000800

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_MspInit+0x44>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_MspInit+0x44>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_MspInit+0x44>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_MspInit+0x44>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x44>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x44>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ba:	2007      	movs	r0, #7
 80007bc:	f000 fa4c 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a26      	ldr	r2, [pc, #152]	; (8000884 <HAL_I2C_MspInit+0xb8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d145      	bne.n	800087a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <HAL_I2C_MspInit+0xbc>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <HAL_I2C_MspInit+0xbc>)
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	6153      	str	r3, [r2, #20]
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <HAL_I2C_MspInit+0xbc>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <HAL_I2C_MspInit+0xbc>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <HAL_I2C_MspInit+0xbc>)
 800080c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <HAL_I2C_MspInit+0xbc>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800081e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000824:	2312      	movs	r3, #18
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000830:	2304      	movs	r3, #4
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f000 fa3f 	bl	8000cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000846:	2312      	movs	r3, #18
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000852:	2304      	movs	r3, #4
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <HAL_I2C_MspInit+0xc0>)
 800085e:	f000 fa2f 	bl	8000cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_I2C_MspInit+0xbc>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_I2C_MspInit+0xbc>)
 8000868:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_I2C_MspInit+0xbc>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40005400 	.word	0x40005400
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a17      	ldr	r2, [pc, #92]	; (800090c <HAL_UART_MspInit+0x7c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d128      	bne.n	8000904 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a16      	ldr	r2, [pc, #88]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008e2:	230c      	movs	r3, #12
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f2:	2307      	movs	r3, #7
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 f9de 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40004400 	.word	0x40004400
 8000910:	40021000 	.word	0x40021000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f884 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <SystemInit+0x20>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SystemInit+0x20>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000990:	f7ff ffea 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000996:	490d      	ldr	r1, [pc, #52]	; (80009cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <LoopForever+0xe>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ac:	4c0a      	ldr	r4, [pc, #40]	; (80009d8 <LoopForever+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ba:	f003 fa19 	bl	8003df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009be:	f7ff fc09 	bl	80001d4 <main>

080009c2 <LoopForever>:

LoopForever:
    b LoopForever
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d0:	08003e90 	.word	0x08003e90
  ldr r2, =_sbss
 80009d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d8:	20000108 	.word	0x20000108

080009dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_2_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x28>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x28>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f931 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff fec2 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40022000 	.word	0x40022000

08000a0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f93b 	bl	8000ca6 <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f911 	bl	8000c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000104 	.word	0x20000104

08000a94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000104 	.word	0x20000104

08000aac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff ffee 	bl	8000a94 <HAL_GetTick>
 8000ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac4:	d005      	beq.n	8000ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_Delay+0x44>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ad2:	bf00      	nop
 8000ad4:	f7ff ffde 	bl	8000a94 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8f7      	bhi.n	8000ad4 <HAL_Delay+0x28>
  {
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	; (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	; (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	; 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c24:	d301      	bcc.n	8000c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00f      	b.n	8000c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <SysTick_Config+0x40>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c32:	210f      	movs	r1, #15
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f7ff ff8e 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SysTick_Config+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SysTick_Config+0x40>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff47 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c80:	f7ff ff5c 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	6978      	ldr	r0, [r7, #20]
 8000c8c:	f7ff ff8e 	bl	8000bac <NVIC_EncodePriority>
 8000c90:	4602      	mov	r2, r0
 8000c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff5d 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffb0 	bl	8000c14 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e160      	b.n	8000f92 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 8152 	beq.w	8000f8c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d005      	beq.n	8000d00 <HAL_GPIO_Init+0x40>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d130      	bne.n	8000d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d36:	2201      	movs	r2, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	f003 0201 	and.w	r2, r3, #1
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d017      	beq.n	8000d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d123      	bne.n	8000df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0203 	and.w	r2, r3, #3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 80ac 	beq.w	8000f8c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b5e      	ldr	r3, [pc, #376]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a5d      	ldr	r2, [pc, #372]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e4c:	4a59      	ldr	r2, [pc, #356]	; (8000fb4 <HAL_GPIO_Init+0x2f4>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e76:	d025      	beq.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a4f      	ldr	r2, [pc, #316]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d01f      	beq.n	8000ec0 <HAL_GPIO_Init+0x200>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4e      	ldr	r2, [pc, #312]	; (8000fbc <HAL_GPIO_Init+0x2fc>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d019      	beq.n	8000ebc <HAL_GPIO_Init+0x1fc>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4d      	ldr	r2, [pc, #308]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d013      	beq.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4c      	ldr	r2, [pc, #304]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d00d      	beq.n	8000eb4 <HAL_GPIO_Init+0x1f4>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a4b      	ldr	r2, [pc, #300]	; (8000fc8 <HAL_GPIO_Init+0x308>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d007      	beq.n	8000eb0 <HAL_GPIO_Init+0x1f0>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a4a      	ldr	r2, [pc, #296]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d101      	bne.n	8000eac <HAL_GPIO_Init+0x1ec>
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	e00c      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eac:	2307      	movs	r3, #7
 8000eae:	e00a      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eb0:	2305      	movs	r3, #5
 8000eb2:	e008      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	e006      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e004      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	f002 0203 	and.w	r2, r2, #3
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed6:	4937      	ldr	r1, [pc, #220]	; (8000fb4 <HAL_GPIO_Init+0x2f4>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee4:	4b3a      	ldr	r3, [pc, #232]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f08:	4a31      	ldr	r2, [pc, #196]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f32:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f47f ae97 	bne.w	8000cd0 <HAL_GPIO_Init+0x10>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000c00 	.word	0x48000c00
 8000fc4:	48001000 	.word	0x48001000
 8000fc8:	48001400 	.word	0x48001400
 8000fcc:	48001800 	.word	0x48001800
 8000fd0:	40010400 	.word	0x40010400

08000fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e081      	b.n	800111a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d106      	bne.n	8001030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fbce 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2224      	movs	r2, #36	; 0x24
 8001034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001054:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001064:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d107      	bne.n	800107e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	e006      	b.n	800108c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800108a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d104      	bne.n	800109e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800109c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69d9      	ldr	r1, [r3, #28]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1a      	ldr	r2, [r3, #32]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2220      	movs	r2, #32
 8001106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af02      	add	r7, sp, #8
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	4608      	mov	r0, r1
 800112e:	4611      	mov	r1, r2
 8001130:	461a      	mov	r2, r3
 8001132:	4603      	mov	r3, r0
 8001134:	817b      	strh	r3, [r7, #10]
 8001136:	460b      	mov	r3, r1
 8001138:	813b      	strh	r3, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b20      	cmp	r3, #32
 8001148:	f040 80f9 	bne.w	800133e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <HAL_I2C_Mem_Write+0x34>
 8001152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800115e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0ed      	b.n	8001340 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_I2C_Mem_Write+0x4e>
 800116e:	2302      	movs	r3, #2
 8001170:	e0e6      	b.n	8001340 <HAL_I2C_Mem_Write+0x21c>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800117a:	f7ff fc8b 	bl	8000a94 <HAL_GetTick>
 800117e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2319      	movs	r3, #25
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 fac3 	bl	8001718 <I2C_WaitOnFlagUntilTimeout>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0d1      	b.n	8001340 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2221      	movs	r2, #33	; 0x21
 80011a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011c4:	88f8      	ldrh	r0, [r7, #6]
 80011c6:	893a      	ldrh	r2, [r7, #8]
 80011c8:	8979      	ldrh	r1, [r7, #10]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4603      	mov	r3, r0
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f000 f9d3 	bl	8001580 <I2C_RequestMemoryWrite>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0a9      	b.n	8001340 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2bff      	cmp	r3, #255	; 0xff
 80011f4:	d90e      	bls.n	8001214 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	22ff      	movs	r2, #255	; 0xff
 80011fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001200:	b2da      	uxtb	r2, r3
 8001202:	8979      	ldrh	r1, [r7, #10]
 8001204:	2300      	movs	r3, #0
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 fc3d 	bl	8001a8c <I2C_TransferConfig>
 8001212:	e00f      	b.n	8001234 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001218:	b29a      	uxth	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001222:	b2da      	uxtb	r2, r3
 8001224:	8979      	ldrh	r1, [r7, #10]
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 fc2c 	bl	8001a8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f000 fabc 	bl	80017b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e07b      	b.n	8001340 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001262:	b29b      	uxth	r3, r3
 8001264:	3b01      	subs	r3, #1
 8001266:	b29a      	uxth	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001270:	3b01      	subs	r3, #1
 8001272:	b29a      	uxth	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127c:	b29b      	uxth	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d034      	beq.n	80012ec <HAL_I2C_Mem_Write+0x1c8>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001286:	2b00      	cmp	r3, #0
 8001288:	d130      	bne.n	80012ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	2200      	movs	r2, #0
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 fa3f 	bl	8001718 <I2C_WaitOnFlagUntilTimeout>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e04d      	b.n	8001340 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	2bff      	cmp	r3, #255	; 0xff
 80012ac:	d90e      	bls.n	80012cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	22ff      	movs	r2, #255	; 0xff
 80012b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	8979      	ldrh	r1, [r7, #10]
 80012bc:	2300      	movs	r3, #0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 fbe1 	bl	8001a8c <I2C_TransferConfig>
 80012ca:	e00f      	b.n	80012ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	8979      	ldrh	r1, [r7, #10]
 80012de:	2300      	movs	r3, #0
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f000 fbd0 	bl	8001a8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d19e      	bne.n	8001234 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f000 faa2 	bl	8001844 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e01a      	b.n	8001340 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2220      	movs	r2, #32
 8001310:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_I2C_Mem_Write+0x224>)
 800131e:	400b      	ands	r3, r1
 8001320:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2220      	movs	r2, #32
 8001326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800133e:	2302      	movs	r3, #2
  }
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	fe00e800 	.word	0xfe00e800

0800134c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af02      	add	r7, sp, #8
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	4608      	mov	r0, r1
 8001356:	4611      	mov	r1, r2
 8001358:	461a      	mov	r2, r3
 800135a:	4603      	mov	r3, r0
 800135c:	817b      	strh	r3, [r7, #10]
 800135e:	460b      	mov	r3, r1
 8001360:	813b      	strh	r3, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b20      	cmp	r3, #32
 8001370:	f040 80fd 	bne.w	800156e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_I2C_Mem_Read+0x34>
 800137a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001386:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0f1      	b.n	8001570 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_I2C_Mem_Read+0x4e>
 8001396:	2302      	movs	r3, #2
 8001398:	e0ea      	b.n	8001570 <HAL_I2C_Mem_Read+0x224>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013a2:	f7ff fb77 	bl	8000a94 <HAL_GetTick>
 80013a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2319      	movs	r3, #25
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 f9af 	bl	8001718 <I2C_WaitOnFlagUntilTimeout>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0d5      	b.n	8001570 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2222      	movs	r2, #34	; 0x22
 80013c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2240      	movs	r2, #64	; 0x40
 80013d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6a3a      	ldr	r2, [r7, #32]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ec:	88f8      	ldrh	r0, [r7, #6]
 80013ee:	893a      	ldrh	r2, [r7, #8]
 80013f0:	8979      	ldrh	r1, [r7, #10]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4603      	mov	r3, r0
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 f913 	bl	8001628 <I2C_RequestMemoryRead>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0ad      	b.n	8001570 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001418:	b29b      	uxth	r3, r3
 800141a:	2bff      	cmp	r3, #255	; 0xff
 800141c:	d90e      	bls.n	800143c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	22ff      	movs	r2, #255	; 0xff
 8001422:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001428:	b2da      	uxtb	r2, r3
 800142a:	8979      	ldrh	r1, [r7, #10]
 800142c:	4b52      	ldr	r3, [pc, #328]	; (8001578 <HAL_I2C_Mem_Read+0x22c>)
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fb29 	bl	8001a8c <I2C_TransferConfig>
 800143a:	e00f      	b.n	800145c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001440:	b29a      	uxth	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144a:	b2da      	uxtb	r2, r3
 800144c:	8979      	ldrh	r1, [r7, #10]
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <HAL_I2C_Mem_Read+0x22c>)
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 fb18 	bl	8001a8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001462:	2200      	movs	r2, #0
 8001464:	2104      	movs	r1, #4
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f956 	bl	8001718 <I2C_WaitOnFlagUntilTimeout>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e07c      	b.n	8001570 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	3b01      	subs	r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d034      	beq.n	800151c <HAL_I2C_Mem_Read+0x1d0>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d130      	bne.n	800151c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	2200      	movs	r2, #0
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 f927 	bl	8001718 <I2C_WaitOnFlagUntilTimeout>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e04d      	b.n	8001570 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2bff      	cmp	r3, #255	; 0xff
 80014dc:	d90e      	bls.n	80014fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	22ff      	movs	r2, #255	; 0xff
 80014e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	8979      	ldrh	r1, [r7, #10]
 80014ec:	2300      	movs	r3, #0
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 fac9 	bl	8001a8c <I2C_TransferConfig>
 80014fa:	e00f      	b.n	800151c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001500:	b29a      	uxth	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150a:	b2da      	uxtb	r2, r3
 800150c:	8979      	ldrh	r1, [r7, #10]
 800150e:	2300      	movs	r3, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 fab8 	bl	8001a8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d19a      	bne.n	800145c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f98a 	bl	8001844 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e01a      	b.n	8001570 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2220      	movs	r2, #32
 8001540:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_I2C_Mem_Read+0x230>)
 800154e:	400b      	ands	r3, r1
 8001550:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2220      	movs	r2, #32
 8001556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800156e:	2302      	movs	r3, #2
  }
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	80002400 	.word	0x80002400
 800157c:	fe00e800 	.word	0xfe00e800

08001580 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af02      	add	r7, sp, #8
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4603      	mov	r3, r0
 8001590:	817b      	strh	r3, [r7, #10]
 8001592:	460b      	mov	r3, r1
 8001594:	813b      	strh	r3, [r7, #8]
 8001596:	4613      	mov	r3, r2
 8001598:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	8979      	ldrh	r1, [r7, #10]
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <I2C_RequestMemoryWrite+0xa4>)
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 fa6f 	bl	8001a8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	69b9      	ldr	r1, [r7, #24]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 f8ff 	bl	80017b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e02c      	b.n	800161c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015c8:	893b      	ldrh	r3, [r7, #8]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
 80015d2:	e015      	b.n	8001600 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80015d4:	893b      	ldrh	r3, [r7, #8]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	69b9      	ldr	r1, [r7, #24]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 f8e5 	bl	80017b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e012      	b.n	800161c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015f6:	893b      	ldrh	r3, [r7, #8]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2200      	movs	r2, #0
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 f884 	bl	8001718 <I2C_WaitOnFlagUntilTimeout>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	80002000 	.word	0x80002000

08001628 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af02      	add	r7, sp, #8
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	4608      	mov	r0, r1
 8001632:	4611      	mov	r1, r2
 8001634:	461a      	mov	r2, r3
 8001636:	4603      	mov	r3, r0
 8001638:	817b      	strh	r3, [r7, #10]
 800163a:	460b      	mov	r3, r1
 800163c:	813b      	strh	r3, [r7, #8]
 800163e:	4613      	mov	r3, r2
 8001640:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	8979      	ldrh	r1, [r7, #10]
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <I2C_RequestMemoryRead+0xa4>)
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2300      	movs	r3, #0
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 fa1c 	bl	8001a8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f8ac 	bl	80017b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e02c      	b.n	80016c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d105      	bne.n	800167a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800166e:	893b      	ldrh	r3, [r7, #8]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
 8001678:	e015      	b.n	80016a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800167a:	893b      	ldrh	r3, [r7, #8]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f892 	bl	80017b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e012      	b.n	80016c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800169c:	893b      	ldrh	r3, [r7, #8]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2200      	movs	r2, #0
 80016ae:	2140      	movs	r1, #64	; 0x40
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f831 	bl	8001718 <I2C_WaitOnFlagUntilTimeout>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	80002000 	.word	0x80002000

080016d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d103      	bne.n	80016ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2200      	movs	r2, #0
 80016ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d007      	beq.n	800170c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699a      	ldr	r2, [r3, #24]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	619a      	str	r2, [r3, #24]
  }
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001728:	e031      	b.n	800178e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d02d      	beq.n	800178e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001732:	f7ff f9af 	bl	8000a94 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d302      	bcc.n	8001748 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d122      	bne.n	800178e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	4013      	ands	r3, r2
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	429a      	cmp	r2, r3
 8001756:	bf0c      	ite	eq
 8001758:	2301      	moveq	r3, #1
 800175a:	2300      	movne	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	429a      	cmp	r2, r3
 8001764:	d113      	bne.n	800178e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f043 0220 	orr.w	r2, r3, #32
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	699a      	ldr	r2, [r3, #24]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4013      	ands	r3, r2
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	429a      	cmp	r2, r3
 800179c:	bf0c      	ite	eq
 800179e:	2301      	moveq	r3, #1
 80017a0:	2300      	movne	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d0be      	beq.n	800172a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017c2:	e033      	b.n	800182c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f87f 	bl	80018cc <I2C_IsErrorOccurred>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e031      	b.n	800183c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017de:	d025      	beq.n	800182c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e0:	f7ff f958 	bl	8000a94 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d302      	bcc.n	80017f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d11a      	bne.n	800182c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b02      	cmp	r3, #2
 8001802:	d013      	beq.n	800182c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f043 0220 	orr.w	r2, r3, #32
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e007      	b.n	800183c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b02      	cmp	r3, #2
 8001838:	d1c4      	bne.n	80017c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001850:	e02f      	b.n	80018b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f838 	bl	80018cc <I2C_IsErrorOccurred>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e02d      	b.n	80018c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001866:	f7ff f915 	bl	8000a94 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	429a      	cmp	r2, r3
 8001874:	d302      	bcc.n	800187c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d11a      	bne.n	80018b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b20      	cmp	r3, #32
 8001888:	d013      	beq.n	80018b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f043 0220 	orr.w	r2, r3, #32
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e007      	b.n	80018c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d1c8      	bne.n	8001852 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d068      	beq.n	80019ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2210      	movs	r2, #16
 80018fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001900:	e049      	b.n	8001996 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d045      	beq.n	8001996 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800190a:	f7ff f8c3 	bl	8000a94 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	429a      	cmp	r2, r3
 8001918:	d302      	bcc.n	8001920 <I2C_IsErrorOccurred+0x54>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d13a      	bne.n	8001996 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001932:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800193e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001942:	d121      	bne.n	8001988 <I2C_IsErrorOccurred+0xbc>
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800194a:	d01d      	beq.n	8001988 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800194c:	7cfb      	ldrb	r3, [r7, #19]
 800194e:	2b20      	cmp	r3, #32
 8001950:	d01a      	beq.n	8001988 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001960:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001962:	f7ff f897 	bl	8000a94 <HAL_GetTick>
 8001966:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001968:	e00e      	b.n	8001988 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800196a:	f7ff f893 	bl	8000a94 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b19      	cmp	r3, #25
 8001976:	d907      	bls.n	8001988 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	f043 0320 	orr.w	r3, r3, #32
 800197e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001986:	e006      	b.n	8001996 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	2b20      	cmp	r3, #32
 8001994:	d1e9      	bne.n	800196a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	d003      	beq.n	80019ac <I2C_IsErrorOccurred+0xe0>
 80019a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0aa      	beq.n	8001902 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80019ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2220      	movs	r2, #32
 80019ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00b      	beq.n	80019f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00b      	beq.n	8001a38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f043 0302 	orr.w	r3, r3, #2
 8001a26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01c      	beq.n	8001a7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff fe45 	bl	80016d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <I2C_IsErrorOccurred+0x1bc>)
 8001a52:	400b      	ands	r3, r1
 8001a54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2220      	movs	r2, #32
 8001a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	fe00e800 	.word	0xfe00e800

08001a8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	817b      	strh	r3, [r7, #10]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a9e:	897b      	ldrh	r3, [r7, #10]
 8001aa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001aa4:	7a7b      	ldrb	r3, [r7, #9]
 8001aa6:	041b      	lsls	r3, r3, #16
 8001aa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001aac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	0d5b      	lsrs	r3, r3, #21
 8001ac6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <I2C_TransferConfig+0x60>)
 8001acc:	430b      	orrs	r3, r1
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	ea02 0103 	and.w	r1, r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ade:	bf00      	nop
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	03ff63ff 	.word	0x03ff63ff

08001af0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	d138      	bne.n	8001b78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e032      	b.n	8001b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e000      	b.n	8001b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d139      	bne.n	8001c10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e033      	b.n	8001c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2224      	movs	r2, #36	; 0x24
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e000      	b.n	8001c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c10:	2302      	movs	r3, #2
  }
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f001 b83a 	b.w	8002cba <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 816f 	beq.w	8001f3a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c5c:	4bb5      	ldr	r3, [pc, #724]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d00c      	beq.n	8001c82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c68:	4bb2      	ldr	r3, [pc, #712]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d15c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x10e>
 8001c74:	4baf      	ldr	r3, [pc, #700]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d155      	bne.n	8001d2e <HAL_RCC_OscConfig+0x10e>
 8001c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c86:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d102      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x94>
 8001cae:	4ba1      	ldr	r3, [pc, #644]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	e015      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc0>
 8001cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ccc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001cd0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001cdc:	4b95      	ldr	r3, [pc, #596]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ce4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001ce8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001cec:	fa92 f2a2 	rbit	r2, r2
 8001cf0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001cf4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f002 021f 	and.w	r2, r2, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8111 	beq.w	8001f38 <HAL_RCC_OscConfig+0x318>
 8001d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 8108 	bne.w	8001f38 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f000 bfc6 	b.w	8002cba <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x12e>
 8001d40:	4b7c      	ldr	r3, [pc, #496]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a7b      	ldr	r2, [pc, #492]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	e036      	b.n	8001dbc <HAL_RCC_OscConfig+0x19c>
 8001d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x158>
 8001d5e:	4b75      	ldr	r3, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a74      	ldr	r2, [pc, #464]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b72      	ldr	r3, [pc, #456]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a71      	ldr	r2, [pc, #452]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e021      	b.n	8001dbc <HAL_RCC_OscConfig+0x19c>
 8001d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x184>
 8001d8a:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a69      	ldr	r2, [pc, #420]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a66      	ldr	r2, [pc, #408]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0x19c>
 8001da4:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a62      	ldr	r2, [pc, #392]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b60      	ldr	r3, [pc, #384]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5f      	ldr	r2, [pc, #380]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d059      	beq.n	8001e80 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fe62 	bl	8000a94 <HAL_GetTick>
 8001dd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd6:	f7fe fe5d 	bl	8000a94 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d902      	bls.n	8001dec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	f000 bf67 	b.w	8002cba <HAL_RCC_OscConfig+0x109a>
 8001dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001e00:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_OscConfig+0x1fe>
 8001e18:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	e015      	b.n	8001e4a <HAL_RCC_OscConfig+0x22a>
 8001e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e22:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e36:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e3a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e4e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001e52:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001e5e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f002 021f 	and.w	r2, r2, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0ab      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1b6>
 8001e7e:	e05c      	b.n	8001f3a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7fe fe08 	bl	8000a94 <HAL_GetTick>
 8001e84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8a:	f7fe fe03 	bl	8000a94 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d902      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	f000 bf0d 	b.w	8002cba <HAL_RCC_OscConfig+0x109a>
 8001ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001eb4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d102      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x2b2>
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x2de>
 8001ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001eee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_RCC_OscConfig+0x314>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f02:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001f06:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001f0a:	fa92 f2a2 	rbit	r2, r2
 8001f0e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001f12:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ab      	bne.n	8001e8a <HAL_RCC_OscConfig+0x26a>
 8001f32:	e002      	b.n	8001f3a <HAL_RCC_OscConfig+0x31a>
 8001f34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 817f 	beq.w	800224e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f50:	4ba7      	ldr	r3, [pc, #668]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f5c:	4ba4      	ldr	r3, [pc, #656]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d173      	bne.n	8002050 <HAL_RCC_OscConfig+0x430>
 8001f68:	4ba1      	ldr	r3, [pc, #644]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f74:	d16c      	bne.n	8002050 <HAL_RCC_OscConfig+0x430>
 8001f76:	2302      	movs	r3, #2
 8001f78:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001f88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x386>
 8001fa0:	4b93      	ldr	r3, [pc, #588]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	e013      	b.n	8001fce <HAL_RCC_OscConfig+0x3ae>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001fbe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001fca:	4b89      	ldr	r3, [pc, #548]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001fd4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001fd8:	fa92 f2a2 	rbit	r2, r2
 8001fdc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001fe0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001fe4:	fab2 f282 	clz	r2, r2
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f042 0220 	orr.w	r2, r2, #32
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f002 021f 	and.w	r2, r2, #31
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCC_OscConfig+0x3f6>
 8002000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002004:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d002      	beq.n	8002016 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	f000 be52 	b.w	8002cba <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002022:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	21f8      	movs	r1, #248	; 0xf8
 800202c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002034:	fa91 f1a1 	rbit	r1, r1
 8002038:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800203c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002040:	fab1 f181 	clz	r1, r1
 8002044:	b2c9      	uxtb	r1, r1
 8002046:	408b      	lsls	r3, r1
 8002048:	4969      	ldr	r1, [pc, #420]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	e0fe      	b.n	800224e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002050:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002054:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8088 	beq.w	8002172 <HAL_RCC_OscConfig+0x552>
 8002062:	2301      	movs	r3, #1
 8002064:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002074:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002082:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	461a      	mov	r2, r3
 800208a:	2301      	movs	r3, #1
 800208c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fd01 	bl	8000a94 <HAL_GetTick>
 8002092:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002098:	f7fe fcfc 	bl	8000a94 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d902      	bls.n	80020ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	f000 be06 	b.w	8002cba <HAL_RCC_OscConfig+0x109a>
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80020c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d102      	bne.n	80020de <HAL_RCC_OscConfig+0x4be>
 80020d8:	4b45      	ldr	r3, [pc, #276]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	e013      	b.n	8002106 <HAL_RCC_OscConfig+0x4e6>
 80020de:	2302      	movs	r3, #2
 80020e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80020f0:	2302      	movs	r3, #2
 80020f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80020f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	2202      	movs	r2, #2
 8002108:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800210c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002118:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f002 021f 	and.w	r2, r2, #31
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0af      	beq.n	8002098 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002144:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	21f8      	movs	r1, #248	; 0xf8
 800214e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002156:	fa91 f1a1 	rbit	r1, r1
 800215a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800215e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002162:	fab1 f181 	clz	r1, r1
 8002166:	b2c9      	uxtb	r1, r1
 8002168:	408b      	lsls	r3, r1
 800216a:	4921      	ldr	r1, [pc, #132]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e06d      	b.n	800224e <HAL_RCC_OscConfig+0x62e>
 8002172:	2301      	movs	r3, #1
 8002174:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002184:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002192:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	461a      	mov	r2, r3
 800219a:	2300      	movs	r3, #0
 800219c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe fc79 	bl	8000a94 <HAL_GetTick>
 80021a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a8:	f7fe fc74 	bl	8000a94 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d902      	bls.n	80021be <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	f000 bd7e 	b.w	8002cba <HAL_RCC_OscConfig+0x109a>
 80021be:	2302      	movs	r3, #2
 80021c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80021d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5d4>
 80021e8:	4b01      	ldr	r3, [pc, #4]	; (80021f0 <HAL_RCC_OscConfig+0x5d0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	e016      	b.n	800221c <HAL_RCC_OscConfig+0x5fc>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	2302      	movs	r3, #2
 80021f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002206:	2302      	movs	r3, #2
 8002208:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800220c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002218:	4bbf      	ldr	r3, [pc, #764]	; (8002518 <HAL_RCC_OscConfig+0x8f8>)
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	2202      	movs	r2, #2
 800221e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002222:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002226:	fa92 f2a2 	rbit	r2, r2
 800222a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800222e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002232:	fab2 f282 	clz	r2, r2
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	f042 0220 	orr.w	r2, r2, #32
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	f002 021f 	and.w	r2, r2, #31
 8002242:	2101      	movs	r1, #1
 8002244:	fa01 f202 	lsl.w	r2, r1, r2
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ac      	bne.n	80021a8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002252:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8113 	beq.w	800248a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002264:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002268:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d07c      	beq.n	800236e <HAL_RCC_OscConfig+0x74e>
 8002274:	2301      	movs	r3, #1
 8002276:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002286:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	4ba2      	ldr	r3, [pc, #648]	; (800251c <HAL_RCC_OscConfig+0x8fc>)
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	461a      	mov	r2, r3
 800229a:	2301      	movs	r3, #1
 800229c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229e:	f7fe fbf9 	bl	8000a94 <HAL_GetTick>
 80022a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a8:	f7fe fbf4 	bl	8000a94 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d902      	bls.n	80022be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	f000 bcfe 	b.w	8002cba <HAL_RCC_OscConfig+0x109a>
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022de:	2202      	movs	r2, #2
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002302:	2202      	movs	r2, #2
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f2a3 	rbit	r2, r3
 8002314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002318:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800231c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	4b7e      	ldr	r3, [pc, #504]	; (8002518 <HAL_RCC_OscConfig+0x8f8>)
 8002320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002326:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800232a:	2102      	movs	r1, #2
 800232c:	6019      	str	r1, [r3, #0]
 800232e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002332:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f1a3 	rbit	r1, r3
 800233c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002340:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002344:	6019      	str	r1, [r3, #0]
  return result;
 8002346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d09d      	beq.n	80022a8 <HAL_RCC_OscConfig+0x688>
 800236c:	e08d      	b.n	800248a <HAL_RCC_OscConfig+0x86a>
 800236e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002372:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002390:	601a      	str	r2, [r3, #0]
  return result;
 8002392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002396:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800239a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b5d      	ldr	r3, [pc, #372]	; (800251c <HAL_RCC_OscConfig+0x8fc>)
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	461a      	mov	r2, r3
 80023ac:	2300      	movs	r3, #0
 80023ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7fe fb70 	bl	8000a94 <HAL_GetTick>
 80023b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ba:	f7fe fb6b 	bl	8000a94 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d902      	bls.n	80023d0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	f000 bc75 	b.w	8002cba <HAL_RCC_OscConfig+0x109a>
 80023d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023fc:	2202      	movs	r2, #2
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	fa93 f2a3 	rbit	r2, r3
 800240e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002420:	2202      	movs	r2, #2
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	fa93 f2a3 	rbit	r2, r3
 8002432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002436:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800243a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	4b36      	ldr	r3, [pc, #216]	; (8002518 <HAL_RCC_OscConfig+0x8f8>)
 800243e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002444:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002448:	2102      	movs	r1, #2
 800244a:	6019      	str	r1, [r3, #0]
 800244c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002450:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f1a3 	rbit	r1, r3
 800245a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800245e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002462:	6019      	str	r1, [r3, #0]
  return result;
 8002464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002468:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d197      	bne.n	80023ba <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 81a5 	beq.w	80027ea <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <HAL_RCC_OscConfig+0x8f8>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_RCC_OscConfig+0x8f8>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_RCC_OscConfig+0x8f8>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	61d3      	str	r3, [r2, #28]
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_RCC_OscConfig+0x8f8>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80024c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_RCC_OscConfig+0x900>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d121      	bne.n	8002530 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_RCC_OscConfig+0x900>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x900>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f8:	f7fe facc 	bl	8000a94 <HAL_GetTick>
 80024fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	e010      	b.n	8002524 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002502:	f7fe fac7 	bl	8000a94 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d908      	bls.n	8002524 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e3d1      	b.n	8002cba <HAL_RCC_OscConfig+0x109a>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	10908120 	.word	0x10908120
 8002520:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b8d      	ldr	r3, [pc, #564]	; (800275c <HAL_RCC_OscConfig+0xb3c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0e8      	beq.n	8002502 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002534:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x92e>
 8002540:	4b87      	ldr	r3, [pc, #540]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a86      	ldr	r2, [pc, #536]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e035      	b.n	80025ba <HAL_RCC_OscConfig+0x99a>
 800254e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002552:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x958>
 800255e:	4b80      	ldr	r3, [pc, #512]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a7f      	ldr	r2, [pc, #508]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6213      	str	r3, [r2, #32]
 800256a:	4b7d      	ldr	r3, [pc, #500]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a7c      	ldr	r2, [pc, #496]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	e020      	b.n	80025ba <HAL_RCC_OscConfig+0x99a>
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x982>
 8002588:	4b75      	ldr	r3, [pc, #468]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a74      	ldr	r2, [pc, #464]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	4b72      	ldr	r3, [pc, #456]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a71      	ldr	r2, [pc, #452]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	e00b      	b.n	80025ba <HAL_RCC_OscConfig+0x99a>
 80025a2:	4b6f      	ldr	r3, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a6e      	ldr	r2, [pc, #440]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	4b6c      	ldr	r3, [pc, #432]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a6b      	ldr	r2, [pc, #428]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8081 	beq.w	80026ce <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025cc:	f7fe fa62 	bl	8000a94 <HAL_GetTick>
 80025d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00b      	b.n	80025ee <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fa5d 	bl	8000a94 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e365      	b.n	8002cba <HAL_RCC_OscConfig+0x109a>
 80025ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025f6:	2202      	movs	r2, #2
 80025f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	fa93 f2a3 	rbit	r2, r3
 8002608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002616:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800261a:	2202      	movs	r2, #2
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002622:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f2a3 	rbit	r2, r3
 800262c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002630:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002634:	601a      	str	r2, [r3, #0]
  return result;
 8002636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800263e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f043 0302 	orr.w	r3, r3, #2
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d102      	bne.n	800265a <HAL_RCC_OscConfig+0xa3a>
 8002654:	4b42      	ldr	r3, [pc, #264]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	e013      	b.n	8002682 <HAL_RCC_OscConfig+0xa62>
 800265a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002662:	2202      	movs	r2, #2
 8002664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	fa93 f2a3 	rbit	r2, r3
 8002674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002678:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002686:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800268a:	2102      	movs	r1, #2
 800268c:	6011      	str	r1, [r2, #0]
 800268e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002692:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	fa92 f1a2 	rbit	r1, r2
 800269c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026a0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80026a4:	6011      	str	r1, [r2, #0]
  return result;
 80026a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026aa:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	fab2 f282 	clz	r2, r2
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	f002 021f 	and.w	r2, r2, #31
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f202 	lsl.w	r2, r1, r2
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d084      	beq.n	80025d6 <HAL_RCC_OscConfig+0x9b6>
 80026cc:	e083      	b.n	80027d6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7fe f9e1 	bl	8000a94 <HAL_GetTick>
 80026d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe f9dc 	bl	8000a94 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e2e4      	b.n	8002cba <HAL_RCC_OscConfig+0x109a>
 80026f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026f8:	2202      	movs	r2, #2
 80026fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002700:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002718:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800271c:	2202      	movs	r2, #2
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002724:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f2a3 	rbit	r2, r3
 800272e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002732:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002736:	601a      	str	r2, [r3, #0]
  return result;
 8002738:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002740:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d106      	bne.n	8002764 <HAL_RCC_OscConfig+0xb44>
 8002756:	4b02      	ldr	r3, [pc, #8]	; (8002760 <HAL_RCC_OscConfig+0xb40>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	e017      	b.n	800278c <HAL_RCC_OscConfig+0xb6c>
 800275c:	40007000 	.word	0x40007000
 8002760:	40021000 	.word	0x40021000
 8002764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002768:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800276c:	2202      	movs	r2, #2
 800276e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002774:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	fa93 f2a3 	rbit	r2, r3
 800277e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002782:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	4bb3      	ldr	r3, [pc, #716]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002790:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002794:	2102      	movs	r1, #2
 8002796:	6011      	str	r1, [r2, #0]
 8002798:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800279c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	fa92 f1a2 	rbit	r1, r2
 80027a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027aa:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80027ae:	6011      	str	r1, [r2, #0]
  return result;
 80027b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027b4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	fab2 f282 	clz	r2, r2
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f002 021f 	and.w	r2, r2, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d180      	bne.n	80026d8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027d6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027de:	4b9e      	ldr	r3, [pc, #632]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a9d      	ldr	r2, [pc, #628]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 80027e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 825e 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027fc:	4b96      	ldr	r3, [pc, #600]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b08      	cmp	r3, #8
 8002806:	f000 821f 	beq.w	8002c48 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800280e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b02      	cmp	r3, #2
 8002818:	f040 8170 	bne.w	8002afc <HAL_RCC_OscConfig+0xedc>
 800281c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002820:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	fa93 f2a3 	rbit	r2, r3
 8002838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800283c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002840:	601a      	str	r2, [r3, #0]
  return result;
 8002842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002846:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800284a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002856:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	461a      	mov	r2, r3
 800285e:	2300      	movs	r3, #0
 8002860:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe f917 	bl	8000a94 <HAL_GetTick>
 8002866:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286a:	e009      	b.n	8002880 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe f912 	bl	8000a94 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e21c      	b.n	8002cba <HAL_RCC_OscConfig+0x109a>
 8002880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002884:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800288c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002892:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	fa93 f2a3 	rbit	r2, r3
 800289c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028a4:	601a      	str	r2, [r3, #0]
  return result;
 80028a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028aa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_OscConfig+0xcaa>
 80028c4:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	e027      	b.n	800291a <HAL_RCC_OscConfig+0xcfa>
 80028ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028dc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	fa93 f2a3 	rbit	r2, r3
 80028e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002902:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fa93 f2a3 	rbit	r2, r3
 800290c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002910:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	4b50      	ldr	r3, [pc, #320]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800291e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002922:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002926:	6011      	str	r1, [r2, #0]
 8002928:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800292c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	fa92 f1a2 	rbit	r1, r2
 8002936:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800293a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800293e:	6011      	str	r1, [r2, #0]
  return result;
 8002940:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002944:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	fab2 f282 	clz	r2, r2
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	f042 0220 	orr.w	r2, r2, #32
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	f002 021f 	and.w	r2, r2, #31
 800295a:	2101      	movs	r1, #1
 800295c:	fa01 f202 	lsl.w	r2, r1, r2
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d182      	bne.n	800286c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002966:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	f023 020f 	bic.w	r2, r3, #15
 800296e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002972:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	4937      	ldr	r1, [pc, #220]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 800297c:	4313      	orrs	r3, r2
 800297e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800298c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a19      	ldr	r1, [r3, #32]
 8002994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002998:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	492d      	ldr	r1, [pc, #180]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80029b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fa93 f2a3 	rbit	r2, r3
 80029c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029cc:	601a      	str	r2, [r3, #0]
  return result;
 80029ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029d6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	461a      	mov	r2, r3
 80029ea:	2301      	movs	r3, #1
 80029ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7fe f851 	bl	8000a94 <HAL_GetTick>
 80029f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f6:	e009      	b.n	8002a0c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe f84c 	bl	8000a94 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e156      	b.n	8002cba <HAL_RCC_OscConfig+0x109a>
 8002a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a10:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a30:	601a      	str	r2, [r3, #0]
  return result;
 8002a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a36:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0xe3c>
 8002a50:	4b01      	ldr	r3, [pc, #4]	; (8002a58 <HAL_RCC_OscConfig+0xe38>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	e02a      	b.n	8002aac <HAL_RCC_OscConfig+0xe8c>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a86:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a94:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	4b86      	ldr	r3, [pc, #536]	; (8002cc4 <HAL_RCC_OscConfig+0x10a4>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ab0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ab4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ab8:	6011      	str	r1, [r2, #0]
 8002aba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002abe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	fa92 f1a2 	rbit	r1, r2
 8002ac8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002acc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002ad0:	6011      	str	r1, [r2, #0]
  return result;
 8002ad2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ad6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	fab2 f282 	clz	r2, r2
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f042 0220 	orr.w	r2, r2, #32
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f002 021f 	and.w	r2, r2, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f202 	lsl.w	r2, r1, r2
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f43f af7f 	beq.w	80029f8 <HAL_RCC_OscConfig+0xdd8>
 8002afa:	e0dd      	b.n	8002cb8 <HAL_RCC_OscConfig+0x1098>
 8002afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b20:	601a      	str	r2, [r3, #0]
  return result;
 8002b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b2a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2300      	movs	r3, #0
 8002b40:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fd ffa7 	bl	8000a94 <HAL_GetTick>
 8002b46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4a:	e009      	b.n	8002b60 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fd ffa2 	bl	8000a94 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e0ac      	b.n	8002cba <HAL_RCC_OscConfig+0x109a>
 8002b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b72:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	fa93 f2a3 	rbit	r2, r3
 8002b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b84:	601a      	str	r2, [r3, #0]
  return result;
 8002b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d102      	bne.n	8002baa <HAL_RCC_OscConfig+0xf8a>
 8002ba4:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_OscConfig+0x10a4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	e027      	b.n	8002bfa <HAL_RCC_OscConfig+0xfda>
 8002baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bae:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002bd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fa93 f2a3 	rbit	r2, r3
 8002bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <HAL_RCC_OscConfig+0x10a4>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bfe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c02:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c06:	6011      	str	r1, [r2, #0]
 8002c08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	fa92 f1a2 	rbit	r1, r2
 8002c16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c1a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002c1e:	6011      	str	r1, [r2, #0]
  return result;
 8002c20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c24:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	fab2 f282 	clz	r2, r2
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d182      	bne.n	8002b4c <HAL_RCC_OscConfig+0xf2c>
 8002c46:	e037      	b.n	8002cb8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e02e      	b.n	8002cba <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_OscConfig+0x10a4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002c64:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_RCC_OscConfig+0x10a4>)
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c70:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d117      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c88:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca0:	f003 020f 	and.w	r2, r3, #15
 8002ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b09e      	sub	sp, #120	; 0x78
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e162      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b90      	ldr	r3, [pc, #576]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d910      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b8d      	ldr	r3, [pc, #564]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 0207 	bic.w	r2, r3, #7
 8002cf6:	498b      	ldr	r1, [pc, #556]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b89      	ldr	r3, [pc, #548]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e14a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b82      	ldr	r3, [pc, #520]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	497f      	ldr	r1, [pc, #508]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80dc 	beq.w	8002ef4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d13c      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xf6>
 8002d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d102      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xa6>
 8002d68:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	e00f      	b.n	8002d8e <HAL_RCC_ClockConfig+0xc6>
 8002d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8002d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d80:	663b      	str	r3, [r7, #96]	; 0x60
 8002d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d8a:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d92:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d96:	fa92 f2a2 	rbit	r2, r2
 8002d9a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d9e:	fab2 f282 	clz	r2, r2
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f042 0220 	orr.w	r2, r2, #32
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f002 021f 	and.w	r2, r2, #31
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d17b      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0f3      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d13c      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x178>
 8002dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x128>
 8002dea:	4b4f      	ldr	r3, [pc, #316]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_ClockConfig+0x148>
 8002df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002df4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40
 8002e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0c:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e14:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e18:	fa92 f2a2 	rbit	r2, r2
 8002e1c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e20:	fab2 f282 	clz	r2, r2
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	f042 0220 	orr.w	r2, r2, #32
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	f002 021f 	and.w	r2, r2, #31
 8002e30:	2101      	movs	r1, #1
 8002e32:	fa01 f202 	lsl.w	r2, r1, r2
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d13a      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b2      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
 8002e40:	2302      	movs	r3, #2
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x1a0>
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	e00d      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1bc>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
 8002e74:	2302      	movs	r3, #2
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2202      	movs	r2, #2
 8002e86:	61ba      	str	r2, [r7, #24]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	fa92 f2a2 	rbit	r2, r2
 8002e8e:	617a      	str	r2, [r7, #20]
  return result;
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	fab2 f282 	clz	r2, r2
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f042 0220 	orr.w	r2, r2, #32
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f002 021f 	and.w	r2, r2, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e079      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	491a      	ldr	r1, [pc, #104]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7fd fde6 	bl	8000a94 <HAL_GetTick>
 8002ec8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7fd fde2 	bl	8000a94 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e061      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d214      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	4906      	ldr	r1, [pc, #24]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e040      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
 8002f24:	40022000 	.word	0x40022000
 8002f28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	491a      	ldr	r1, [pc, #104]	; (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4912      	ldr	r1, [pc, #72]	; (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f6a:	f000 f829 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4601      	mov	r1, r0
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f78:	22f0      	movs	r2, #240	; 0xf0
 8002f7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	fa92 f2a2 	rbit	r2, r2
 8002f82:	60fa      	str	r2, [r7, #12]
  return result;
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	fab2 f282 	clz	r2, r2
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	40d3      	lsrs	r3, r2
 8002f8e:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <HAL_RCC_ClockConfig+0x2ec>)
 8002f90:	5cd3      	ldrb	r3, [r2, r3]
 8002f92:	fa21 f303 	lsr.w	r3, r1, r3
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <HAL_RCC_ClockConfig+0x2f0>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_RCC_ClockConfig+0x2f4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fd34 	bl	8000a0c <HAL_InitTick>
  
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3778      	adds	r7, #120	; 0x78
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08003e50 	.word	0x08003e50
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	20000004 	.word	0x20000004

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b08b      	sub	sp, #44	; 0x2c
 8002fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002fda:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d002      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8002fee:	e03f      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ff0:	4b25      	ldr	r3, [pc, #148]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ff2:	623b      	str	r3, [r7, #32]
      break;
 8002ff4:	e03f      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ffc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003000:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	fa92 f2a2 	rbit	r2, r2
 8003008:	607a      	str	r2, [r7, #4]
  return result;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	fab2 f282 	clz	r2, r2
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	40d3      	lsrs	r3, r2
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	220f      	movs	r2, #15
 8003024:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	fa92 f2a2 	rbit	r2, r2
 800302c:	60fa      	str	r2, [r7, #12]
  return result;
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	fab2 f282 	clz	r2, r2
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	40d3      	lsrs	r3, r2
 8003038:	4a15      	ldr	r2, [pc, #84]	; (8003090 <HAL_RCC_GetSysClockFreq+0xd0>)
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc8>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	e007      	b.n	800306a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800305a:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc8>)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	623b      	str	r3, [r7, #32]
      break;
 800306e:	e002      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003072:	623b      	str	r3, [r7, #32]
      break;
 8003074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003076:	6a3b      	ldr	r3, [r7, #32]
}
 8003078:	4618      	mov	r0, r3
 800307a:	372c      	adds	r7, #44	; 0x2c
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40021000 	.word	0x40021000
 8003088:	007a1200 	.word	0x007a1200
 800308c:	08003e68 	.word	0x08003e68
 8003090:	08003e78 	.word	0x08003e78

08003094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000000 	.word	0x20000000

080030ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030b2:	f7ff ffef 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030b6:	4601      	mov	r1, r0
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	fa92 f2a2 	rbit	r2, r2
 80030cc:	603a      	str	r2, [r7, #0]
  return result;
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	fab2 f282 	clz	r2, r2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	40d3      	lsrs	r3, r2
 80030d8:	4a04      	ldr	r2, [pc, #16]	; (80030ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	08003e60 	.word	0x08003e60

080030f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030f6:	f7ff ffcd 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030fa:	4601      	mov	r1, r0
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003104:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003108:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	fa92 f2a2 	rbit	r2, r2
 8003110:	603a      	str	r2, [r7, #0]
  return result;
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	40d3      	lsrs	r3, r2
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x40>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	08003e60 	.word	0x08003e60

08003134 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b092      	sub	sp, #72	; 0x48
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80d4 	beq.w	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003158:	4b4e      	ldr	r3, [pc, #312]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10e      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	4a4a      	ldr	r2, [pc, #296]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	61d3      	str	r3, [r2, #28]
 8003170:	4b48      	ldr	r3, [pc, #288]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003182:	4b45      	ldr	r3, [pc, #276]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d118      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800318e:	4b42      	ldr	r3, [pc, #264]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a41      	ldr	r2, [pc, #260]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003198:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319a:	f7fd fc7b 	bl	8000a94 <HAL_GetTick>
 800319e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	e008      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a2:	f7fd fc77 	bl	8000a94 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	; 0x64
 80031ae:	d901      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1d6      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	4b38      	ldr	r3, [pc, #224]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031c0:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8084 	beq.w	80032da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031dc:	429a      	cmp	r2, r3
 80031de:	d07c      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031e0:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	461a      	mov	r2, r3
 800320a:	2301      	movs	r3, #1
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	461a      	mov	r2, r3
 800322e:	2300      	movs	r3, #0
 8003230:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003236:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d04b      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fd fc27 	bl	8000a94 <HAL_GetTick>
 8003246:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	e00a      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fd fc23 	bl	8000a94 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e180      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003260:	2302      	movs	r3, #2
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	2302      	movs	r3, #2
 800326e:	623b      	str	r3, [r7, #32]
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	61fb      	str	r3, [r7, #28]
  return result;
 8003278:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d108      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800328e:	4b01      	ldr	r3, [pc, #4]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	e00d      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	10908100 	.word	0x10908100
 80032a0:	2302      	movs	r3, #2
 80032a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	4b9a      	ldr	r3, [pc, #616]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2202      	movs	r2, #2
 80032b2:	613a      	str	r2, [r7, #16]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	fa92 f2a2 	rbit	r2, r2
 80032ba:	60fa      	str	r2, [r7, #12]
  return result;
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	fab2 f282 	clz	r2, r2
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	f002 021f 	and.w	r2, r2, #31
 80032ce:	2101      	movs	r1, #1
 80032d0:	fa01 f202 	lsl.w	r2, r1, r2
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0b7      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032da:	4b8f      	ldr	r3, [pc, #572]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	498c      	ldr	r1, [pc, #560]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b88      	ldr	r3, [pc, #544]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	4a87      	ldr	r2, [pc, #540]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800330c:	4b82      	ldr	r3, [pc, #520]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	f023 0203 	bic.w	r2, r3, #3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	497f      	ldr	r1, [pc, #508]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800332a:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	4978      	ldr	r1, [pc, #480]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003338:	4313      	orrs	r3, r2
 800333a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003348:	4b73      	ldr	r3, [pc, #460]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	4970      	ldr	r1, [pc, #448]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003366:	4b6c      	ldr	r3, [pc, #432]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f023 0210 	bic.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4969      	ldr	r1, [pc, #420]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003374:	4313      	orrs	r3, r2
 8003376:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003384:	4b64      	ldr	r3, [pc, #400]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	4961      	ldr	r1, [pc, #388]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003392:	4313      	orrs	r3, r2
 8003394:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033a2:	4b5d      	ldr	r3, [pc, #372]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f023 0220 	bic.w	r2, r3, #32
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	495a      	ldr	r1, [pc, #360]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c0:	4b55      	ldr	r3, [pc, #340]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4952      	ldr	r1, [pc, #328]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033de:	4b4e      	ldr	r3, [pc, #312]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	494b      	ldr	r1, [pc, #300]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033fc:	4b46      	ldr	r3, [pc, #280]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	4943      	ldr	r1, [pc, #268]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	493c      	ldr	r1, [pc, #240]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003438:	4b37      	ldr	r3, [pc, #220]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	4934      	ldr	r1, [pc, #208]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	492d      	ldr	r1, [pc, #180]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	4925      	ldr	r1, [pc, #148]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003482:	4313      	orrs	r3, r2
 8003484:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	491e      	ldr	r1, [pc, #120]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	4916      	ldr	r1, [pc, #88]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	490f      	ldr	r1, [pc, #60]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	4907      	ldr	r1, [pc, #28]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800350a:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	e002      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351e:	4913      	ldr	r1, [pc, #76]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003520:	4313      	orrs	r3, r2
 8003522:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353c:	490b      	ldr	r1, [pc, #44]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800353e:	4313      	orrs	r3, r2
 8003540:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	4904      	ldr	r1, [pc, #16]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800355c:	4313      	orrs	r3, r2
 800355e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3748      	adds	r7, #72	; 0x48
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000

08003570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e040      	b.n	8003604 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd f97c 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2224      	movs	r2, #36	; 0x24
 800359c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f82c 	bl	800360c <UART_SetConfig>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e022      	b.n	8003604 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9f4 	bl	80039b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fa7b 	bl	8003af8 <UART_CheckIdleState>
 8003602:	4603      	mov	r3, r0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b92      	ldr	r3, [pc, #584]	; (8003880 <UART_SetConfig+0x274>)
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	6979      	ldr	r1, [r7, #20]
 8003640:	430b      	orrs	r3, r1
 8003642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a80      	ldr	r2, [pc, #512]	; (8003884 <UART_SetConfig+0x278>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d120      	bne.n	80036ca <UART_SetConfig+0xbe>
 8003688:	4b7f      	ldr	r3, [pc, #508]	; (8003888 <UART_SetConfig+0x27c>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b03      	cmp	r3, #3
 8003692:	d817      	bhi.n	80036c4 <UART_SetConfig+0xb8>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <UART_SetConfig+0x90>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036b9 	.word	0x080036b9
 80036a4:	080036bf 	.word	0x080036bf
 80036a8:	080036b3 	.word	0x080036b3
 80036ac:	2301      	movs	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e0b5      	b.n	800381e <UART_SetConfig+0x212>
 80036b2:	2302      	movs	r3, #2
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e0b2      	b.n	800381e <UART_SetConfig+0x212>
 80036b8:	2304      	movs	r3, #4
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e0af      	b.n	800381e <UART_SetConfig+0x212>
 80036be:	2308      	movs	r3, #8
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e0ac      	b.n	800381e <UART_SetConfig+0x212>
 80036c4:	2310      	movs	r3, #16
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e0a9      	b.n	800381e <UART_SetConfig+0x212>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6f      	ldr	r2, [pc, #444]	; (800388c <UART_SetConfig+0x280>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d124      	bne.n	800371e <UART_SetConfig+0x112>
 80036d4:	4b6c      	ldr	r3, [pc, #432]	; (8003888 <UART_SetConfig+0x27c>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036e0:	d011      	beq.n	8003706 <UART_SetConfig+0xfa>
 80036e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036e6:	d817      	bhi.n	8003718 <UART_SetConfig+0x10c>
 80036e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036ec:	d011      	beq.n	8003712 <UART_SetConfig+0x106>
 80036ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036f2:	d811      	bhi.n	8003718 <UART_SetConfig+0x10c>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <UART_SetConfig+0xf4>
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fc:	d006      	beq.n	800370c <UART_SetConfig+0x100>
 80036fe:	e00b      	b.n	8003718 <UART_SetConfig+0x10c>
 8003700:	2300      	movs	r3, #0
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e08b      	b.n	800381e <UART_SetConfig+0x212>
 8003706:	2302      	movs	r3, #2
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	e088      	b.n	800381e <UART_SetConfig+0x212>
 800370c:	2304      	movs	r3, #4
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e085      	b.n	800381e <UART_SetConfig+0x212>
 8003712:	2308      	movs	r3, #8
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e082      	b.n	800381e <UART_SetConfig+0x212>
 8003718:	2310      	movs	r3, #16
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e07f      	b.n	800381e <UART_SetConfig+0x212>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a5b      	ldr	r2, [pc, #364]	; (8003890 <UART_SetConfig+0x284>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d124      	bne.n	8003772 <UART_SetConfig+0x166>
 8003728:	4b57      	ldr	r3, [pc, #348]	; (8003888 <UART_SetConfig+0x27c>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003730:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003734:	d011      	beq.n	800375a <UART_SetConfig+0x14e>
 8003736:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800373a:	d817      	bhi.n	800376c <UART_SetConfig+0x160>
 800373c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003740:	d011      	beq.n	8003766 <UART_SetConfig+0x15a>
 8003742:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003746:	d811      	bhi.n	800376c <UART_SetConfig+0x160>
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <UART_SetConfig+0x148>
 800374c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003750:	d006      	beq.n	8003760 <UART_SetConfig+0x154>
 8003752:	e00b      	b.n	800376c <UART_SetConfig+0x160>
 8003754:	2300      	movs	r3, #0
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e061      	b.n	800381e <UART_SetConfig+0x212>
 800375a:	2302      	movs	r3, #2
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e05e      	b.n	800381e <UART_SetConfig+0x212>
 8003760:	2304      	movs	r3, #4
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e05b      	b.n	800381e <UART_SetConfig+0x212>
 8003766:	2308      	movs	r3, #8
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	e058      	b.n	800381e <UART_SetConfig+0x212>
 800376c:	2310      	movs	r3, #16
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e055      	b.n	800381e <UART_SetConfig+0x212>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a47      	ldr	r2, [pc, #284]	; (8003894 <UART_SetConfig+0x288>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d124      	bne.n	80037c6 <UART_SetConfig+0x1ba>
 800377c:	4b42      	ldr	r3, [pc, #264]	; (8003888 <UART_SetConfig+0x27c>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003784:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003788:	d011      	beq.n	80037ae <UART_SetConfig+0x1a2>
 800378a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800378e:	d817      	bhi.n	80037c0 <UART_SetConfig+0x1b4>
 8003790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003794:	d011      	beq.n	80037ba <UART_SetConfig+0x1ae>
 8003796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800379a:	d811      	bhi.n	80037c0 <UART_SetConfig+0x1b4>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <UART_SetConfig+0x19c>
 80037a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a4:	d006      	beq.n	80037b4 <UART_SetConfig+0x1a8>
 80037a6:	e00b      	b.n	80037c0 <UART_SetConfig+0x1b4>
 80037a8:	2300      	movs	r3, #0
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e037      	b.n	800381e <UART_SetConfig+0x212>
 80037ae:	2302      	movs	r3, #2
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e034      	b.n	800381e <UART_SetConfig+0x212>
 80037b4:	2304      	movs	r3, #4
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e031      	b.n	800381e <UART_SetConfig+0x212>
 80037ba:	2308      	movs	r3, #8
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e02e      	b.n	800381e <UART_SetConfig+0x212>
 80037c0:	2310      	movs	r3, #16
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e02b      	b.n	800381e <UART_SetConfig+0x212>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a33      	ldr	r2, [pc, #204]	; (8003898 <UART_SetConfig+0x28c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d124      	bne.n	800381a <UART_SetConfig+0x20e>
 80037d0:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <UART_SetConfig+0x27c>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80037d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037dc:	d011      	beq.n	8003802 <UART_SetConfig+0x1f6>
 80037de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037e2:	d817      	bhi.n	8003814 <UART_SetConfig+0x208>
 80037e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037e8:	d011      	beq.n	800380e <UART_SetConfig+0x202>
 80037ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ee:	d811      	bhi.n	8003814 <UART_SetConfig+0x208>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <UART_SetConfig+0x1f0>
 80037f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f8:	d006      	beq.n	8003808 <UART_SetConfig+0x1fc>
 80037fa:	e00b      	b.n	8003814 <UART_SetConfig+0x208>
 80037fc:	2300      	movs	r3, #0
 80037fe:	77fb      	strb	r3, [r7, #31]
 8003800:	e00d      	b.n	800381e <UART_SetConfig+0x212>
 8003802:	2302      	movs	r3, #2
 8003804:	77fb      	strb	r3, [r7, #31]
 8003806:	e00a      	b.n	800381e <UART_SetConfig+0x212>
 8003808:	2304      	movs	r3, #4
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	e007      	b.n	800381e <UART_SetConfig+0x212>
 800380e:	2308      	movs	r3, #8
 8003810:	77fb      	strb	r3, [r7, #31]
 8003812:	e004      	b.n	800381e <UART_SetConfig+0x212>
 8003814:	2310      	movs	r3, #16
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e001      	b.n	800381e <UART_SetConfig+0x212>
 800381a:	2310      	movs	r3, #16
 800381c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003826:	d16b      	bne.n	8003900 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003828:	7ffb      	ldrb	r3, [r7, #31]
 800382a:	2b08      	cmp	r3, #8
 800382c:	d838      	bhi.n	80038a0 <UART_SetConfig+0x294>
 800382e:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <UART_SetConfig+0x228>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	08003859 	.word	0x08003859
 8003838:	08003861 	.word	0x08003861
 800383c:	08003869 	.word	0x08003869
 8003840:	080038a1 	.word	0x080038a1
 8003844:	0800386f 	.word	0x0800386f
 8003848:	080038a1 	.word	0x080038a1
 800384c:	080038a1 	.word	0x080038a1
 8003850:	080038a1 	.word	0x080038a1
 8003854:	08003877 	.word	0x08003877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003858:	f7ff fc28 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 800385c:	61b8      	str	r0, [r7, #24]
        break;
 800385e:	e024      	b.n	80038aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003860:	f7ff fc46 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 8003864:	61b8      	str	r0, [r7, #24]
        break;
 8003866:	e020      	b.n	80038aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <UART_SetConfig+0x290>)
 800386a:	61bb      	str	r3, [r7, #24]
        break;
 800386c:	e01d      	b.n	80038aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386e:	f7ff fba7 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8003872:	61b8      	str	r0, [r7, #24]
        break;
 8003874:	e019      	b.n	80038aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387a:	61bb      	str	r3, [r7, #24]
        break;
 800387c:	e015      	b.n	80038aa <UART_SetConfig+0x29e>
 800387e:	bf00      	nop
 8003880:	efff69f3 	.word	0xefff69f3
 8003884:	40013800 	.word	0x40013800
 8003888:	40021000 	.word	0x40021000
 800388c:	40004400 	.word	0x40004400
 8003890:	40004800 	.word	0x40004800
 8003894:	40004c00 	.word	0x40004c00
 8003898:	40005000 	.word	0x40005000
 800389c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	77bb      	strb	r3, [r7, #30]
        break;
 80038a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d073      	beq.n	8003998 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	005a      	lsls	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	441a      	add	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b0f      	cmp	r3, #15
 80038ca:	d916      	bls.n	80038fa <UART_SetConfig+0x2ee>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d2:	d212      	bcs.n	80038fa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f023 030f 	bic.w	r3, r3, #15
 80038dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	89fb      	ldrh	r3, [r7, #14]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	89fa      	ldrh	r2, [r7, #14]
 80038f6:	60da      	str	r2, [r3, #12]
 80038f8:	e04e      	b.n	8003998 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	77bb      	strb	r3, [r7, #30]
 80038fe:	e04b      	b.n	8003998 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003900:	7ffb      	ldrb	r3, [r7, #31]
 8003902:	2b08      	cmp	r3, #8
 8003904:	d827      	bhi.n	8003956 <UART_SetConfig+0x34a>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <UART_SetConfig+0x300>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003931 	.word	0x08003931
 8003910:	08003939 	.word	0x08003939
 8003914:	08003941 	.word	0x08003941
 8003918:	08003957 	.word	0x08003957
 800391c:	08003947 	.word	0x08003947
 8003920:	08003957 	.word	0x08003957
 8003924:	08003957 	.word	0x08003957
 8003928:	08003957 	.word	0x08003957
 800392c:	0800394f 	.word	0x0800394f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003930:	f7ff fbbc 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8003934:	61b8      	str	r0, [r7, #24]
        break;
 8003936:	e013      	b.n	8003960 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003938:	f7ff fbda 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 800393c:	61b8      	str	r0, [r7, #24]
        break;
 800393e:	e00f      	b.n	8003960 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <UART_SetConfig+0x3a4>)
 8003942:	61bb      	str	r3, [r7, #24]
        break;
 8003944:	e00c      	b.n	8003960 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003946:	f7ff fb3b 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 800394a:	61b8      	str	r0, [r7, #24]
        break;
 800394c:	e008      	b.n	8003960 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003952:	61bb      	str	r3, [r7, #24]
        break;
 8003954:	e004      	b.n	8003960 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	77bb      	strb	r3, [r7, #30]
        break;
 800395e:	bf00      	nop
    }

    if (pclk != 0U)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	085a      	lsrs	r2, r3, #1
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	441a      	add	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b0f      	cmp	r3, #15
 800397e:	d909      	bls.n	8003994 <UART_SetConfig+0x388>
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003986:	d205      	bcs.n	8003994 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	e001      	b.n	8003998 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	007a1200 	.word	0x007a1200

080039b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01a      	beq.n	8003aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab2:	d10a      	bne.n	8003aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	605a      	str	r2, [r3, #4]
  }
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b098      	sub	sp, #96	; 0x60
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b08:	f7fc ffc4 	bl	8000a94 <HAL_GetTick>
 8003b0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d12e      	bne.n	8003b7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f88c 	bl	8003c48 <UART_WaitOnFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d021      	beq.n	8003b7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b54:	647b      	str	r3, [r7, #68]	; 0x44
 8003b56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e6      	bne.n	8003b36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e062      	b.n	8003c40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d149      	bne.n	8003c1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b90:	2200      	movs	r2, #0
 8003b92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f856 	bl	8003c48 <UART_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d03c      	beq.n	8003c1c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	623b      	str	r3, [r7, #32]
   return(result);
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e6      	bne.n	8003ba2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bf4:	61fa      	str	r2, [r7, #28]
 8003bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	69b9      	ldr	r1, [r7, #24]
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	617b      	str	r3, [r7, #20]
   return(result);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e5      	bne.n	8003bd4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e011      	b.n	8003c40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3758      	adds	r7, #88	; 0x58
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c58:	e049      	b.n	8003cee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d045      	beq.n	8003cee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7fc ff17 	bl	8000a94 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e048      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d031      	beq.n	8003cee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d110      	bne.n	8003cba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f838 	bl	8003d16 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e029      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc8:	d111      	bne.n	8003cee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f81e 	bl	8003d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e00f      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	bf0c      	ite	eq
 8003cfe:	2301      	moveq	r3, #1
 8003d00:	2300      	movne	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d0a6      	beq.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b095      	sub	sp, #84	; 0x54
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e6      	bne.n	8003d1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3308      	adds	r3, #8
 8003d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d118      	bne.n	8003dbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f023 0310 	bic.w	r3, r3, #16
 8003da0:	647b      	str	r3, [r7, #68]	; 0x44
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6979      	ldr	r1, [r7, #20]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	613b      	str	r3, [r7, #16]
   return(result);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e6      	bne.n	8003d8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003dd2:	bf00      	nop
 8003dd4:	3754      	adds	r7, #84	; 0x54
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <memset>:
 8003dde:	4402      	add	r2, r0
 8003de0:	4603      	mov	r3, r0
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d100      	bne.n	8003de8 <memset+0xa>
 8003de6:	4770      	bx	lr
 8003de8:	f803 1b01 	strb.w	r1, [r3], #1
 8003dec:	e7f9      	b.n	8003de2 <memset+0x4>
	...

08003df0 <__libc_init_array>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	4d0d      	ldr	r5, [pc, #52]	; (8003e28 <__libc_init_array+0x38>)
 8003df4:	4c0d      	ldr	r4, [pc, #52]	; (8003e2c <__libc_init_array+0x3c>)
 8003df6:	1b64      	subs	r4, r4, r5
 8003df8:	10a4      	asrs	r4, r4, #2
 8003dfa:	2600      	movs	r6, #0
 8003dfc:	42a6      	cmp	r6, r4
 8003dfe:	d109      	bne.n	8003e14 <__libc_init_array+0x24>
 8003e00:	4d0b      	ldr	r5, [pc, #44]	; (8003e30 <__libc_init_array+0x40>)
 8003e02:	4c0c      	ldr	r4, [pc, #48]	; (8003e34 <__libc_init_array+0x44>)
 8003e04:	f000 f818 	bl	8003e38 <_init>
 8003e08:	1b64      	subs	r4, r4, r5
 8003e0a:	10a4      	asrs	r4, r4, #2
 8003e0c:	2600      	movs	r6, #0
 8003e0e:	42a6      	cmp	r6, r4
 8003e10:	d105      	bne.n	8003e1e <__libc_init_array+0x2e>
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
 8003e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e18:	4798      	blx	r3
 8003e1a:	3601      	adds	r6, #1
 8003e1c:	e7ee      	b.n	8003dfc <__libc_init_array+0xc>
 8003e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e22:	4798      	blx	r3
 8003e24:	3601      	adds	r6, #1
 8003e26:	e7f2      	b.n	8003e0e <__libc_init_array+0x1e>
 8003e28:	08003e88 	.word	0x08003e88
 8003e2c:	08003e88 	.word	0x08003e88
 8003e30:	08003e88 	.word	0x08003e88
 8003e34:	08003e8c 	.word	0x08003e8c

08003e38 <_init>:
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3a:	bf00      	nop
 8003e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3e:	bc08      	pop	{r3}
 8003e40:	469e      	mov	lr, r3
 8003e42:	4770      	bx	lr

08003e44 <_fini>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	bf00      	nop
 8003e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4a:	bc08      	pop	{r3}
 8003e4c:	469e      	mov	lr, r3
 8003e4e:	4770      	bx	lr
