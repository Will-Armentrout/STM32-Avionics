
Temp_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08007288  08007288  00017288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800764c  0800764c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800764c  0800764c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800764c  0800764c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          0000024c  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c540  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ba9  00000000  00000000  0002c787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a20  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007da  00000000  00000000  0002ed50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000209ff  00000000  00000000  0002f52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e685  00000000  00000000  0004ff29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2bf7  00000000  00000000  0005e5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003a98  00000000  00000000  001211a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00124c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007270 	.word	0x08007270

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007270 	.word	0x08007270

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b09a      	sub	sp, #104	; 0x68
 8000bbc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f000 fbaf 	bl	8001320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f87d 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 f94b 	bl	8000e60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bca:	f000 f919 	bl	8000e00 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bce:	f000 f8d7 	bl	8000d80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Temperature Sensor Loop Variables */
  	  char temperature[64];              /* String where to store the serial port output */
  	  uint16_t tempAddress = 0x30;   /* Temperature sensor I2C address */
 8000bd2:	2330      	movs	r3, #48	; 0x30
 8000bd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  	  uint8_t regAddress_Temp = 0x05u;      /* Temperature register address */
 8000bd8:	2305      	movs	r3, #5
 8000bda:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  	  uint8_t dataReg[2];           /* Buffer for reading the register content */
  	  uint16_t dataRegLong;         /* Variable used to store the whole register content */
  	  float tempVal = 0;            /* Float variable used for storing the temperature value */
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	657b      	str	r3, [r7, #84]	; 0x54
  while (1)
  {
    /* USER CODE END WHILE */
	  /* Temperature Sensor on I2C 1 */
	  	  /* Read the temperature register content */
	  	  HAL_I2C_Mem_Read(&hi2c1, tempAddress | 0x01, regAddress_Temp, I2C_MEMADD_SIZE_8BIT, &dataReg, 2, 2000u);
 8000be4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	b299      	uxth	r1, r3
 8000bee:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bf8:	9302      	str	r3, [sp, #8]
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	463b      	mov	r3, r7
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2301      	movs	r3, #1
 8000c04:	482b      	ldr	r0, [pc, #172]	; (8000cb4 <main+0xfc>)
 8000c06:	f000 ff2d 	bl	8001a64 <HAL_I2C_Mem_Read>

	  	  /* Compose the register content, regardless of the endianess */
	  	  dataRegLong = (((int16_t)dataReg[0] << 8) | dataReg[1]);
 8000c0a:	783b      	ldrb	r3, [r7, #0]
 8000c0c:	021b      	lsls	r3, r3, #8
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	  	  /* Extract the integer part from the fixed point value */
	  	  tempVal = ((dataRegLong & 0x0FFF) >> 4);
 8000c1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000c20:	111b      	asrs	r3, r3, #4
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	ee07 3a90 	vmov	s15, r3
 8000c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c2c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	  	  /* Extract decimal part */
	  	  tempValDec = 0.0625;
 8000c30:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8000c34:	653b      	str	r3, [r7, #80]	; 0x50
	  	  for (int i=0; i < 4; i++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c3a:	e01d      	b.n	8000c78 <main+0xc0>
	  	  {
	  		  tempVal += ((dataRegLong >> i) & 0x0001) * tempValDec;
 8000c3c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c42:	fa42 f303 	asr.w	r3, r2, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	ee07 3a90 	vmov	s15, r3
 8000c4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c52:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c5a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c62:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	  		  tempValDec *= 2u;
 8000c66:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000c6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c6e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	  	  for (int i=0; i < 4; i++)
 8000c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c74:	3301      	adds	r3, #1
 8000c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	ddde      	ble.n	8000c3c <main+0x84>
	  	  }

	  	  /* Prepare a formatted string, with the temperature value */
	  	  sprintf(temperature, "Temperature is %f °C\r\n", tempVal);
 8000c7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000c80:	f7ff fc6a 	bl	8000558 <__aeabi_f2d>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	1d38      	adds	r0, r7, #4
 8000c8a:	490b      	ldr	r1, [pc, #44]	; (8000cb8 <main+0x100>)
 8000c8c:	f004 f992 	bl	8004fb4 <siprintf>
	  	  /* Transmit the message over UART */
	  	  HAL_UART_Transmit(&huart2, temperature, strlen(temperature), 1000u);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff faf4 	bl	8000280 <strlen>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	1d39      	adds	r1, r7, #4
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <main+0x104>)
 8000ca4:	f002 ffea 	bl	8003c7c <HAL_UART_Transmit>
	  	  /* Wait half a second */
	  	  HAL_Delay(500);
 8000ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cac:	f000 fb9e 	bl	80013ec <HAL_Delay>
  {
 8000cb0:	e798      	b.n	8000be4 <main+0x2c>
 8000cb2:	bf00      	nop
 8000cb4:	200001f0 	.word	0x200001f0
 8000cb8:	08007288 	.word	0x08007288
 8000cbc:	20000244 	.word	0x20000244

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0a6      	sub	sp, #152	; 0x98
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cca:	2228      	movs	r2, #40	; 0x28
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 f9d3 	bl	800507a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2258      	movs	r2, #88	; 0x58
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 f9c5 	bl	800507a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fab6 	bl	8002290 <HAL_RCC_OscConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 f8ff 	bl	8000f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2e:	230f      	movs	r3, #15
 8000d30:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d32:	2302      	movs	r3, #2
 8000d34:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 faf4 	bl	8003338 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d56:	f000 f8e9 	bl	8000f2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000d5a:	2322      	movs	r3, #34	; 0x22
 8000d5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 fd1b 	bl	80037a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d74:	f000 f8da 	bl	8000f2c <Error_Handler>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3798      	adds	r7, #152	; 0x98
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_I2C1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2C;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <MX_I2C1_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dbc:	f000 fdc2 	bl	8001944 <HAL_I2C_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 f8b1 	bl	8000f2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dce:	f001 f9c7 	bl	8002160 <HAL_I2CEx_ConfigAnalogFilter>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 f8a8 	bl	8000f2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000de0:	f001 fa09 	bl	80021f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f89f 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001f0 	.word	0x200001f0
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	00201d2c 	.word	0x00201d2c

08000e00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <MX_USART2_UART_Init+0x5c>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e0c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_USART2_UART_Init+0x58>)
 8000e44:	f002 fecc 	bl	8003be0 <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e4e:	f000 f86d 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000244 	.word	0x20000244
 8000e5c:	40004400 	.word	0x40004400

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a2a      	ldr	r2, [pc, #168]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2120      	movs	r1, #32
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f000 fd19 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <MX_GPIO_Init+0xc8>)
 8000efa:	f000 fb81 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000efe:	2320      	movs	r3, #32
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f000 fb72 	bl	8001600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000800 	.word	0x48000800

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_MspInit+0x44>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_MspInit+0x44>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6193      	str	r3, [r2, #24]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_MspInit+0x44>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_MspInit+0x44>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_MspInit+0x44>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_MspInit+0x44>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f6e:	2007      	movs	r0, #7
 8000f70:	f000 fb12 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40021000 	.word	0x40021000

08000f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a26      	ldr	r2, [pc, #152]	; (8001038 <HAL_I2C_MspInit+0xb8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d145      	bne.n	800102e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_I2C_MspInit+0xbc>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a25      	ldr	r2, [pc, #148]	; (800103c <HAL_I2C_MspInit+0xbc>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	6153      	str	r3, [r2, #20]
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_I2C_MspInit+0xbc>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_I2C_MspInit+0xbc>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4a1f      	ldr	r2, [pc, #124]	; (800103c <HAL_I2C_MspInit+0xbc>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc4:	6153      	str	r3, [r2, #20]
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_I2C_MspInit+0xbc>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd8:	2312      	movs	r3, #18
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f000 fb05 	bl	8001600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffa:	2312      	movs	r3, #18
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001006:	2304      	movs	r3, #4
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <HAL_I2C_MspInit+0xc0>)
 8001012:	f000 faf5 	bl	8001600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_I2C_MspInit+0xbc>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_I2C_MspInit+0xbc>)
 800101c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_I2C_MspInit+0xbc>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40005400 	.word	0x40005400
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_UART_MspInit+0x7c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d128      	bne.n	80010b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_UART_MspInit+0x80>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <HAL_UART_MspInit+0x80>)
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_UART_MspInit+0x80>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_UART_MspInit+0x80>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <HAL_UART_MspInit+0x80>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_UART_MspInit+0x80>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001096:	230c      	movs	r3, #12
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a6:	2307      	movs	r3, #7
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f000 faa4 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40004400 	.word	0x40004400
 80010c4:	40021000 	.word	0x40021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f94a 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return 1;
 8001120:	2301      	movs	r3, #1
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_kill>:

int _kill(int pid, int sig)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001136:	f003 fff3 	bl	8005120 <__errno>
 800113a:	4603      	mov	r3, r0
 800113c:	2216      	movs	r2, #22
 800113e:	601a      	str	r2, [r3, #0]
  return -1;
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <_exit>:

void _exit (int status)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ffe7 	bl	800112c <_kill>
  while (1) {}    /* Make sure we hang here */
 800115e:	e7fe      	b.n	800115e <_exit+0x12>

08001160 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e00a      	b.n	8001188 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001172:	f3af 8000 	nop.w
 8001176:	4601      	mov	r1, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	b2ca      	uxtb	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbf0      	blt.n	8001172 <_read+0x12>
  }

  return len;
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e009      	b.n	80011c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbf1      	blt.n	80011ac <_write+0x12>
  }
  return len;
 80011c8:	687b      	ldr	r3, [r7, #4]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_close>:

int _close(int file)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011fa:	605a      	str	r2, [r3, #4]
  return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_isatty>:

int _isatty(int file)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f003 ff58 	bl	8005120 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20010000 	.word	0x20010000
 800129c:	00000400 	.word	0x00000400
 80012a0:	200002cc 	.word	0x200002cc
 80012a4:	20000420 	.word	0x20000420

080012a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d0:	f7ff ffea 	bl	80012a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <LoopForever+0x6>)
  ldr r1, =_edata
 80012d6:	490d      	ldr	r1, [pc, #52]	; (800130c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <LoopForever+0xe>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012ec:	4c0a      	ldr	r4, [pc, #40]	; (8001318 <LoopForever+0x16>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fa:	f003 ff17 	bl	800512c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012fe:	f7ff fc5b 	bl	8000bb8 <main>

08001302 <LoopForever>:

LoopForever:
    b LoopForever
 8001302:	e7fe      	b.n	8001302 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001304:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001310:	08007654 	.word	0x08007654
  ldr r2, =_sbss
 8001314:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001318:	20000420 	.word	0x20000420

0800131c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC1_2_IRQHandler>
	...

08001320 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_Init+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_Init+0x28>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 f931 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f808 	bl	800134c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133c:	f7ff fdfc 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x54>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x58>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f93b 	bl	80015e6 <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00e      	b.n	8001398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d80a      	bhi.n	8001396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 f911 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_InitTick+0x5c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000004 	.word	0x20000004

080013ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008
 80013d0:	200002d0 	.word	0x200002d0

080013d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200002d0 	.word	0x200002d0

080013ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff ffee 	bl	80013d4 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d005      	beq.n	8001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_Delay+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001412:	bf00      	nop
 8001414:	f7ff ffde 	bl	80013d4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f7      	bhi.n	8001414 <HAL_Delay+0x28>
  {
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff47 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff5c 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffb0 	bl	8001554 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160e:	e160      	b.n	80018d2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8152 	beq.w	80018cc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d005      	beq.n	8001640 <HAL_GPIO_Init+0x40>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d130      	bne.n	80016a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001676:	2201      	movs	r2, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 0201 	and.w	r2, r3, #1
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d017      	beq.n	80016de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d123      	bne.n	8001732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	6939      	ldr	r1, [r7, #16]
 800172e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0203 	and.w	r2, r3, #3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80ac 	beq.w	80018cc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001774:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a5d      	ldr	r2, [pc, #372]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800178c:	4a59      	ldr	r2, [pc, #356]	; (80018f4 <HAL_GPIO_Init+0x2f4>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017b6:	d025      	beq.n	8001804 <HAL_GPIO_Init+0x204>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a4f      	ldr	r2, [pc, #316]	; (80018f8 <HAL_GPIO_Init+0x2f8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d01f      	beq.n	8001800 <HAL_GPIO_Init+0x200>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <HAL_GPIO_Init+0x2fc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d019      	beq.n	80017fc <HAL_GPIO_Init+0x1fc>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a4d      	ldr	r2, [pc, #308]	; (8001900 <HAL_GPIO_Init+0x300>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d013      	beq.n	80017f8 <HAL_GPIO_Init+0x1f8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a4c      	ldr	r2, [pc, #304]	; (8001904 <HAL_GPIO_Init+0x304>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00d      	beq.n	80017f4 <HAL_GPIO_Init+0x1f4>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a4b      	ldr	r2, [pc, #300]	; (8001908 <HAL_GPIO_Init+0x308>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x1f0>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a4a      	ldr	r2, [pc, #296]	; (800190c <HAL_GPIO_Init+0x30c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_Init+0x1ec>
 80017e8:	2306      	movs	r3, #6
 80017ea:	e00c      	b.n	8001806 <HAL_GPIO_Init+0x206>
 80017ec:	2307      	movs	r3, #7
 80017ee:	e00a      	b.n	8001806 <HAL_GPIO_Init+0x206>
 80017f0:	2305      	movs	r3, #5
 80017f2:	e008      	b.n	8001806 <HAL_GPIO_Init+0x206>
 80017f4:	2304      	movs	r3, #4
 80017f6:	e006      	b.n	8001806 <HAL_GPIO_Init+0x206>
 80017f8:	2303      	movs	r3, #3
 80017fa:	e004      	b.n	8001806 <HAL_GPIO_Init+0x206>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e002      	b.n	8001806 <HAL_GPIO_Init+0x206>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <HAL_GPIO_Init+0x206>
 8001804:	2300      	movs	r3, #0
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	4093      	lsls	r3, r2
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001816:	4937      	ldr	r1, [pc, #220]	; (80018f4 <HAL_GPIO_Init+0x2f4>)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001824:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <HAL_GPIO_Init+0x310>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001848:	4a31      	ldr	r2, [pc, #196]	; (8001910 <HAL_GPIO_Init+0x310>)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_GPIO_Init+0x310>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001872:	4a27      	ldr	r2, [pc, #156]	; (8001910 <HAL_GPIO_Init+0x310>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_GPIO_Init+0x310>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800189c:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <HAL_GPIO_Init+0x310>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_GPIO_Init+0x310>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <HAL_GPIO_Init+0x310>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f ae97 	bne.w	8001610 <HAL_GPIO_Init+0x10>
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48000800 	.word	0x48000800
 8001900:	48000c00 	.word	0x48000c00
 8001904:	48001000 	.word	0x48001000
 8001908:	48001400 	.word	0x48001400
 800190c:	48001800 	.word	0x48001800
 8001910:	40010400 	.word	0x40010400

08001914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001930:	e002      	b.n	8001938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e081      	b.n	8001a5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fb08 	bl	8000f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2224      	movs	r2, #36	; 0x24
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001994:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	e006      	b.n	80019cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d104      	bne.n	80019de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69d9      	ldr	r1, [r3, #28]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1a      	ldr	r2, [r3, #32]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	4611      	mov	r1, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	4603      	mov	r3, r0
 8001a74:	817b      	strh	r3, [r7, #10]
 8001a76:	460b      	mov	r3, r1
 8001a78:	813b      	strh	r3, [r7, #8]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	f040 80fd 	bne.w	8001c86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_I2C_Mem_Read+0x34>
 8001a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0f1      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2C_Mem_Read+0x4e>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e0ea      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001aba:	f7ff fc8b 	bl	80013d4 <HAL_GetTick>
 8001abe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2319      	movs	r3, #25
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f95b 	bl	8001d88 <I2C_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0d5      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2222      	movs	r2, #34	; 0x22
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a3a      	ldr	r2, [r7, #32]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b04:	88f8      	ldrh	r0, [r7, #6]
 8001b06:	893a      	ldrh	r2, [r7, #8]
 8001b08:	8979      	ldrh	r1, [r7, #10]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	4603      	mov	r3, r0
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f8bf 	bl	8001c98 <I2C_RequestMemoryRead>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0ad      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2bff      	cmp	r3, #255	; 0xff
 8001b34:	d90e      	bls.n	8001b54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	22ff      	movs	r2, #255	; 0xff
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	4b52      	ldr	r3, [pc, #328]	; (8001c90 <HAL_I2C_Mem_Read+0x22c>)
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fad5 	bl	80020fc <I2C_TransferConfig>
 8001b52:	e00f      	b.n	8001b74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	8979      	ldrh	r1, [r7, #10]
 8001b66:	4b4a      	ldr	r3, [pc, #296]	; (8001c90 <HAL_I2C_Mem_Read+0x22c>)
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fac4 	bl	80020fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f902 	bl	8001d88 <I2C_WaitOnFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07c      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d034      	beq.n	8001c34 <HAL_I2C_Mem_Read+0x1d0>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d130      	bne.n	8001c34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 f8d3 	bl	8001d88 <I2C_WaitOnFlagUntilTimeout>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e04d      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d90e      	bls.n	8001c14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	22ff      	movs	r2, #255	; 0xff
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	8979      	ldrh	r1, [r7, #10]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 fa75 	bl	80020fc <I2C_TransferConfig>
 8001c12:	e00f      	b.n	8001c34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	8979      	ldrh	r1, [r7, #10]
 8001c26:	2300      	movs	r3, #0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fa64 	bl	80020fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d19a      	bne.n	8001b74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f936 	bl	8001eb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e01a      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2220      	movs	r2, #32
 8001c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_I2C_Mem_Read+0x230>)
 8001c66:	400b      	ands	r3, r1
 8001c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001c86:	2302      	movs	r3, #2
  }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	80002400 	.word	0x80002400
 8001c94:	fe00e800 	.word	0xfe00e800

08001c98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	817b      	strh	r3, [r7, #10]
 8001caa:	460b      	mov	r3, r1
 8001cac:	813b      	strh	r3, [r7, #8]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	8979      	ldrh	r1, [r7, #10]
 8001cb8:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <I2C_RequestMemoryRead+0xa4>)
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fa1c 	bl	80020fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	69b9      	ldr	r1, [r7, #24]
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f8ac 	bl	8001e26 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e02c      	b.n	8001d32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cde:	893b      	ldrh	r3, [r7, #8]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ce8:	e015      	b.n	8001d16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cea:	893b      	ldrh	r3, [r7, #8]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	69b9      	ldr	r1, [r7, #24]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f892 	bl	8001e26 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e012      	b.n	8001d32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d0c:	893b      	ldrh	r3, [r7, #8]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2140      	movs	r1, #64	; 0x40
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f831 	bl	8001d88 <I2C_WaitOnFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	80002000 	.word	0x80002000

08001d40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d103      	bne.n	8001d5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d007      	beq.n	8001d7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	619a      	str	r2, [r3, #24]
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d98:	e031      	b.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d02d      	beq.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da2:	f7ff fb17 	bl	80013d4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d302      	bcc.n	8001db8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d122      	bne.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d113      	bne.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f043 0220 	orr.w	r2, r3, #32
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00f      	b.n	8001e1e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4013      	ands	r3, r2
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d0be      	beq.n	8001d9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e32:	e033      	b.n	8001e9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f87f 	bl	8001f3c <I2C_IsErrorOccurred>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e031      	b.n	8001eac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4e:	d025      	beq.n	8001e9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e50:	f7ff fac0 	bl	80013d4 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d302      	bcc.n	8001e66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d11a      	bne.n	8001e9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d013      	beq.n	8001e9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e78:	f043 0220 	orr.w	r2, r3, #32
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e007      	b.n	8001eac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d1c4      	bne.n	8001e34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ec0:	e02f      	b.n	8001f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f838 	bl	8001f3c <I2C_IsErrorOccurred>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e02d      	b.n	8001f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed6:	f7ff fa7d 	bl	80013d4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d302      	bcc.n	8001eec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d11a      	bne.n	8001f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d013      	beq.n	8001f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f043 0220 	orr.w	r2, r3, #32
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e007      	b.n	8001f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d1c8      	bne.n	8001ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d068      	beq.n	800203a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f70:	e049      	b.n	8002006 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d045      	beq.n	8002006 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f7a:	f7ff fa2b 	bl	80013d4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d302      	bcc.n	8001f90 <I2C_IsErrorOccurred+0x54>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d13a      	bne.n	8002006 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fa2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb2:	d121      	bne.n	8001ff8 <I2C_IsErrorOccurred+0xbc>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fba:	d01d      	beq.n	8001ff8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d01a      	beq.n	8001ff8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001fd2:	f7ff f9ff 	bl	80013d4 <HAL_GetTick>
 8001fd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fd8:	e00e      	b.n	8001ff8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fda:	f7ff f9fb 	bl	80013d4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b19      	cmp	r3, #25
 8001fe6:	d907      	bls.n	8001ff8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001ff6:	e006      	b.n	8002006 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b20      	cmp	r3, #32
 8002004:	d1e9      	bne.n	8001fda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b20      	cmp	r3, #32
 8002012:	d003      	beq.n	800201c <I2C_IsErrorOccurred+0xe0>
 8002014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0aa      	beq.n	8001f72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800201c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002020:	2b00      	cmp	r3, #0
 8002022:	d103      	bne.n	800202c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2220      	movs	r2, #32
 800202a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800207e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80020a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01c      	beq.n	80020ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff fe45 	bl	8001d40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <I2C_IsErrorOccurred+0x1bc>)
 80020c2:	400b      	ands	r3, r1
 80020c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80020ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	fe00e800 	.word	0xfe00e800

080020fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	817b      	strh	r3, [r7, #10]
 800210a:	4613      	mov	r3, r2
 800210c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800210e:	897b      	ldrh	r3, [r7, #10]
 8002110:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002114:	7a7b      	ldrb	r3, [r7, #9]
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800211c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	4313      	orrs	r3, r2
 8002126:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800212a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	0d5b      	lsrs	r3, r3, #21
 8002136:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <I2C_TransferConfig+0x60>)
 800213c:	430b      	orrs	r3, r1
 800213e:	43db      	mvns	r3, r3
 8002140:	ea02 0103 	and.w	r1, r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	430a      	orrs	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	03ff63ff 	.word	0x03ff63ff

08002160 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b20      	cmp	r3, #32
 8002174:	d138      	bne.n	80021e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002180:	2302      	movs	r3, #2
 8002182:	e032      	b.n	80021ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6819      	ldr	r1, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e000      	b.n	80021ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
  }
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b20      	cmp	r3, #32
 800220a:	d139      	bne.n	8002280 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002216:	2302      	movs	r3, #2
 8002218:	e033      	b.n	8002282 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2224      	movs	r2, #36	; 0x24
 8002226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002248:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002296:	af00      	add	r7, sp, #0
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f001 b83a 	b.w	800332a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 816f 	beq.w	80025aa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022cc:	4bb5      	ldr	r3, [pc, #724]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d00c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022d8:	4bb2      	ldr	r3, [pc, #712]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d15c      	bne.n	800239e <HAL_RCC_OscConfig+0x10e>
 80022e4:	4baf      	ldr	r3, [pc, #700]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80022ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f0:	d155      	bne.n	800239e <HAL_RCC_OscConfig+0x10e>
 80022f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002306:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d102      	bne.n	8002324 <HAL_RCC_OscConfig+0x94>
 800231e:	4ba1      	ldr	r3, [pc, #644]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	e015      	b.n	8002350 <HAL_RCC_OscConfig+0xc0>
 8002324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002328:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800233c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002340:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800234c:	4b95      	ldr	r3, [pc, #596]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002354:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002358:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800235c:	fa92 f2a2 	rbit	r2, r2
 8002360:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002364:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002368:	fab2 f282 	clz	r2, r2
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f042 0220 	orr.w	r2, r2, #32
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	f002 021f 	and.w	r2, r2, #31
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f202 	lsl.w	r2, r1, r2
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8111 	beq.w	80025a8 <HAL_RCC_OscConfig+0x318>
 8002386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 8108 	bne.w	80025a8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	f000 bfc6 	b.w	800332a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x12e>
 80023b0:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a7b      	ldr	r2, [pc, #492]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e036      	b.n	800242c <HAL_RCC_OscConfig+0x19c>
 80023be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x158>
 80023ce:	4b75      	ldr	r3, [pc, #468]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a74      	ldr	r2, [pc, #464]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b72      	ldr	r3, [pc, #456]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a71      	ldr	r2, [pc, #452]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80023e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e021      	b.n	800242c <HAL_RCC_OscConfig+0x19c>
 80023e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x184>
 80023fa:	4b6a      	ldr	r3, [pc, #424]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a69      	ldr	r2, [pc, #420]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b67      	ldr	r3, [pc, #412]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a66      	ldr	r2, [pc, #408]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x19c>
 8002414:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a62      	ldr	r2, [pc, #392]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 800241a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5f      	ldr	r2, [pc, #380]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 8002426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800242c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002430:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d059      	beq.n	80024f0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe ffca 	bl	80013d4 <HAL_GetTick>
 8002440:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002446:	f7fe ffc5 	bl	80013d4 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d902      	bls.n	800245c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	f000 bf67 	b.w	800332a <HAL_RCC_OscConfig+0x109a>
 800245c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002460:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002470:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d102      	bne.n	800248e <HAL_RCC_OscConfig+0x1fe>
 8002488:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	e015      	b.n	80024ba <HAL_RCC_OscConfig+0x22a>
 800248e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002492:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80024a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80024aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024be:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80024c2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80024c6:	fa92 f2a2 	rbit	r2, r2
 80024ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80024ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024d2:	fab2 f282 	clz	r2, r2
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	f042 0220 	orr.w	r2, r2, #32
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	f002 021f 	and.w	r2, r2, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f202 	lsl.w	r2, r1, r2
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0ab      	beq.n	8002446 <HAL_RCC_OscConfig+0x1b6>
 80024ee:	e05c      	b.n	80025aa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe ff70 	bl	80013d4 <HAL_GetTick>
 80024f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fa:	f7fe ff6b 	bl	80013d4 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d902      	bls.n	8002510 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	f000 bf0d 	b.w	800332a <HAL_RCC_OscConfig+0x109a>
 8002510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002514:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002524:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d102      	bne.n	8002542 <HAL_RCC_OscConfig+0x2b2>
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	e015      	b.n	800256e <HAL_RCC_OscConfig+0x2de>
 8002542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002546:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800255e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_RCC_OscConfig+0x314>)
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002572:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002576:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002582:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f042 0220 	orr.w	r2, r2, #32
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ab      	bne.n	80024fa <HAL_RCC_OscConfig+0x26a>
 80025a2:	e002      	b.n	80025aa <HAL_RCC_OscConfig+0x31a>
 80025a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 817f 	beq.w	80028be <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025c0:	4ba7      	ldr	r3, [pc, #668]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025cc:	4ba4      	ldr	r3, [pc, #656]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d173      	bne.n	80026c0 <HAL_RCC_OscConfig+0x430>
 80025d8:	4ba1      	ldr	r3, [pc, #644]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80025e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e4:	d16c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x430>
 80025e6:	2302      	movs	r3, #2
 80025e8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80025f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d102      	bne.n	8002616 <HAL_RCC_OscConfig+0x386>
 8002610:	4b93      	ldr	r3, [pc, #588]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	e013      	b.n	800263e <HAL_RCC_OscConfig+0x3ae>
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002628:	2302      	movs	r3, #2
 800262a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800262e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2202      	movs	r2, #2
 8002640:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002644:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002648:	fa92 f2a2 	rbit	r2, r2
 800264c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002650:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f002 021f 	and.w	r2, r2, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f202 	lsl.w	r2, r1, r2
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCC_OscConfig+0x3f6>
 8002670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002674:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d002      	beq.n	8002686 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f000 be52 	b.w	800332a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002692:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	21f8      	movs	r1, #248	; 0xf8
 800269c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80026a4:	fa91 f1a1 	rbit	r1, r1
 80026a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80026ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80026b0:	fab1 f181 	clz	r1, r1
 80026b4:	b2c9      	uxtb	r1, r1
 80026b6:	408b      	lsls	r3, r1
 80026b8:	4969      	ldr	r1, [pc, #420]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	e0fe      	b.n	80028be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8088 	beq.w	80027e2 <HAL_RCC_OscConfig+0x552>
 80026d2:	2301      	movs	r3, #1
 80026d4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80026e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	461a      	mov	r2, r3
 80026fa:	2301      	movs	r3, #1
 80026fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe fe69 	bl	80013d4 <HAL_GetTick>
 8002702:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002708:	f7fe fe64 	bl	80013d4 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d902      	bls.n	800271e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	f000 be06 	b.w	800332a <HAL_RCC_OscConfig+0x109a>
 800271e:	2302      	movs	r3, #2
 8002720:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002730:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d102      	bne.n	800274e <HAL_RCC_OscConfig+0x4be>
 8002748:	4b45      	ldr	r3, [pc, #276]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	e013      	b.n	8002776 <HAL_RCC_OscConfig+0x4e6>
 800274e:	2302      	movs	r3, #2
 8002750:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002766:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002772:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2202      	movs	r2, #2
 8002778:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800277c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002780:	fa92 f2a2 	rbit	r2, r2
 8002784:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002788:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800278c:	fab2 f282 	clz	r2, r2
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f042 0220 	orr.w	r2, r2, #32
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f002 021f 	and.w	r2, r2, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0af      	beq.n	8002708 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	21f8      	movs	r1, #248	; 0xf8
 80027be:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80027c6:	fa91 f1a1 	rbit	r1, r1
 80027ca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80027ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80027d2:	fab1 f181 	clz	r1, r1
 80027d6:	b2c9      	uxtb	r1, r1
 80027d8:	408b      	lsls	r3, r1
 80027da:	4921      	ldr	r1, [pc, #132]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e06d      	b.n	80028be <HAL_RCC_OscConfig+0x62e>
 80027e2:	2301      	movs	r3, #1
 80027e4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80027f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002802:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	461a      	mov	r2, r3
 800280a:	2300      	movs	r3, #0
 800280c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe fde1 	bl	80013d4 <HAL_GetTick>
 8002812:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002816:	e00a      	b.n	800282e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002818:	f7fe fddc 	bl	80013d4 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d902      	bls.n	800282e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	f000 bd7e 	b.w	800332a <HAL_RCC_OscConfig+0x109a>
 800282e:	2302      	movs	r3, #2
 8002830:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002840:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCC_OscConfig+0x5d4>
 8002858:	4b01      	ldr	r3, [pc, #4]	; (8002860 <HAL_RCC_OscConfig+0x5d0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	e016      	b.n	800288c <HAL_RCC_OscConfig+0x5fc>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002876:	2302      	movs	r3, #2
 8002878:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800287c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002888:	4bbf      	ldr	r3, [pc, #764]	; (8002b88 <HAL_RCC_OscConfig+0x8f8>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	2202      	movs	r2, #2
 800288e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002892:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002896:	fa92 f2a2 	rbit	r2, r2
 800289a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800289e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f042 0220 	orr.w	r2, r2, #32
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ac      	bne.n	8002818 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8113 	beq.w	8002afa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d07c      	beq.n	80029de <HAL_RCC_OscConfig+0x74e>
 80028e4:	2301      	movs	r3, #1
 80028e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80028f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	4ba2      	ldr	r3, [pc, #648]	; (8002b8c <HAL_RCC_OscConfig+0x8fc>)
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	461a      	mov	r2, r3
 800290a:	2301      	movs	r3, #1
 800290c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290e:	f7fe fd61 	bl	80013d4 <HAL_GetTick>
 8002912:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	e00a      	b.n	800292e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe fd5c 	bl	80013d4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d902      	bls.n	800292e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	f000 bcfe 	b.w	800332a <HAL_RCC_OscConfig+0x109a>
 800292e:	2302      	movs	r3, #2
 8002930:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002940:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800294e:	2202      	movs	r2, #2
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002972:	2202      	movs	r2, #2
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002988:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800298c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	4b7e      	ldr	r3, [pc, #504]	; (8002b88 <HAL_RCC_OscConfig+0x8f8>)
 8002990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002996:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800299a:	2102      	movs	r1, #2
 800299c:	6019      	str	r1, [r3, #0]
 800299e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f1a3 	rbit	r1, r3
 80029ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029b4:	6019      	str	r1, [r3, #0]
  return result;
 80029b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	2101      	movs	r1, #1
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d09d      	beq.n	8002918 <HAL_RCC_OscConfig+0x688>
 80029dc:	e08d      	b.n	8002afa <HAL_RCC_OscConfig+0x86a>
 80029de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	fa93 f2a3 	rbit	r2, r3
 80029f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a00:	601a      	str	r2, [r3, #0]
  return result;
 8002a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a06:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a0a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b5d      	ldr	r3, [pc, #372]	; (8002b8c <HAL_RCC_OscConfig+0x8fc>)
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a20:	f7fe fcd8 	bl	80013d4 <HAL_GetTick>
 8002a24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2a:	f7fe fcd3 	bl	80013d4 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d902      	bls.n	8002a40 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	f000 bc75 	b.w	800332a <HAL_RCC_OscConfig+0x109a>
 8002a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a48:	2202      	movs	r2, #2
 8002a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	fa93 f2a3 	rbit	r2, r3
 8002a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f2a3 	rbit	r2, r3
 8002a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a90:	2202      	movs	r2, #2
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002aaa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_RCC_OscConfig+0x8f8>)
 8002aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ab8:	2102      	movs	r1, #2
 8002aba:	6019      	str	r1, [r3, #0]
 8002abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f1a3 	rbit	r1, r3
 8002aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ace:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ad2:	6019      	str	r1, [r3, #0]
  return result;
 8002ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	2101      	movs	r1, #1
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d197      	bne.n	8002a2a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002afe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 81a5 	beq.w	8002e5a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_RCC_OscConfig+0x8f8>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_OscConfig+0x8f8>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_RCC_OscConfig+0x8f8>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	61d3      	str	r3, [r2, #28]
 8002b2e:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <HAL_RCC_OscConfig+0x8f8>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b48:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_RCC_OscConfig+0x900>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d121      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_RCC_OscConfig+0x900>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <HAL_RCC_OscConfig+0x900>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b68:	f7fe fc34 	bl	80013d4 <HAL_GetTick>
 8002b6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	e010      	b.n	8002b94 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7fe fc2f 	bl	80013d4 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d908      	bls.n	8002b94 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e3d1      	b.n	800332a <HAL_RCC_OscConfig+0x109a>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	10908120 	.word	0x10908120
 8002b90:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	4b8d      	ldr	r3, [pc, #564]	; (8002dcc <HAL_RCC_OscConfig+0xb3c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0e8      	beq.n	8002b72 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x92e>
 8002bb0:	4b87      	ldr	r3, [pc, #540]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4a86      	ldr	r2, [pc, #536]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6213      	str	r3, [r2, #32]
 8002bbc:	e035      	b.n	8002c2a <HAL_RCC_OscConfig+0x99a>
 8002bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x958>
 8002bce:	4b80      	ldr	r3, [pc, #512]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4a7f      	ldr	r2, [pc, #508]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6213      	str	r3, [r2, #32]
 8002bda:	4b7d      	ldr	r3, [pc, #500]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a7c      	ldr	r2, [pc, #496]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	e020      	b.n	8002c2a <HAL_RCC_OscConfig+0x99a>
 8002be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RCC_OscConfig+0x982>
 8002bf8:	4b75      	ldr	r3, [pc, #468]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a74      	ldr	r2, [pc, #464]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	4b72      	ldr	r3, [pc, #456]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4a71      	ldr	r2, [pc, #452]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6213      	str	r3, [r2, #32]
 8002c10:	e00b      	b.n	8002c2a <HAL_RCC_OscConfig+0x99a>
 8002c12:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a6e      	ldr	r2, [pc, #440]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6213      	str	r3, [r2, #32]
 8002c1e:	4b6c      	ldr	r3, [pc, #432]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a6b      	ldr	r2, [pc, #428]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002c24:	f023 0304 	bic.w	r3, r3, #4
 8002c28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8081 	beq.w	8002d3e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3c:	f7fe fbca 	bl	80013d4 <HAL_GetTick>
 8002c40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	e00b      	b.n	8002c5e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe fbc5 	bl	80013d4 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e365      	b.n	800332a <HAL_RCC_OscConfig+0x109a>
 8002c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c66:	2202      	movs	r2, #2
 8002c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	fa93 f2a3 	rbit	r2, r3
 8002c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c92:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ca4:	601a      	str	r2, [r3, #0]
  return result;
 8002ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002caa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002cae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f043 0302 	orr.w	r3, r3, #2
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_OscConfig+0xa3a>
 8002cc4:	4b42      	ldr	r3, [pc, #264]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	e013      	b.n	8002cf2 <HAL_RCC_OscConfig+0xa62>
 8002cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cda:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	fa93 f2a3 	rbit	r2, r3
 8002ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cf6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	6011      	str	r1, [r2, #0]
 8002cfe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d02:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	fa92 f1a2 	rbit	r1, r2
 8002d0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d10:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002d14:	6011      	str	r1, [r2, #0]
  return result;
 8002d16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d1a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	fab2 f282 	clz	r2, r2
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	f002 021f 	and.w	r2, r2, #31
 8002d30:	2101      	movs	r1, #1
 8002d32:	fa01 f202 	lsl.w	r2, r1, r2
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d084      	beq.n	8002c46 <HAL_RCC_OscConfig+0x9b6>
 8002d3c:	e083      	b.n	8002e46 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fb49 	bl	80013d4 <HAL_GetTick>
 8002d42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe fb44 	bl	80013d4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e2e4      	b.n	800332a <HAL_RCC_OscConfig+0x109a>
 8002d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d68:	2202      	movs	r2, #2
 8002d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d70:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d94:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	fa93 f2a3 	rbit	r2, r3
 8002d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002da6:	601a      	str	r2, [r3, #0]
  return result;
 8002da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002db0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xb44>
 8002dc6:	4b02      	ldr	r3, [pc, #8]	; (8002dd0 <HAL_RCC_OscConfig+0xb40>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	e017      	b.n	8002dfc <HAL_RCC_OscConfig+0xb6c>
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ddc:	2202      	movs	r2, #2
 8002dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fa93 f2a3 	rbit	r2, r3
 8002dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	4bb3      	ldr	r3, [pc, #716]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e00:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e04:	2102      	movs	r1, #2
 8002e06:	6011      	str	r1, [r2, #0]
 8002e08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	fa92 f1a2 	rbit	r1, r2
 8002e16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e1a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002e1e:	6011      	str	r1, [r2, #0]
  return result;
 8002e20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e24:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	fab2 f282 	clz	r2, r2
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	f002 021f 	and.w	r2, r2, #31
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d180      	bne.n	8002d48 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e46:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d105      	bne.n	8002e5a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4e:	4b9e      	ldr	r3, [pc, #632]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a9d      	ldr	r2, [pc, #628]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 8002e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e58:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 825e 	beq.w	8003328 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e6c:	4b96      	ldr	r3, [pc, #600]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	f000 821f 	beq.w	80032b8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	f040 8170 	bne.w	800316c <HAL_RCC_OscConfig+0xedc>
 8002e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002eb0:	601a      	str	r2, [r3, #0]
  return result;
 8002eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002eba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ec6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fa7f 	bl	80013d4 <HAL_GetTick>
 8002ed6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eda:	e009      	b.n	8002ef0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fa7a 	bl	80013d4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e21c      	b.n	800332a <HAL_RCC_OscConfig+0x109a>
 8002ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fa93 f2a3 	rbit	r2, r3
 8002f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f14:	601a      	str	r2, [r3, #0]
  return result;
 8002f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f1a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_OscConfig+0xcaa>
 8002f34:	4b64      	ldr	r3, [pc, #400]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	e027      	b.n	8002f8a <HAL_RCC_OscConfig+0xcfa>
 8002f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f4c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	fa93 f2a3 	rbit	r2, r3
 8002f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f72:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	fa93 f2a3 	rbit	r2, r3
 8002f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f80:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f96:	6011      	str	r1, [r2, #0]
 8002f98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f9c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	fa92 f1a2 	rbit	r1, r2
 8002fa6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002faa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002fae:	6011      	str	r1, [r2, #0]
  return result;
 8002fb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fb4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	fab2 f282 	clz	r2, r2
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	f042 0220 	orr.w	r2, r2, #32
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	f002 021f 	and.w	r2, r2, #31
 8002fca:	2101      	movs	r1, #1
 8002fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d182      	bne.n	8002edc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd6:	4b3c      	ldr	r3, [pc, #240]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	f023 020f 	bic.w	r2, r3, #15
 8002fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	4937      	ldr	r1, [pc, #220]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ffc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6a19      	ldr	r1, [r3, #32]
 8003004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003008:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	430b      	orrs	r3, r1
 8003012:	492d      	ldr	r1, [pc, #180]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
 8003018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800301c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003020:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	fa93 f2a3 	rbit	r2, r3
 8003034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003038:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800303c:	601a      	str	r2, [r3, #0]
  return result;
 800303e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003042:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003046:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003052:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	461a      	mov	r2, r3
 800305a:	2301      	movs	r3, #1
 800305c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305e:	f7fe f9b9 	bl	80013d4 <HAL_GetTick>
 8003062:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003066:	e009      	b.n	800307c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe f9b4 	bl	80013d4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e156      	b.n	800332a <HAL_RCC_OscConfig+0x109a>
 800307c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003080:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003084:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800308e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	fa93 f2a3 	rbit	r2, r3
 8003098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030a0:	601a      	str	r2, [r3, #0]
  return result;
 80030a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0xe3c>
 80030c0:	4b01      	ldr	r3, [pc, #4]	; (80030c8 <HAL_RCC_OscConfig+0xe38>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	e02a      	b.n	800311c <HAL_RCC_OscConfig+0xe8c>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80030d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030de:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fa93 f2a3 	rbit	r2, r3
 80030e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80030fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003104:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003112:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	4b86      	ldr	r3, [pc, #536]	; (8003334 <HAL_RCC_OscConfig+0x10a4>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003120:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003124:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003128:	6011      	str	r1, [r2, #0]
 800312a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800312e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	fa92 f1a2 	rbit	r1, r2
 8003138:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800313c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003140:	6011      	str	r1, [r2, #0]
  return result;
 8003142:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003146:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	fab2 f282 	clz	r2, r2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f042 0220 	orr.w	r2, r2, #32
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f002 021f 	and.w	r2, r2, #31
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f202 	lsl.w	r2, r1, r2
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	f43f af7f 	beq.w	8003068 <HAL_RCC_OscConfig+0xdd8>
 800316a:	e0dd      	b.n	8003328 <HAL_RCC_OscConfig+0x1098>
 800316c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003170:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	fa93 f2a3 	rbit	r2, r3
 8003188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003190:	601a      	str	r2, [r3, #0]
  return result;
 8003192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003196:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800319a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	461a      	mov	r2, r3
 80031ae:	2300      	movs	r3, #0
 80031b0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fe f90f 	bl	80013d4 <HAL_GetTick>
 80031b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ba:	e009      	b.n	80031d0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe f90a 	bl	80013d4 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0ac      	b.n	800332a <HAL_RCC_OscConfig+0x109a>
 80031d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	fa93 f2a3 	rbit	r2, r3
 80031ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80031f4:	601a      	str	r2, [r3, #0]
  return result;
 80031f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80031fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d102      	bne.n	800321a <HAL_RCC_OscConfig+0xf8a>
 8003214:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_RCC_OscConfig+0x10a4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	e027      	b.n	800326a <HAL_RCC_OscConfig+0xfda>
 800321a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800321e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fa93 f2a3 	rbit	r2, r3
 8003236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003244:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003248:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003252:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fa93 f2a3 	rbit	r2, r3
 800325c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003260:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	4b33      	ldr	r3, [pc, #204]	; (8003334 <HAL_RCC_OscConfig+0x10a4>)
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800326e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003272:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003276:	6011      	str	r1, [r2, #0]
 8003278:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800327c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	fa92 f1a2 	rbit	r1, r2
 8003286:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800328a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800328e:	6011      	str	r1, [r2, #0]
  return result;
 8003290:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003294:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	fab2 f282 	clz	r2, r2
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f042 0220 	orr.w	r2, r2, #32
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	f002 021f 	and.w	r2, r2, #31
 80032aa:	2101      	movs	r1, #1
 80032ac:	fa01 f202 	lsl.w	r2, r1, r2
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d182      	bne.n	80031bc <HAL_RCC_OscConfig+0xf2c>
 80032b6:	e037      	b.n	8003328 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e02e      	b.n	800332a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_OscConfig+0x10a4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_RCC_OscConfig+0x10a4>)
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80032e0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80032e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d117      	bne.n	8003324 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80032f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80032f8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003300:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003308:	429a      	cmp	r2, r3
 800330a:	d10b      	bne.n	8003324 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800330c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003310:	f003 020f 	and.w	r2, r3, #15
 8003314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003318:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000

08003338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b09e      	sub	sp, #120	; 0x78
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e162      	b.n	8003616 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b90      	ldr	r3, [pc, #576]	; (8003594 <HAL_RCC_ClockConfig+0x25c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d910      	bls.n	8003380 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b8d      	ldr	r3, [pc, #564]	; (8003594 <HAL_RCC_ClockConfig+0x25c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0207 	bic.w	r2, r3, #7
 8003366:	498b      	ldr	r1, [pc, #556]	; (8003594 <HAL_RCC_ClockConfig+0x25c>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b89      	ldr	r3, [pc, #548]	; (8003594 <HAL_RCC_ClockConfig+0x25c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e14a      	b.n	8003616 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b82      	ldr	r3, [pc, #520]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	497f      	ldr	r1, [pc, #508]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80dc 	beq.w	8003564 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d13c      	bne.n	800342e <HAL_RCC_ClockConfig+0xf6>
 80033b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d102      	bne.n	80033de <HAL_RCC_ClockConfig+0xa6>
 80033d8:	4b6f      	ldr	r3, [pc, #444]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	e00f      	b.n	80033fe <HAL_RCC_ClockConfig+0xc6>
 80033de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	667b      	str	r3, [r7, #100]	; 0x64
 80033ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f0:	663b      	str	r3, [r7, #96]	; 0x60
 80033f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033fa:	4b67      	ldr	r3, [pc, #412]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003402:	65ba      	str	r2, [r7, #88]	; 0x58
 8003404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003406:	fa92 f2a2 	rbit	r2, r2
 800340a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800340c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800340e:	fab2 f282 	clz	r2, r2
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f042 0220 	orr.w	r2, r2, #32
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	f002 021f 	and.w	r2, r2, #31
 800341e:	2101      	movs	r1, #1
 8003420:	fa01 f202 	lsl.w	r2, r1, r2
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d17b      	bne.n	8003522 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0f3      	b.n	8003616 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d13c      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x178>
 8003436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <HAL_RCC_ClockConfig+0x128>
 800345a:	4b4f      	ldr	r3, [pc, #316]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	e00f      	b.n	8003480 <HAL_RCC_ClockConfig+0x148>
 8003460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003464:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
 800346e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003472:	643b      	str	r3, [r7, #64]	; 0x40
 8003474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800347c:	4b46      	ldr	r3, [pc, #280]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003484:	63ba      	str	r2, [r7, #56]	; 0x38
 8003486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003488:	fa92 f2a2 	rbit	r2, r2
 800348c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800348e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003490:	fab2 f282 	clz	r2, r2
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	f042 0220 	orr.w	r2, r2, #32
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	f002 021f 	and.w	r2, r2, #31
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f202 	lsl.w	r2, r1, r2
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d13a      	bne.n	8003522 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b2      	b.n	8003616 <HAL_RCC_ClockConfig+0x2de>
 80034b0:	2302      	movs	r3, #2
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d102      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x1a0>
 80034d2:	4b31      	ldr	r3, [pc, #196]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	e00d      	b.n	80034f4 <HAL_RCC_ClockConfig+0x1bc>
 80034d8:	2302      	movs	r3, #2
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
 80034e4:	2302      	movs	r3, #2
 80034e6:	623b      	str	r3, [r7, #32]
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2202      	movs	r2, #2
 80034f6:	61ba      	str	r2, [r7, #24]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	fa92 f2a2 	rbit	r2, r2
 80034fe:	617a      	str	r2, [r7, #20]
  return result;
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	fab2 f282 	clz	r2, r2
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	f042 0220 	orr.w	r2, r2, #32
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	f002 021f 	and.w	r2, r2, #31
 8003512:	2101      	movs	r1, #1
 8003514:	fa01 f202 	lsl.w	r2, r1, r2
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e079      	b.n	8003616 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f023 0203 	bic.w	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	491a      	ldr	r1, [pc, #104]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003534:	f7fd ff4e 	bl	80013d4 <HAL_GetTick>
 8003538:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353a:	e00a      	b.n	8003552 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800353c:	f7fd ff4a 	bl	80013d4 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e061      	b.n	8003616 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	4b11      	ldr	r3, [pc, #68]	; (8003598 <HAL_RCC_ClockConfig+0x260>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 020c 	and.w	r2, r3, #12
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	429a      	cmp	r2, r3
 8003562:	d1eb      	bne.n	800353c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_RCC_ClockConfig+0x25c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d214      	bcs.n	800359c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_RCC_ClockConfig+0x25c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 0207 	bic.w	r2, r3, #7
 800357a:	4906      	ldr	r1, [pc, #24]	; (8003594 <HAL_RCC_ClockConfig+0x25c>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b04      	ldr	r3, [pc, #16]	; (8003594 <HAL_RCC_ClockConfig+0x25c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d005      	beq.n	800359c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e040      	b.n	8003616 <HAL_RCC_ClockConfig+0x2de>
 8003594:	40022000 	.word	0x40022000
 8003598:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a8:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <HAL_RCC_ClockConfig+0x2e8>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	491a      	ldr	r1, [pc, #104]	; (8003620 <HAL_RCC_ClockConfig+0x2e8>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c6:	4b16      	ldr	r3, [pc, #88]	; (8003620 <HAL_RCC_ClockConfig+0x2e8>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4912      	ldr	r1, [pc, #72]	; (8003620 <HAL_RCC_ClockConfig+0x2e8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035da:	f000 f829 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035de:	4601      	mov	r1, r0
 80035e0:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <HAL_RCC_ClockConfig+0x2e8>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e8:	22f0      	movs	r2, #240	; 0xf0
 80035ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	fa92 f2a2 	rbit	r2, r2
 80035f2:	60fa      	str	r2, [r7, #12]
  return result;
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	fab2 f282 	clz	r2, r2
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	40d3      	lsrs	r3, r2
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x2ec>)
 8003600:	5cd3      	ldrb	r3, [r2, r3]
 8003602:	fa21 f303 	lsr.w	r3, r1, r3
 8003606:	4a08      	ldr	r2, [pc, #32]	; (8003628 <HAL_RCC_ClockConfig+0x2f0>)
 8003608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_RCC_ClockConfig+0x2f4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd fe9c 	bl	800134c <HAL_InitTick>
  
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3778      	adds	r7, #120	; 0x78
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	080072a0 	.word	0x080072a0
 8003628:	20000000 	.word	0x20000000
 800362c:	20000004 	.word	0x20000004

08003630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	b08b      	sub	sp, #44	; 0x2c
 8003634:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800364a:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b04      	cmp	r3, #4
 8003658:	d002      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x30>
 800365a:	2b08      	cmp	r3, #8
 800365c:	d003      	beq.n	8003666 <HAL_RCC_GetSysClockFreq+0x36>
 800365e:	e03f      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003662:	623b      	str	r3, [r7, #32]
      break;
 8003664:	e03f      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800366c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003670:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	fa92 f2a2 	rbit	r2, r2
 8003678:	607a      	str	r2, [r7, #4]
  return result;
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	fab2 f282 	clz	r2, r2
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	40d3      	lsrs	r3, r2
 8003684:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003686:	5cd3      	ldrb	r3, [r2, r3]
 8003688:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	220f      	movs	r2, #15
 8003694:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	fa92 f2a2 	rbit	r2, r2
 800369c:	60fa      	str	r2, [r7, #12]
  return result;
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	fab2 f282 	clz	r2, r2
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	40d3      	lsrs	r3, r2
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036b8:	4a0f      	ldr	r2, [pc, #60]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	e007      	b.n	80036da <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036ca:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	623b      	str	r3, [r7, #32]
      break;
 80036de:	e002      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036e2:	623b      	str	r3, [r7, #32]
      break;
 80036e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e6:	6a3b      	ldr	r3, [r7, #32]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	372c      	adds	r7, #44	; 0x2c
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40021000 	.word	0x40021000
 80036f8:	007a1200 	.word	0x007a1200
 80036fc:	080072b8 	.word	0x080072b8
 8003700:	080072c8 	.word	0x080072c8

08003704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_RCC_GetHCLKFreq+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000000 	.word	0x20000000

0800371c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003722:	f7ff ffef 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003726:	4601      	mov	r1, r0
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003730:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003734:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	fa92 f2a2 	rbit	r2, r2
 800373c:	603a      	str	r2, [r7, #0]
  return result;
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	fab2 f282 	clz	r2, r2
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	40d3      	lsrs	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_RCC_GetPCLK1Freq+0x40>)
 800374a:	5cd3      	ldrb	r3, [r2, r3]
 800374c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	080072b0 	.word	0x080072b0

08003760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003766:	f7ff ffcd 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 800376a:	4601      	mov	r1, r0
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003774:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003778:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	fa92 f2a2 	rbit	r2, r2
 8003780:	603a      	str	r2, [r7, #0]
  return result;
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	fab2 f282 	clz	r2, r2
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	40d3      	lsrs	r3, r2
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800378e:	5cd3      	ldrb	r3, [r2, r3]
 8003790:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	080072b0 	.word	0x080072b0

080037a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b092      	sub	sp, #72	; 0x48
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80d4 	beq.w	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c8:	4b4e      	ldr	r3, [pc, #312]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10e      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d4:	4b4b      	ldr	r3, [pc, #300]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4a4a      	ldr	r2, [pc, #296]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037de:	61d3      	str	r3, [r2, #28]
 80037e0:	4b48      	ldr	r3, [pc, #288]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b45      	ldr	r3, [pc, #276]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b42      	ldr	r3, [pc, #264]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a41      	ldr	r2, [pc, #260]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fd fde3 	bl	80013d4 <HAL_GetTick>
 800380e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fd fddf 	bl	80013d4 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b64      	cmp	r3, #100	; 0x64
 800381e:	d901      	bls.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e1d6      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	4b38      	ldr	r3, [pc, #224]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003838:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800383a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8084 	beq.w	800394a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800384c:	429a      	cmp	r2, r3
 800384e:	d07c      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003850:	4b2c      	ldr	r3, [pc, #176]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800385e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	4b26      	ldr	r3, [pc, #152]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	461a      	mov	r2, r3
 800387a:	2301      	movs	r3, #1
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003882:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800388c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	461a      	mov	r2, r3
 800389e:	2300      	movs	r3, #0
 80038a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038a2:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04b      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fd fd8f 	bl	80013d4 <HAL_GetTick>
 80038b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fd fd8b 	bl	80013d4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e180      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80038d0:	2302      	movs	r3, #2
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	2302      	movs	r3, #2
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	61fb      	str	r3, [r7, #28]
  return result;
 80038e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d108      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038fe:	4b01      	ldr	r3, [pc, #4]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	e00d      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003904:	40021000 	.word	0x40021000
 8003908:	40007000 	.word	0x40007000
 800390c:	10908100 	.word	0x10908100
 8003910:	2302      	movs	r3, #2
 8003912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	4b9a      	ldr	r3, [pc, #616]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2202      	movs	r2, #2
 8003922:	613a      	str	r2, [r7, #16]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	fa92 f2a2 	rbit	r2, r2
 800392a:	60fa      	str	r2, [r7, #12]
  return result;
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	fab2 f282 	clz	r2, r2
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	f002 021f 	and.w	r2, r2, #31
 800393e:	2101      	movs	r1, #1
 8003940:	fa01 f202 	lsl.w	r2, r1, r2
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0b7      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800394a:	4b8f      	ldr	r3, [pc, #572]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	498c      	ldr	r1, [pc, #560]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003958:	4313      	orrs	r3, r2
 800395a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800395c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003964:	4b88      	ldr	r3, [pc, #544]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4a87      	ldr	r2, [pc, #540]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800396a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800397c:	4b82      	ldr	r3, [pc, #520]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f023 0203 	bic.w	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	497f      	ldr	r1, [pc, #508]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800399a:	4b7b      	ldr	r3, [pc, #492]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4978      	ldr	r1, [pc, #480]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039b8:	4b73      	ldr	r3, [pc, #460]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	4970      	ldr	r1, [pc, #448]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039d6:	4b6c      	ldr	r3, [pc, #432]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f023 0210 	bic.w	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	4969      	ldr	r1, [pc, #420]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039f4:	4b64      	ldr	r3, [pc, #400]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	4961      	ldr	r1, [pc, #388]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a12:	4b5d      	ldr	r3, [pc, #372]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f023 0220 	bic.w	r2, r3, #32
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	495a      	ldr	r1, [pc, #360]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a30:	4b55      	ldr	r3, [pc, #340]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	4952      	ldr	r1, [pc, #328]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a4e:	4b4e      	ldr	r3, [pc, #312]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	494b      	ldr	r1, [pc, #300]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a6c:	4b46      	ldr	r3, [pc, #280]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	4943      	ldr	r1, [pc, #268]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	493c      	ldr	r1, [pc, #240]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003aa8:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	4934      	ldr	r1, [pc, #208]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003ac6:	4b30      	ldr	r3, [pc, #192]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	492d      	ldr	r1, [pc, #180]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ae4:	4b28      	ldr	r3, [pc, #160]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	4925      	ldr	r1, [pc, #148]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b02:	4b21      	ldr	r3, [pc, #132]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	491e      	ldr	r1, [pc, #120]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	490f      	ldr	r1, [pc, #60]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	4907      	ldr	r1, [pc, #28]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b7a:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	e002      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8e:	4913      	ldr	r1, [pc, #76]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bac:	490b      	ldr	r1, [pc, #44]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bca:	4904      	ldr	r1, [pc, #16]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3748      	adds	r7, #72	; 0x48
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e040      	b.n	8003c74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fa1e 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	; 0x24
 8003c0c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8b6 	bl	8003d90 <UART_SetConfig>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e022      	b.n	8003c74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa7e 	bl	8004138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fb05 	bl	800427c <UART_CheckIdleState>
 8003c72:	4603      	mov	r3, r0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d178      	bne.n	8003d86 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_UART_Transmit+0x24>
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e071      	b.n	8003d88 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2221      	movs	r2, #33	; 0x21
 8003cb0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cb2:	f7fd fb8f 	bl	80013d4 <HAL_GetTick>
 8003cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	d108      	bne.n	8003ce4 <HAL_UART_Transmit+0x68>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	e003      	b.n	8003cec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cec:	e030      	b.n	8003d50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2180      	movs	r1, #128	; 0x80
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fb67 	bl	80043cc <UART_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e03c      	b.n	8003d88 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d20:	b292      	uxth	r2, r2
 8003d22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	3302      	adds	r3, #2
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e008      	b.n	8003d3e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b292      	uxth	r2, r2
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1c8      	bne.n	8003cee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2200      	movs	r2, #0
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fb30 	bl	80043cc <UART_WaitOnFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d004      	beq.n	8003d7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e005      	b.n	8003d88 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b92      	ldr	r3, [pc, #584]	; (8004004 <UART_SetConfig+0x274>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	6979      	ldr	r1, [r7, #20]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a80      	ldr	r2, [pc, #512]	; (8004008 <UART_SetConfig+0x278>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d120      	bne.n	8003e4e <UART_SetConfig+0xbe>
 8003e0c:	4b7f      	ldr	r3, [pc, #508]	; (800400c <UART_SetConfig+0x27c>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d817      	bhi.n	8003e48 <UART_SetConfig+0xb8>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x90>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e3d 	.word	0x08003e3d
 8003e28:	08003e43 	.word	0x08003e43
 8003e2c:	08003e37 	.word	0x08003e37
 8003e30:	2301      	movs	r3, #1
 8003e32:	77fb      	strb	r3, [r7, #31]
 8003e34:	e0b5      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003e36:	2302      	movs	r3, #2
 8003e38:	77fb      	strb	r3, [r7, #31]
 8003e3a:	e0b2      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	77fb      	strb	r3, [r7, #31]
 8003e40:	e0af      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003e42:	2308      	movs	r3, #8
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e0ac      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003e48:	2310      	movs	r3, #16
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e0a9      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a6f      	ldr	r2, [pc, #444]	; (8004010 <UART_SetConfig+0x280>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d124      	bne.n	8003ea2 <UART_SetConfig+0x112>
 8003e58:	4b6c      	ldr	r3, [pc, #432]	; (800400c <UART_SetConfig+0x27c>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e64:	d011      	beq.n	8003e8a <UART_SetConfig+0xfa>
 8003e66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e6a:	d817      	bhi.n	8003e9c <UART_SetConfig+0x10c>
 8003e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e70:	d011      	beq.n	8003e96 <UART_SetConfig+0x106>
 8003e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e76:	d811      	bhi.n	8003e9c <UART_SetConfig+0x10c>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <UART_SetConfig+0xf4>
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d006      	beq.n	8003e90 <UART_SetConfig+0x100>
 8003e82:	e00b      	b.n	8003e9c <UART_SetConfig+0x10c>
 8003e84:	2300      	movs	r3, #0
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e08b      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	e088      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003e90:	2304      	movs	r3, #4
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e085      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003e96:	2308      	movs	r3, #8
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	e082      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e07f      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5b      	ldr	r2, [pc, #364]	; (8004014 <UART_SetConfig+0x284>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d124      	bne.n	8003ef6 <UART_SetConfig+0x166>
 8003eac:	4b57      	ldr	r3, [pc, #348]	; (800400c <UART_SetConfig+0x27c>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003eb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003eb8:	d011      	beq.n	8003ede <UART_SetConfig+0x14e>
 8003eba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ebe:	d817      	bhi.n	8003ef0 <UART_SetConfig+0x160>
 8003ec0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ec4:	d011      	beq.n	8003eea <UART_SetConfig+0x15a>
 8003ec6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003eca:	d811      	bhi.n	8003ef0 <UART_SetConfig+0x160>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <UART_SetConfig+0x148>
 8003ed0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ed4:	d006      	beq.n	8003ee4 <UART_SetConfig+0x154>
 8003ed6:	e00b      	b.n	8003ef0 <UART_SetConfig+0x160>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e061      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	77fb      	strb	r3, [r7, #31]
 8003ee2:	e05e      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e05b      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003eea:	2308      	movs	r3, #8
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e058      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e055      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a47      	ldr	r2, [pc, #284]	; (8004018 <UART_SetConfig+0x288>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d124      	bne.n	8003f4a <UART_SetConfig+0x1ba>
 8003f00:	4b42      	ldr	r3, [pc, #264]	; (800400c <UART_SetConfig+0x27c>)
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f0c:	d011      	beq.n	8003f32 <UART_SetConfig+0x1a2>
 8003f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f12:	d817      	bhi.n	8003f44 <UART_SetConfig+0x1b4>
 8003f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f18:	d011      	beq.n	8003f3e <UART_SetConfig+0x1ae>
 8003f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f1e:	d811      	bhi.n	8003f44 <UART_SetConfig+0x1b4>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <UART_SetConfig+0x19c>
 8003f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f28:	d006      	beq.n	8003f38 <UART_SetConfig+0x1a8>
 8003f2a:	e00b      	b.n	8003f44 <UART_SetConfig+0x1b4>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e037      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003f32:	2302      	movs	r3, #2
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e034      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e031      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003f3e:	2308      	movs	r3, #8
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e02e      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003f44:	2310      	movs	r3, #16
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e02b      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a33      	ldr	r2, [pc, #204]	; (800401c <UART_SetConfig+0x28c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d124      	bne.n	8003f9e <UART_SetConfig+0x20e>
 8003f54:	4b2d      	ldr	r3, [pc, #180]	; (800400c <UART_SetConfig+0x27c>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f60:	d011      	beq.n	8003f86 <UART_SetConfig+0x1f6>
 8003f62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f66:	d817      	bhi.n	8003f98 <UART_SetConfig+0x208>
 8003f68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f6c:	d011      	beq.n	8003f92 <UART_SetConfig+0x202>
 8003f6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f72:	d811      	bhi.n	8003f98 <UART_SetConfig+0x208>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <UART_SetConfig+0x1f0>
 8003f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7c:	d006      	beq.n	8003f8c <UART_SetConfig+0x1fc>
 8003f7e:	e00b      	b.n	8003f98 <UART_SetConfig+0x208>
 8003f80:	2300      	movs	r3, #0
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e00d      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003f86:	2302      	movs	r3, #2
 8003f88:	77fb      	strb	r3, [r7, #31]
 8003f8a:	e00a      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	77fb      	strb	r3, [r7, #31]
 8003f90:	e007      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003f92:	2308      	movs	r3, #8
 8003f94:	77fb      	strb	r3, [r7, #31]
 8003f96:	e004      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	77fb      	strb	r3, [r7, #31]
 8003f9c:	e001      	b.n	8003fa2 <UART_SetConfig+0x212>
 8003f9e:	2310      	movs	r3, #16
 8003fa0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003faa:	d16b      	bne.n	8004084 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003fac:	7ffb      	ldrb	r3, [r7, #31]
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d838      	bhi.n	8004024 <UART_SetConfig+0x294>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <UART_SetConfig+0x228>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	08003fe5 	.word	0x08003fe5
 8003fc0:	08003fed 	.word	0x08003fed
 8003fc4:	08004025 	.word	0x08004025
 8003fc8:	08003ff3 	.word	0x08003ff3
 8003fcc:	08004025 	.word	0x08004025
 8003fd0:	08004025 	.word	0x08004025
 8003fd4:	08004025 	.word	0x08004025
 8003fd8:	08003ffb 	.word	0x08003ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f7ff fb9e 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8003fe0:	61b8      	str	r0, [r7, #24]
        break;
 8003fe2:	e024      	b.n	800402e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe4:	f7ff fbbc 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 8003fe8:	61b8      	str	r0, [r7, #24]
        break;
 8003fea:	e020      	b.n	800402e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <UART_SetConfig+0x290>)
 8003fee:	61bb      	str	r3, [r7, #24]
        break;
 8003ff0:	e01d      	b.n	800402e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff2:	f7ff fb1d 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8003ff6:	61b8      	str	r0, [r7, #24]
        break;
 8003ff8:	e019      	b.n	800402e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffe:	61bb      	str	r3, [r7, #24]
        break;
 8004000:	e015      	b.n	800402e <UART_SetConfig+0x29e>
 8004002:	bf00      	nop
 8004004:	efff69f3 	.word	0xefff69f3
 8004008:	40013800 	.word	0x40013800
 800400c:	40021000 	.word	0x40021000
 8004010:	40004400 	.word	0x40004400
 8004014:	40004800 	.word	0x40004800
 8004018:	40004c00 	.word	0x40004c00
 800401c:	40005000 	.word	0x40005000
 8004020:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	77bb      	strb	r3, [r7, #30]
        break;
 800402c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d073      	beq.n	800411c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	005a      	lsls	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	441a      	add	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b0f      	cmp	r3, #15
 800404e:	d916      	bls.n	800407e <UART_SetConfig+0x2ee>
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004056:	d212      	bcs.n	800407e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	b29b      	uxth	r3, r3
 800405c:	f023 030f 	bic.w	r3, r3, #15
 8004060:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	b29a      	uxth	r2, r3
 800406e:	89fb      	ldrh	r3, [r7, #14]
 8004070:	4313      	orrs	r3, r2
 8004072:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	89fa      	ldrh	r2, [r7, #14]
 800407a:	60da      	str	r2, [r3, #12]
 800407c:	e04e      	b.n	800411c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	77bb      	strb	r3, [r7, #30]
 8004082:	e04b      	b.n	800411c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004084:	7ffb      	ldrb	r3, [r7, #31]
 8004086:	2b08      	cmp	r3, #8
 8004088:	d827      	bhi.n	80040da <UART_SetConfig+0x34a>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0x300>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040bd 	.word	0x080040bd
 8004098:	080040c5 	.word	0x080040c5
 800409c:	080040db 	.word	0x080040db
 80040a0:	080040cb 	.word	0x080040cb
 80040a4:	080040db 	.word	0x080040db
 80040a8:	080040db 	.word	0x080040db
 80040ac:	080040db 	.word	0x080040db
 80040b0:	080040d3 	.word	0x080040d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040b4:	f7ff fb32 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 80040b8:	61b8      	str	r0, [r7, #24]
        break;
 80040ba:	e013      	b.n	80040e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040bc:	f7ff fb50 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 80040c0:	61b8      	str	r0, [r7, #24]
        break;
 80040c2:	e00f      	b.n	80040e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <UART_SetConfig+0x3a4>)
 80040c6:	61bb      	str	r3, [r7, #24]
        break;
 80040c8:	e00c      	b.n	80040e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ca:	f7ff fab1 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80040ce:	61b8      	str	r0, [r7, #24]
        break;
 80040d0:	e008      	b.n	80040e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d6:	61bb      	str	r3, [r7, #24]
        break;
 80040d8:	e004      	b.n	80040e4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	77bb      	strb	r3, [r7, #30]
        break;
 80040e2:	bf00      	nop
    }

    if (pclk != 0U)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d018      	beq.n	800411c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	085a      	lsrs	r2, r3, #1
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	441a      	add	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b0f      	cmp	r3, #15
 8004102:	d909      	bls.n	8004118 <UART_SetConfig+0x388>
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d205      	bcs.n	8004118 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60da      	str	r2, [r3, #12]
 8004116:	e001      	b.n	800411c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004128:	7fbb      	ldrb	r3, [r7, #30]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	007a1200 	.word	0x007a1200

08004138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01a      	beq.n	800424e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004236:	d10a      	bne.n	800424e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	605a      	str	r2, [r3, #4]
  }
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b098      	sub	sp, #96	; 0x60
 8004280:	af02      	add	r7, sp, #8
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800428c:	f7fd f8a2 	bl	80013d4 <HAL_GetTick>
 8004290:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b08      	cmp	r3, #8
 800429e:	d12e      	bne.n	80042fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a8:	2200      	movs	r2, #0
 80042aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f88c 	bl	80043cc <UART_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d021      	beq.n	80042fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ce:	653b      	str	r3, [r7, #80]	; 0x50
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d8:	647b      	str	r3, [r7, #68]	; 0x44
 80042da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e6      	bne.n	80042ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e062      	b.n	80043c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d149      	bne.n	80043a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800430c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004314:	2200      	movs	r2, #0
 8004316:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f856 	bl	80043cc <UART_WaitOnFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d03c      	beq.n	80043a0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	623b      	str	r3, [r7, #32]
   return(result);
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800433a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004344:	633b      	str	r3, [r7, #48]	; 0x30
 8004346:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800434a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e6      	bne.n	8004326 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3308      	adds	r3, #8
 800435e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	60fb      	str	r3, [r7, #12]
   return(result);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3308      	adds	r3, #8
 8004376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004378:	61fa      	str	r2, [r7, #28]
 800437a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69b9      	ldr	r1, [r7, #24]
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	617b      	str	r3, [r7, #20]
   return(result);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e011      	b.n	80043c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3758      	adds	r7, #88	; 0x58
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	4613      	mov	r3, r2
 80043da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043dc:	e049      	b.n	8004472 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d045      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e6:	f7fc fff5 	bl	80013d4 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <UART_WaitOnFlagUntilTimeout+0x30>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e048      	b.n	8004492 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d031      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b08      	cmp	r3, #8
 800441a:	d110      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2208      	movs	r2, #8
 8004422:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f838 	bl	800449a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2208      	movs	r2, #8
 800442e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e029      	b.n	8004492 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444c:	d111      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f81e 	bl	800449a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e00f      	b.n	8004492 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4013      	ands	r3, r2
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	bf0c      	ite	eq
 8004482:	2301      	moveq	r3, #1
 8004484:	2300      	movne	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	429a      	cmp	r2, r3
 800448e:	d0a6      	beq.n	80043de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800449a:	b480      	push	{r7}
 800449c:	b095      	sub	sp, #84	; 0x54
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c0:	643b      	str	r3, [r7, #64]	; 0x40
 80044c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e6      	bne.n	80044a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3308      	adds	r3, #8
 80044da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e5      	bne.n	80044d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	2b01      	cmp	r3, #1
 800450e:	d118      	bne.n	8004542 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	60bb      	str	r3, [r7, #8]
   return(result);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 0310 	bic.w	r3, r3, #16
 8004524:	647b      	str	r3, [r7, #68]	; 0x44
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6979      	ldr	r1, [r7, #20]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	613b      	str	r3, [r7, #16]
   return(result);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e6      	bne.n	8004510 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004556:	bf00      	nop
 8004558:	3754      	adds	r7, #84	; 0x54
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <__cvt>:
 8004562:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004566:	ec55 4b10 	vmov	r4, r5, d0
 800456a:	2d00      	cmp	r5, #0
 800456c:	460e      	mov	r6, r1
 800456e:	4619      	mov	r1, r3
 8004570:	462b      	mov	r3, r5
 8004572:	bfbb      	ittet	lt
 8004574:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004578:	461d      	movlt	r5, r3
 800457a:	2300      	movge	r3, #0
 800457c:	232d      	movlt	r3, #45	; 0x2d
 800457e:	700b      	strb	r3, [r1, #0]
 8004580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004582:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004586:	4691      	mov	r9, r2
 8004588:	f023 0820 	bic.w	r8, r3, #32
 800458c:	bfbc      	itt	lt
 800458e:	4622      	movlt	r2, r4
 8004590:	4614      	movlt	r4, r2
 8004592:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004596:	d005      	beq.n	80045a4 <__cvt+0x42>
 8004598:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800459c:	d100      	bne.n	80045a0 <__cvt+0x3e>
 800459e:	3601      	adds	r6, #1
 80045a0:	2102      	movs	r1, #2
 80045a2:	e000      	b.n	80045a6 <__cvt+0x44>
 80045a4:	2103      	movs	r1, #3
 80045a6:	ab03      	add	r3, sp, #12
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	ab02      	add	r3, sp, #8
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	ec45 4b10 	vmov	d0, r4, r5
 80045b2:	4653      	mov	r3, sl
 80045b4:	4632      	mov	r2, r6
 80045b6:	f000 fe6b 	bl	8005290 <_dtoa_r>
 80045ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045be:	4607      	mov	r7, r0
 80045c0:	d102      	bne.n	80045c8 <__cvt+0x66>
 80045c2:	f019 0f01 	tst.w	r9, #1
 80045c6:	d022      	beq.n	800460e <__cvt+0xac>
 80045c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045cc:	eb07 0906 	add.w	r9, r7, r6
 80045d0:	d110      	bne.n	80045f4 <__cvt+0x92>
 80045d2:	783b      	ldrb	r3, [r7, #0]
 80045d4:	2b30      	cmp	r3, #48	; 0x30
 80045d6:	d10a      	bne.n	80045ee <__cvt+0x8c>
 80045d8:	2200      	movs	r2, #0
 80045da:	2300      	movs	r3, #0
 80045dc:	4620      	mov	r0, r4
 80045de:	4629      	mov	r1, r5
 80045e0:	f7fc fa7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80045e4:	b918      	cbnz	r0, 80045ee <__cvt+0x8c>
 80045e6:	f1c6 0601 	rsb	r6, r6, #1
 80045ea:	f8ca 6000 	str.w	r6, [sl]
 80045ee:	f8da 3000 	ldr.w	r3, [sl]
 80045f2:	4499      	add	r9, r3
 80045f4:	2200      	movs	r2, #0
 80045f6:	2300      	movs	r3, #0
 80045f8:	4620      	mov	r0, r4
 80045fa:	4629      	mov	r1, r5
 80045fc:	f7fc fa6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004600:	b108      	cbz	r0, 8004606 <__cvt+0xa4>
 8004602:	f8cd 900c 	str.w	r9, [sp, #12]
 8004606:	2230      	movs	r2, #48	; 0x30
 8004608:	9b03      	ldr	r3, [sp, #12]
 800460a:	454b      	cmp	r3, r9
 800460c:	d307      	bcc.n	800461e <__cvt+0xbc>
 800460e:	9b03      	ldr	r3, [sp, #12]
 8004610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004612:	1bdb      	subs	r3, r3, r7
 8004614:	4638      	mov	r0, r7
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	b004      	add	sp, #16
 800461a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461e:	1c59      	adds	r1, r3, #1
 8004620:	9103      	str	r1, [sp, #12]
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	e7f0      	b.n	8004608 <__cvt+0xa6>

08004626 <__exponent>:
 8004626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004628:	4603      	mov	r3, r0
 800462a:	2900      	cmp	r1, #0
 800462c:	bfb8      	it	lt
 800462e:	4249      	neglt	r1, r1
 8004630:	f803 2b02 	strb.w	r2, [r3], #2
 8004634:	bfb4      	ite	lt
 8004636:	222d      	movlt	r2, #45	; 0x2d
 8004638:	222b      	movge	r2, #43	; 0x2b
 800463a:	2909      	cmp	r1, #9
 800463c:	7042      	strb	r2, [r0, #1]
 800463e:	dd2a      	ble.n	8004696 <__exponent+0x70>
 8004640:	f10d 0207 	add.w	r2, sp, #7
 8004644:	4617      	mov	r7, r2
 8004646:	260a      	movs	r6, #10
 8004648:	4694      	mov	ip, r2
 800464a:	fb91 f5f6 	sdiv	r5, r1, r6
 800464e:	fb06 1415 	mls	r4, r6, r5, r1
 8004652:	3430      	adds	r4, #48	; 0x30
 8004654:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004658:	460c      	mov	r4, r1
 800465a:	2c63      	cmp	r4, #99	; 0x63
 800465c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004660:	4629      	mov	r1, r5
 8004662:	dcf1      	bgt.n	8004648 <__exponent+0x22>
 8004664:	3130      	adds	r1, #48	; 0x30
 8004666:	f1ac 0402 	sub.w	r4, ip, #2
 800466a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800466e:	1c41      	adds	r1, r0, #1
 8004670:	4622      	mov	r2, r4
 8004672:	42ba      	cmp	r2, r7
 8004674:	d30a      	bcc.n	800468c <__exponent+0x66>
 8004676:	f10d 0209 	add.w	r2, sp, #9
 800467a:	eba2 020c 	sub.w	r2, r2, ip
 800467e:	42bc      	cmp	r4, r7
 8004680:	bf88      	it	hi
 8004682:	2200      	movhi	r2, #0
 8004684:	4413      	add	r3, r2
 8004686:	1a18      	subs	r0, r3, r0
 8004688:	b003      	add	sp, #12
 800468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800468c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004690:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004694:	e7ed      	b.n	8004672 <__exponent+0x4c>
 8004696:	2330      	movs	r3, #48	; 0x30
 8004698:	3130      	adds	r1, #48	; 0x30
 800469a:	7083      	strb	r3, [r0, #2]
 800469c:	70c1      	strb	r1, [r0, #3]
 800469e:	1d03      	adds	r3, r0, #4
 80046a0:	e7f1      	b.n	8004686 <__exponent+0x60>
	...

080046a4 <_printf_float>:
 80046a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a8:	ed2d 8b02 	vpush	{d8}
 80046ac:	b08d      	sub	sp, #52	; 0x34
 80046ae:	460c      	mov	r4, r1
 80046b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046b4:	4616      	mov	r6, r2
 80046b6:	461f      	mov	r7, r3
 80046b8:	4605      	mov	r5, r0
 80046ba:	f000 fce7 	bl	800508c <_localeconv_r>
 80046be:	f8d0 a000 	ldr.w	sl, [r0]
 80046c2:	4650      	mov	r0, sl
 80046c4:	f7fb fddc 	bl	8000280 <strlen>
 80046c8:	2300      	movs	r3, #0
 80046ca:	930a      	str	r3, [sp, #40]	; 0x28
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	9305      	str	r3, [sp, #20]
 80046d0:	f8d8 3000 	ldr.w	r3, [r8]
 80046d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80046d8:	3307      	adds	r3, #7
 80046da:	f023 0307 	bic.w	r3, r3, #7
 80046de:	f103 0208 	add.w	r2, r3, #8
 80046e2:	f8c8 2000 	str.w	r2, [r8]
 80046e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046ee:	9307      	str	r3, [sp, #28]
 80046f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80046f4:	ee08 0a10 	vmov	s16, r0
 80046f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80046fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004700:	4b9e      	ldr	r3, [pc, #632]	; (800497c <_printf_float+0x2d8>)
 8004702:	f04f 32ff 	mov.w	r2, #4294967295
 8004706:	f7fc fa19 	bl	8000b3c <__aeabi_dcmpun>
 800470a:	bb88      	cbnz	r0, 8004770 <_printf_float+0xcc>
 800470c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004710:	4b9a      	ldr	r3, [pc, #616]	; (800497c <_printf_float+0x2d8>)
 8004712:	f04f 32ff 	mov.w	r2, #4294967295
 8004716:	f7fc f9f3 	bl	8000b00 <__aeabi_dcmple>
 800471a:	bb48      	cbnz	r0, 8004770 <_printf_float+0xcc>
 800471c:	2200      	movs	r2, #0
 800471e:	2300      	movs	r3, #0
 8004720:	4640      	mov	r0, r8
 8004722:	4649      	mov	r1, r9
 8004724:	f7fc f9e2 	bl	8000aec <__aeabi_dcmplt>
 8004728:	b110      	cbz	r0, 8004730 <_printf_float+0x8c>
 800472a:	232d      	movs	r3, #45	; 0x2d
 800472c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004730:	4a93      	ldr	r2, [pc, #588]	; (8004980 <_printf_float+0x2dc>)
 8004732:	4b94      	ldr	r3, [pc, #592]	; (8004984 <_printf_float+0x2e0>)
 8004734:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004738:	bf94      	ite	ls
 800473a:	4690      	movls	r8, r2
 800473c:	4698      	movhi	r8, r3
 800473e:	2303      	movs	r3, #3
 8004740:	6123      	str	r3, [r4, #16]
 8004742:	9b05      	ldr	r3, [sp, #20]
 8004744:	f023 0304 	bic.w	r3, r3, #4
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	f04f 0900 	mov.w	r9, #0
 800474e:	9700      	str	r7, [sp, #0]
 8004750:	4633      	mov	r3, r6
 8004752:	aa0b      	add	r2, sp, #44	; 0x2c
 8004754:	4621      	mov	r1, r4
 8004756:	4628      	mov	r0, r5
 8004758:	f000 f9da 	bl	8004b10 <_printf_common>
 800475c:	3001      	adds	r0, #1
 800475e:	f040 8090 	bne.w	8004882 <_printf_float+0x1de>
 8004762:	f04f 30ff 	mov.w	r0, #4294967295
 8004766:	b00d      	add	sp, #52	; 0x34
 8004768:	ecbd 8b02 	vpop	{d8}
 800476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	4640      	mov	r0, r8
 8004776:	4649      	mov	r1, r9
 8004778:	f7fc f9e0 	bl	8000b3c <__aeabi_dcmpun>
 800477c:	b140      	cbz	r0, 8004790 <_printf_float+0xec>
 800477e:	464b      	mov	r3, r9
 8004780:	2b00      	cmp	r3, #0
 8004782:	bfbc      	itt	lt
 8004784:	232d      	movlt	r3, #45	; 0x2d
 8004786:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800478a:	4a7f      	ldr	r2, [pc, #508]	; (8004988 <_printf_float+0x2e4>)
 800478c:	4b7f      	ldr	r3, [pc, #508]	; (800498c <_printf_float+0x2e8>)
 800478e:	e7d1      	b.n	8004734 <_printf_float+0x90>
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004796:	9206      	str	r2, [sp, #24]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	d13f      	bne.n	800481c <_printf_float+0x178>
 800479c:	2306      	movs	r3, #6
 800479e:	6063      	str	r3, [r4, #4]
 80047a0:	9b05      	ldr	r3, [sp, #20]
 80047a2:	6861      	ldr	r1, [r4, #4]
 80047a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047a8:	2300      	movs	r3, #0
 80047aa:	9303      	str	r3, [sp, #12]
 80047ac:	ab0a      	add	r3, sp, #40	; 0x28
 80047ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047b2:	ab09      	add	r3, sp, #36	; 0x24
 80047b4:	ec49 8b10 	vmov	d0, r8, r9
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	6022      	str	r2, [r4, #0]
 80047bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047c0:	4628      	mov	r0, r5
 80047c2:	f7ff fece 	bl	8004562 <__cvt>
 80047c6:	9b06      	ldr	r3, [sp, #24]
 80047c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047ca:	2b47      	cmp	r3, #71	; 0x47
 80047cc:	4680      	mov	r8, r0
 80047ce:	d108      	bne.n	80047e2 <_printf_float+0x13e>
 80047d0:	1cc8      	adds	r0, r1, #3
 80047d2:	db02      	blt.n	80047da <_printf_float+0x136>
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	4299      	cmp	r1, r3
 80047d8:	dd41      	ble.n	800485e <_printf_float+0x1ba>
 80047da:	f1ab 0302 	sub.w	r3, fp, #2
 80047de:	fa5f fb83 	uxtb.w	fp, r3
 80047e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047e6:	d820      	bhi.n	800482a <_printf_float+0x186>
 80047e8:	3901      	subs	r1, #1
 80047ea:	465a      	mov	r2, fp
 80047ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047f0:	9109      	str	r1, [sp, #36]	; 0x24
 80047f2:	f7ff ff18 	bl	8004626 <__exponent>
 80047f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047f8:	1813      	adds	r3, r2, r0
 80047fa:	2a01      	cmp	r2, #1
 80047fc:	4681      	mov	r9, r0
 80047fe:	6123      	str	r3, [r4, #16]
 8004800:	dc02      	bgt.n	8004808 <_printf_float+0x164>
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	07d2      	lsls	r2, r2, #31
 8004806:	d501      	bpl.n	800480c <_printf_float+0x168>
 8004808:	3301      	adds	r3, #1
 800480a:	6123      	str	r3, [r4, #16]
 800480c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004810:	2b00      	cmp	r3, #0
 8004812:	d09c      	beq.n	800474e <_printf_float+0xaa>
 8004814:	232d      	movs	r3, #45	; 0x2d
 8004816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800481a:	e798      	b.n	800474e <_printf_float+0xaa>
 800481c:	9a06      	ldr	r2, [sp, #24]
 800481e:	2a47      	cmp	r2, #71	; 0x47
 8004820:	d1be      	bne.n	80047a0 <_printf_float+0xfc>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1bc      	bne.n	80047a0 <_printf_float+0xfc>
 8004826:	2301      	movs	r3, #1
 8004828:	e7b9      	b.n	800479e <_printf_float+0xfa>
 800482a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800482e:	d118      	bne.n	8004862 <_printf_float+0x1be>
 8004830:	2900      	cmp	r1, #0
 8004832:	6863      	ldr	r3, [r4, #4]
 8004834:	dd0b      	ble.n	800484e <_printf_float+0x1aa>
 8004836:	6121      	str	r1, [r4, #16]
 8004838:	b913      	cbnz	r3, 8004840 <_printf_float+0x19c>
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	07d0      	lsls	r0, r2, #31
 800483e:	d502      	bpl.n	8004846 <_printf_float+0x1a2>
 8004840:	3301      	adds	r3, #1
 8004842:	440b      	add	r3, r1
 8004844:	6123      	str	r3, [r4, #16]
 8004846:	65a1      	str	r1, [r4, #88]	; 0x58
 8004848:	f04f 0900 	mov.w	r9, #0
 800484c:	e7de      	b.n	800480c <_printf_float+0x168>
 800484e:	b913      	cbnz	r3, 8004856 <_printf_float+0x1b2>
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	07d2      	lsls	r2, r2, #31
 8004854:	d501      	bpl.n	800485a <_printf_float+0x1b6>
 8004856:	3302      	adds	r3, #2
 8004858:	e7f4      	b.n	8004844 <_printf_float+0x1a0>
 800485a:	2301      	movs	r3, #1
 800485c:	e7f2      	b.n	8004844 <_printf_float+0x1a0>
 800485e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004864:	4299      	cmp	r1, r3
 8004866:	db05      	blt.n	8004874 <_printf_float+0x1d0>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	6121      	str	r1, [r4, #16]
 800486c:	07d8      	lsls	r0, r3, #31
 800486e:	d5ea      	bpl.n	8004846 <_printf_float+0x1a2>
 8004870:	1c4b      	adds	r3, r1, #1
 8004872:	e7e7      	b.n	8004844 <_printf_float+0x1a0>
 8004874:	2900      	cmp	r1, #0
 8004876:	bfd4      	ite	le
 8004878:	f1c1 0202 	rsble	r2, r1, #2
 800487c:	2201      	movgt	r2, #1
 800487e:	4413      	add	r3, r2
 8004880:	e7e0      	b.n	8004844 <_printf_float+0x1a0>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	055a      	lsls	r2, r3, #21
 8004886:	d407      	bmi.n	8004898 <_printf_float+0x1f4>
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	4642      	mov	r2, r8
 800488c:	4631      	mov	r1, r6
 800488e:	4628      	mov	r0, r5
 8004890:	47b8      	blx	r7
 8004892:	3001      	adds	r0, #1
 8004894:	d12c      	bne.n	80048f0 <_printf_float+0x24c>
 8004896:	e764      	b.n	8004762 <_printf_float+0xbe>
 8004898:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800489c:	f240 80e0 	bls.w	8004a60 <_printf_float+0x3bc>
 80048a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048a4:	2200      	movs	r2, #0
 80048a6:	2300      	movs	r3, #0
 80048a8:	f7fc f916 	bl	8000ad8 <__aeabi_dcmpeq>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d034      	beq.n	800491a <_printf_float+0x276>
 80048b0:	4a37      	ldr	r2, [pc, #220]	; (8004990 <_printf_float+0x2ec>)
 80048b2:	2301      	movs	r3, #1
 80048b4:	4631      	mov	r1, r6
 80048b6:	4628      	mov	r0, r5
 80048b8:	47b8      	blx	r7
 80048ba:	3001      	adds	r0, #1
 80048bc:	f43f af51 	beq.w	8004762 <_printf_float+0xbe>
 80048c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048c4:	429a      	cmp	r2, r3
 80048c6:	db02      	blt.n	80048ce <_printf_float+0x22a>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	07d8      	lsls	r0, r3, #31
 80048cc:	d510      	bpl.n	80048f0 <_printf_float+0x24c>
 80048ce:	ee18 3a10 	vmov	r3, s16
 80048d2:	4652      	mov	r2, sl
 80048d4:	4631      	mov	r1, r6
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b8      	blx	r7
 80048da:	3001      	adds	r0, #1
 80048dc:	f43f af41 	beq.w	8004762 <_printf_float+0xbe>
 80048e0:	f04f 0800 	mov.w	r8, #0
 80048e4:	f104 091a 	add.w	r9, r4, #26
 80048e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	4543      	cmp	r3, r8
 80048ee:	dc09      	bgt.n	8004904 <_printf_float+0x260>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	079b      	lsls	r3, r3, #30
 80048f4:	f100 8107 	bmi.w	8004b06 <_printf_float+0x462>
 80048f8:	68e0      	ldr	r0, [r4, #12]
 80048fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048fc:	4298      	cmp	r0, r3
 80048fe:	bfb8      	it	lt
 8004900:	4618      	movlt	r0, r3
 8004902:	e730      	b.n	8004766 <_printf_float+0xc2>
 8004904:	2301      	movs	r3, #1
 8004906:	464a      	mov	r2, r9
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	f43f af27 	beq.w	8004762 <_printf_float+0xbe>
 8004914:	f108 0801 	add.w	r8, r8, #1
 8004918:	e7e6      	b.n	80048e8 <_printf_float+0x244>
 800491a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	dc39      	bgt.n	8004994 <_printf_float+0x2f0>
 8004920:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <_printf_float+0x2ec>)
 8004922:	2301      	movs	r3, #1
 8004924:	4631      	mov	r1, r6
 8004926:	4628      	mov	r0, r5
 8004928:	47b8      	blx	r7
 800492a:	3001      	adds	r0, #1
 800492c:	f43f af19 	beq.w	8004762 <_printf_float+0xbe>
 8004930:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004934:	4313      	orrs	r3, r2
 8004936:	d102      	bne.n	800493e <_printf_float+0x29a>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	07d9      	lsls	r1, r3, #31
 800493c:	d5d8      	bpl.n	80048f0 <_printf_float+0x24c>
 800493e:	ee18 3a10 	vmov	r3, s16
 8004942:	4652      	mov	r2, sl
 8004944:	4631      	mov	r1, r6
 8004946:	4628      	mov	r0, r5
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	f43f af09 	beq.w	8004762 <_printf_float+0xbe>
 8004950:	f04f 0900 	mov.w	r9, #0
 8004954:	f104 0a1a 	add.w	sl, r4, #26
 8004958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800495a:	425b      	negs	r3, r3
 800495c:	454b      	cmp	r3, r9
 800495e:	dc01      	bgt.n	8004964 <_printf_float+0x2c0>
 8004960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004962:	e792      	b.n	800488a <_printf_float+0x1e6>
 8004964:	2301      	movs	r3, #1
 8004966:	4652      	mov	r2, sl
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f aef7 	beq.w	8004762 <_printf_float+0xbe>
 8004974:	f109 0901 	add.w	r9, r9, #1
 8004978:	e7ee      	b.n	8004958 <_printf_float+0x2b4>
 800497a:	bf00      	nop
 800497c:	7fefffff 	.word	0x7fefffff
 8004980:	080072d8 	.word	0x080072d8
 8004984:	080072dc 	.word	0x080072dc
 8004988:	080072e0 	.word	0x080072e0
 800498c:	080072e4 	.word	0x080072e4
 8004990:	080072e8 	.word	0x080072e8
 8004994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004998:	429a      	cmp	r2, r3
 800499a:	bfa8      	it	ge
 800499c:	461a      	movge	r2, r3
 800499e:	2a00      	cmp	r2, #0
 80049a0:	4691      	mov	r9, r2
 80049a2:	dc37      	bgt.n	8004a14 <_printf_float+0x370>
 80049a4:	f04f 0b00 	mov.w	fp, #0
 80049a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ac:	f104 021a 	add.w	r2, r4, #26
 80049b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049b2:	9305      	str	r3, [sp, #20]
 80049b4:	eba3 0309 	sub.w	r3, r3, r9
 80049b8:	455b      	cmp	r3, fp
 80049ba:	dc33      	bgt.n	8004a24 <_printf_float+0x380>
 80049bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049c0:	429a      	cmp	r2, r3
 80049c2:	db3b      	blt.n	8004a3c <_printf_float+0x398>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	07da      	lsls	r2, r3, #31
 80049c8:	d438      	bmi.n	8004a3c <_printf_float+0x398>
 80049ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80049ce:	eba2 0903 	sub.w	r9, r2, r3
 80049d2:	9b05      	ldr	r3, [sp, #20]
 80049d4:	1ad2      	subs	r2, r2, r3
 80049d6:	4591      	cmp	r9, r2
 80049d8:	bfa8      	it	ge
 80049da:	4691      	movge	r9, r2
 80049dc:	f1b9 0f00 	cmp.w	r9, #0
 80049e0:	dc35      	bgt.n	8004a4e <_printf_float+0x3aa>
 80049e2:	f04f 0800 	mov.w	r8, #0
 80049e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ea:	f104 0a1a 	add.w	sl, r4, #26
 80049ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	eba3 0309 	sub.w	r3, r3, r9
 80049f8:	4543      	cmp	r3, r8
 80049fa:	f77f af79 	ble.w	80048f0 <_printf_float+0x24c>
 80049fe:	2301      	movs	r3, #1
 8004a00:	4652      	mov	r2, sl
 8004a02:	4631      	mov	r1, r6
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	f43f aeaa 	beq.w	8004762 <_printf_float+0xbe>
 8004a0e:	f108 0801 	add.w	r8, r8, #1
 8004a12:	e7ec      	b.n	80049ee <_printf_float+0x34a>
 8004a14:	4613      	mov	r3, r2
 8004a16:	4631      	mov	r1, r6
 8004a18:	4642      	mov	r2, r8
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	47b8      	blx	r7
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d1c0      	bne.n	80049a4 <_printf_float+0x300>
 8004a22:	e69e      	b.n	8004762 <_printf_float+0xbe>
 8004a24:	2301      	movs	r3, #1
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	9205      	str	r2, [sp, #20]
 8004a2c:	47b8      	blx	r7
 8004a2e:	3001      	adds	r0, #1
 8004a30:	f43f ae97 	beq.w	8004762 <_printf_float+0xbe>
 8004a34:	9a05      	ldr	r2, [sp, #20]
 8004a36:	f10b 0b01 	add.w	fp, fp, #1
 8004a3a:	e7b9      	b.n	80049b0 <_printf_float+0x30c>
 8004a3c:	ee18 3a10 	vmov	r3, s16
 8004a40:	4652      	mov	r2, sl
 8004a42:	4631      	mov	r1, r6
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b8      	blx	r7
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d1be      	bne.n	80049ca <_printf_float+0x326>
 8004a4c:	e689      	b.n	8004762 <_printf_float+0xbe>
 8004a4e:	9a05      	ldr	r2, [sp, #20]
 8004a50:	464b      	mov	r3, r9
 8004a52:	4442      	add	r2, r8
 8004a54:	4631      	mov	r1, r6
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d1c1      	bne.n	80049e2 <_printf_float+0x33e>
 8004a5e:	e680      	b.n	8004762 <_printf_float+0xbe>
 8004a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a62:	2a01      	cmp	r2, #1
 8004a64:	dc01      	bgt.n	8004a6a <_printf_float+0x3c6>
 8004a66:	07db      	lsls	r3, r3, #31
 8004a68:	d53a      	bpl.n	8004ae0 <_printf_float+0x43c>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b8      	blx	r7
 8004a74:	3001      	adds	r0, #1
 8004a76:	f43f ae74 	beq.w	8004762 <_printf_float+0xbe>
 8004a7a:	ee18 3a10 	vmov	r3, s16
 8004a7e:	4652      	mov	r2, sl
 8004a80:	4631      	mov	r1, r6
 8004a82:	4628      	mov	r0, r5
 8004a84:	47b8      	blx	r7
 8004a86:	3001      	adds	r0, #1
 8004a88:	f43f ae6b 	beq.w	8004762 <_printf_float+0xbe>
 8004a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a90:	2200      	movs	r2, #0
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004a98:	f7fc f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a9c:	b9d8      	cbnz	r0, 8004ad6 <_printf_float+0x432>
 8004a9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004aa2:	f108 0201 	add.w	r2, r8, #1
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	d10e      	bne.n	8004ace <_printf_float+0x42a>
 8004ab0:	e657      	b.n	8004762 <_printf_float+0xbe>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4652      	mov	r2, sl
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b8      	blx	r7
 8004abc:	3001      	adds	r0, #1
 8004abe:	f43f ae50 	beq.w	8004762 <_printf_float+0xbe>
 8004ac2:	f108 0801 	add.w	r8, r8, #1
 8004ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	4543      	cmp	r3, r8
 8004acc:	dcf1      	bgt.n	8004ab2 <_printf_float+0x40e>
 8004ace:	464b      	mov	r3, r9
 8004ad0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ad4:	e6da      	b.n	800488c <_printf_float+0x1e8>
 8004ad6:	f04f 0800 	mov.w	r8, #0
 8004ada:	f104 0a1a 	add.w	sl, r4, #26
 8004ade:	e7f2      	b.n	8004ac6 <_printf_float+0x422>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4642      	mov	r2, r8
 8004ae4:	e7df      	b.n	8004aa6 <_printf_float+0x402>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	464a      	mov	r2, r9
 8004aea:	4631      	mov	r1, r6
 8004aec:	4628      	mov	r0, r5
 8004aee:	47b8      	blx	r7
 8004af0:	3001      	adds	r0, #1
 8004af2:	f43f ae36 	beq.w	8004762 <_printf_float+0xbe>
 8004af6:	f108 0801 	add.w	r8, r8, #1
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	4543      	cmp	r3, r8
 8004b02:	dcf0      	bgt.n	8004ae6 <_printf_float+0x442>
 8004b04:	e6f8      	b.n	80048f8 <_printf_float+0x254>
 8004b06:	f04f 0800 	mov.w	r8, #0
 8004b0a:	f104 0919 	add.w	r9, r4, #25
 8004b0e:	e7f4      	b.n	8004afa <_printf_float+0x456>

08004b10 <_printf_common>:
 8004b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b14:	4616      	mov	r6, r2
 8004b16:	4699      	mov	r9, r3
 8004b18:	688a      	ldr	r2, [r1, #8]
 8004b1a:	690b      	ldr	r3, [r1, #16]
 8004b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b20:	4293      	cmp	r3, r2
 8004b22:	bfb8      	it	lt
 8004b24:	4613      	movlt	r3, r2
 8004b26:	6033      	str	r3, [r6, #0]
 8004b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	460c      	mov	r4, r1
 8004b30:	b10a      	cbz	r2, 8004b36 <_printf_common+0x26>
 8004b32:	3301      	adds	r3, #1
 8004b34:	6033      	str	r3, [r6, #0]
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	0699      	lsls	r1, r3, #26
 8004b3a:	bf42      	ittt	mi
 8004b3c:	6833      	ldrmi	r3, [r6, #0]
 8004b3e:	3302      	addmi	r3, #2
 8004b40:	6033      	strmi	r3, [r6, #0]
 8004b42:	6825      	ldr	r5, [r4, #0]
 8004b44:	f015 0506 	ands.w	r5, r5, #6
 8004b48:	d106      	bne.n	8004b58 <_printf_common+0x48>
 8004b4a:	f104 0a19 	add.w	sl, r4, #25
 8004b4e:	68e3      	ldr	r3, [r4, #12]
 8004b50:	6832      	ldr	r2, [r6, #0]
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	42ab      	cmp	r3, r5
 8004b56:	dc26      	bgt.n	8004ba6 <_printf_common+0x96>
 8004b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b5c:	1e13      	subs	r3, r2, #0
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	bf18      	it	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	0692      	lsls	r2, r2, #26
 8004b66:	d42b      	bmi.n	8004bc0 <_printf_common+0xb0>
 8004b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	4638      	mov	r0, r7
 8004b70:	47c0      	blx	r8
 8004b72:	3001      	adds	r0, #1
 8004b74:	d01e      	beq.n	8004bb4 <_printf_common+0xa4>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	6922      	ldr	r2, [r4, #16]
 8004b7a:	f003 0306 	and.w	r3, r3, #6
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	bf02      	ittt	eq
 8004b82:	68e5      	ldreq	r5, [r4, #12]
 8004b84:	6833      	ldreq	r3, [r6, #0]
 8004b86:	1aed      	subeq	r5, r5, r3
 8004b88:	68a3      	ldr	r3, [r4, #8]
 8004b8a:	bf0c      	ite	eq
 8004b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b90:	2500      	movne	r5, #0
 8004b92:	4293      	cmp	r3, r2
 8004b94:	bfc4      	itt	gt
 8004b96:	1a9b      	subgt	r3, r3, r2
 8004b98:	18ed      	addgt	r5, r5, r3
 8004b9a:	2600      	movs	r6, #0
 8004b9c:	341a      	adds	r4, #26
 8004b9e:	42b5      	cmp	r5, r6
 8004ba0:	d11a      	bne.n	8004bd8 <_printf_common+0xc8>
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	e008      	b.n	8004bb8 <_printf_common+0xa8>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	4652      	mov	r2, sl
 8004baa:	4649      	mov	r1, r9
 8004bac:	4638      	mov	r0, r7
 8004bae:	47c0      	blx	r8
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d103      	bne.n	8004bbc <_printf_common+0xac>
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bbc:	3501      	adds	r5, #1
 8004bbe:	e7c6      	b.n	8004b4e <_printf_common+0x3e>
 8004bc0:	18e1      	adds	r1, r4, r3
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	2030      	movs	r0, #48	; 0x30
 8004bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bca:	4422      	add	r2, r4
 8004bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	e7c7      	b.n	8004b68 <_printf_common+0x58>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	4622      	mov	r2, r4
 8004bdc:	4649      	mov	r1, r9
 8004bde:	4638      	mov	r0, r7
 8004be0:	47c0      	blx	r8
 8004be2:	3001      	adds	r0, #1
 8004be4:	d0e6      	beq.n	8004bb4 <_printf_common+0xa4>
 8004be6:	3601      	adds	r6, #1
 8004be8:	e7d9      	b.n	8004b9e <_printf_common+0x8e>
	...

08004bec <_printf_i>:
 8004bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	7e0f      	ldrb	r7, [r1, #24]
 8004bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bf4:	2f78      	cmp	r7, #120	; 0x78
 8004bf6:	4691      	mov	r9, r2
 8004bf8:	4680      	mov	r8, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	469a      	mov	sl, r3
 8004bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c02:	d807      	bhi.n	8004c14 <_printf_i+0x28>
 8004c04:	2f62      	cmp	r7, #98	; 0x62
 8004c06:	d80a      	bhi.n	8004c1e <_printf_i+0x32>
 8004c08:	2f00      	cmp	r7, #0
 8004c0a:	f000 80d4 	beq.w	8004db6 <_printf_i+0x1ca>
 8004c0e:	2f58      	cmp	r7, #88	; 0x58
 8004c10:	f000 80c0 	beq.w	8004d94 <_printf_i+0x1a8>
 8004c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c1c:	e03a      	b.n	8004c94 <_printf_i+0xa8>
 8004c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c22:	2b15      	cmp	r3, #21
 8004c24:	d8f6      	bhi.n	8004c14 <_printf_i+0x28>
 8004c26:	a101      	add	r1, pc, #4	; (adr r1, 8004c2c <_printf_i+0x40>)
 8004c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c2c:	08004c85 	.word	0x08004c85
 8004c30:	08004c99 	.word	0x08004c99
 8004c34:	08004c15 	.word	0x08004c15
 8004c38:	08004c15 	.word	0x08004c15
 8004c3c:	08004c15 	.word	0x08004c15
 8004c40:	08004c15 	.word	0x08004c15
 8004c44:	08004c99 	.word	0x08004c99
 8004c48:	08004c15 	.word	0x08004c15
 8004c4c:	08004c15 	.word	0x08004c15
 8004c50:	08004c15 	.word	0x08004c15
 8004c54:	08004c15 	.word	0x08004c15
 8004c58:	08004d9d 	.word	0x08004d9d
 8004c5c:	08004cc5 	.word	0x08004cc5
 8004c60:	08004d57 	.word	0x08004d57
 8004c64:	08004c15 	.word	0x08004c15
 8004c68:	08004c15 	.word	0x08004c15
 8004c6c:	08004dbf 	.word	0x08004dbf
 8004c70:	08004c15 	.word	0x08004c15
 8004c74:	08004cc5 	.word	0x08004cc5
 8004c78:	08004c15 	.word	0x08004c15
 8004c7c:	08004c15 	.word	0x08004c15
 8004c80:	08004d5f 	.word	0x08004d5f
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	1d1a      	adds	r2, r3, #4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	602a      	str	r2, [r5, #0]
 8004c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c94:	2301      	movs	r3, #1
 8004c96:	e09f      	b.n	8004dd8 <_printf_i+0x1ec>
 8004c98:	6820      	ldr	r0, [r4, #0]
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	0607      	lsls	r7, r0, #24
 8004c9e:	f103 0104 	add.w	r1, r3, #4
 8004ca2:	6029      	str	r1, [r5, #0]
 8004ca4:	d501      	bpl.n	8004caa <_printf_i+0xbe>
 8004ca6:	681e      	ldr	r6, [r3, #0]
 8004ca8:	e003      	b.n	8004cb2 <_printf_i+0xc6>
 8004caa:	0646      	lsls	r6, r0, #25
 8004cac:	d5fb      	bpl.n	8004ca6 <_printf_i+0xba>
 8004cae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004cb2:	2e00      	cmp	r6, #0
 8004cb4:	da03      	bge.n	8004cbe <_printf_i+0xd2>
 8004cb6:	232d      	movs	r3, #45	; 0x2d
 8004cb8:	4276      	negs	r6, r6
 8004cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cbe:	485a      	ldr	r0, [pc, #360]	; (8004e28 <_printf_i+0x23c>)
 8004cc0:	230a      	movs	r3, #10
 8004cc2:	e012      	b.n	8004cea <_printf_i+0xfe>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	6820      	ldr	r0, [r4, #0]
 8004cc8:	1d19      	adds	r1, r3, #4
 8004cca:	6029      	str	r1, [r5, #0]
 8004ccc:	0605      	lsls	r5, r0, #24
 8004cce:	d501      	bpl.n	8004cd4 <_printf_i+0xe8>
 8004cd0:	681e      	ldr	r6, [r3, #0]
 8004cd2:	e002      	b.n	8004cda <_printf_i+0xee>
 8004cd4:	0641      	lsls	r1, r0, #25
 8004cd6:	d5fb      	bpl.n	8004cd0 <_printf_i+0xe4>
 8004cd8:	881e      	ldrh	r6, [r3, #0]
 8004cda:	4853      	ldr	r0, [pc, #332]	; (8004e28 <_printf_i+0x23c>)
 8004cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8004cde:	bf0c      	ite	eq
 8004ce0:	2308      	moveq	r3, #8
 8004ce2:	230a      	movne	r3, #10
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cea:	6865      	ldr	r5, [r4, #4]
 8004cec:	60a5      	str	r5, [r4, #8]
 8004cee:	2d00      	cmp	r5, #0
 8004cf0:	bfa2      	ittt	ge
 8004cf2:	6821      	ldrge	r1, [r4, #0]
 8004cf4:	f021 0104 	bicge.w	r1, r1, #4
 8004cf8:	6021      	strge	r1, [r4, #0]
 8004cfa:	b90e      	cbnz	r6, 8004d00 <_printf_i+0x114>
 8004cfc:	2d00      	cmp	r5, #0
 8004cfe:	d04b      	beq.n	8004d98 <_printf_i+0x1ac>
 8004d00:	4615      	mov	r5, r2
 8004d02:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d06:	fb03 6711 	mls	r7, r3, r1, r6
 8004d0a:	5dc7      	ldrb	r7, [r0, r7]
 8004d0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d10:	4637      	mov	r7, r6
 8004d12:	42bb      	cmp	r3, r7
 8004d14:	460e      	mov	r6, r1
 8004d16:	d9f4      	bls.n	8004d02 <_printf_i+0x116>
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d10b      	bne.n	8004d34 <_printf_i+0x148>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	07de      	lsls	r6, r3, #31
 8004d20:	d508      	bpl.n	8004d34 <_printf_i+0x148>
 8004d22:	6923      	ldr	r3, [r4, #16]
 8004d24:	6861      	ldr	r1, [r4, #4]
 8004d26:	4299      	cmp	r1, r3
 8004d28:	bfde      	ittt	le
 8004d2a:	2330      	movle	r3, #48	; 0x30
 8004d2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d34:	1b52      	subs	r2, r2, r5
 8004d36:	6122      	str	r2, [r4, #16]
 8004d38:	f8cd a000 	str.w	sl, [sp]
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	aa03      	add	r2, sp, #12
 8004d40:	4621      	mov	r1, r4
 8004d42:	4640      	mov	r0, r8
 8004d44:	f7ff fee4 	bl	8004b10 <_printf_common>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d14a      	bne.n	8004de2 <_printf_i+0x1f6>
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	b004      	add	sp, #16
 8004d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	f043 0320 	orr.w	r3, r3, #32
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	4833      	ldr	r0, [pc, #204]	; (8004e2c <_printf_i+0x240>)
 8004d60:	2778      	movs	r7, #120	; 0x78
 8004d62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	6829      	ldr	r1, [r5, #0]
 8004d6a:	061f      	lsls	r7, r3, #24
 8004d6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d70:	d402      	bmi.n	8004d78 <_printf_i+0x18c>
 8004d72:	065f      	lsls	r7, r3, #25
 8004d74:	bf48      	it	mi
 8004d76:	b2b6      	uxthmi	r6, r6
 8004d78:	07df      	lsls	r7, r3, #31
 8004d7a:	bf48      	it	mi
 8004d7c:	f043 0320 	orrmi.w	r3, r3, #32
 8004d80:	6029      	str	r1, [r5, #0]
 8004d82:	bf48      	it	mi
 8004d84:	6023      	strmi	r3, [r4, #0]
 8004d86:	b91e      	cbnz	r6, 8004d90 <_printf_i+0x1a4>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	f023 0320 	bic.w	r3, r3, #32
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	2310      	movs	r3, #16
 8004d92:	e7a7      	b.n	8004ce4 <_printf_i+0xf8>
 8004d94:	4824      	ldr	r0, [pc, #144]	; (8004e28 <_printf_i+0x23c>)
 8004d96:	e7e4      	b.n	8004d62 <_printf_i+0x176>
 8004d98:	4615      	mov	r5, r2
 8004d9a:	e7bd      	b.n	8004d18 <_printf_i+0x12c>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	6826      	ldr	r6, [r4, #0]
 8004da0:	6961      	ldr	r1, [r4, #20]
 8004da2:	1d18      	adds	r0, r3, #4
 8004da4:	6028      	str	r0, [r5, #0]
 8004da6:	0635      	lsls	r5, r6, #24
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	d501      	bpl.n	8004db0 <_printf_i+0x1c4>
 8004dac:	6019      	str	r1, [r3, #0]
 8004dae:	e002      	b.n	8004db6 <_printf_i+0x1ca>
 8004db0:	0670      	lsls	r0, r6, #25
 8004db2:	d5fb      	bpl.n	8004dac <_printf_i+0x1c0>
 8004db4:	8019      	strh	r1, [r3, #0]
 8004db6:	2300      	movs	r3, #0
 8004db8:	6123      	str	r3, [r4, #16]
 8004dba:	4615      	mov	r5, r2
 8004dbc:	e7bc      	b.n	8004d38 <_printf_i+0x14c>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	1d1a      	adds	r2, r3, #4
 8004dc2:	602a      	str	r2, [r5, #0]
 8004dc4:	681d      	ldr	r5, [r3, #0]
 8004dc6:	6862      	ldr	r2, [r4, #4]
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f7fb fa08 	bl	80001e0 <memchr>
 8004dd0:	b108      	cbz	r0, 8004dd6 <_printf_i+0x1ea>
 8004dd2:	1b40      	subs	r0, r0, r5
 8004dd4:	6060      	str	r0, [r4, #4]
 8004dd6:	6863      	ldr	r3, [r4, #4]
 8004dd8:	6123      	str	r3, [r4, #16]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de0:	e7aa      	b.n	8004d38 <_printf_i+0x14c>
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	462a      	mov	r2, r5
 8004de6:	4649      	mov	r1, r9
 8004de8:	4640      	mov	r0, r8
 8004dea:	47d0      	blx	sl
 8004dec:	3001      	adds	r0, #1
 8004dee:	d0ad      	beq.n	8004d4c <_printf_i+0x160>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	079b      	lsls	r3, r3, #30
 8004df4:	d413      	bmi.n	8004e1e <_printf_i+0x232>
 8004df6:	68e0      	ldr	r0, [r4, #12]
 8004df8:	9b03      	ldr	r3, [sp, #12]
 8004dfa:	4298      	cmp	r0, r3
 8004dfc:	bfb8      	it	lt
 8004dfe:	4618      	movlt	r0, r3
 8004e00:	e7a6      	b.n	8004d50 <_printf_i+0x164>
 8004e02:	2301      	movs	r3, #1
 8004e04:	4632      	mov	r2, r6
 8004e06:	4649      	mov	r1, r9
 8004e08:	4640      	mov	r0, r8
 8004e0a:	47d0      	blx	sl
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d09d      	beq.n	8004d4c <_printf_i+0x160>
 8004e10:	3501      	adds	r5, #1
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	9903      	ldr	r1, [sp, #12]
 8004e16:	1a5b      	subs	r3, r3, r1
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	dcf2      	bgt.n	8004e02 <_printf_i+0x216>
 8004e1c:	e7eb      	b.n	8004df6 <_printf_i+0x20a>
 8004e1e:	2500      	movs	r5, #0
 8004e20:	f104 0619 	add.w	r6, r4, #25
 8004e24:	e7f5      	b.n	8004e12 <_printf_i+0x226>
 8004e26:	bf00      	nop
 8004e28:	080072ea 	.word	0x080072ea
 8004e2c:	080072fb 	.word	0x080072fb

08004e30 <std>:
 8004e30:	2300      	movs	r3, #0
 8004e32:	b510      	push	{r4, lr}
 8004e34:	4604      	mov	r4, r0
 8004e36:	e9c0 3300 	strd	r3, r3, [r0]
 8004e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e3e:	6083      	str	r3, [r0, #8]
 8004e40:	8181      	strh	r1, [r0, #12]
 8004e42:	6643      	str	r3, [r0, #100]	; 0x64
 8004e44:	81c2      	strh	r2, [r0, #14]
 8004e46:	6183      	str	r3, [r0, #24]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	305c      	adds	r0, #92	; 0x5c
 8004e4e:	f000 f914 	bl	800507a <memset>
 8004e52:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <std+0x58>)
 8004e54:	6263      	str	r3, [r4, #36]	; 0x24
 8004e56:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <std+0x5c>)
 8004e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <std+0x60>)
 8004e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <std+0x64>)
 8004e60:	6323      	str	r3, [r4, #48]	; 0x30
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <std+0x68>)
 8004e64:	6224      	str	r4, [r4, #32]
 8004e66:	429c      	cmp	r4, r3
 8004e68:	d006      	beq.n	8004e78 <std+0x48>
 8004e6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004e6e:	4294      	cmp	r4, r2
 8004e70:	d002      	beq.n	8004e78 <std+0x48>
 8004e72:	33d0      	adds	r3, #208	; 0xd0
 8004e74:	429c      	cmp	r4, r3
 8004e76:	d105      	bne.n	8004e84 <std+0x54>
 8004e78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e80:	f000 b978 	b.w	8005174 <__retarget_lock_init_recursive>
 8004e84:	bd10      	pop	{r4, pc}
 8004e86:	bf00      	nop
 8004e88:	08004ff5 	.word	0x08004ff5
 8004e8c:	08005017 	.word	0x08005017
 8004e90:	0800504f 	.word	0x0800504f
 8004e94:	08005073 	.word	0x08005073
 8004e98:	200002d4 	.word	0x200002d4

08004e9c <stdio_exit_handler>:
 8004e9c:	4a02      	ldr	r2, [pc, #8]	; (8004ea8 <stdio_exit_handler+0xc>)
 8004e9e:	4903      	ldr	r1, [pc, #12]	; (8004eac <stdio_exit_handler+0x10>)
 8004ea0:	4803      	ldr	r0, [pc, #12]	; (8004eb0 <stdio_exit_handler+0x14>)
 8004ea2:	f000 b869 	b.w	8004f78 <_fwalk_sglue>
 8004ea6:	bf00      	nop
 8004ea8:	2000000c 	.word	0x2000000c
 8004eac:	08006b29 	.word	0x08006b29
 8004eb0:	20000018 	.word	0x20000018

08004eb4 <cleanup_stdio>:
 8004eb4:	6841      	ldr	r1, [r0, #4]
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <cleanup_stdio+0x34>)
 8004eb8:	4299      	cmp	r1, r3
 8004eba:	b510      	push	{r4, lr}
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	d001      	beq.n	8004ec4 <cleanup_stdio+0x10>
 8004ec0:	f001 fe32 	bl	8006b28 <_fflush_r>
 8004ec4:	68a1      	ldr	r1, [r4, #8]
 8004ec6:	4b09      	ldr	r3, [pc, #36]	; (8004eec <cleanup_stdio+0x38>)
 8004ec8:	4299      	cmp	r1, r3
 8004eca:	d002      	beq.n	8004ed2 <cleanup_stdio+0x1e>
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f001 fe2b 	bl	8006b28 <_fflush_r>
 8004ed2:	68e1      	ldr	r1, [r4, #12]
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <cleanup_stdio+0x3c>)
 8004ed6:	4299      	cmp	r1, r3
 8004ed8:	d004      	beq.n	8004ee4 <cleanup_stdio+0x30>
 8004eda:	4620      	mov	r0, r4
 8004edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee0:	f001 be22 	b.w	8006b28 <_fflush_r>
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200002d4 	.word	0x200002d4
 8004eec:	2000033c 	.word	0x2000033c
 8004ef0:	200003a4 	.word	0x200003a4

08004ef4 <global_stdio_init.part.0>:
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <global_stdio_init.part.0+0x30>)
 8004ef8:	4c0b      	ldr	r4, [pc, #44]	; (8004f28 <global_stdio_init.part.0+0x34>)
 8004efa:	4a0c      	ldr	r2, [pc, #48]	; (8004f2c <global_stdio_init.part.0+0x38>)
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	4620      	mov	r0, r4
 8004f00:	2200      	movs	r2, #0
 8004f02:	2104      	movs	r1, #4
 8004f04:	f7ff ff94 	bl	8004e30 <std>
 8004f08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2109      	movs	r1, #9
 8004f10:	f7ff ff8e 	bl	8004e30 <std>
 8004f14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f18:	2202      	movs	r2, #2
 8004f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1e:	2112      	movs	r1, #18
 8004f20:	f7ff bf86 	b.w	8004e30 <std>
 8004f24:	2000040c 	.word	0x2000040c
 8004f28:	200002d4 	.word	0x200002d4
 8004f2c:	08004e9d 	.word	0x08004e9d

08004f30 <__sfp_lock_acquire>:
 8004f30:	4801      	ldr	r0, [pc, #4]	; (8004f38 <__sfp_lock_acquire+0x8>)
 8004f32:	f000 b920 	b.w	8005176 <__retarget_lock_acquire_recursive>
 8004f36:	bf00      	nop
 8004f38:	20000415 	.word	0x20000415

08004f3c <__sfp_lock_release>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	; (8004f44 <__sfp_lock_release+0x8>)
 8004f3e:	f000 b91b 	b.w	8005178 <__retarget_lock_release_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000415 	.word	0x20000415

08004f48 <__sinit>:
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	f7ff fff0 	bl	8004f30 <__sfp_lock_acquire>
 8004f50:	6a23      	ldr	r3, [r4, #32]
 8004f52:	b11b      	cbz	r3, 8004f5c <__sinit+0x14>
 8004f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f58:	f7ff bff0 	b.w	8004f3c <__sfp_lock_release>
 8004f5c:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <__sinit+0x28>)
 8004f5e:	6223      	str	r3, [r4, #32]
 8004f60:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <__sinit+0x2c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f5      	bne.n	8004f54 <__sinit+0xc>
 8004f68:	f7ff ffc4 	bl	8004ef4 <global_stdio_init.part.0>
 8004f6c:	e7f2      	b.n	8004f54 <__sinit+0xc>
 8004f6e:	bf00      	nop
 8004f70:	08004eb5 	.word	0x08004eb5
 8004f74:	2000040c 	.word	0x2000040c

08004f78 <_fwalk_sglue>:
 8004f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	4688      	mov	r8, r1
 8004f80:	4614      	mov	r4, r2
 8004f82:	2600      	movs	r6, #0
 8004f84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f88:	f1b9 0901 	subs.w	r9, r9, #1
 8004f8c:	d505      	bpl.n	8004f9a <_fwalk_sglue+0x22>
 8004f8e:	6824      	ldr	r4, [r4, #0]
 8004f90:	2c00      	cmp	r4, #0
 8004f92:	d1f7      	bne.n	8004f84 <_fwalk_sglue+0xc>
 8004f94:	4630      	mov	r0, r6
 8004f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9a:	89ab      	ldrh	r3, [r5, #12]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d907      	bls.n	8004fb0 <_fwalk_sglue+0x38>
 8004fa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	d003      	beq.n	8004fb0 <_fwalk_sglue+0x38>
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4638      	mov	r0, r7
 8004fac:	47c0      	blx	r8
 8004fae:	4306      	orrs	r6, r0
 8004fb0:	3568      	adds	r5, #104	; 0x68
 8004fb2:	e7e9      	b.n	8004f88 <_fwalk_sglue+0x10>

08004fb4 <siprintf>:
 8004fb4:	b40e      	push	{r1, r2, r3}
 8004fb6:	b500      	push	{lr}
 8004fb8:	b09c      	sub	sp, #112	; 0x70
 8004fba:	ab1d      	add	r3, sp, #116	; 0x74
 8004fbc:	9002      	str	r0, [sp, #8]
 8004fbe:	9006      	str	r0, [sp, #24]
 8004fc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fc4:	4809      	ldr	r0, [pc, #36]	; (8004fec <siprintf+0x38>)
 8004fc6:	9107      	str	r1, [sp, #28]
 8004fc8:	9104      	str	r1, [sp, #16]
 8004fca:	4909      	ldr	r1, [pc, #36]	; (8004ff0 <siprintf+0x3c>)
 8004fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fd0:	9105      	str	r1, [sp, #20]
 8004fd2:	6800      	ldr	r0, [r0, #0]
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	a902      	add	r1, sp, #8
 8004fd8:	f001 fc22 	bl	8006820 <_svfiprintf_r>
 8004fdc:	9b02      	ldr	r3, [sp, #8]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	b01c      	add	sp, #112	; 0x70
 8004fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fe8:	b003      	add	sp, #12
 8004fea:	4770      	bx	lr
 8004fec:	20000064 	.word	0x20000064
 8004ff0:	ffff0208 	.word	0xffff0208

08004ff4 <__sread>:
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffc:	f000 f86c 	bl	80050d8 <_read_r>
 8005000:	2800      	cmp	r0, #0
 8005002:	bfab      	itete	ge
 8005004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005006:	89a3      	ldrhlt	r3, [r4, #12]
 8005008:	181b      	addge	r3, r3, r0
 800500a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800500e:	bfac      	ite	ge
 8005010:	6563      	strge	r3, [r4, #84]	; 0x54
 8005012:	81a3      	strhlt	r3, [r4, #12]
 8005014:	bd10      	pop	{r4, pc}

08005016 <__swrite>:
 8005016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800501a:	461f      	mov	r7, r3
 800501c:	898b      	ldrh	r3, [r1, #12]
 800501e:	05db      	lsls	r3, r3, #23
 8005020:	4605      	mov	r5, r0
 8005022:	460c      	mov	r4, r1
 8005024:	4616      	mov	r6, r2
 8005026:	d505      	bpl.n	8005034 <__swrite+0x1e>
 8005028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800502c:	2302      	movs	r3, #2
 800502e:	2200      	movs	r2, #0
 8005030:	f000 f840 	bl	80050b4 <_lseek_r>
 8005034:	89a3      	ldrh	r3, [r4, #12]
 8005036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800503a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800503e:	81a3      	strh	r3, [r4, #12]
 8005040:	4632      	mov	r2, r6
 8005042:	463b      	mov	r3, r7
 8005044:	4628      	mov	r0, r5
 8005046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800504a:	f000 b857 	b.w	80050fc <_write_r>

0800504e <__sseek>:
 800504e:	b510      	push	{r4, lr}
 8005050:	460c      	mov	r4, r1
 8005052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005056:	f000 f82d 	bl	80050b4 <_lseek_r>
 800505a:	1c43      	adds	r3, r0, #1
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	bf15      	itete	ne
 8005060:	6560      	strne	r0, [r4, #84]	; 0x54
 8005062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800506a:	81a3      	strheq	r3, [r4, #12]
 800506c:	bf18      	it	ne
 800506e:	81a3      	strhne	r3, [r4, #12]
 8005070:	bd10      	pop	{r4, pc}

08005072 <__sclose>:
 8005072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005076:	f000 b80d 	b.w	8005094 <_close_r>

0800507a <memset>:
 800507a:	4402      	add	r2, r0
 800507c:	4603      	mov	r3, r0
 800507e:	4293      	cmp	r3, r2
 8005080:	d100      	bne.n	8005084 <memset+0xa>
 8005082:	4770      	bx	lr
 8005084:	f803 1b01 	strb.w	r1, [r3], #1
 8005088:	e7f9      	b.n	800507e <memset+0x4>
	...

0800508c <_localeconv_r>:
 800508c:	4800      	ldr	r0, [pc, #0]	; (8005090 <_localeconv_r+0x4>)
 800508e:	4770      	bx	lr
 8005090:	20000158 	.word	0x20000158

08005094 <_close_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4d06      	ldr	r5, [pc, #24]	; (80050b0 <_close_r+0x1c>)
 8005098:	2300      	movs	r3, #0
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	602b      	str	r3, [r5, #0]
 80050a0:	f7fc f897 	bl	80011d2 <_close>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d102      	bne.n	80050ae <_close_r+0x1a>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	b103      	cbz	r3, 80050ae <_close_r+0x1a>
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	bd38      	pop	{r3, r4, r5, pc}
 80050b0:	20000410 	.word	0x20000410

080050b4 <_lseek_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4d07      	ldr	r5, [pc, #28]	; (80050d4 <_lseek_r+0x20>)
 80050b8:	4604      	mov	r4, r0
 80050ba:	4608      	mov	r0, r1
 80050bc:	4611      	mov	r1, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	602a      	str	r2, [r5, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f7fc f8ac 	bl	8001220 <_lseek>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_lseek_r+0x1e>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_lseek_r+0x1e>
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	20000410 	.word	0x20000410

080050d8 <_read_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4d07      	ldr	r5, [pc, #28]	; (80050f8 <_read_r+0x20>)
 80050dc:	4604      	mov	r4, r0
 80050de:	4608      	mov	r0, r1
 80050e0:	4611      	mov	r1, r2
 80050e2:	2200      	movs	r2, #0
 80050e4:	602a      	str	r2, [r5, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f7fc f83a 	bl	8001160 <_read>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d102      	bne.n	80050f6 <_read_r+0x1e>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	b103      	cbz	r3, 80050f6 <_read_r+0x1e>
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	20000410 	.word	0x20000410

080050fc <_write_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4d07      	ldr	r5, [pc, #28]	; (800511c <_write_r+0x20>)
 8005100:	4604      	mov	r4, r0
 8005102:	4608      	mov	r0, r1
 8005104:	4611      	mov	r1, r2
 8005106:	2200      	movs	r2, #0
 8005108:	602a      	str	r2, [r5, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	f7fc f845 	bl	800119a <_write>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_write_r+0x1e>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_write_r+0x1e>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	20000410 	.word	0x20000410

08005120 <__errno>:
 8005120:	4b01      	ldr	r3, [pc, #4]	; (8005128 <__errno+0x8>)
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000064 	.word	0x20000064

0800512c <__libc_init_array>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	4d0d      	ldr	r5, [pc, #52]	; (8005164 <__libc_init_array+0x38>)
 8005130:	4c0d      	ldr	r4, [pc, #52]	; (8005168 <__libc_init_array+0x3c>)
 8005132:	1b64      	subs	r4, r4, r5
 8005134:	10a4      	asrs	r4, r4, #2
 8005136:	2600      	movs	r6, #0
 8005138:	42a6      	cmp	r6, r4
 800513a:	d109      	bne.n	8005150 <__libc_init_array+0x24>
 800513c:	4d0b      	ldr	r5, [pc, #44]	; (800516c <__libc_init_array+0x40>)
 800513e:	4c0c      	ldr	r4, [pc, #48]	; (8005170 <__libc_init_array+0x44>)
 8005140:	f002 f896 	bl	8007270 <_init>
 8005144:	1b64      	subs	r4, r4, r5
 8005146:	10a4      	asrs	r4, r4, #2
 8005148:	2600      	movs	r6, #0
 800514a:	42a6      	cmp	r6, r4
 800514c:	d105      	bne.n	800515a <__libc_init_array+0x2e>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	f855 3b04 	ldr.w	r3, [r5], #4
 8005154:	4798      	blx	r3
 8005156:	3601      	adds	r6, #1
 8005158:	e7ee      	b.n	8005138 <__libc_init_array+0xc>
 800515a:	f855 3b04 	ldr.w	r3, [r5], #4
 800515e:	4798      	blx	r3
 8005160:	3601      	adds	r6, #1
 8005162:	e7f2      	b.n	800514a <__libc_init_array+0x1e>
 8005164:	0800764c 	.word	0x0800764c
 8005168:	0800764c 	.word	0x0800764c
 800516c:	0800764c 	.word	0x0800764c
 8005170:	08007650 	.word	0x08007650

08005174 <__retarget_lock_init_recursive>:
 8005174:	4770      	bx	lr

08005176 <__retarget_lock_acquire_recursive>:
 8005176:	4770      	bx	lr

08005178 <__retarget_lock_release_recursive>:
 8005178:	4770      	bx	lr

0800517a <quorem>:
 800517a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517e:	6903      	ldr	r3, [r0, #16]
 8005180:	690c      	ldr	r4, [r1, #16]
 8005182:	42a3      	cmp	r3, r4
 8005184:	4607      	mov	r7, r0
 8005186:	db7e      	blt.n	8005286 <quorem+0x10c>
 8005188:	3c01      	subs	r4, #1
 800518a:	f101 0814 	add.w	r8, r1, #20
 800518e:	f100 0514 	add.w	r5, r0, #20
 8005192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800519c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051a0:	3301      	adds	r3, #1
 80051a2:	429a      	cmp	r2, r3
 80051a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80051b0:	d331      	bcc.n	8005216 <quorem+0x9c>
 80051b2:	f04f 0e00 	mov.w	lr, #0
 80051b6:	4640      	mov	r0, r8
 80051b8:	46ac      	mov	ip, r5
 80051ba:	46f2      	mov	sl, lr
 80051bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80051c0:	b293      	uxth	r3, r2
 80051c2:	fb06 e303 	mla	r3, r6, r3, lr
 80051c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051ca:	0c1a      	lsrs	r2, r3, #16
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	ebaa 0303 	sub.w	r3, sl, r3
 80051d2:	f8dc a000 	ldr.w	sl, [ip]
 80051d6:	fa13 f38a 	uxtah	r3, r3, sl
 80051da:	fb06 220e 	mla	r2, r6, lr, r2
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	9b00      	ldr	r3, [sp, #0]
 80051e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051e6:	b292      	uxth	r2, r2
 80051e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80051f4:	4581      	cmp	r9, r0
 80051f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051fa:	f84c 3b04 	str.w	r3, [ip], #4
 80051fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005202:	d2db      	bcs.n	80051bc <quorem+0x42>
 8005204:	f855 300b 	ldr.w	r3, [r5, fp]
 8005208:	b92b      	cbnz	r3, 8005216 <quorem+0x9c>
 800520a:	9b01      	ldr	r3, [sp, #4]
 800520c:	3b04      	subs	r3, #4
 800520e:	429d      	cmp	r5, r3
 8005210:	461a      	mov	r2, r3
 8005212:	d32c      	bcc.n	800526e <quorem+0xf4>
 8005214:	613c      	str	r4, [r7, #16]
 8005216:	4638      	mov	r0, r7
 8005218:	f001 f9a8 	bl	800656c <__mcmp>
 800521c:	2800      	cmp	r0, #0
 800521e:	db22      	blt.n	8005266 <quorem+0xec>
 8005220:	3601      	adds	r6, #1
 8005222:	4629      	mov	r1, r5
 8005224:	2000      	movs	r0, #0
 8005226:	f858 2b04 	ldr.w	r2, [r8], #4
 800522a:	f8d1 c000 	ldr.w	ip, [r1]
 800522e:	b293      	uxth	r3, r2
 8005230:	1ac3      	subs	r3, r0, r3
 8005232:	0c12      	lsrs	r2, r2, #16
 8005234:	fa13 f38c 	uxtah	r3, r3, ip
 8005238:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800523c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005240:	b29b      	uxth	r3, r3
 8005242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005246:	45c1      	cmp	r9, r8
 8005248:	f841 3b04 	str.w	r3, [r1], #4
 800524c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005250:	d2e9      	bcs.n	8005226 <quorem+0xac>
 8005252:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800525a:	b922      	cbnz	r2, 8005266 <quorem+0xec>
 800525c:	3b04      	subs	r3, #4
 800525e:	429d      	cmp	r5, r3
 8005260:	461a      	mov	r2, r3
 8005262:	d30a      	bcc.n	800527a <quorem+0x100>
 8005264:	613c      	str	r4, [r7, #16]
 8005266:	4630      	mov	r0, r6
 8005268:	b003      	add	sp, #12
 800526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	3b04      	subs	r3, #4
 8005272:	2a00      	cmp	r2, #0
 8005274:	d1ce      	bne.n	8005214 <quorem+0x9a>
 8005276:	3c01      	subs	r4, #1
 8005278:	e7c9      	b.n	800520e <quorem+0x94>
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	3b04      	subs	r3, #4
 800527e:	2a00      	cmp	r2, #0
 8005280:	d1f0      	bne.n	8005264 <quorem+0xea>
 8005282:	3c01      	subs	r4, #1
 8005284:	e7eb      	b.n	800525e <quorem+0xe4>
 8005286:	2000      	movs	r0, #0
 8005288:	e7ee      	b.n	8005268 <quorem+0xee>
 800528a:	0000      	movs	r0, r0
 800528c:	0000      	movs	r0, r0
	...

08005290 <_dtoa_r>:
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	ed2d 8b04 	vpush	{d8-d9}
 8005298:	69c5      	ldr	r5, [r0, #28]
 800529a:	b093      	sub	sp, #76	; 0x4c
 800529c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80052a0:	ec57 6b10 	vmov	r6, r7, d0
 80052a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052a8:	9107      	str	r1, [sp, #28]
 80052aa:	4604      	mov	r4, r0
 80052ac:	920a      	str	r2, [sp, #40]	; 0x28
 80052ae:	930d      	str	r3, [sp, #52]	; 0x34
 80052b0:	b975      	cbnz	r5, 80052d0 <_dtoa_r+0x40>
 80052b2:	2010      	movs	r0, #16
 80052b4:	f000 fe2a 	bl	8005f0c <malloc>
 80052b8:	4602      	mov	r2, r0
 80052ba:	61e0      	str	r0, [r4, #28]
 80052bc:	b920      	cbnz	r0, 80052c8 <_dtoa_r+0x38>
 80052be:	4bae      	ldr	r3, [pc, #696]	; (8005578 <_dtoa_r+0x2e8>)
 80052c0:	21ef      	movs	r1, #239	; 0xef
 80052c2:	48ae      	ldr	r0, [pc, #696]	; (800557c <_dtoa_r+0x2ec>)
 80052c4:	f001 fc90 	bl	8006be8 <__assert_func>
 80052c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052cc:	6005      	str	r5, [r0, #0]
 80052ce:	60c5      	str	r5, [r0, #12]
 80052d0:	69e3      	ldr	r3, [r4, #28]
 80052d2:	6819      	ldr	r1, [r3, #0]
 80052d4:	b151      	cbz	r1, 80052ec <_dtoa_r+0x5c>
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	604a      	str	r2, [r1, #4]
 80052da:	2301      	movs	r3, #1
 80052dc:	4093      	lsls	r3, r2
 80052de:	608b      	str	r3, [r1, #8]
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 ff07 	bl	80060f4 <_Bfree>
 80052e6:	69e3      	ldr	r3, [r4, #28]
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	1e3b      	subs	r3, r7, #0
 80052ee:	bfbb      	ittet	lt
 80052f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80052f4:	9303      	strlt	r3, [sp, #12]
 80052f6:	2300      	movge	r3, #0
 80052f8:	2201      	movlt	r2, #1
 80052fa:	bfac      	ite	ge
 80052fc:	f8c8 3000 	strge.w	r3, [r8]
 8005300:	f8c8 2000 	strlt.w	r2, [r8]
 8005304:	4b9e      	ldr	r3, [pc, #632]	; (8005580 <_dtoa_r+0x2f0>)
 8005306:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800530a:	ea33 0308 	bics.w	r3, r3, r8
 800530e:	d11b      	bne.n	8005348 <_dtoa_r+0xb8>
 8005310:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005312:	f242 730f 	movw	r3, #9999	; 0x270f
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800531c:	4333      	orrs	r3, r6
 800531e:	f000 8593 	beq.w	8005e48 <_dtoa_r+0xbb8>
 8005322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005324:	b963      	cbnz	r3, 8005340 <_dtoa_r+0xb0>
 8005326:	4b97      	ldr	r3, [pc, #604]	; (8005584 <_dtoa_r+0x2f4>)
 8005328:	e027      	b.n	800537a <_dtoa_r+0xea>
 800532a:	4b97      	ldr	r3, [pc, #604]	; (8005588 <_dtoa_r+0x2f8>)
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	3308      	adds	r3, #8
 8005330:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	9800      	ldr	r0, [sp, #0]
 8005336:	b013      	add	sp, #76	; 0x4c
 8005338:	ecbd 8b04 	vpop	{d8-d9}
 800533c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005340:	4b90      	ldr	r3, [pc, #576]	; (8005584 <_dtoa_r+0x2f4>)
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	3303      	adds	r3, #3
 8005346:	e7f3      	b.n	8005330 <_dtoa_r+0xa0>
 8005348:	ed9d 7b02 	vldr	d7, [sp, #8]
 800534c:	2200      	movs	r2, #0
 800534e:	ec51 0b17 	vmov	r0, r1, d7
 8005352:	eeb0 8a47 	vmov.f32	s16, s14
 8005356:	eef0 8a67 	vmov.f32	s17, s15
 800535a:	2300      	movs	r3, #0
 800535c:	f7fb fbbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005360:	4681      	mov	r9, r0
 8005362:	b160      	cbz	r0, 800537e <_dtoa_r+0xee>
 8005364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005366:	2301      	movs	r3, #1
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8568 	beq.w	8005e42 <_dtoa_r+0xbb2>
 8005372:	4b86      	ldr	r3, [pc, #536]	; (800558c <_dtoa_r+0x2fc>)
 8005374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	3b01      	subs	r3, #1
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	e7da      	b.n	8005334 <_dtoa_r+0xa4>
 800537e:	aa10      	add	r2, sp, #64	; 0x40
 8005380:	a911      	add	r1, sp, #68	; 0x44
 8005382:	4620      	mov	r0, r4
 8005384:	eeb0 0a48 	vmov.f32	s0, s16
 8005388:	eef0 0a68 	vmov.f32	s1, s17
 800538c:	f001 f994 	bl	80066b8 <__d2b>
 8005390:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005394:	4682      	mov	sl, r0
 8005396:	2d00      	cmp	r5, #0
 8005398:	d07f      	beq.n	800549a <_dtoa_r+0x20a>
 800539a:	ee18 3a90 	vmov	r3, s17
 800539e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80053a6:	ec51 0b18 	vmov	r0, r1, d8
 80053aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80053ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80053b6:	4619      	mov	r1, r3
 80053b8:	2200      	movs	r2, #0
 80053ba:	4b75      	ldr	r3, [pc, #468]	; (8005590 <_dtoa_r+0x300>)
 80053bc:	f7fa ff6c 	bl	8000298 <__aeabi_dsub>
 80053c0:	a367      	add	r3, pc, #412	; (adr r3, 8005560 <_dtoa_r+0x2d0>)
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f7fb f91f 	bl	8000608 <__aeabi_dmul>
 80053ca:	a367      	add	r3, pc, #412	; (adr r3, 8005568 <_dtoa_r+0x2d8>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fa ff64 	bl	800029c <__adddf3>
 80053d4:	4606      	mov	r6, r0
 80053d6:	4628      	mov	r0, r5
 80053d8:	460f      	mov	r7, r1
 80053da:	f7fb f8ab 	bl	8000534 <__aeabi_i2d>
 80053de:	a364      	add	r3, pc, #400	; (adr r3, 8005570 <_dtoa_r+0x2e0>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	f7fb f910 	bl	8000608 <__aeabi_dmul>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4630      	mov	r0, r6
 80053ee:	4639      	mov	r1, r7
 80053f0:	f7fa ff54 	bl	800029c <__adddf3>
 80053f4:	4606      	mov	r6, r0
 80053f6:	460f      	mov	r7, r1
 80053f8:	f7fb fbb6 	bl	8000b68 <__aeabi_d2iz>
 80053fc:	2200      	movs	r2, #0
 80053fe:	4683      	mov	fp, r0
 8005400:	2300      	movs	r3, #0
 8005402:	4630      	mov	r0, r6
 8005404:	4639      	mov	r1, r7
 8005406:	f7fb fb71 	bl	8000aec <__aeabi_dcmplt>
 800540a:	b148      	cbz	r0, 8005420 <_dtoa_r+0x190>
 800540c:	4658      	mov	r0, fp
 800540e:	f7fb f891 	bl	8000534 <__aeabi_i2d>
 8005412:	4632      	mov	r2, r6
 8005414:	463b      	mov	r3, r7
 8005416:	f7fb fb5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800541a:	b908      	cbnz	r0, 8005420 <_dtoa_r+0x190>
 800541c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005420:	f1bb 0f16 	cmp.w	fp, #22
 8005424:	d857      	bhi.n	80054d6 <_dtoa_r+0x246>
 8005426:	4b5b      	ldr	r3, [pc, #364]	; (8005594 <_dtoa_r+0x304>)
 8005428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	ec51 0b18 	vmov	r0, r1, d8
 8005434:	f7fb fb5a 	bl	8000aec <__aeabi_dcmplt>
 8005438:	2800      	cmp	r0, #0
 800543a:	d04e      	beq.n	80054da <_dtoa_r+0x24a>
 800543c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005440:	2300      	movs	r3, #0
 8005442:	930c      	str	r3, [sp, #48]	; 0x30
 8005444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005446:	1b5b      	subs	r3, r3, r5
 8005448:	1e5a      	subs	r2, r3, #1
 800544a:	bf45      	ittet	mi
 800544c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005450:	9305      	strmi	r3, [sp, #20]
 8005452:	2300      	movpl	r3, #0
 8005454:	2300      	movmi	r3, #0
 8005456:	9206      	str	r2, [sp, #24]
 8005458:	bf54      	ite	pl
 800545a:	9305      	strpl	r3, [sp, #20]
 800545c:	9306      	strmi	r3, [sp, #24]
 800545e:	f1bb 0f00 	cmp.w	fp, #0
 8005462:	db3c      	blt.n	80054de <_dtoa_r+0x24e>
 8005464:	9b06      	ldr	r3, [sp, #24]
 8005466:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800546a:	445b      	add	r3, fp
 800546c:	9306      	str	r3, [sp, #24]
 800546e:	2300      	movs	r3, #0
 8005470:	9308      	str	r3, [sp, #32]
 8005472:	9b07      	ldr	r3, [sp, #28]
 8005474:	2b09      	cmp	r3, #9
 8005476:	d868      	bhi.n	800554a <_dtoa_r+0x2ba>
 8005478:	2b05      	cmp	r3, #5
 800547a:	bfc4      	itt	gt
 800547c:	3b04      	subgt	r3, #4
 800547e:	9307      	strgt	r3, [sp, #28]
 8005480:	9b07      	ldr	r3, [sp, #28]
 8005482:	f1a3 0302 	sub.w	r3, r3, #2
 8005486:	bfcc      	ite	gt
 8005488:	2500      	movgt	r5, #0
 800548a:	2501      	movle	r5, #1
 800548c:	2b03      	cmp	r3, #3
 800548e:	f200 8085 	bhi.w	800559c <_dtoa_r+0x30c>
 8005492:	e8df f003 	tbb	[pc, r3]
 8005496:	3b2e      	.short	0x3b2e
 8005498:	5839      	.short	0x5839
 800549a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800549e:	441d      	add	r5, r3
 80054a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	bfc1      	itttt	gt
 80054a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80054b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80054b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80054b8:	bfd6      	itet	le
 80054ba:	f1c3 0320 	rsble	r3, r3, #32
 80054be:	ea48 0003 	orrgt.w	r0, r8, r3
 80054c2:	fa06 f003 	lslle.w	r0, r6, r3
 80054c6:	f7fb f825 	bl	8000514 <__aeabi_ui2d>
 80054ca:	2201      	movs	r2, #1
 80054cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80054d0:	3d01      	subs	r5, #1
 80054d2:	920e      	str	r2, [sp, #56]	; 0x38
 80054d4:	e76f      	b.n	80053b6 <_dtoa_r+0x126>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e7b3      	b.n	8005442 <_dtoa_r+0x1b2>
 80054da:	900c      	str	r0, [sp, #48]	; 0x30
 80054dc:	e7b2      	b.n	8005444 <_dtoa_r+0x1b4>
 80054de:	9b05      	ldr	r3, [sp, #20]
 80054e0:	eba3 030b 	sub.w	r3, r3, fp
 80054e4:	9305      	str	r3, [sp, #20]
 80054e6:	f1cb 0300 	rsb	r3, fp, #0
 80054ea:	9308      	str	r3, [sp, #32]
 80054ec:	2300      	movs	r3, #0
 80054ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80054f0:	e7bf      	b.n	8005472 <_dtoa_r+0x1e2>
 80054f2:	2300      	movs	r3, #0
 80054f4:	9309      	str	r3, [sp, #36]	; 0x24
 80054f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dc52      	bgt.n	80055a2 <_dtoa_r+0x312>
 80054fc:	2301      	movs	r3, #1
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	9304      	str	r3, [sp, #16]
 8005502:	461a      	mov	r2, r3
 8005504:	920a      	str	r2, [sp, #40]	; 0x28
 8005506:	e00b      	b.n	8005520 <_dtoa_r+0x290>
 8005508:	2301      	movs	r3, #1
 800550a:	e7f3      	b.n	80054f4 <_dtoa_r+0x264>
 800550c:	2300      	movs	r3, #0
 800550e:	9309      	str	r3, [sp, #36]	; 0x24
 8005510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005512:	445b      	add	r3, fp
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	3301      	adds	r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	9304      	str	r3, [sp, #16]
 800551c:	bfb8      	it	lt
 800551e:	2301      	movlt	r3, #1
 8005520:	69e0      	ldr	r0, [r4, #28]
 8005522:	2100      	movs	r1, #0
 8005524:	2204      	movs	r2, #4
 8005526:	f102 0614 	add.w	r6, r2, #20
 800552a:	429e      	cmp	r6, r3
 800552c:	d93d      	bls.n	80055aa <_dtoa_r+0x31a>
 800552e:	6041      	str	r1, [r0, #4]
 8005530:	4620      	mov	r0, r4
 8005532:	f000 fd9f 	bl	8006074 <_Balloc>
 8005536:	9000      	str	r0, [sp, #0]
 8005538:	2800      	cmp	r0, #0
 800553a:	d139      	bne.n	80055b0 <_dtoa_r+0x320>
 800553c:	4b16      	ldr	r3, [pc, #88]	; (8005598 <_dtoa_r+0x308>)
 800553e:	4602      	mov	r2, r0
 8005540:	f240 11af 	movw	r1, #431	; 0x1af
 8005544:	e6bd      	b.n	80052c2 <_dtoa_r+0x32>
 8005546:	2301      	movs	r3, #1
 8005548:	e7e1      	b.n	800550e <_dtoa_r+0x27e>
 800554a:	2501      	movs	r5, #1
 800554c:	2300      	movs	r3, #0
 800554e:	9307      	str	r3, [sp, #28]
 8005550:	9509      	str	r5, [sp, #36]	; 0x24
 8005552:	f04f 33ff 	mov.w	r3, #4294967295
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	9304      	str	r3, [sp, #16]
 800555a:	2200      	movs	r2, #0
 800555c:	2312      	movs	r3, #18
 800555e:	e7d1      	b.n	8005504 <_dtoa_r+0x274>
 8005560:	636f4361 	.word	0x636f4361
 8005564:	3fd287a7 	.word	0x3fd287a7
 8005568:	8b60c8b3 	.word	0x8b60c8b3
 800556c:	3fc68a28 	.word	0x3fc68a28
 8005570:	509f79fb 	.word	0x509f79fb
 8005574:	3fd34413 	.word	0x3fd34413
 8005578:	08007319 	.word	0x08007319
 800557c:	08007330 	.word	0x08007330
 8005580:	7ff00000 	.word	0x7ff00000
 8005584:	08007315 	.word	0x08007315
 8005588:	0800730c 	.word	0x0800730c
 800558c:	080072e9 	.word	0x080072e9
 8005590:	3ff80000 	.word	0x3ff80000
 8005594:	08007420 	.word	0x08007420
 8005598:	08007388 	.word	0x08007388
 800559c:	2301      	movs	r3, #1
 800559e:	9309      	str	r3, [sp, #36]	; 0x24
 80055a0:	e7d7      	b.n	8005552 <_dtoa_r+0x2c2>
 80055a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	9304      	str	r3, [sp, #16]
 80055a8:	e7ba      	b.n	8005520 <_dtoa_r+0x290>
 80055aa:	3101      	adds	r1, #1
 80055ac:	0052      	lsls	r2, r2, #1
 80055ae:	e7ba      	b.n	8005526 <_dtoa_r+0x296>
 80055b0:	69e3      	ldr	r3, [r4, #28]
 80055b2:	9a00      	ldr	r2, [sp, #0]
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	9b04      	ldr	r3, [sp, #16]
 80055b8:	2b0e      	cmp	r3, #14
 80055ba:	f200 80a8 	bhi.w	800570e <_dtoa_r+0x47e>
 80055be:	2d00      	cmp	r5, #0
 80055c0:	f000 80a5 	beq.w	800570e <_dtoa_r+0x47e>
 80055c4:	f1bb 0f00 	cmp.w	fp, #0
 80055c8:	dd38      	ble.n	800563c <_dtoa_r+0x3ac>
 80055ca:	4bc0      	ldr	r3, [pc, #768]	; (80058cc <_dtoa_r+0x63c>)
 80055cc:	f00b 020f 	and.w	r2, fp, #15
 80055d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80055d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80055dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80055e0:	d019      	beq.n	8005616 <_dtoa_r+0x386>
 80055e2:	4bbb      	ldr	r3, [pc, #748]	; (80058d0 <_dtoa_r+0x640>)
 80055e4:	ec51 0b18 	vmov	r0, r1, d8
 80055e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055ec:	f7fb f936 	bl	800085c <__aeabi_ddiv>
 80055f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055f4:	f008 080f 	and.w	r8, r8, #15
 80055f8:	2503      	movs	r5, #3
 80055fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80058d0 <_dtoa_r+0x640>
 80055fe:	f1b8 0f00 	cmp.w	r8, #0
 8005602:	d10a      	bne.n	800561a <_dtoa_r+0x38a>
 8005604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005608:	4632      	mov	r2, r6
 800560a:	463b      	mov	r3, r7
 800560c:	f7fb f926 	bl	800085c <__aeabi_ddiv>
 8005610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005614:	e02b      	b.n	800566e <_dtoa_r+0x3de>
 8005616:	2502      	movs	r5, #2
 8005618:	e7ef      	b.n	80055fa <_dtoa_r+0x36a>
 800561a:	f018 0f01 	tst.w	r8, #1
 800561e:	d008      	beq.n	8005632 <_dtoa_r+0x3a2>
 8005620:	4630      	mov	r0, r6
 8005622:	4639      	mov	r1, r7
 8005624:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005628:	f7fa ffee 	bl	8000608 <__aeabi_dmul>
 800562c:	3501      	adds	r5, #1
 800562e:	4606      	mov	r6, r0
 8005630:	460f      	mov	r7, r1
 8005632:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005636:	f109 0908 	add.w	r9, r9, #8
 800563a:	e7e0      	b.n	80055fe <_dtoa_r+0x36e>
 800563c:	f000 809f 	beq.w	800577e <_dtoa_r+0x4ee>
 8005640:	f1cb 0600 	rsb	r6, fp, #0
 8005644:	4ba1      	ldr	r3, [pc, #644]	; (80058cc <_dtoa_r+0x63c>)
 8005646:	4fa2      	ldr	r7, [pc, #648]	; (80058d0 <_dtoa_r+0x640>)
 8005648:	f006 020f 	and.w	r2, r6, #15
 800564c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	ec51 0b18 	vmov	r0, r1, d8
 8005658:	f7fa ffd6 	bl	8000608 <__aeabi_dmul>
 800565c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005660:	1136      	asrs	r6, r6, #4
 8005662:	2300      	movs	r3, #0
 8005664:	2502      	movs	r5, #2
 8005666:	2e00      	cmp	r6, #0
 8005668:	d17e      	bne.n	8005768 <_dtoa_r+0x4d8>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d0      	bne.n	8005610 <_dtoa_r+0x380>
 800566e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005670:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8084 	beq.w	8005782 <_dtoa_r+0x4f2>
 800567a:	4b96      	ldr	r3, [pc, #600]	; (80058d4 <_dtoa_r+0x644>)
 800567c:	2200      	movs	r2, #0
 800567e:	4640      	mov	r0, r8
 8005680:	4649      	mov	r1, r9
 8005682:	f7fb fa33 	bl	8000aec <__aeabi_dcmplt>
 8005686:	2800      	cmp	r0, #0
 8005688:	d07b      	beq.n	8005782 <_dtoa_r+0x4f2>
 800568a:	9b04      	ldr	r3, [sp, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d078      	beq.n	8005782 <_dtoa_r+0x4f2>
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	dd39      	ble.n	800570a <_dtoa_r+0x47a>
 8005696:	4b90      	ldr	r3, [pc, #576]	; (80058d8 <_dtoa_r+0x648>)
 8005698:	2200      	movs	r2, #0
 800569a:	4640      	mov	r0, r8
 800569c:	4649      	mov	r1, r9
 800569e:	f7fa ffb3 	bl	8000608 <__aeabi_dmul>
 80056a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056a6:	9e01      	ldr	r6, [sp, #4]
 80056a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80056ac:	3501      	adds	r5, #1
 80056ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056b2:	4628      	mov	r0, r5
 80056b4:	f7fa ff3e 	bl	8000534 <__aeabi_i2d>
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	f7fa ffa4 	bl	8000608 <__aeabi_dmul>
 80056c0:	4b86      	ldr	r3, [pc, #536]	; (80058dc <_dtoa_r+0x64c>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	f7fa fdea 	bl	800029c <__adddf3>
 80056c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80056cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056d0:	9303      	str	r3, [sp, #12]
 80056d2:	2e00      	cmp	r6, #0
 80056d4:	d158      	bne.n	8005788 <_dtoa_r+0x4f8>
 80056d6:	4b82      	ldr	r3, [pc, #520]	; (80058e0 <_dtoa_r+0x650>)
 80056d8:	2200      	movs	r2, #0
 80056da:	4640      	mov	r0, r8
 80056dc:	4649      	mov	r1, r9
 80056de:	f7fa fddb 	bl	8000298 <__aeabi_dsub>
 80056e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056e6:	4680      	mov	r8, r0
 80056e8:	4689      	mov	r9, r1
 80056ea:	f7fb fa1d 	bl	8000b28 <__aeabi_dcmpgt>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f040 8296 	bne.w	8005c20 <_dtoa_r+0x990>
 80056f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80056f8:	4640      	mov	r0, r8
 80056fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056fe:	4649      	mov	r1, r9
 8005700:	f7fb f9f4 	bl	8000aec <__aeabi_dcmplt>
 8005704:	2800      	cmp	r0, #0
 8005706:	f040 8289 	bne.w	8005c1c <_dtoa_r+0x98c>
 800570a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800570e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005710:	2b00      	cmp	r3, #0
 8005712:	f2c0 814e 	blt.w	80059b2 <_dtoa_r+0x722>
 8005716:	f1bb 0f0e 	cmp.w	fp, #14
 800571a:	f300 814a 	bgt.w	80059b2 <_dtoa_r+0x722>
 800571e:	4b6b      	ldr	r3, [pc, #428]	; (80058cc <_dtoa_r+0x63c>)
 8005720:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005724:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	f280 80dc 	bge.w	80058e8 <_dtoa_r+0x658>
 8005730:	9b04      	ldr	r3, [sp, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f300 80d8 	bgt.w	80058e8 <_dtoa_r+0x658>
 8005738:	f040 826f 	bne.w	8005c1a <_dtoa_r+0x98a>
 800573c:	4b68      	ldr	r3, [pc, #416]	; (80058e0 <_dtoa_r+0x650>)
 800573e:	2200      	movs	r2, #0
 8005740:	4640      	mov	r0, r8
 8005742:	4649      	mov	r1, r9
 8005744:	f7fa ff60 	bl	8000608 <__aeabi_dmul>
 8005748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800574c:	f7fb f9e2 	bl	8000b14 <__aeabi_dcmpge>
 8005750:	9e04      	ldr	r6, [sp, #16]
 8005752:	4637      	mov	r7, r6
 8005754:	2800      	cmp	r0, #0
 8005756:	f040 8245 	bne.w	8005be4 <_dtoa_r+0x954>
 800575a:	9d00      	ldr	r5, [sp, #0]
 800575c:	2331      	movs	r3, #49	; 0x31
 800575e:	f805 3b01 	strb.w	r3, [r5], #1
 8005762:	f10b 0b01 	add.w	fp, fp, #1
 8005766:	e241      	b.n	8005bec <_dtoa_r+0x95c>
 8005768:	07f2      	lsls	r2, r6, #31
 800576a:	d505      	bpl.n	8005778 <_dtoa_r+0x4e8>
 800576c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005770:	f7fa ff4a 	bl	8000608 <__aeabi_dmul>
 8005774:	3501      	adds	r5, #1
 8005776:	2301      	movs	r3, #1
 8005778:	1076      	asrs	r6, r6, #1
 800577a:	3708      	adds	r7, #8
 800577c:	e773      	b.n	8005666 <_dtoa_r+0x3d6>
 800577e:	2502      	movs	r5, #2
 8005780:	e775      	b.n	800566e <_dtoa_r+0x3de>
 8005782:	9e04      	ldr	r6, [sp, #16]
 8005784:	465f      	mov	r7, fp
 8005786:	e792      	b.n	80056ae <_dtoa_r+0x41e>
 8005788:	9900      	ldr	r1, [sp, #0]
 800578a:	4b50      	ldr	r3, [pc, #320]	; (80058cc <_dtoa_r+0x63c>)
 800578c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005790:	4431      	add	r1, r6
 8005792:	9102      	str	r1, [sp, #8]
 8005794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005796:	eeb0 9a47 	vmov.f32	s18, s14
 800579a:	eef0 9a67 	vmov.f32	s19, s15
 800579e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80057a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057a6:	2900      	cmp	r1, #0
 80057a8:	d044      	beq.n	8005834 <_dtoa_r+0x5a4>
 80057aa:	494e      	ldr	r1, [pc, #312]	; (80058e4 <_dtoa_r+0x654>)
 80057ac:	2000      	movs	r0, #0
 80057ae:	f7fb f855 	bl	800085c <__aeabi_ddiv>
 80057b2:	ec53 2b19 	vmov	r2, r3, d9
 80057b6:	f7fa fd6f 	bl	8000298 <__aeabi_dsub>
 80057ba:	9d00      	ldr	r5, [sp, #0]
 80057bc:	ec41 0b19 	vmov	d9, r0, r1
 80057c0:	4649      	mov	r1, r9
 80057c2:	4640      	mov	r0, r8
 80057c4:	f7fb f9d0 	bl	8000b68 <__aeabi_d2iz>
 80057c8:	4606      	mov	r6, r0
 80057ca:	f7fa feb3 	bl	8000534 <__aeabi_i2d>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4640      	mov	r0, r8
 80057d4:	4649      	mov	r1, r9
 80057d6:	f7fa fd5f 	bl	8000298 <__aeabi_dsub>
 80057da:	3630      	adds	r6, #48	; 0x30
 80057dc:	f805 6b01 	strb.w	r6, [r5], #1
 80057e0:	ec53 2b19 	vmov	r2, r3, d9
 80057e4:	4680      	mov	r8, r0
 80057e6:	4689      	mov	r9, r1
 80057e8:	f7fb f980 	bl	8000aec <__aeabi_dcmplt>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d164      	bne.n	80058ba <_dtoa_r+0x62a>
 80057f0:	4642      	mov	r2, r8
 80057f2:	464b      	mov	r3, r9
 80057f4:	4937      	ldr	r1, [pc, #220]	; (80058d4 <_dtoa_r+0x644>)
 80057f6:	2000      	movs	r0, #0
 80057f8:	f7fa fd4e 	bl	8000298 <__aeabi_dsub>
 80057fc:	ec53 2b19 	vmov	r2, r3, d9
 8005800:	f7fb f974 	bl	8000aec <__aeabi_dcmplt>
 8005804:	2800      	cmp	r0, #0
 8005806:	f040 80b6 	bne.w	8005976 <_dtoa_r+0x6e6>
 800580a:	9b02      	ldr	r3, [sp, #8]
 800580c:	429d      	cmp	r5, r3
 800580e:	f43f af7c 	beq.w	800570a <_dtoa_r+0x47a>
 8005812:	4b31      	ldr	r3, [pc, #196]	; (80058d8 <_dtoa_r+0x648>)
 8005814:	ec51 0b19 	vmov	r0, r1, d9
 8005818:	2200      	movs	r2, #0
 800581a:	f7fa fef5 	bl	8000608 <__aeabi_dmul>
 800581e:	4b2e      	ldr	r3, [pc, #184]	; (80058d8 <_dtoa_r+0x648>)
 8005820:	ec41 0b19 	vmov	d9, r0, r1
 8005824:	2200      	movs	r2, #0
 8005826:	4640      	mov	r0, r8
 8005828:	4649      	mov	r1, r9
 800582a:	f7fa feed 	bl	8000608 <__aeabi_dmul>
 800582e:	4680      	mov	r8, r0
 8005830:	4689      	mov	r9, r1
 8005832:	e7c5      	b.n	80057c0 <_dtoa_r+0x530>
 8005834:	ec51 0b17 	vmov	r0, r1, d7
 8005838:	f7fa fee6 	bl	8000608 <__aeabi_dmul>
 800583c:	9b02      	ldr	r3, [sp, #8]
 800583e:	9d00      	ldr	r5, [sp, #0]
 8005840:	930f      	str	r3, [sp, #60]	; 0x3c
 8005842:	ec41 0b19 	vmov	d9, r0, r1
 8005846:	4649      	mov	r1, r9
 8005848:	4640      	mov	r0, r8
 800584a:	f7fb f98d 	bl	8000b68 <__aeabi_d2iz>
 800584e:	4606      	mov	r6, r0
 8005850:	f7fa fe70 	bl	8000534 <__aeabi_i2d>
 8005854:	3630      	adds	r6, #48	; 0x30
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4640      	mov	r0, r8
 800585c:	4649      	mov	r1, r9
 800585e:	f7fa fd1b 	bl	8000298 <__aeabi_dsub>
 8005862:	f805 6b01 	strb.w	r6, [r5], #1
 8005866:	9b02      	ldr	r3, [sp, #8]
 8005868:	429d      	cmp	r5, r3
 800586a:	4680      	mov	r8, r0
 800586c:	4689      	mov	r9, r1
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	d124      	bne.n	80058be <_dtoa_r+0x62e>
 8005874:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <_dtoa_r+0x654>)
 8005876:	ec51 0b19 	vmov	r0, r1, d9
 800587a:	f7fa fd0f 	bl	800029c <__adddf3>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4640      	mov	r0, r8
 8005884:	4649      	mov	r1, r9
 8005886:	f7fb f94f 	bl	8000b28 <__aeabi_dcmpgt>
 800588a:	2800      	cmp	r0, #0
 800588c:	d173      	bne.n	8005976 <_dtoa_r+0x6e6>
 800588e:	ec53 2b19 	vmov	r2, r3, d9
 8005892:	4914      	ldr	r1, [pc, #80]	; (80058e4 <_dtoa_r+0x654>)
 8005894:	2000      	movs	r0, #0
 8005896:	f7fa fcff 	bl	8000298 <__aeabi_dsub>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4640      	mov	r0, r8
 80058a0:	4649      	mov	r1, r9
 80058a2:	f7fb f923 	bl	8000aec <__aeabi_dcmplt>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f43f af2f 	beq.w	800570a <_dtoa_r+0x47a>
 80058ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80058ae:	1e6b      	subs	r3, r5, #1
 80058b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80058b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058b6:	2b30      	cmp	r3, #48	; 0x30
 80058b8:	d0f8      	beq.n	80058ac <_dtoa_r+0x61c>
 80058ba:	46bb      	mov	fp, r7
 80058bc:	e04a      	b.n	8005954 <_dtoa_r+0x6c4>
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <_dtoa_r+0x648>)
 80058c0:	f7fa fea2 	bl	8000608 <__aeabi_dmul>
 80058c4:	4680      	mov	r8, r0
 80058c6:	4689      	mov	r9, r1
 80058c8:	e7bd      	b.n	8005846 <_dtoa_r+0x5b6>
 80058ca:	bf00      	nop
 80058cc:	08007420 	.word	0x08007420
 80058d0:	080073f8 	.word	0x080073f8
 80058d4:	3ff00000 	.word	0x3ff00000
 80058d8:	40240000 	.word	0x40240000
 80058dc:	401c0000 	.word	0x401c0000
 80058e0:	40140000 	.word	0x40140000
 80058e4:	3fe00000 	.word	0x3fe00000
 80058e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80058ec:	9d00      	ldr	r5, [sp, #0]
 80058ee:	4642      	mov	r2, r8
 80058f0:	464b      	mov	r3, r9
 80058f2:	4630      	mov	r0, r6
 80058f4:	4639      	mov	r1, r7
 80058f6:	f7fa ffb1 	bl	800085c <__aeabi_ddiv>
 80058fa:	f7fb f935 	bl	8000b68 <__aeabi_d2iz>
 80058fe:	9001      	str	r0, [sp, #4]
 8005900:	f7fa fe18 	bl	8000534 <__aeabi_i2d>
 8005904:	4642      	mov	r2, r8
 8005906:	464b      	mov	r3, r9
 8005908:	f7fa fe7e 	bl	8000608 <__aeabi_dmul>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4630      	mov	r0, r6
 8005912:	4639      	mov	r1, r7
 8005914:	f7fa fcc0 	bl	8000298 <__aeabi_dsub>
 8005918:	9e01      	ldr	r6, [sp, #4]
 800591a:	9f04      	ldr	r7, [sp, #16]
 800591c:	3630      	adds	r6, #48	; 0x30
 800591e:	f805 6b01 	strb.w	r6, [r5], #1
 8005922:	9e00      	ldr	r6, [sp, #0]
 8005924:	1bae      	subs	r6, r5, r6
 8005926:	42b7      	cmp	r7, r6
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	d134      	bne.n	8005998 <_dtoa_r+0x708>
 800592e:	f7fa fcb5 	bl	800029c <__adddf3>
 8005932:	4642      	mov	r2, r8
 8005934:	464b      	mov	r3, r9
 8005936:	4606      	mov	r6, r0
 8005938:	460f      	mov	r7, r1
 800593a:	f7fb f8f5 	bl	8000b28 <__aeabi_dcmpgt>
 800593e:	b9c8      	cbnz	r0, 8005974 <_dtoa_r+0x6e4>
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	4630      	mov	r0, r6
 8005946:	4639      	mov	r1, r7
 8005948:	f7fb f8c6 	bl	8000ad8 <__aeabi_dcmpeq>
 800594c:	b110      	cbz	r0, 8005954 <_dtoa_r+0x6c4>
 800594e:	9b01      	ldr	r3, [sp, #4]
 8005950:	07db      	lsls	r3, r3, #31
 8005952:	d40f      	bmi.n	8005974 <_dtoa_r+0x6e4>
 8005954:	4651      	mov	r1, sl
 8005956:	4620      	mov	r0, r4
 8005958:	f000 fbcc 	bl	80060f4 <_Bfree>
 800595c:	2300      	movs	r3, #0
 800595e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005960:	702b      	strb	r3, [r5, #0]
 8005962:	f10b 0301 	add.w	r3, fp, #1
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800596a:	2b00      	cmp	r3, #0
 800596c:	f43f ace2 	beq.w	8005334 <_dtoa_r+0xa4>
 8005970:	601d      	str	r5, [r3, #0]
 8005972:	e4df      	b.n	8005334 <_dtoa_r+0xa4>
 8005974:	465f      	mov	r7, fp
 8005976:	462b      	mov	r3, r5
 8005978:	461d      	mov	r5, r3
 800597a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800597e:	2a39      	cmp	r2, #57	; 0x39
 8005980:	d106      	bne.n	8005990 <_dtoa_r+0x700>
 8005982:	9a00      	ldr	r2, [sp, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d1f7      	bne.n	8005978 <_dtoa_r+0x6e8>
 8005988:	9900      	ldr	r1, [sp, #0]
 800598a:	2230      	movs	r2, #48	; 0x30
 800598c:	3701      	adds	r7, #1
 800598e:	700a      	strb	r2, [r1, #0]
 8005990:	781a      	ldrb	r2, [r3, #0]
 8005992:	3201      	adds	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	e790      	b.n	80058ba <_dtoa_r+0x62a>
 8005998:	4ba3      	ldr	r3, [pc, #652]	; (8005c28 <_dtoa_r+0x998>)
 800599a:	2200      	movs	r2, #0
 800599c:	f7fa fe34 	bl	8000608 <__aeabi_dmul>
 80059a0:	2200      	movs	r2, #0
 80059a2:	2300      	movs	r3, #0
 80059a4:	4606      	mov	r6, r0
 80059a6:	460f      	mov	r7, r1
 80059a8:	f7fb f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d09e      	beq.n	80058ee <_dtoa_r+0x65e>
 80059b0:	e7d0      	b.n	8005954 <_dtoa_r+0x6c4>
 80059b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059b4:	2a00      	cmp	r2, #0
 80059b6:	f000 80ca 	beq.w	8005b4e <_dtoa_r+0x8be>
 80059ba:	9a07      	ldr	r2, [sp, #28]
 80059bc:	2a01      	cmp	r2, #1
 80059be:	f300 80ad 	bgt.w	8005b1c <_dtoa_r+0x88c>
 80059c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	f000 80a5 	beq.w	8005b14 <_dtoa_r+0x884>
 80059ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059ce:	9e08      	ldr	r6, [sp, #32]
 80059d0:	9d05      	ldr	r5, [sp, #20]
 80059d2:	9a05      	ldr	r2, [sp, #20]
 80059d4:	441a      	add	r2, r3
 80059d6:	9205      	str	r2, [sp, #20]
 80059d8:	9a06      	ldr	r2, [sp, #24]
 80059da:	2101      	movs	r1, #1
 80059dc:	441a      	add	r2, r3
 80059de:	4620      	mov	r0, r4
 80059e0:	9206      	str	r2, [sp, #24]
 80059e2:	f000 fc3d 	bl	8006260 <__i2b>
 80059e6:	4607      	mov	r7, r0
 80059e8:	b165      	cbz	r5, 8005a04 <_dtoa_r+0x774>
 80059ea:	9b06      	ldr	r3, [sp, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	dd09      	ble.n	8005a04 <_dtoa_r+0x774>
 80059f0:	42ab      	cmp	r3, r5
 80059f2:	9a05      	ldr	r2, [sp, #20]
 80059f4:	bfa8      	it	ge
 80059f6:	462b      	movge	r3, r5
 80059f8:	1ad2      	subs	r2, r2, r3
 80059fa:	9205      	str	r2, [sp, #20]
 80059fc:	9a06      	ldr	r2, [sp, #24]
 80059fe:	1aed      	subs	r5, r5, r3
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	9306      	str	r3, [sp, #24]
 8005a04:	9b08      	ldr	r3, [sp, #32]
 8005a06:	b1f3      	cbz	r3, 8005a46 <_dtoa_r+0x7b6>
 8005a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80a3 	beq.w	8005b56 <_dtoa_r+0x8c6>
 8005a10:	2e00      	cmp	r6, #0
 8005a12:	dd10      	ble.n	8005a36 <_dtoa_r+0x7a6>
 8005a14:	4639      	mov	r1, r7
 8005a16:	4632      	mov	r2, r6
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fce1 	bl	80063e0 <__pow5mult>
 8005a1e:	4652      	mov	r2, sl
 8005a20:	4601      	mov	r1, r0
 8005a22:	4607      	mov	r7, r0
 8005a24:	4620      	mov	r0, r4
 8005a26:	f000 fc31 	bl	800628c <__multiply>
 8005a2a:	4651      	mov	r1, sl
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f000 fb60 	bl	80060f4 <_Bfree>
 8005a34:	46c2      	mov	sl, r8
 8005a36:	9b08      	ldr	r3, [sp, #32]
 8005a38:	1b9a      	subs	r2, r3, r6
 8005a3a:	d004      	beq.n	8005a46 <_dtoa_r+0x7b6>
 8005a3c:	4651      	mov	r1, sl
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 fcce 	bl	80063e0 <__pow5mult>
 8005a44:	4682      	mov	sl, r0
 8005a46:	2101      	movs	r1, #1
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f000 fc09 	bl	8006260 <__i2b>
 8005a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	4606      	mov	r6, r0
 8005a54:	f340 8081 	ble.w	8005b5a <_dtoa_r+0x8ca>
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4601      	mov	r1, r0
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 fcbf 	bl	80063e0 <__pow5mult>
 8005a62:	9b07      	ldr	r3, [sp, #28]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	4606      	mov	r6, r0
 8005a68:	dd7a      	ble.n	8005b60 <_dtoa_r+0x8d0>
 8005a6a:	f04f 0800 	mov.w	r8, #0
 8005a6e:	6933      	ldr	r3, [r6, #16]
 8005a70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a74:	6918      	ldr	r0, [r3, #16]
 8005a76:	f000 fba5 	bl	80061c4 <__hi0bits>
 8005a7a:	f1c0 0020 	rsb	r0, r0, #32
 8005a7e:	9b06      	ldr	r3, [sp, #24]
 8005a80:	4418      	add	r0, r3
 8005a82:	f010 001f 	ands.w	r0, r0, #31
 8005a86:	f000 8094 	beq.w	8005bb2 <_dtoa_r+0x922>
 8005a8a:	f1c0 0320 	rsb	r3, r0, #32
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	f340 8085 	ble.w	8005b9e <_dtoa_r+0x90e>
 8005a94:	9b05      	ldr	r3, [sp, #20]
 8005a96:	f1c0 001c 	rsb	r0, r0, #28
 8005a9a:	4403      	add	r3, r0
 8005a9c:	9305      	str	r3, [sp, #20]
 8005a9e:	9b06      	ldr	r3, [sp, #24]
 8005aa0:	4403      	add	r3, r0
 8005aa2:	4405      	add	r5, r0
 8005aa4:	9306      	str	r3, [sp, #24]
 8005aa6:	9b05      	ldr	r3, [sp, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dd05      	ble.n	8005ab8 <_dtoa_r+0x828>
 8005aac:	4651      	mov	r1, sl
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 fcef 	bl	8006494 <__lshift>
 8005ab6:	4682      	mov	sl, r0
 8005ab8:	9b06      	ldr	r3, [sp, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	dd05      	ble.n	8005aca <_dtoa_r+0x83a>
 8005abe:	4631      	mov	r1, r6
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fce6 	bl	8006494 <__lshift>
 8005ac8:	4606      	mov	r6, r0
 8005aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d072      	beq.n	8005bb6 <_dtoa_r+0x926>
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4650      	mov	r0, sl
 8005ad4:	f000 fd4a 	bl	800656c <__mcmp>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	da6c      	bge.n	8005bb6 <_dtoa_r+0x926>
 8005adc:	2300      	movs	r3, #0
 8005ade:	4651      	mov	r1, sl
 8005ae0:	220a      	movs	r2, #10
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 fb28 	bl	8006138 <__multadd>
 8005ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005aee:	4682      	mov	sl, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 81b0 	beq.w	8005e56 <_dtoa_r+0xbc6>
 8005af6:	2300      	movs	r3, #0
 8005af8:	4639      	mov	r1, r7
 8005afa:	220a      	movs	r2, #10
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fb1b 	bl	8006138 <__multadd>
 8005b02:	9b01      	ldr	r3, [sp, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	4607      	mov	r7, r0
 8005b08:	f300 8096 	bgt.w	8005c38 <_dtoa_r+0x9a8>
 8005b0c:	9b07      	ldr	r3, [sp, #28]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	dc59      	bgt.n	8005bc6 <_dtoa_r+0x936>
 8005b12:	e091      	b.n	8005c38 <_dtoa_r+0x9a8>
 8005b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b1a:	e758      	b.n	80059ce <_dtoa_r+0x73e>
 8005b1c:	9b04      	ldr	r3, [sp, #16]
 8005b1e:	1e5e      	subs	r6, r3, #1
 8005b20:	9b08      	ldr	r3, [sp, #32]
 8005b22:	42b3      	cmp	r3, r6
 8005b24:	bfbf      	itttt	lt
 8005b26:	9b08      	ldrlt	r3, [sp, #32]
 8005b28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005b2a:	9608      	strlt	r6, [sp, #32]
 8005b2c:	1af3      	sublt	r3, r6, r3
 8005b2e:	bfb4      	ite	lt
 8005b30:	18d2      	addlt	r2, r2, r3
 8005b32:	1b9e      	subge	r6, r3, r6
 8005b34:	9b04      	ldr	r3, [sp, #16]
 8005b36:	bfbc      	itt	lt
 8005b38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005b3a:	2600      	movlt	r6, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bfb7      	itett	lt
 8005b40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005b44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005b48:	1a9d      	sublt	r5, r3, r2
 8005b4a:	2300      	movlt	r3, #0
 8005b4c:	e741      	b.n	80059d2 <_dtoa_r+0x742>
 8005b4e:	9e08      	ldr	r6, [sp, #32]
 8005b50:	9d05      	ldr	r5, [sp, #20]
 8005b52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b54:	e748      	b.n	80059e8 <_dtoa_r+0x758>
 8005b56:	9a08      	ldr	r2, [sp, #32]
 8005b58:	e770      	b.n	8005a3c <_dtoa_r+0x7ac>
 8005b5a:	9b07      	ldr	r3, [sp, #28]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	dc19      	bgt.n	8005b94 <_dtoa_r+0x904>
 8005b60:	9b02      	ldr	r3, [sp, #8]
 8005b62:	b9bb      	cbnz	r3, 8005b94 <_dtoa_r+0x904>
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b6a:	b99b      	cbnz	r3, 8005b94 <_dtoa_r+0x904>
 8005b6c:	9b03      	ldr	r3, [sp, #12]
 8005b6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	0d1b      	lsrs	r3, r3, #20
 8005b74:	051b      	lsls	r3, r3, #20
 8005b76:	b183      	cbz	r3, 8005b9a <_dtoa_r+0x90a>
 8005b78:	9b05      	ldr	r3, [sp, #20]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	9305      	str	r3, [sp, #20]
 8005b7e:	9b06      	ldr	r3, [sp, #24]
 8005b80:	3301      	adds	r3, #1
 8005b82:	9306      	str	r3, [sp, #24]
 8005b84:	f04f 0801 	mov.w	r8, #1
 8005b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f47f af6f 	bne.w	8005a6e <_dtoa_r+0x7de>
 8005b90:	2001      	movs	r0, #1
 8005b92:	e774      	b.n	8005a7e <_dtoa_r+0x7ee>
 8005b94:	f04f 0800 	mov.w	r8, #0
 8005b98:	e7f6      	b.n	8005b88 <_dtoa_r+0x8f8>
 8005b9a:	4698      	mov	r8, r3
 8005b9c:	e7f4      	b.n	8005b88 <_dtoa_r+0x8f8>
 8005b9e:	d082      	beq.n	8005aa6 <_dtoa_r+0x816>
 8005ba0:	9a05      	ldr	r2, [sp, #20]
 8005ba2:	331c      	adds	r3, #28
 8005ba4:	441a      	add	r2, r3
 8005ba6:	9205      	str	r2, [sp, #20]
 8005ba8:	9a06      	ldr	r2, [sp, #24]
 8005baa:	441a      	add	r2, r3
 8005bac:	441d      	add	r5, r3
 8005bae:	9206      	str	r2, [sp, #24]
 8005bb0:	e779      	b.n	8005aa6 <_dtoa_r+0x816>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	e7f4      	b.n	8005ba0 <_dtoa_r+0x910>
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dc37      	bgt.n	8005c2c <_dtoa_r+0x99c>
 8005bbc:	9b07      	ldr	r3, [sp, #28]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	dd34      	ble.n	8005c2c <_dtoa_r+0x99c>
 8005bc2:	9b04      	ldr	r3, [sp, #16]
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	b963      	cbnz	r3, 8005be4 <_dtoa_r+0x954>
 8005bca:	4631      	mov	r1, r6
 8005bcc:	2205      	movs	r2, #5
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f000 fab2 	bl	8006138 <__multadd>
 8005bd4:	4601      	mov	r1, r0
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	4650      	mov	r0, sl
 8005bda:	f000 fcc7 	bl	800656c <__mcmp>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	f73f adbb 	bgt.w	800575a <_dtoa_r+0x4ca>
 8005be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be6:	9d00      	ldr	r5, [sp, #0]
 8005be8:	ea6f 0b03 	mvn.w	fp, r3
 8005bec:	f04f 0800 	mov.w	r8, #0
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 fa7e 	bl	80060f4 <_Bfree>
 8005bf8:	2f00      	cmp	r7, #0
 8005bfa:	f43f aeab 	beq.w	8005954 <_dtoa_r+0x6c4>
 8005bfe:	f1b8 0f00 	cmp.w	r8, #0
 8005c02:	d005      	beq.n	8005c10 <_dtoa_r+0x980>
 8005c04:	45b8      	cmp	r8, r7
 8005c06:	d003      	beq.n	8005c10 <_dtoa_r+0x980>
 8005c08:	4641      	mov	r1, r8
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f000 fa72 	bl	80060f4 <_Bfree>
 8005c10:	4639      	mov	r1, r7
 8005c12:	4620      	mov	r0, r4
 8005c14:	f000 fa6e 	bl	80060f4 <_Bfree>
 8005c18:	e69c      	b.n	8005954 <_dtoa_r+0x6c4>
 8005c1a:	2600      	movs	r6, #0
 8005c1c:	4637      	mov	r7, r6
 8005c1e:	e7e1      	b.n	8005be4 <_dtoa_r+0x954>
 8005c20:	46bb      	mov	fp, r7
 8005c22:	4637      	mov	r7, r6
 8005c24:	e599      	b.n	800575a <_dtoa_r+0x4ca>
 8005c26:	bf00      	nop
 8005c28:	40240000 	.word	0x40240000
 8005c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 80c8 	beq.w	8005dc4 <_dtoa_r+0xb34>
 8005c34:	9b04      	ldr	r3, [sp, #16]
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	dd05      	ble.n	8005c48 <_dtoa_r+0x9b8>
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	462a      	mov	r2, r5
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 fc27 	bl	8006494 <__lshift>
 8005c46:	4607      	mov	r7, r0
 8005c48:	f1b8 0f00 	cmp.w	r8, #0
 8005c4c:	d05b      	beq.n	8005d06 <_dtoa_r+0xa76>
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fa0f 	bl	8006074 <_Balloc>
 8005c56:	4605      	mov	r5, r0
 8005c58:	b928      	cbnz	r0, 8005c66 <_dtoa_r+0x9d6>
 8005c5a:	4b83      	ldr	r3, [pc, #524]	; (8005e68 <_dtoa_r+0xbd8>)
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005c62:	f7ff bb2e 	b.w	80052c2 <_dtoa_r+0x32>
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	3202      	adds	r2, #2
 8005c6a:	0092      	lsls	r2, r2, #2
 8005c6c:	f107 010c 	add.w	r1, r7, #12
 8005c70:	300c      	adds	r0, #12
 8005c72:	f000 ffab 	bl	8006bcc <memcpy>
 8005c76:	2201      	movs	r2, #1
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 fc0a 	bl	8006494 <__lshift>
 8005c80:	9b00      	ldr	r3, [sp, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	9304      	str	r3, [sp, #16]
 8005c86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	9308      	str	r3, [sp, #32]
 8005c8e:	9b02      	ldr	r3, [sp, #8]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	46b8      	mov	r8, r7
 8005c96:	9306      	str	r3, [sp, #24]
 8005c98:	4607      	mov	r7, r0
 8005c9a:	9b04      	ldr	r3, [sp, #16]
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	f7ff fa69 	bl	800517a <quorem>
 8005ca8:	4641      	mov	r1, r8
 8005caa:	9002      	str	r0, [sp, #8]
 8005cac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005cb0:	4650      	mov	r0, sl
 8005cb2:	f000 fc5b 	bl	800656c <__mcmp>
 8005cb6:	463a      	mov	r2, r7
 8005cb8:	9005      	str	r0, [sp, #20]
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 fc71 	bl	80065a4 <__mdiff>
 8005cc2:	68c2      	ldr	r2, [r0, #12]
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	bb02      	cbnz	r2, 8005d0a <_dtoa_r+0xa7a>
 8005cc8:	4601      	mov	r1, r0
 8005cca:	4650      	mov	r0, sl
 8005ccc:	f000 fc4e 	bl	800656c <__mcmp>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8005cd8:	f000 fa0c 	bl	80060f4 <_Bfree>
 8005cdc:	9b07      	ldr	r3, [sp, #28]
 8005cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ce0:	9d04      	ldr	r5, [sp, #16]
 8005ce2:	ea43 0102 	orr.w	r1, r3, r2
 8005ce6:	9b06      	ldr	r3, [sp, #24]
 8005ce8:	4319      	orrs	r1, r3
 8005cea:	d110      	bne.n	8005d0e <_dtoa_r+0xa7e>
 8005cec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005cf0:	d029      	beq.n	8005d46 <_dtoa_r+0xab6>
 8005cf2:	9b05      	ldr	r3, [sp, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dd02      	ble.n	8005cfe <_dtoa_r+0xa6e>
 8005cf8:	9b02      	ldr	r3, [sp, #8]
 8005cfa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005cfe:	9b01      	ldr	r3, [sp, #4]
 8005d00:	f883 9000 	strb.w	r9, [r3]
 8005d04:	e774      	b.n	8005bf0 <_dtoa_r+0x960>
 8005d06:	4638      	mov	r0, r7
 8005d08:	e7ba      	b.n	8005c80 <_dtoa_r+0x9f0>
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	e7e1      	b.n	8005cd2 <_dtoa_r+0xa42>
 8005d0e:	9b05      	ldr	r3, [sp, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	db04      	blt.n	8005d1e <_dtoa_r+0xa8e>
 8005d14:	9907      	ldr	r1, [sp, #28]
 8005d16:	430b      	orrs	r3, r1
 8005d18:	9906      	ldr	r1, [sp, #24]
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	d120      	bne.n	8005d60 <_dtoa_r+0xad0>
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	dded      	ble.n	8005cfe <_dtoa_r+0xa6e>
 8005d22:	4651      	mov	r1, sl
 8005d24:	2201      	movs	r2, #1
 8005d26:	4620      	mov	r0, r4
 8005d28:	f000 fbb4 	bl	8006494 <__lshift>
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4682      	mov	sl, r0
 8005d30:	f000 fc1c 	bl	800656c <__mcmp>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	dc03      	bgt.n	8005d40 <_dtoa_r+0xab0>
 8005d38:	d1e1      	bne.n	8005cfe <_dtoa_r+0xa6e>
 8005d3a:	f019 0f01 	tst.w	r9, #1
 8005d3e:	d0de      	beq.n	8005cfe <_dtoa_r+0xa6e>
 8005d40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d44:	d1d8      	bne.n	8005cf8 <_dtoa_r+0xa68>
 8005d46:	9a01      	ldr	r2, [sp, #4]
 8005d48:	2339      	movs	r3, #57	; 0x39
 8005d4a:	7013      	strb	r3, [r2, #0]
 8005d4c:	462b      	mov	r3, r5
 8005d4e:	461d      	mov	r5, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d56:	2a39      	cmp	r2, #57	; 0x39
 8005d58:	d06c      	beq.n	8005e34 <_dtoa_r+0xba4>
 8005d5a:	3201      	adds	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e747      	b.n	8005bf0 <_dtoa_r+0x960>
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	dd07      	ble.n	8005d74 <_dtoa_r+0xae4>
 8005d64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d68:	d0ed      	beq.n	8005d46 <_dtoa_r+0xab6>
 8005d6a:	9a01      	ldr	r2, [sp, #4]
 8005d6c:	f109 0301 	add.w	r3, r9, #1
 8005d70:	7013      	strb	r3, [r2, #0]
 8005d72:	e73d      	b.n	8005bf0 <_dtoa_r+0x960>
 8005d74:	9b04      	ldr	r3, [sp, #16]
 8005d76:	9a08      	ldr	r2, [sp, #32]
 8005d78:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d043      	beq.n	8005e08 <_dtoa_r+0xb78>
 8005d80:	4651      	mov	r1, sl
 8005d82:	2300      	movs	r3, #0
 8005d84:	220a      	movs	r2, #10
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 f9d6 	bl	8006138 <__multadd>
 8005d8c:	45b8      	cmp	r8, r7
 8005d8e:	4682      	mov	sl, r0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	f04f 020a 	mov.w	r2, #10
 8005d98:	4641      	mov	r1, r8
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	d107      	bne.n	8005dae <_dtoa_r+0xb1e>
 8005d9e:	f000 f9cb 	bl	8006138 <__multadd>
 8005da2:	4680      	mov	r8, r0
 8005da4:	4607      	mov	r7, r0
 8005da6:	9b04      	ldr	r3, [sp, #16]
 8005da8:	3301      	adds	r3, #1
 8005daa:	9304      	str	r3, [sp, #16]
 8005dac:	e775      	b.n	8005c9a <_dtoa_r+0xa0a>
 8005dae:	f000 f9c3 	bl	8006138 <__multadd>
 8005db2:	4639      	mov	r1, r7
 8005db4:	4680      	mov	r8, r0
 8005db6:	2300      	movs	r3, #0
 8005db8:	220a      	movs	r2, #10
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 f9bc 	bl	8006138 <__multadd>
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	e7f0      	b.n	8005da6 <_dtoa_r+0xb16>
 8005dc4:	9b04      	ldr	r3, [sp, #16]
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	9d00      	ldr	r5, [sp, #0]
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4650      	mov	r0, sl
 8005dce:	f7ff f9d4 	bl	800517a <quorem>
 8005dd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005dd6:	9b00      	ldr	r3, [sp, #0]
 8005dd8:	f805 9b01 	strb.w	r9, [r5], #1
 8005ddc:	1aea      	subs	r2, r5, r3
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	4293      	cmp	r3, r2
 8005de2:	dd07      	ble.n	8005df4 <_dtoa_r+0xb64>
 8005de4:	4651      	mov	r1, sl
 8005de6:	2300      	movs	r3, #0
 8005de8:	220a      	movs	r2, #10
 8005dea:	4620      	mov	r0, r4
 8005dec:	f000 f9a4 	bl	8006138 <__multadd>
 8005df0:	4682      	mov	sl, r0
 8005df2:	e7ea      	b.n	8005dca <_dtoa_r+0xb3a>
 8005df4:	9b01      	ldr	r3, [sp, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfc8      	it	gt
 8005dfa:	461d      	movgt	r5, r3
 8005dfc:	9b00      	ldr	r3, [sp, #0]
 8005dfe:	bfd8      	it	le
 8005e00:	2501      	movle	r5, #1
 8005e02:	441d      	add	r5, r3
 8005e04:	f04f 0800 	mov.w	r8, #0
 8005e08:	4651      	mov	r1, sl
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f000 fb41 	bl	8006494 <__lshift>
 8005e12:	4631      	mov	r1, r6
 8005e14:	4682      	mov	sl, r0
 8005e16:	f000 fba9 	bl	800656c <__mcmp>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	dc96      	bgt.n	8005d4c <_dtoa_r+0xabc>
 8005e1e:	d102      	bne.n	8005e26 <_dtoa_r+0xb96>
 8005e20:	f019 0f01 	tst.w	r9, #1
 8005e24:	d192      	bne.n	8005d4c <_dtoa_r+0xabc>
 8005e26:	462b      	mov	r3, r5
 8005e28:	461d      	mov	r5, r3
 8005e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e2e:	2a30      	cmp	r2, #48	; 0x30
 8005e30:	d0fa      	beq.n	8005e28 <_dtoa_r+0xb98>
 8005e32:	e6dd      	b.n	8005bf0 <_dtoa_r+0x960>
 8005e34:	9a00      	ldr	r2, [sp, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d189      	bne.n	8005d4e <_dtoa_r+0xabe>
 8005e3a:	f10b 0b01 	add.w	fp, fp, #1
 8005e3e:	2331      	movs	r3, #49	; 0x31
 8005e40:	e796      	b.n	8005d70 <_dtoa_r+0xae0>
 8005e42:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <_dtoa_r+0xbdc>)
 8005e44:	f7ff ba99 	b.w	800537a <_dtoa_r+0xea>
 8005e48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f47f aa6d 	bne.w	800532a <_dtoa_r+0x9a>
 8005e50:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <_dtoa_r+0xbe0>)
 8005e52:	f7ff ba92 	b.w	800537a <_dtoa_r+0xea>
 8005e56:	9b01      	ldr	r3, [sp, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dcb5      	bgt.n	8005dc8 <_dtoa_r+0xb38>
 8005e5c:	9b07      	ldr	r3, [sp, #28]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	f73f aeb1 	bgt.w	8005bc6 <_dtoa_r+0x936>
 8005e64:	e7b0      	b.n	8005dc8 <_dtoa_r+0xb38>
 8005e66:	bf00      	nop
 8005e68:	08007388 	.word	0x08007388
 8005e6c:	080072e8 	.word	0x080072e8
 8005e70:	0800730c 	.word	0x0800730c

08005e74 <_free_r>:
 8005e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e76:	2900      	cmp	r1, #0
 8005e78:	d044      	beq.n	8005f04 <_free_r+0x90>
 8005e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e7e:	9001      	str	r0, [sp, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f1a1 0404 	sub.w	r4, r1, #4
 8005e86:	bfb8      	it	lt
 8005e88:	18e4      	addlt	r4, r4, r3
 8005e8a:	f000 f8e7 	bl	800605c <__malloc_lock>
 8005e8e:	4a1e      	ldr	r2, [pc, #120]	; (8005f08 <_free_r+0x94>)
 8005e90:	9801      	ldr	r0, [sp, #4]
 8005e92:	6813      	ldr	r3, [r2, #0]
 8005e94:	b933      	cbnz	r3, 8005ea4 <_free_r+0x30>
 8005e96:	6063      	str	r3, [r4, #4]
 8005e98:	6014      	str	r4, [r2, #0]
 8005e9a:	b003      	add	sp, #12
 8005e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ea0:	f000 b8e2 	b.w	8006068 <__malloc_unlock>
 8005ea4:	42a3      	cmp	r3, r4
 8005ea6:	d908      	bls.n	8005eba <_free_r+0x46>
 8005ea8:	6825      	ldr	r5, [r4, #0]
 8005eaa:	1961      	adds	r1, r4, r5
 8005eac:	428b      	cmp	r3, r1
 8005eae:	bf01      	itttt	eq
 8005eb0:	6819      	ldreq	r1, [r3, #0]
 8005eb2:	685b      	ldreq	r3, [r3, #4]
 8005eb4:	1949      	addeq	r1, r1, r5
 8005eb6:	6021      	streq	r1, [r4, #0]
 8005eb8:	e7ed      	b.n	8005e96 <_free_r+0x22>
 8005eba:	461a      	mov	r2, r3
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	b10b      	cbz	r3, 8005ec4 <_free_r+0x50>
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	d9fa      	bls.n	8005eba <_free_r+0x46>
 8005ec4:	6811      	ldr	r1, [r2, #0]
 8005ec6:	1855      	adds	r5, r2, r1
 8005ec8:	42a5      	cmp	r5, r4
 8005eca:	d10b      	bne.n	8005ee4 <_free_r+0x70>
 8005ecc:	6824      	ldr	r4, [r4, #0]
 8005ece:	4421      	add	r1, r4
 8005ed0:	1854      	adds	r4, r2, r1
 8005ed2:	42a3      	cmp	r3, r4
 8005ed4:	6011      	str	r1, [r2, #0]
 8005ed6:	d1e0      	bne.n	8005e9a <_free_r+0x26>
 8005ed8:	681c      	ldr	r4, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	6053      	str	r3, [r2, #4]
 8005ede:	440c      	add	r4, r1
 8005ee0:	6014      	str	r4, [r2, #0]
 8005ee2:	e7da      	b.n	8005e9a <_free_r+0x26>
 8005ee4:	d902      	bls.n	8005eec <_free_r+0x78>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	6003      	str	r3, [r0, #0]
 8005eea:	e7d6      	b.n	8005e9a <_free_r+0x26>
 8005eec:	6825      	ldr	r5, [r4, #0]
 8005eee:	1961      	adds	r1, r4, r5
 8005ef0:	428b      	cmp	r3, r1
 8005ef2:	bf04      	itt	eq
 8005ef4:	6819      	ldreq	r1, [r3, #0]
 8005ef6:	685b      	ldreq	r3, [r3, #4]
 8005ef8:	6063      	str	r3, [r4, #4]
 8005efa:	bf04      	itt	eq
 8005efc:	1949      	addeq	r1, r1, r5
 8005efe:	6021      	streq	r1, [r4, #0]
 8005f00:	6054      	str	r4, [r2, #4]
 8005f02:	e7ca      	b.n	8005e9a <_free_r+0x26>
 8005f04:	b003      	add	sp, #12
 8005f06:	bd30      	pop	{r4, r5, pc}
 8005f08:	20000418 	.word	0x20000418

08005f0c <malloc>:
 8005f0c:	4b02      	ldr	r3, [pc, #8]	; (8005f18 <malloc+0xc>)
 8005f0e:	4601      	mov	r1, r0
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	f000 b823 	b.w	8005f5c <_malloc_r>
 8005f16:	bf00      	nop
 8005f18:	20000064 	.word	0x20000064

08005f1c <sbrk_aligned>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	4e0e      	ldr	r6, [pc, #56]	; (8005f58 <sbrk_aligned+0x3c>)
 8005f20:	460c      	mov	r4, r1
 8005f22:	6831      	ldr	r1, [r6, #0]
 8005f24:	4605      	mov	r5, r0
 8005f26:	b911      	cbnz	r1, 8005f2e <sbrk_aligned+0x12>
 8005f28:	f000 fe40 	bl	8006bac <_sbrk_r>
 8005f2c:	6030      	str	r0, [r6, #0]
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f000 fe3b 	bl	8006bac <_sbrk_r>
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	d00a      	beq.n	8005f50 <sbrk_aligned+0x34>
 8005f3a:	1cc4      	adds	r4, r0, #3
 8005f3c:	f024 0403 	bic.w	r4, r4, #3
 8005f40:	42a0      	cmp	r0, r4
 8005f42:	d007      	beq.n	8005f54 <sbrk_aligned+0x38>
 8005f44:	1a21      	subs	r1, r4, r0
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 fe30 	bl	8006bac <_sbrk_r>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d101      	bne.n	8005f54 <sbrk_aligned+0x38>
 8005f50:	f04f 34ff 	mov.w	r4, #4294967295
 8005f54:	4620      	mov	r0, r4
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	2000041c 	.word	0x2000041c

08005f5c <_malloc_r>:
 8005f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f60:	1ccd      	adds	r5, r1, #3
 8005f62:	f025 0503 	bic.w	r5, r5, #3
 8005f66:	3508      	adds	r5, #8
 8005f68:	2d0c      	cmp	r5, #12
 8005f6a:	bf38      	it	cc
 8005f6c:	250c      	movcc	r5, #12
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	4607      	mov	r7, r0
 8005f72:	db01      	blt.n	8005f78 <_malloc_r+0x1c>
 8005f74:	42a9      	cmp	r1, r5
 8005f76:	d905      	bls.n	8005f84 <_malloc_r+0x28>
 8005f78:	230c      	movs	r3, #12
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	2600      	movs	r6, #0
 8005f7e:	4630      	mov	r0, r6
 8005f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006058 <_malloc_r+0xfc>
 8005f88:	f000 f868 	bl	800605c <__malloc_lock>
 8005f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f90:	461c      	mov	r4, r3
 8005f92:	bb5c      	cbnz	r4, 8005fec <_malloc_r+0x90>
 8005f94:	4629      	mov	r1, r5
 8005f96:	4638      	mov	r0, r7
 8005f98:	f7ff ffc0 	bl	8005f1c <sbrk_aligned>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	d155      	bne.n	800604e <_malloc_r+0xf2>
 8005fa2:	f8d8 4000 	ldr.w	r4, [r8]
 8005fa6:	4626      	mov	r6, r4
 8005fa8:	2e00      	cmp	r6, #0
 8005faa:	d145      	bne.n	8006038 <_malloc_r+0xdc>
 8005fac:	2c00      	cmp	r4, #0
 8005fae:	d048      	beq.n	8006042 <_malloc_r+0xe6>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	eb04 0903 	add.w	r9, r4, r3
 8005fba:	f000 fdf7 	bl	8006bac <_sbrk_r>
 8005fbe:	4581      	cmp	r9, r0
 8005fc0:	d13f      	bne.n	8006042 <_malloc_r+0xe6>
 8005fc2:	6821      	ldr	r1, [r4, #0]
 8005fc4:	1a6d      	subs	r5, r5, r1
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	4638      	mov	r0, r7
 8005fca:	f7ff ffa7 	bl	8005f1c <sbrk_aligned>
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d037      	beq.n	8006042 <_malloc_r+0xe6>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	442b      	add	r3, r5
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d038      	beq.n	8006052 <_malloc_r+0xf6>
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	42a2      	cmp	r2, r4
 8005fe4:	d12b      	bne.n	800603e <_malloc_r+0xe2>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	605a      	str	r2, [r3, #4]
 8005fea:	e00f      	b.n	800600c <_malloc_r+0xb0>
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	1b52      	subs	r2, r2, r5
 8005ff0:	d41f      	bmi.n	8006032 <_malloc_r+0xd6>
 8005ff2:	2a0b      	cmp	r2, #11
 8005ff4:	d917      	bls.n	8006026 <_malloc_r+0xca>
 8005ff6:	1961      	adds	r1, r4, r5
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	6025      	str	r5, [r4, #0]
 8005ffc:	bf18      	it	ne
 8005ffe:	6059      	strne	r1, [r3, #4]
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	bf08      	it	eq
 8006004:	f8c8 1000 	streq.w	r1, [r8]
 8006008:	5162      	str	r2, [r4, r5]
 800600a:	604b      	str	r3, [r1, #4]
 800600c:	4638      	mov	r0, r7
 800600e:	f104 060b 	add.w	r6, r4, #11
 8006012:	f000 f829 	bl	8006068 <__malloc_unlock>
 8006016:	f026 0607 	bic.w	r6, r6, #7
 800601a:	1d23      	adds	r3, r4, #4
 800601c:	1af2      	subs	r2, r6, r3
 800601e:	d0ae      	beq.n	8005f7e <_malloc_r+0x22>
 8006020:	1b9b      	subs	r3, r3, r6
 8006022:	50a3      	str	r3, [r4, r2]
 8006024:	e7ab      	b.n	8005f7e <_malloc_r+0x22>
 8006026:	42a3      	cmp	r3, r4
 8006028:	6862      	ldr	r2, [r4, #4]
 800602a:	d1dd      	bne.n	8005fe8 <_malloc_r+0x8c>
 800602c:	f8c8 2000 	str.w	r2, [r8]
 8006030:	e7ec      	b.n	800600c <_malloc_r+0xb0>
 8006032:	4623      	mov	r3, r4
 8006034:	6864      	ldr	r4, [r4, #4]
 8006036:	e7ac      	b.n	8005f92 <_malloc_r+0x36>
 8006038:	4634      	mov	r4, r6
 800603a:	6876      	ldr	r6, [r6, #4]
 800603c:	e7b4      	b.n	8005fa8 <_malloc_r+0x4c>
 800603e:	4613      	mov	r3, r2
 8006040:	e7cc      	b.n	8005fdc <_malloc_r+0x80>
 8006042:	230c      	movs	r3, #12
 8006044:	603b      	str	r3, [r7, #0]
 8006046:	4638      	mov	r0, r7
 8006048:	f000 f80e 	bl	8006068 <__malloc_unlock>
 800604c:	e797      	b.n	8005f7e <_malloc_r+0x22>
 800604e:	6025      	str	r5, [r4, #0]
 8006050:	e7dc      	b.n	800600c <_malloc_r+0xb0>
 8006052:	605b      	str	r3, [r3, #4]
 8006054:	deff      	udf	#255	; 0xff
 8006056:	bf00      	nop
 8006058:	20000418 	.word	0x20000418

0800605c <__malloc_lock>:
 800605c:	4801      	ldr	r0, [pc, #4]	; (8006064 <__malloc_lock+0x8>)
 800605e:	f7ff b88a 	b.w	8005176 <__retarget_lock_acquire_recursive>
 8006062:	bf00      	nop
 8006064:	20000414 	.word	0x20000414

08006068 <__malloc_unlock>:
 8006068:	4801      	ldr	r0, [pc, #4]	; (8006070 <__malloc_unlock+0x8>)
 800606a:	f7ff b885 	b.w	8005178 <__retarget_lock_release_recursive>
 800606e:	bf00      	nop
 8006070:	20000414 	.word	0x20000414

08006074 <_Balloc>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	69c6      	ldr	r6, [r0, #28]
 8006078:	4604      	mov	r4, r0
 800607a:	460d      	mov	r5, r1
 800607c:	b976      	cbnz	r6, 800609c <_Balloc+0x28>
 800607e:	2010      	movs	r0, #16
 8006080:	f7ff ff44 	bl	8005f0c <malloc>
 8006084:	4602      	mov	r2, r0
 8006086:	61e0      	str	r0, [r4, #28]
 8006088:	b920      	cbnz	r0, 8006094 <_Balloc+0x20>
 800608a:	4b18      	ldr	r3, [pc, #96]	; (80060ec <_Balloc+0x78>)
 800608c:	4818      	ldr	r0, [pc, #96]	; (80060f0 <_Balloc+0x7c>)
 800608e:	216b      	movs	r1, #107	; 0x6b
 8006090:	f000 fdaa 	bl	8006be8 <__assert_func>
 8006094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006098:	6006      	str	r6, [r0, #0]
 800609a:	60c6      	str	r6, [r0, #12]
 800609c:	69e6      	ldr	r6, [r4, #28]
 800609e:	68f3      	ldr	r3, [r6, #12]
 80060a0:	b183      	cbz	r3, 80060c4 <_Balloc+0x50>
 80060a2:	69e3      	ldr	r3, [r4, #28]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060aa:	b9b8      	cbnz	r0, 80060dc <_Balloc+0x68>
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f605 	lsl.w	r6, r1, r5
 80060b2:	1d72      	adds	r2, r6, #5
 80060b4:	0092      	lsls	r2, r2, #2
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 fdb4 	bl	8006c24 <_calloc_r>
 80060bc:	b160      	cbz	r0, 80060d8 <_Balloc+0x64>
 80060be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060c2:	e00e      	b.n	80060e2 <_Balloc+0x6e>
 80060c4:	2221      	movs	r2, #33	; 0x21
 80060c6:	2104      	movs	r1, #4
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fdab 	bl	8006c24 <_calloc_r>
 80060ce:	69e3      	ldr	r3, [r4, #28]
 80060d0:	60f0      	str	r0, [r6, #12]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e4      	bne.n	80060a2 <_Balloc+0x2e>
 80060d8:	2000      	movs	r0, #0
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	6802      	ldr	r2, [r0, #0]
 80060de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060e2:	2300      	movs	r3, #0
 80060e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060e8:	e7f7      	b.n	80060da <_Balloc+0x66>
 80060ea:	bf00      	nop
 80060ec:	08007319 	.word	0x08007319
 80060f0:	08007399 	.word	0x08007399

080060f4 <_Bfree>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	69c6      	ldr	r6, [r0, #28]
 80060f8:	4605      	mov	r5, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	b976      	cbnz	r6, 800611c <_Bfree+0x28>
 80060fe:	2010      	movs	r0, #16
 8006100:	f7ff ff04 	bl	8005f0c <malloc>
 8006104:	4602      	mov	r2, r0
 8006106:	61e8      	str	r0, [r5, #28]
 8006108:	b920      	cbnz	r0, 8006114 <_Bfree+0x20>
 800610a:	4b09      	ldr	r3, [pc, #36]	; (8006130 <_Bfree+0x3c>)
 800610c:	4809      	ldr	r0, [pc, #36]	; (8006134 <_Bfree+0x40>)
 800610e:	218f      	movs	r1, #143	; 0x8f
 8006110:	f000 fd6a 	bl	8006be8 <__assert_func>
 8006114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006118:	6006      	str	r6, [r0, #0]
 800611a:	60c6      	str	r6, [r0, #12]
 800611c:	b13c      	cbz	r4, 800612e <_Bfree+0x3a>
 800611e:	69eb      	ldr	r3, [r5, #28]
 8006120:	6862      	ldr	r2, [r4, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006128:	6021      	str	r1, [r4, #0]
 800612a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	08007319 	.word	0x08007319
 8006134:	08007399 	.word	0x08007399

08006138 <__multadd>:
 8006138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800613c:	690d      	ldr	r5, [r1, #16]
 800613e:	4607      	mov	r7, r0
 8006140:	460c      	mov	r4, r1
 8006142:	461e      	mov	r6, r3
 8006144:	f101 0c14 	add.w	ip, r1, #20
 8006148:	2000      	movs	r0, #0
 800614a:	f8dc 3000 	ldr.w	r3, [ip]
 800614e:	b299      	uxth	r1, r3
 8006150:	fb02 6101 	mla	r1, r2, r1, r6
 8006154:	0c1e      	lsrs	r6, r3, #16
 8006156:	0c0b      	lsrs	r3, r1, #16
 8006158:	fb02 3306 	mla	r3, r2, r6, r3
 800615c:	b289      	uxth	r1, r1
 800615e:	3001      	adds	r0, #1
 8006160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006164:	4285      	cmp	r5, r0
 8006166:	f84c 1b04 	str.w	r1, [ip], #4
 800616a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800616e:	dcec      	bgt.n	800614a <__multadd+0x12>
 8006170:	b30e      	cbz	r6, 80061b6 <__multadd+0x7e>
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	42ab      	cmp	r3, r5
 8006176:	dc19      	bgt.n	80061ac <__multadd+0x74>
 8006178:	6861      	ldr	r1, [r4, #4]
 800617a:	4638      	mov	r0, r7
 800617c:	3101      	adds	r1, #1
 800617e:	f7ff ff79 	bl	8006074 <_Balloc>
 8006182:	4680      	mov	r8, r0
 8006184:	b928      	cbnz	r0, 8006192 <__multadd+0x5a>
 8006186:	4602      	mov	r2, r0
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <__multadd+0x84>)
 800618a:	480d      	ldr	r0, [pc, #52]	; (80061c0 <__multadd+0x88>)
 800618c:	21ba      	movs	r1, #186	; 0xba
 800618e:	f000 fd2b 	bl	8006be8 <__assert_func>
 8006192:	6922      	ldr	r2, [r4, #16]
 8006194:	3202      	adds	r2, #2
 8006196:	f104 010c 	add.w	r1, r4, #12
 800619a:	0092      	lsls	r2, r2, #2
 800619c:	300c      	adds	r0, #12
 800619e:	f000 fd15 	bl	8006bcc <memcpy>
 80061a2:	4621      	mov	r1, r4
 80061a4:	4638      	mov	r0, r7
 80061a6:	f7ff ffa5 	bl	80060f4 <_Bfree>
 80061aa:	4644      	mov	r4, r8
 80061ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061b0:	3501      	adds	r5, #1
 80061b2:	615e      	str	r6, [r3, #20]
 80061b4:	6125      	str	r5, [r4, #16]
 80061b6:	4620      	mov	r0, r4
 80061b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061bc:	08007388 	.word	0x08007388
 80061c0:	08007399 	.word	0x08007399

080061c4 <__hi0bits>:
 80061c4:	0c03      	lsrs	r3, r0, #16
 80061c6:	041b      	lsls	r3, r3, #16
 80061c8:	b9d3      	cbnz	r3, 8006200 <__hi0bits+0x3c>
 80061ca:	0400      	lsls	r0, r0, #16
 80061cc:	2310      	movs	r3, #16
 80061ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80061d2:	bf04      	itt	eq
 80061d4:	0200      	lsleq	r0, r0, #8
 80061d6:	3308      	addeq	r3, #8
 80061d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80061dc:	bf04      	itt	eq
 80061de:	0100      	lsleq	r0, r0, #4
 80061e0:	3304      	addeq	r3, #4
 80061e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80061e6:	bf04      	itt	eq
 80061e8:	0080      	lsleq	r0, r0, #2
 80061ea:	3302      	addeq	r3, #2
 80061ec:	2800      	cmp	r0, #0
 80061ee:	db05      	blt.n	80061fc <__hi0bits+0x38>
 80061f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80061f4:	f103 0301 	add.w	r3, r3, #1
 80061f8:	bf08      	it	eq
 80061fa:	2320      	moveq	r3, #32
 80061fc:	4618      	mov	r0, r3
 80061fe:	4770      	bx	lr
 8006200:	2300      	movs	r3, #0
 8006202:	e7e4      	b.n	80061ce <__hi0bits+0xa>

08006204 <__lo0bits>:
 8006204:	6803      	ldr	r3, [r0, #0]
 8006206:	f013 0207 	ands.w	r2, r3, #7
 800620a:	d00c      	beq.n	8006226 <__lo0bits+0x22>
 800620c:	07d9      	lsls	r1, r3, #31
 800620e:	d422      	bmi.n	8006256 <__lo0bits+0x52>
 8006210:	079a      	lsls	r2, r3, #30
 8006212:	bf49      	itett	mi
 8006214:	085b      	lsrmi	r3, r3, #1
 8006216:	089b      	lsrpl	r3, r3, #2
 8006218:	6003      	strmi	r3, [r0, #0]
 800621a:	2201      	movmi	r2, #1
 800621c:	bf5c      	itt	pl
 800621e:	6003      	strpl	r3, [r0, #0]
 8006220:	2202      	movpl	r2, #2
 8006222:	4610      	mov	r0, r2
 8006224:	4770      	bx	lr
 8006226:	b299      	uxth	r1, r3
 8006228:	b909      	cbnz	r1, 800622e <__lo0bits+0x2a>
 800622a:	0c1b      	lsrs	r3, r3, #16
 800622c:	2210      	movs	r2, #16
 800622e:	b2d9      	uxtb	r1, r3
 8006230:	b909      	cbnz	r1, 8006236 <__lo0bits+0x32>
 8006232:	3208      	adds	r2, #8
 8006234:	0a1b      	lsrs	r3, r3, #8
 8006236:	0719      	lsls	r1, r3, #28
 8006238:	bf04      	itt	eq
 800623a:	091b      	lsreq	r3, r3, #4
 800623c:	3204      	addeq	r2, #4
 800623e:	0799      	lsls	r1, r3, #30
 8006240:	bf04      	itt	eq
 8006242:	089b      	lsreq	r3, r3, #2
 8006244:	3202      	addeq	r2, #2
 8006246:	07d9      	lsls	r1, r3, #31
 8006248:	d403      	bmi.n	8006252 <__lo0bits+0x4e>
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	f102 0201 	add.w	r2, r2, #1
 8006250:	d003      	beq.n	800625a <__lo0bits+0x56>
 8006252:	6003      	str	r3, [r0, #0]
 8006254:	e7e5      	b.n	8006222 <__lo0bits+0x1e>
 8006256:	2200      	movs	r2, #0
 8006258:	e7e3      	b.n	8006222 <__lo0bits+0x1e>
 800625a:	2220      	movs	r2, #32
 800625c:	e7e1      	b.n	8006222 <__lo0bits+0x1e>
	...

08006260 <__i2b>:
 8006260:	b510      	push	{r4, lr}
 8006262:	460c      	mov	r4, r1
 8006264:	2101      	movs	r1, #1
 8006266:	f7ff ff05 	bl	8006074 <_Balloc>
 800626a:	4602      	mov	r2, r0
 800626c:	b928      	cbnz	r0, 800627a <__i2b+0x1a>
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <__i2b+0x24>)
 8006270:	4805      	ldr	r0, [pc, #20]	; (8006288 <__i2b+0x28>)
 8006272:	f240 1145 	movw	r1, #325	; 0x145
 8006276:	f000 fcb7 	bl	8006be8 <__assert_func>
 800627a:	2301      	movs	r3, #1
 800627c:	6144      	str	r4, [r0, #20]
 800627e:	6103      	str	r3, [r0, #16]
 8006280:	bd10      	pop	{r4, pc}
 8006282:	bf00      	nop
 8006284:	08007388 	.word	0x08007388
 8006288:	08007399 	.word	0x08007399

0800628c <__multiply>:
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006290:	4691      	mov	r9, r2
 8006292:	690a      	ldr	r2, [r1, #16]
 8006294:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006298:	429a      	cmp	r2, r3
 800629a:	bfb8      	it	lt
 800629c:	460b      	movlt	r3, r1
 800629e:	460c      	mov	r4, r1
 80062a0:	bfbc      	itt	lt
 80062a2:	464c      	movlt	r4, r9
 80062a4:	4699      	movlt	r9, r3
 80062a6:	6927      	ldr	r7, [r4, #16]
 80062a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062ac:	68a3      	ldr	r3, [r4, #8]
 80062ae:	6861      	ldr	r1, [r4, #4]
 80062b0:	eb07 060a 	add.w	r6, r7, sl
 80062b4:	42b3      	cmp	r3, r6
 80062b6:	b085      	sub	sp, #20
 80062b8:	bfb8      	it	lt
 80062ba:	3101      	addlt	r1, #1
 80062bc:	f7ff feda 	bl	8006074 <_Balloc>
 80062c0:	b930      	cbnz	r0, 80062d0 <__multiply+0x44>
 80062c2:	4602      	mov	r2, r0
 80062c4:	4b44      	ldr	r3, [pc, #272]	; (80063d8 <__multiply+0x14c>)
 80062c6:	4845      	ldr	r0, [pc, #276]	; (80063dc <__multiply+0x150>)
 80062c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80062cc:	f000 fc8c 	bl	8006be8 <__assert_func>
 80062d0:	f100 0514 	add.w	r5, r0, #20
 80062d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062d8:	462b      	mov	r3, r5
 80062da:	2200      	movs	r2, #0
 80062dc:	4543      	cmp	r3, r8
 80062de:	d321      	bcc.n	8006324 <__multiply+0x98>
 80062e0:	f104 0314 	add.w	r3, r4, #20
 80062e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80062e8:	f109 0314 	add.w	r3, r9, #20
 80062ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80062f0:	9202      	str	r2, [sp, #8]
 80062f2:	1b3a      	subs	r2, r7, r4
 80062f4:	3a15      	subs	r2, #21
 80062f6:	f022 0203 	bic.w	r2, r2, #3
 80062fa:	3204      	adds	r2, #4
 80062fc:	f104 0115 	add.w	r1, r4, #21
 8006300:	428f      	cmp	r7, r1
 8006302:	bf38      	it	cc
 8006304:	2204      	movcc	r2, #4
 8006306:	9201      	str	r2, [sp, #4]
 8006308:	9a02      	ldr	r2, [sp, #8]
 800630a:	9303      	str	r3, [sp, #12]
 800630c:	429a      	cmp	r2, r3
 800630e:	d80c      	bhi.n	800632a <__multiply+0x9e>
 8006310:	2e00      	cmp	r6, #0
 8006312:	dd03      	ble.n	800631c <__multiply+0x90>
 8006314:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006318:	2b00      	cmp	r3, #0
 800631a:	d05b      	beq.n	80063d4 <__multiply+0x148>
 800631c:	6106      	str	r6, [r0, #16]
 800631e:	b005      	add	sp, #20
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	f843 2b04 	str.w	r2, [r3], #4
 8006328:	e7d8      	b.n	80062dc <__multiply+0x50>
 800632a:	f8b3 a000 	ldrh.w	sl, [r3]
 800632e:	f1ba 0f00 	cmp.w	sl, #0
 8006332:	d024      	beq.n	800637e <__multiply+0xf2>
 8006334:	f104 0e14 	add.w	lr, r4, #20
 8006338:	46a9      	mov	r9, r5
 800633a:	f04f 0c00 	mov.w	ip, #0
 800633e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006342:	f8d9 1000 	ldr.w	r1, [r9]
 8006346:	fa1f fb82 	uxth.w	fp, r2
 800634a:	b289      	uxth	r1, r1
 800634c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006350:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006354:	f8d9 2000 	ldr.w	r2, [r9]
 8006358:	4461      	add	r1, ip
 800635a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800635e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006362:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006366:	b289      	uxth	r1, r1
 8006368:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800636c:	4577      	cmp	r7, lr
 800636e:	f849 1b04 	str.w	r1, [r9], #4
 8006372:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006376:	d8e2      	bhi.n	800633e <__multiply+0xb2>
 8006378:	9a01      	ldr	r2, [sp, #4]
 800637a:	f845 c002 	str.w	ip, [r5, r2]
 800637e:	9a03      	ldr	r2, [sp, #12]
 8006380:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006384:	3304      	adds	r3, #4
 8006386:	f1b9 0f00 	cmp.w	r9, #0
 800638a:	d021      	beq.n	80063d0 <__multiply+0x144>
 800638c:	6829      	ldr	r1, [r5, #0]
 800638e:	f104 0c14 	add.w	ip, r4, #20
 8006392:	46ae      	mov	lr, r5
 8006394:	f04f 0a00 	mov.w	sl, #0
 8006398:	f8bc b000 	ldrh.w	fp, [ip]
 800639c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063a0:	fb09 220b 	mla	r2, r9, fp, r2
 80063a4:	4452      	add	r2, sl
 80063a6:	b289      	uxth	r1, r1
 80063a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063ac:	f84e 1b04 	str.w	r1, [lr], #4
 80063b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063b8:	f8be 1000 	ldrh.w	r1, [lr]
 80063bc:	fb09 110a 	mla	r1, r9, sl, r1
 80063c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80063c4:	4567      	cmp	r7, ip
 80063c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063ca:	d8e5      	bhi.n	8006398 <__multiply+0x10c>
 80063cc:	9a01      	ldr	r2, [sp, #4]
 80063ce:	50a9      	str	r1, [r5, r2]
 80063d0:	3504      	adds	r5, #4
 80063d2:	e799      	b.n	8006308 <__multiply+0x7c>
 80063d4:	3e01      	subs	r6, #1
 80063d6:	e79b      	b.n	8006310 <__multiply+0x84>
 80063d8:	08007388 	.word	0x08007388
 80063dc:	08007399 	.word	0x08007399

080063e0 <__pow5mult>:
 80063e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	4615      	mov	r5, r2
 80063e6:	f012 0203 	ands.w	r2, r2, #3
 80063ea:	4606      	mov	r6, r0
 80063ec:	460f      	mov	r7, r1
 80063ee:	d007      	beq.n	8006400 <__pow5mult+0x20>
 80063f0:	4c25      	ldr	r4, [pc, #148]	; (8006488 <__pow5mult+0xa8>)
 80063f2:	3a01      	subs	r2, #1
 80063f4:	2300      	movs	r3, #0
 80063f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063fa:	f7ff fe9d 	bl	8006138 <__multadd>
 80063fe:	4607      	mov	r7, r0
 8006400:	10ad      	asrs	r5, r5, #2
 8006402:	d03d      	beq.n	8006480 <__pow5mult+0xa0>
 8006404:	69f4      	ldr	r4, [r6, #28]
 8006406:	b97c      	cbnz	r4, 8006428 <__pow5mult+0x48>
 8006408:	2010      	movs	r0, #16
 800640a:	f7ff fd7f 	bl	8005f0c <malloc>
 800640e:	4602      	mov	r2, r0
 8006410:	61f0      	str	r0, [r6, #28]
 8006412:	b928      	cbnz	r0, 8006420 <__pow5mult+0x40>
 8006414:	4b1d      	ldr	r3, [pc, #116]	; (800648c <__pow5mult+0xac>)
 8006416:	481e      	ldr	r0, [pc, #120]	; (8006490 <__pow5mult+0xb0>)
 8006418:	f240 11b3 	movw	r1, #435	; 0x1b3
 800641c:	f000 fbe4 	bl	8006be8 <__assert_func>
 8006420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006424:	6004      	str	r4, [r0, #0]
 8006426:	60c4      	str	r4, [r0, #12]
 8006428:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800642c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006430:	b94c      	cbnz	r4, 8006446 <__pow5mult+0x66>
 8006432:	f240 2171 	movw	r1, #625	; 0x271
 8006436:	4630      	mov	r0, r6
 8006438:	f7ff ff12 	bl	8006260 <__i2b>
 800643c:	2300      	movs	r3, #0
 800643e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006442:	4604      	mov	r4, r0
 8006444:	6003      	str	r3, [r0, #0]
 8006446:	f04f 0900 	mov.w	r9, #0
 800644a:	07eb      	lsls	r3, r5, #31
 800644c:	d50a      	bpl.n	8006464 <__pow5mult+0x84>
 800644e:	4639      	mov	r1, r7
 8006450:	4622      	mov	r2, r4
 8006452:	4630      	mov	r0, r6
 8006454:	f7ff ff1a 	bl	800628c <__multiply>
 8006458:	4639      	mov	r1, r7
 800645a:	4680      	mov	r8, r0
 800645c:	4630      	mov	r0, r6
 800645e:	f7ff fe49 	bl	80060f4 <_Bfree>
 8006462:	4647      	mov	r7, r8
 8006464:	106d      	asrs	r5, r5, #1
 8006466:	d00b      	beq.n	8006480 <__pow5mult+0xa0>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	b938      	cbnz	r0, 800647c <__pow5mult+0x9c>
 800646c:	4622      	mov	r2, r4
 800646e:	4621      	mov	r1, r4
 8006470:	4630      	mov	r0, r6
 8006472:	f7ff ff0b 	bl	800628c <__multiply>
 8006476:	6020      	str	r0, [r4, #0]
 8006478:	f8c0 9000 	str.w	r9, [r0]
 800647c:	4604      	mov	r4, r0
 800647e:	e7e4      	b.n	800644a <__pow5mult+0x6a>
 8006480:	4638      	mov	r0, r7
 8006482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006486:	bf00      	nop
 8006488:	080074e8 	.word	0x080074e8
 800648c:	08007319 	.word	0x08007319
 8006490:	08007399 	.word	0x08007399

08006494 <__lshift>:
 8006494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	460c      	mov	r4, r1
 800649a:	6849      	ldr	r1, [r1, #4]
 800649c:	6923      	ldr	r3, [r4, #16]
 800649e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	4607      	mov	r7, r0
 80064a6:	4691      	mov	r9, r2
 80064a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064ac:	f108 0601 	add.w	r6, r8, #1
 80064b0:	42b3      	cmp	r3, r6
 80064b2:	db0b      	blt.n	80064cc <__lshift+0x38>
 80064b4:	4638      	mov	r0, r7
 80064b6:	f7ff fddd 	bl	8006074 <_Balloc>
 80064ba:	4605      	mov	r5, r0
 80064bc:	b948      	cbnz	r0, 80064d2 <__lshift+0x3e>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b28      	ldr	r3, [pc, #160]	; (8006564 <__lshift+0xd0>)
 80064c2:	4829      	ldr	r0, [pc, #164]	; (8006568 <__lshift+0xd4>)
 80064c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80064c8:	f000 fb8e 	bl	8006be8 <__assert_func>
 80064cc:	3101      	adds	r1, #1
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	e7ee      	b.n	80064b0 <__lshift+0x1c>
 80064d2:	2300      	movs	r3, #0
 80064d4:	f100 0114 	add.w	r1, r0, #20
 80064d8:	f100 0210 	add.w	r2, r0, #16
 80064dc:	4618      	mov	r0, r3
 80064de:	4553      	cmp	r3, sl
 80064e0:	db33      	blt.n	800654a <__lshift+0xb6>
 80064e2:	6920      	ldr	r0, [r4, #16]
 80064e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064e8:	f104 0314 	add.w	r3, r4, #20
 80064ec:	f019 091f 	ands.w	r9, r9, #31
 80064f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064f8:	d02b      	beq.n	8006552 <__lshift+0xbe>
 80064fa:	f1c9 0e20 	rsb	lr, r9, #32
 80064fe:	468a      	mov	sl, r1
 8006500:	2200      	movs	r2, #0
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	fa00 f009 	lsl.w	r0, r0, r9
 8006508:	4310      	orrs	r0, r2
 800650a:	f84a 0b04 	str.w	r0, [sl], #4
 800650e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006512:	459c      	cmp	ip, r3
 8006514:	fa22 f20e 	lsr.w	r2, r2, lr
 8006518:	d8f3      	bhi.n	8006502 <__lshift+0x6e>
 800651a:	ebac 0304 	sub.w	r3, ip, r4
 800651e:	3b15      	subs	r3, #21
 8006520:	f023 0303 	bic.w	r3, r3, #3
 8006524:	3304      	adds	r3, #4
 8006526:	f104 0015 	add.w	r0, r4, #21
 800652a:	4584      	cmp	ip, r0
 800652c:	bf38      	it	cc
 800652e:	2304      	movcc	r3, #4
 8006530:	50ca      	str	r2, [r1, r3]
 8006532:	b10a      	cbz	r2, 8006538 <__lshift+0xa4>
 8006534:	f108 0602 	add.w	r6, r8, #2
 8006538:	3e01      	subs	r6, #1
 800653a:	4638      	mov	r0, r7
 800653c:	612e      	str	r6, [r5, #16]
 800653e:	4621      	mov	r1, r4
 8006540:	f7ff fdd8 	bl	80060f4 <_Bfree>
 8006544:	4628      	mov	r0, r5
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654a:	f842 0f04 	str.w	r0, [r2, #4]!
 800654e:	3301      	adds	r3, #1
 8006550:	e7c5      	b.n	80064de <__lshift+0x4a>
 8006552:	3904      	subs	r1, #4
 8006554:	f853 2b04 	ldr.w	r2, [r3], #4
 8006558:	f841 2f04 	str.w	r2, [r1, #4]!
 800655c:	459c      	cmp	ip, r3
 800655e:	d8f9      	bhi.n	8006554 <__lshift+0xc0>
 8006560:	e7ea      	b.n	8006538 <__lshift+0xa4>
 8006562:	bf00      	nop
 8006564:	08007388 	.word	0x08007388
 8006568:	08007399 	.word	0x08007399

0800656c <__mcmp>:
 800656c:	b530      	push	{r4, r5, lr}
 800656e:	6902      	ldr	r2, [r0, #16]
 8006570:	690c      	ldr	r4, [r1, #16]
 8006572:	1b12      	subs	r2, r2, r4
 8006574:	d10e      	bne.n	8006594 <__mcmp+0x28>
 8006576:	f100 0314 	add.w	r3, r0, #20
 800657a:	3114      	adds	r1, #20
 800657c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006584:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006588:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800658c:	42a5      	cmp	r5, r4
 800658e:	d003      	beq.n	8006598 <__mcmp+0x2c>
 8006590:	d305      	bcc.n	800659e <__mcmp+0x32>
 8006592:	2201      	movs	r2, #1
 8006594:	4610      	mov	r0, r2
 8006596:	bd30      	pop	{r4, r5, pc}
 8006598:	4283      	cmp	r3, r0
 800659a:	d3f3      	bcc.n	8006584 <__mcmp+0x18>
 800659c:	e7fa      	b.n	8006594 <__mcmp+0x28>
 800659e:	f04f 32ff 	mov.w	r2, #4294967295
 80065a2:	e7f7      	b.n	8006594 <__mcmp+0x28>

080065a4 <__mdiff>:
 80065a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	460c      	mov	r4, r1
 80065aa:	4606      	mov	r6, r0
 80065ac:	4611      	mov	r1, r2
 80065ae:	4620      	mov	r0, r4
 80065b0:	4690      	mov	r8, r2
 80065b2:	f7ff ffdb 	bl	800656c <__mcmp>
 80065b6:	1e05      	subs	r5, r0, #0
 80065b8:	d110      	bne.n	80065dc <__mdiff+0x38>
 80065ba:	4629      	mov	r1, r5
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff fd59 	bl	8006074 <_Balloc>
 80065c2:	b930      	cbnz	r0, 80065d2 <__mdiff+0x2e>
 80065c4:	4b3a      	ldr	r3, [pc, #232]	; (80066b0 <__mdiff+0x10c>)
 80065c6:	4602      	mov	r2, r0
 80065c8:	f240 2137 	movw	r1, #567	; 0x237
 80065cc:	4839      	ldr	r0, [pc, #228]	; (80066b4 <__mdiff+0x110>)
 80065ce:	f000 fb0b 	bl	8006be8 <__assert_func>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065dc:	bfa4      	itt	ge
 80065de:	4643      	movge	r3, r8
 80065e0:	46a0      	movge	r8, r4
 80065e2:	4630      	mov	r0, r6
 80065e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80065e8:	bfa6      	itte	ge
 80065ea:	461c      	movge	r4, r3
 80065ec:	2500      	movge	r5, #0
 80065ee:	2501      	movlt	r5, #1
 80065f0:	f7ff fd40 	bl	8006074 <_Balloc>
 80065f4:	b920      	cbnz	r0, 8006600 <__mdiff+0x5c>
 80065f6:	4b2e      	ldr	r3, [pc, #184]	; (80066b0 <__mdiff+0x10c>)
 80065f8:	4602      	mov	r2, r0
 80065fa:	f240 2145 	movw	r1, #581	; 0x245
 80065fe:	e7e5      	b.n	80065cc <__mdiff+0x28>
 8006600:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006604:	6926      	ldr	r6, [r4, #16]
 8006606:	60c5      	str	r5, [r0, #12]
 8006608:	f104 0914 	add.w	r9, r4, #20
 800660c:	f108 0514 	add.w	r5, r8, #20
 8006610:	f100 0e14 	add.w	lr, r0, #20
 8006614:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006618:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800661c:	f108 0210 	add.w	r2, r8, #16
 8006620:	46f2      	mov	sl, lr
 8006622:	2100      	movs	r1, #0
 8006624:	f859 3b04 	ldr.w	r3, [r9], #4
 8006628:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800662c:	fa11 f88b 	uxtah	r8, r1, fp
 8006630:	b299      	uxth	r1, r3
 8006632:	0c1b      	lsrs	r3, r3, #16
 8006634:	eba8 0801 	sub.w	r8, r8, r1
 8006638:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800663c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006640:	fa1f f888 	uxth.w	r8, r8
 8006644:	1419      	asrs	r1, r3, #16
 8006646:	454e      	cmp	r6, r9
 8006648:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800664c:	f84a 3b04 	str.w	r3, [sl], #4
 8006650:	d8e8      	bhi.n	8006624 <__mdiff+0x80>
 8006652:	1b33      	subs	r3, r6, r4
 8006654:	3b15      	subs	r3, #21
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	3304      	adds	r3, #4
 800665c:	3415      	adds	r4, #21
 800665e:	42a6      	cmp	r6, r4
 8006660:	bf38      	it	cc
 8006662:	2304      	movcc	r3, #4
 8006664:	441d      	add	r5, r3
 8006666:	4473      	add	r3, lr
 8006668:	469e      	mov	lr, r3
 800666a:	462e      	mov	r6, r5
 800666c:	4566      	cmp	r6, ip
 800666e:	d30e      	bcc.n	800668e <__mdiff+0xea>
 8006670:	f10c 0203 	add.w	r2, ip, #3
 8006674:	1b52      	subs	r2, r2, r5
 8006676:	f022 0203 	bic.w	r2, r2, #3
 800667a:	3d03      	subs	r5, #3
 800667c:	45ac      	cmp	ip, r5
 800667e:	bf38      	it	cc
 8006680:	2200      	movcc	r2, #0
 8006682:	4413      	add	r3, r2
 8006684:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006688:	b17a      	cbz	r2, 80066aa <__mdiff+0x106>
 800668a:	6107      	str	r7, [r0, #16]
 800668c:	e7a4      	b.n	80065d8 <__mdiff+0x34>
 800668e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006692:	fa11 f288 	uxtah	r2, r1, r8
 8006696:	1414      	asrs	r4, r2, #16
 8006698:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800669c:	b292      	uxth	r2, r2
 800669e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80066a2:	f84e 2b04 	str.w	r2, [lr], #4
 80066a6:	1421      	asrs	r1, r4, #16
 80066a8:	e7e0      	b.n	800666c <__mdiff+0xc8>
 80066aa:	3f01      	subs	r7, #1
 80066ac:	e7ea      	b.n	8006684 <__mdiff+0xe0>
 80066ae:	bf00      	nop
 80066b0:	08007388 	.word	0x08007388
 80066b4:	08007399 	.word	0x08007399

080066b8 <__d2b>:
 80066b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066bc:	460f      	mov	r7, r1
 80066be:	2101      	movs	r1, #1
 80066c0:	ec59 8b10 	vmov	r8, r9, d0
 80066c4:	4616      	mov	r6, r2
 80066c6:	f7ff fcd5 	bl	8006074 <_Balloc>
 80066ca:	4604      	mov	r4, r0
 80066cc:	b930      	cbnz	r0, 80066dc <__d2b+0x24>
 80066ce:	4602      	mov	r2, r0
 80066d0:	4b24      	ldr	r3, [pc, #144]	; (8006764 <__d2b+0xac>)
 80066d2:	4825      	ldr	r0, [pc, #148]	; (8006768 <__d2b+0xb0>)
 80066d4:	f240 310f 	movw	r1, #783	; 0x30f
 80066d8:	f000 fa86 	bl	8006be8 <__assert_func>
 80066dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066e4:	bb2d      	cbnz	r5, 8006732 <__d2b+0x7a>
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	f1b8 0300 	subs.w	r3, r8, #0
 80066ec:	d026      	beq.n	800673c <__d2b+0x84>
 80066ee:	4668      	mov	r0, sp
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	f7ff fd87 	bl	8006204 <__lo0bits>
 80066f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80066fa:	b1e8      	cbz	r0, 8006738 <__d2b+0x80>
 80066fc:	f1c0 0320 	rsb	r3, r0, #32
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	430b      	orrs	r3, r1
 8006706:	40c2      	lsrs	r2, r0
 8006708:	6163      	str	r3, [r4, #20]
 800670a:	9201      	str	r2, [sp, #4]
 800670c:	9b01      	ldr	r3, [sp, #4]
 800670e:	61a3      	str	r3, [r4, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	bf14      	ite	ne
 8006714:	2202      	movne	r2, #2
 8006716:	2201      	moveq	r2, #1
 8006718:	6122      	str	r2, [r4, #16]
 800671a:	b1bd      	cbz	r5, 800674c <__d2b+0x94>
 800671c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006720:	4405      	add	r5, r0
 8006722:	603d      	str	r5, [r7, #0]
 8006724:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006728:	6030      	str	r0, [r6, #0]
 800672a:	4620      	mov	r0, r4
 800672c:	b003      	add	sp, #12
 800672e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006736:	e7d6      	b.n	80066e6 <__d2b+0x2e>
 8006738:	6161      	str	r1, [r4, #20]
 800673a:	e7e7      	b.n	800670c <__d2b+0x54>
 800673c:	a801      	add	r0, sp, #4
 800673e:	f7ff fd61 	bl	8006204 <__lo0bits>
 8006742:	9b01      	ldr	r3, [sp, #4]
 8006744:	6163      	str	r3, [r4, #20]
 8006746:	3020      	adds	r0, #32
 8006748:	2201      	movs	r2, #1
 800674a:	e7e5      	b.n	8006718 <__d2b+0x60>
 800674c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006750:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006754:	6038      	str	r0, [r7, #0]
 8006756:	6918      	ldr	r0, [r3, #16]
 8006758:	f7ff fd34 	bl	80061c4 <__hi0bits>
 800675c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006760:	e7e2      	b.n	8006728 <__d2b+0x70>
 8006762:	bf00      	nop
 8006764:	08007388 	.word	0x08007388
 8006768:	08007399 	.word	0x08007399

0800676c <__ssputs_r>:
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	688e      	ldr	r6, [r1, #8]
 8006772:	461f      	mov	r7, r3
 8006774:	42be      	cmp	r6, r7
 8006776:	680b      	ldr	r3, [r1, #0]
 8006778:	4682      	mov	sl, r0
 800677a:	460c      	mov	r4, r1
 800677c:	4690      	mov	r8, r2
 800677e:	d82c      	bhi.n	80067da <__ssputs_r+0x6e>
 8006780:	898a      	ldrh	r2, [r1, #12]
 8006782:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006786:	d026      	beq.n	80067d6 <__ssputs_r+0x6a>
 8006788:	6965      	ldr	r5, [r4, #20]
 800678a:	6909      	ldr	r1, [r1, #16]
 800678c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006790:	eba3 0901 	sub.w	r9, r3, r1
 8006794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006798:	1c7b      	adds	r3, r7, #1
 800679a:	444b      	add	r3, r9
 800679c:	106d      	asrs	r5, r5, #1
 800679e:	429d      	cmp	r5, r3
 80067a0:	bf38      	it	cc
 80067a2:	461d      	movcc	r5, r3
 80067a4:	0553      	lsls	r3, r2, #21
 80067a6:	d527      	bpl.n	80067f8 <__ssputs_r+0x8c>
 80067a8:	4629      	mov	r1, r5
 80067aa:	f7ff fbd7 	bl	8005f5c <_malloc_r>
 80067ae:	4606      	mov	r6, r0
 80067b0:	b360      	cbz	r0, 800680c <__ssputs_r+0xa0>
 80067b2:	6921      	ldr	r1, [r4, #16]
 80067b4:	464a      	mov	r2, r9
 80067b6:	f000 fa09 	bl	8006bcc <memcpy>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c4:	81a3      	strh	r3, [r4, #12]
 80067c6:	6126      	str	r6, [r4, #16]
 80067c8:	6165      	str	r5, [r4, #20]
 80067ca:	444e      	add	r6, r9
 80067cc:	eba5 0509 	sub.w	r5, r5, r9
 80067d0:	6026      	str	r6, [r4, #0]
 80067d2:	60a5      	str	r5, [r4, #8]
 80067d4:	463e      	mov	r6, r7
 80067d6:	42be      	cmp	r6, r7
 80067d8:	d900      	bls.n	80067dc <__ssputs_r+0x70>
 80067da:	463e      	mov	r6, r7
 80067dc:	6820      	ldr	r0, [r4, #0]
 80067de:	4632      	mov	r2, r6
 80067e0:	4641      	mov	r1, r8
 80067e2:	f000 f9c9 	bl	8006b78 <memmove>
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	1b9b      	subs	r3, r3, r6
 80067ea:	60a3      	str	r3, [r4, #8]
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	4433      	add	r3, r6
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	2000      	movs	r0, #0
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	462a      	mov	r2, r5
 80067fa:	f000 fa3b 	bl	8006c74 <_realloc_r>
 80067fe:	4606      	mov	r6, r0
 8006800:	2800      	cmp	r0, #0
 8006802:	d1e0      	bne.n	80067c6 <__ssputs_r+0x5a>
 8006804:	6921      	ldr	r1, [r4, #16]
 8006806:	4650      	mov	r0, sl
 8006808:	f7ff fb34 	bl	8005e74 <_free_r>
 800680c:	230c      	movs	r3, #12
 800680e:	f8ca 3000 	str.w	r3, [sl]
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
 800681e:	e7e9      	b.n	80067f4 <__ssputs_r+0x88>

08006820 <_svfiprintf_r>:
 8006820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006824:	4698      	mov	r8, r3
 8006826:	898b      	ldrh	r3, [r1, #12]
 8006828:	061b      	lsls	r3, r3, #24
 800682a:	b09d      	sub	sp, #116	; 0x74
 800682c:	4607      	mov	r7, r0
 800682e:	460d      	mov	r5, r1
 8006830:	4614      	mov	r4, r2
 8006832:	d50e      	bpl.n	8006852 <_svfiprintf_r+0x32>
 8006834:	690b      	ldr	r3, [r1, #16]
 8006836:	b963      	cbnz	r3, 8006852 <_svfiprintf_r+0x32>
 8006838:	2140      	movs	r1, #64	; 0x40
 800683a:	f7ff fb8f 	bl	8005f5c <_malloc_r>
 800683e:	6028      	str	r0, [r5, #0]
 8006840:	6128      	str	r0, [r5, #16]
 8006842:	b920      	cbnz	r0, 800684e <_svfiprintf_r+0x2e>
 8006844:	230c      	movs	r3, #12
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	e0d0      	b.n	80069f0 <_svfiprintf_r+0x1d0>
 800684e:	2340      	movs	r3, #64	; 0x40
 8006850:	616b      	str	r3, [r5, #20]
 8006852:	2300      	movs	r3, #0
 8006854:	9309      	str	r3, [sp, #36]	; 0x24
 8006856:	2320      	movs	r3, #32
 8006858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800685c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006860:	2330      	movs	r3, #48	; 0x30
 8006862:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a08 <_svfiprintf_r+0x1e8>
 8006866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800686a:	f04f 0901 	mov.w	r9, #1
 800686e:	4623      	mov	r3, r4
 8006870:	469a      	mov	sl, r3
 8006872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006876:	b10a      	cbz	r2, 800687c <_svfiprintf_r+0x5c>
 8006878:	2a25      	cmp	r2, #37	; 0x25
 800687a:	d1f9      	bne.n	8006870 <_svfiprintf_r+0x50>
 800687c:	ebba 0b04 	subs.w	fp, sl, r4
 8006880:	d00b      	beq.n	800689a <_svfiprintf_r+0x7a>
 8006882:	465b      	mov	r3, fp
 8006884:	4622      	mov	r2, r4
 8006886:	4629      	mov	r1, r5
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff ff6f 	bl	800676c <__ssputs_r>
 800688e:	3001      	adds	r0, #1
 8006890:	f000 80a9 	beq.w	80069e6 <_svfiprintf_r+0x1c6>
 8006894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006896:	445a      	add	r2, fp
 8006898:	9209      	str	r2, [sp, #36]	; 0x24
 800689a:	f89a 3000 	ldrb.w	r3, [sl]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80a1 	beq.w	80069e6 <_svfiprintf_r+0x1c6>
 80068a4:	2300      	movs	r3, #0
 80068a6:	f04f 32ff 	mov.w	r2, #4294967295
 80068aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068ae:	f10a 0a01 	add.w	sl, sl, #1
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	9307      	str	r3, [sp, #28]
 80068b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ba:	931a      	str	r3, [sp, #104]	; 0x68
 80068bc:	4654      	mov	r4, sl
 80068be:	2205      	movs	r2, #5
 80068c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c4:	4850      	ldr	r0, [pc, #320]	; (8006a08 <_svfiprintf_r+0x1e8>)
 80068c6:	f7f9 fc8b 	bl	80001e0 <memchr>
 80068ca:	9a04      	ldr	r2, [sp, #16]
 80068cc:	b9d8      	cbnz	r0, 8006906 <_svfiprintf_r+0xe6>
 80068ce:	06d0      	lsls	r0, r2, #27
 80068d0:	bf44      	itt	mi
 80068d2:	2320      	movmi	r3, #32
 80068d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d8:	0711      	lsls	r1, r2, #28
 80068da:	bf44      	itt	mi
 80068dc:	232b      	movmi	r3, #43	; 0x2b
 80068de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068e2:	f89a 3000 	ldrb.w	r3, [sl]
 80068e6:	2b2a      	cmp	r3, #42	; 0x2a
 80068e8:	d015      	beq.n	8006916 <_svfiprintf_r+0xf6>
 80068ea:	9a07      	ldr	r2, [sp, #28]
 80068ec:	4654      	mov	r4, sl
 80068ee:	2000      	movs	r0, #0
 80068f0:	f04f 0c0a 	mov.w	ip, #10
 80068f4:	4621      	mov	r1, r4
 80068f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068fa:	3b30      	subs	r3, #48	; 0x30
 80068fc:	2b09      	cmp	r3, #9
 80068fe:	d94d      	bls.n	800699c <_svfiprintf_r+0x17c>
 8006900:	b1b0      	cbz	r0, 8006930 <_svfiprintf_r+0x110>
 8006902:	9207      	str	r2, [sp, #28]
 8006904:	e014      	b.n	8006930 <_svfiprintf_r+0x110>
 8006906:	eba0 0308 	sub.w	r3, r0, r8
 800690a:	fa09 f303 	lsl.w	r3, r9, r3
 800690e:	4313      	orrs	r3, r2
 8006910:	9304      	str	r3, [sp, #16]
 8006912:	46a2      	mov	sl, r4
 8006914:	e7d2      	b.n	80068bc <_svfiprintf_r+0x9c>
 8006916:	9b03      	ldr	r3, [sp, #12]
 8006918:	1d19      	adds	r1, r3, #4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	9103      	str	r1, [sp, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	bfbb      	ittet	lt
 8006922:	425b      	neglt	r3, r3
 8006924:	f042 0202 	orrlt.w	r2, r2, #2
 8006928:	9307      	strge	r3, [sp, #28]
 800692a:	9307      	strlt	r3, [sp, #28]
 800692c:	bfb8      	it	lt
 800692e:	9204      	strlt	r2, [sp, #16]
 8006930:	7823      	ldrb	r3, [r4, #0]
 8006932:	2b2e      	cmp	r3, #46	; 0x2e
 8006934:	d10c      	bne.n	8006950 <_svfiprintf_r+0x130>
 8006936:	7863      	ldrb	r3, [r4, #1]
 8006938:	2b2a      	cmp	r3, #42	; 0x2a
 800693a:	d134      	bne.n	80069a6 <_svfiprintf_r+0x186>
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	1d1a      	adds	r2, r3, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	9203      	str	r2, [sp, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	bfb8      	it	lt
 8006948:	f04f 33ff 	movlt.w	r3, #4294967295
 800694c:	3402      	adds	r4, #2
 800694e:	9305      	str	r3, [sp, #20]
 8006950:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006a18 <_svfiprintf_r+0x1f8>
 8006954:	7821      	ldrb	r1, [r4, #0]
 8006956:	2203      	movs	r2, #3
 8006958:	4650      	mov	r0, sl
 800695a:	f7f9 fc41 	bl	80001e0 <memchr>
 800695e:	b138      	cbz	r0, 8006970 <_svfiprintf_r+0x150>
 8006960:	9b04      	ldr	r3, [sp, #16]
 8006962:	eba0 000a 	sub.w	r0, r0, sl
 8006966:	2240      	movs	r2, #64	; 0x40
 8006968:	4082      	lsls	r2, r0
 800696a:	4313      	orrs	r3, r2
 800696c:	3401      	adds	r4, #1
 800696e:	9304      	str	r3, [sp, #16]
 8006970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006974:	4825      	ldr	r0, [pc, #148]	; (8006a0c <_svfiprintf_r+0x1ec>)
 8006976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800697a:	2206      	movs	r2, #6
 800697c:	f7f9 fc30 	bl	80001e0 <memchr>
 8006980:	2800      	cmp	r0, #0
 8006982:	d038      	beq.n	80069f6 <_svfiprintf_r+0x1d6>
 8006984:	4b22      	ldr	r3, [pc, #136]	; (8006a10 <_svfiprintf_r+0x1f0>)
 8006986:	bb1b      	cbnz	r3, 80069d0 <_svfiprintf_r+0x1b0>
 8006988:	9b03      	ldr	r3, [sp, #12]
 800698a:	3307      	adds	r3, #7
 800698c:	f023 0307 	bic.w	r3, r3, #7
 8006990:	3308      	adds	r3, #8
 8006992:	9303      	str	r3, [sp, #12]
 8006994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006996:	4433      	add	r3, r6
 8006998:	9309      	str	r3, [sp, #36]	; 0x24
 800699a:	e768      	b.n	800686e <_svfiprintf_r+0x4e>
 800699c:	fb0c 3202 	mla	r2, ip, r2, r3
 80069a0:	460c      	mov	r4, r1
 80069a2:	2001      	movs	r0, #1
 80069a4:	e7a6      	b.n	80068f4 <_svfiprintf_r+0xd4>
 80069a6:	2300      	movs	r3, #0
 80069a8:	3401      	adds	r4, #1
 80069aa:	9305      	str	r3, [sp, #20]
 80069ac:	4619      	mov	r1, r3
 80069ae:	f04f 0c0a 	mov.w	ip, #10
 80069b2:	4620      	mov	r0, r4
 80069b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069b8:	3a30      	subs	r2, #48	; 0x30
 80069ba:	2a09      	cmp	r2, #9
 80069bc:	d903      	bls.n	80069c6 <_svfiprintf_r+0x1a6>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0c6      	beq.n	8006950 <_svfiprintf_r+0x130>
 80069c2:	9105      	str	r1, [sp, #20]
 80069c4:	e7c4      	b.n	8006950 <_svfiprintf_r+0x130>
 80069c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80069ca:	4604      	mov	r4, r0
 80069cc:	2301      	movs	r3, #1
 80069ce:	e7f0      	b.n	80069b2 <_svfiprintf_r+0x192>
 80069d0:	ab03      	add	r3, sp, #12
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	462a      	mov	r2, r5
 80069d6:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <_svfiprintf_r+0x1f4>)
 80069d8:	a904      	add	r1, sp, #16
 80069da:	4638      	mov	r0, r7
 80069dc:	f7fd fe62 	bl	80046a4 <_printf_float>
 80069e0:	1c42      	adds	r2, r0, #1
 80069e2:	4606      	mov	r6, r0
 80069e4:	d1d6      	bne.n	8006994 <_svfiprintf_r+0x174>
 80069e6:	89ab      	ldrh	r3, [r5, #12]
 80069e8:	065b      	lsls	r3, r3, #25
 80069ea:	f53f af2d 	bmi.w	8006848 <_svfiprintf_r+0x28>
 80069ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069f0:	b01d      	add	sp, #116	; 0x74
 80069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f6:	ab03      	add	r3, sp, #12
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	462a      	mov	r2, r5
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <_svfiprintf_r+0x1f4>)
 80069fe:	a904      	add	r1, sp, #16
 8006a00:	4638      	mov	r0, r7
 8006a02:	f7fe f8f3 	bl	8004bec <_printf_i>
 8006a06:	e7eb      	b.n	80069e0 <_svfiprintf_r+0x1c0>
 8006a08:	080074f4 	.word	0x080074f4
 8006a0c:	080074fe 	.word	0x080074fe
 8006a10:	080046a5 	.word	0x080046a5
 8006a14:	0800676d 	.word	0x0800676d
 8006a18:	080074fa 	.word	0x080074fa

08006a1c <__sflush_r>:
 8006a1c:	898a      	ldrh	r2, [r1, #12]
 8006a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a22:	4605      	mov	r5, r0
 8006a24:	0710      	lsls	r0, r2, #28
 8006a26:	460c      	mov	r4, r1
 8006a28:	d458      	bmi.n	8006adc <__sflush_r+0xc0>
 8006a2a:	684b      	ldr	r3, [r1, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dc05      	bgt.n	8006a3c <__sflush_r+0x20>
 8006a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	dc02      	bgt.n	8006a3c <__sflush_r+0x20>
 8006a36:	2000      	movs	r0, #0
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	d0f9      	beq.n	8006a36 <__sflush_r+0x1a>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a48:	682f      	ldr	r7, [r5, #0]
 8006a4a:	6a21      	ldr	r1, [r4, #32]
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	d032      	beq.n	8006ab6 <__sflush_r+0x9a>
 8006a50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	075a      	lsls	r2, r3, #29
 8006a56:	d505      	bpl.n	8006a64 <__sflush_r+0x48>
 8006a58:	6863      	ldr	r3, [r4, #4]
 8006a5a:	1ac0      	subs	r0, r0, r3
 8006a5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a5e:	b10b      	cbz	r3, 8006a64 <__sflush_r+0x48>
 8006a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a62:	1ac0      	subs	r0, r0, r3
 8006a64:	2300      	movs	r3, #0
 8006a66:	4602      	mov	r2, r0
 8006a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a6a:	6a21      	ldr	r1, [r4, #32]
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b0      	blx	r6
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	d106      	bne.n	8006a84 <__sflush_r+0x68>
 8006a76:	6829      	ldr	r1, [r5, #0]
 8006a78:	291d      	cmp	r1, #29
 8006a7a:	d82b      	bhi.n	8006ad4 <__sflush_r+0xb8>
 8006a7c:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <__sflush_r+0x108>)
 8006a7e:	410a      	asrs	r2, r1
 8006a80:	07d6      	lsls	r6, r2, #31
 8006a82:	d427      	bmi.n	8006ad4 <__sflush_r+0xb8>
 8006a84:	2200      	movs	r2, #0
 8006a86:	6062      	str	r2, [r4, #4]
 8006a88:	04d9      	lsls	r1, r3, #19
 8006a8a:	6922      	ldr	r2, [r4, #16]
 8006a8c:	6022      	str	r2, [r4, #0]
 8006a8e:	d504      	bpl.n	8006a9a <__sflush_r+0x7e>
 8006a90:	1c42      	adds	r2, r0, #1
 8006a92:	d101      	bne.n	8006a98 <__sflush_r+0x7c>
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	b903      	cbnz	r3, 8006a9a <__sflush_r+0x7e>
 8006a98:	6560      	str	r0, [r4, #84]	; 0x54
 8006a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a9c:	602f      	str	r7, [r5, #0]
 8006a9e:	2900      	cmp	r1, #0
 8006aa0:	d0c9      	beq.n	8006a36 <__sflush_r+0x1a>
 8006aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	d002      	beq.n	8006ab0 <__sflush_r+0x94>
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f7ff f9e2 	bl	8005e74 <_free_r>
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	6360      	str	r0, [r4, #52]	; 0x34
 8006ab4:	e7c0      	b.n	8006a38 <__sflush_r+0x1c>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4628      	mov	r0, r5
 8006aba:	47b0      	blx	r6
 8006abc:	1c41      	adds	r1, r0, #1
 8006abe:	d1c8      	bne.n	8006a52 <__sflush_r+0x36>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0c5      	beq.n	8006a52 <__sflush_r+0x36>
 8006ac6:	2b1d      	cmp	r3, #29
 8006ac8:	d001      	beq.n	8006ace <__sflush_r+0xb2>
 8006aca:	2b16      	cmp	r3, #22
 8006acc:	d101      	bne.n	8006ad2 <__sflush_r+0xb6>
 8006ace:	602f      	str	r7, [r5, #0]
 8006ad0:	e7b1      	b.n	8006a36 <__sflush_r+0x1a>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	e7ad      	b.n	8006a38 <__sflush_r+0x1c>
 8006adc:	690f      	ldr	r7, [r1, #16]
 8006ade:	2f00      	cmp	r7, #0
 8006ae0:	d0a9      	beq.n	8006a36 <__sflush_r+0x1a>
 8006ae2:	0793      	lsls	r3, r2, #30
 8006ae4:	680e      	ldr	r6, [r1, #0]
 8006ae6:	bf08      	it	eq
 8006ae8:	694b      	ldreq	r3, [r1, #20]
 8006aea:	600f      	str	r7, [r1, #0]
 8006aec:	bf18      	it	ne
 8006aee:	2300      	movne	r3, #0
 8006af0:	eba6 0807 	sub.w	r8, r6, r7
 8006af4:	608b      	str	r3, [r1, #8]
 8006af6:	f1b8 0f00 	cmp.w	r8, #0
 8006afa:	dd9c      	ble.n	8006a36 <__sflush_r+0x1a>
 8006afc:	6a21      	ldr	r1, [r4, #32]
 8006afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b00:	4643      	mov	r3, r8
 8006b02:	463a      	mov	r2, r7
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b0      	blx	r6
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	dc06      	bgt.n	8006b1a <__sflush_r+0xfe>
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b12:	81a3      	strh	r3, [r4, #12]
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295
 8006b18:	e78e      	b.n	8006a38 <__sflush_r+0x1c>
 8006b1a:	4407      	add	r7, r0
 8006b1c:	eba8 0800 	sub.w	r8, r8, r0
 8006b20:	e7e9      	b.n	8006af6 <__sflush_r+0xda>
 8006b22:	bf00      	nop
 8006b24:	dfbffffe 	.word	0xdfbffffe

08006b28 <_fflush_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	690b      	ldr	r3, [r1, #16]
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	b913      	cbnz	r3, 8006b38 <_fflush_r+0x10>
 8006b32:	2500      	movs	r5, #0
 8006b34:	4628      	mov	r0, r5
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	b118      	cbz	r0, 8006b42 <_fflush_r+0x1a>
 8006b3a:	6a03      	ldr	r3, [r0, #32]
 8006b3c:	b90b      	cbnz	r3, 8006b42 <_fflush_r+0x1a>
 8006b3e:	f7fe fa03 	bl	8004f48 <__sinit>
 8006b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f3      	beq.n	8006b32 <_fflush_r+0xa>
 8006b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b4c:	07d0      	lsls	r0, r2, #31
 8006b4e:	d404      	bmi.n	8006b5a <_fflush_r+0x32>
 8006b50:	0599      	lsls	r1, r3, #22
 8006b52:	d402      	bmi.n	8006b5a <_fflush_r+0x32>
 8006b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b56:	f7fe fb0e 	bl	8005176 <__retarget_lock_acquire_recursive>
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	f7ff ff5d 	bl	8006a1c <__sflush_r>
 8006b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b64:	07da      	lsls	r2, r3, #31
 8006b66:	4605      	mov	r5, r0
 8006b68:	d4e4      	bmi.n	8006b34 <_fflush_r+0xc>
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	059b      	lsls	r3, r3, #22
 8006b6e:	d4e1      	bmi.n	8006b34 <_fflush_r+0xc>
 8006b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b72:	f7fe fb01 	bl	8005178 <__retarget_lock_release_recursive>
 8006b76:	e7dd      	b.n	8006b34 <_fflush_r+0xc>

08006b78 <memmove>:
 8006b78:	4288      	cmp	r0, r1
 8006b7a:	b510      	push	{r4, lr}
 8006b7c:	eb01 0402 	add.w	r4, r1, r2
 8006b80:	d902      	bls.n	8006b88 <memmove+0x10>
 8006b82:	4284      	cmp	r4, r0
 8006b84:	4623      	mov	r3, r4
 8006b86:	d807      	bhi.n	8006b98 <memmove+0x20>
 8006b88:	1e43      	subs	r3, r0, #1
 8006b8a:	42a1      	cmp	r1, r4
 8006b8c:	d008      	beq.n	8006ba0 <memmove+0x28>
 8006b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b96:	e7f8      	b.n	8006b8a <memmove+0x12>
 8006b98:	4402      	add	r2, r0
 8006b9a:	4601      	mov	r1, r0
 8006b9c:	428a      	cmp	r2, r1
 8006b9e:	d100      	bne.n	8006ba2 <memmove+0x2a>
 8006ba0:	bd10      	pop	{r4, pc}
 8006ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006baa:	e7f7      	b.n	8006b9c <memmove+0x24>

08006bac <_sbrk_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4d06      	ldr	r5, [pc, #24]	; (8006bc8 <_sbrk_r+0x1c>)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	602b      	str	r3, [r5, #0]
 8006bb8:	f7fa fb40 	bl	800123c <_sbrk>
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d102      	bne.n	8006bc6 <_sbrk_r+0x1a>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	b103      	cbz	r3, 8006bc6 <_sbrk_r+0x1a>
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	20000410 	.word	0x20000410

08006bcc <memcpy>:
 8006bcc:	440a      	add	r2, r1
 8006bce:	4291      	cmp	r1, r2
 8006bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bd4:	d100      	bne.n	8006bd8 <memcpy+0xc>
 8006bd6:	4770      	bx	lr
 8006bd8:	b510      	push	{r4, lr}
 8006bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006be2:	4291      	cmp	r1, r2
 8006be4:	d1f9      	bne.n	8006bda <memcpy+0xe>
 8006be6:	bd10      	pop	{r4, pc}

08006be8 <__assert_func>:
 8006be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bea:	4614      	mov	r4, r2
 8006bec:	461a      	mov	r2, r3
 8006bee:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <__assert_func+0x2c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	68d8      	ldr	r0, [r3, #12]
 8006bf6:	b14c      	cbz	r4, 8006c0c <__assert_func+0x24>
 8006bf8:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <__assert_func+0x30>)
 8006bfa:	9100      	str	r1, [sp, #0]
 8006bfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c00:	4906      	ldr	r1, [pc, #24]	; (8006c1c <__assert_func+0x34>)
 8006c02:	462b      	mov	r3, r5
 8006c04:	f000 f872 	bl	8006cec <fiprintf>
 8006c08:	f000 f882 	bl	8006d10 <abort>
 8006c0c:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <__assert_func+0x38>)
 8006c0e:	461c      	mov	r4, r3
 8006c10:	e7f3      	b.n	8006bfa <__assert_func+0x12>
 8006c12:	bf00      	nop
 8006c14:	20000064 	.word	0x20000064
 8006c18:	0800750f 	.word	0x0800750f
 8006c1c:	0800751c 	.word	0x0800751c
 8006c20:	0800754a 	.word	0x0800754a

08006c24 <_calloc_r>:
 8006c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c26:	fba1 2402 	umull	r2, r4, r1, r2
 8006c2a:	b94c      	cbnz	r4, 8006c40 <_calloc_r+0x1c>
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	9201      	str	r2, [sp, #4]
 8006c30:	f7ff f994 	bl	8005f5c <_malloc_r>
 8006c34:	9a01      	ldr	r2, [sp, #4]
 8006c36:	4605      	mov	r5, r0
 8006c38:	b930      	cbnz	r0, 8006c48 <_calloc_r+0x24>
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	b003      	add	sp, #12
 8006c3e:	bd30      	pop	{r4, r5, pc}
 8006c40:	220c      	movs	r2, #12
 8006c42:	6002      	str	r2, [r0, #0]
 8006c44:	2500      	movs	r5, #0
 8006c46:	e7f8      	b.n	8006c3a <_calloc_r+0x16>
 8006c48:	4621      	mov	r1, r4
 8006c4a:	f7fe fa16 	bl	800507a <memset>
 8006c4e:	e7f4      	b.n	8006c3a <_calloc_r+0x16>

08006c50 <__ascii_mbtowc>:
 8006c50:	b082      	sub	sp, #8
 8006c52:	b901      	cbnz	r1, 8006c56 <__ascii_mbtowc+0x6>
 8006c54:	a901      	add	r1, sp, #4
 8006c56:	b142      	cbz	r2, 8006c6a <__ascii_mbtowc+0x1a>
 8006c58:	b14b      	cbz	r3, 8006c6e <__ascii_mbtowc+0x1e>
 8006c5a:	7813      	ldrb	r3, [r2, #0]
 8006c5c:	600b      	str	r3, [r1, #0]
 8006c5e:	7812      	ldrb	r2, [r2, #0]
 8006c60:	1e10      	subs	r0, r2, #0
 8006c62:	bf18      	it	ne
 8006c64:	2001      	movne	r0, #1
 8006c66:	b002      	add	sp, #8
 8006c68:	4770      	bx	lr
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	e7fb      	b.n	8006c66 <__ascii_mbtowc+0x16>
 8006c6e:	f06f 0001 	mvn.w	r0, #1
 8006c72:	e7f8      	b.n	8006c66 <__ascii_mbtowc+0x16>

08006c74 <_realloc_r>:
 8006c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c78:	4680      	mov	r8, r0
 8006c7a:	4614      	mov	r4, r2
 8006c7c:	460e      	mov	r6, r1
 8006c7e:	b921      	cbnz	r1, 8006c8a <_realloc_r+0x16>
 8006c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c84:	4611      	mov	r1, r2
 8006c86:	f7ff b969 	b.w	8005f5c <_malloc_r>
 8006c8a:	b92a      	cbnz	r2, 8006c98 <_realloc_r+0x24>
 8006c8c:	f7ff f8f2 	bl	8005e74 <_free_r>
 8006c90:	4625      	mov	r5, r4
 8006c92:	4628      	mov	r0, r5
 8006c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c98:	f000 f841 	bl	8006d1e <_malloc_usable_size_r>
 8006c9c:	4284      	cmp	r4, r0
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	d802      	bhi.n	8006ca8 <_realloc_r+0x34>
 8006ca2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ca6:	d812      	bhi.n	8006cce <_realloc_r+0x5a>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4640      	mov	r0, r8
 8006cac:	f7ff f956 	bl	8005f5c <_malloc_r>
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d0ed      	beq.n	8006c92 <_realloc_r+0x1e>
 8006cb6:	42bc      	cmp	r4, r7
 8006cb8:	4622      	mov	r2, r4
 8006cba:	4631      	mov	r1, r6
 8006cbc:	bf28      	it	cs
 8006cbe:	463a      	movcs	r2, r7
 8006cc0:	f7ff ff84 	bl	8006bcc <memcpy>
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	f7ff f8d4 	bl	8005e74 <_free_r>
 8006ccc:	e7e1      	b.n	8006c92 <_realloc_r+0x1e>
 8006cce:	4635      	mov	r5, r6
 8006cd0:	e7df      	b.n	8006c92 <_realloc_r+0x1e>

08006cd2 <__ascii_wctomb>:
 8006cd2:	b149      	cbz	r1, 8006ce8 <__ascii_wctomb+0x16>
 8006cd4:	2aff      	cmp	r2, #255	; 0xff
 8006cd6:	bf85      	ittet	hi
 8006cd8:	238a      	movhi	r3, #138	; 0x8a
 8006cda:	6003      	strhi	r3, [r0, #0]
 8006cdc:	700a      	strbls	r2, [r1, #0]
 8006cde:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ce2:	bf98      	it	ls
 8006ce4:	2001      	movls	r0, #1
 8006ce6:	4770      	bx	lr
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4770      	bx	lr

08006cec <fiprintf>:
 8006cec:	b40e      	push	{r1, r2, r3}
 8006cee:	b503      	push	{r0, r1, lr}
 8006cf0:	4601      	mov	r1, r0
 8006cf2:	ab03      	add	r3, sp, #12
 8006cf4:	4805      	ldr	r0, [pc, #20]	; (8006d0c <fiprintf+0x20>)
 8006cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cfa:	6800      	ldr	r0, [r0, #0]
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	f000 f83f 	bl	8006d80 <_vfiprintf_r>
 8006d02:	b002      	add	sp, #8
 8006d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d08:	b003      	add	sp, #12
 8006d0a:	4770      	bx	lr
 8006d0c:	20000064 	.word	0x20000064

08006d10 <abort>:
 8006d10:	b508      	push	{r3, lr}
 8006d12:	2006      	movs	r0, #6
 8006d14:	f000 fa0c 	bl	8007130 <raise>
 8006d18:	2001      	movs	r0, #1
 8006d1a:	f7fa fa17 	bl	800114c <_exit>

08006d1e <_malloc_usable_size_r>:
 8006d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d22:	1f18      	subs	r0, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bfbc      	itt	lt
 8006d28:	580b      	ldrlt	r3, [r1, r0]
 8006d2a:	18c0      	addlt	r0, r0, r3
 8006d2c:	4770      	bx	lr

08006d2e <__sfputc_r>:
 8006d2e:	6893      	ldr	r3, [r2, #8]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	b410      	push	{r4}
 8006d36:	6093      	str	r3, [r2, #8]
 8006d38:	da08      	bge.n	8006d4c <__sfputc_r+0x1e>
 8006d3a:	6994      	ldr	r4, [r2, #24]
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	db01      	blt.n	8006d44 <__sfputc_r+0x16>
 8006d40:	290a      	cmp	r1, #10
 8006d42:	d103      	bne.n	8006d4c <__sfputc_r+0x1e>
 8006d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d48:	f000 b934 	b.w	8006fb4 <__swbuf_r>
 8006d4c:	6813      	ldr	r3, [r2, #0]
 8006d4e:	1c58      	adds	r0, r3, #1
 8006d50:	6010      	str	r0, [r2, #0]
 8006d52:	7019      	strb	r1, [r3, #0]
 8006d54:	4608      	mov	r0, r1
 8006d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <__sfputs_r>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	4606      	mov	r6, r0
 8006d60:	460f      	mov	r7, r1
 8006d62:	4614      	mov	r4, r2
 8006d64:	18d5      	adds	r5, r2, r3
 8006d66:	42ac      	cmp	r4, r5
 8006d68:	d101      	bne.n	8006d6e <__sfputs_r+0x12>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	e007      	b.n	8006d7e <__sfputs_r+0x22>
 8006d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d72:	463a      	mov	r2, r7
 8006d74:	4630      	mov	r0, r6
 8006d76:	f7ff ffda 	bl	8006d2e <__sfputc_r>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d1f3      	bne.n	8006d66 <__sfputs_r+0xa>
 8006d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d80 <_vfiprintf_r>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	460d      	mov	r5, r1
 8006d86:	b09d      	sub	sp, #116	; 0x74
 8006d88:	4614      	mov	r4, r2
 8006d8a:	4698      	mov	r8, r3
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	b118      	cbz	r0, 8006d98 <_vfiprintf_r+0x18>
 8006d90:	6a03      	ldr	r3, [r0, #32]
 8006d92:	b90b      	cbnz	r3, 8006d98 <_vfiprintf_r+0x18>
 8006d94:	f7fe f8d8 	bl	8004f48 <__sinit>
 8006d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d9a:	07d9      	lsls	r1, r3, #31
 8006d9c:	d405      	bmi.n	8006daa <_vfiprintf_r+0x2a>
 8006d9e:	89ab      	ldrh	r3, [r5, #12]
 8006da0:	059a      	lsls	r2, r3, #22
 8006da2:	d402      	bmi.n	8006daa <_vfiprintf_r+0x2a>
 8006da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006da6:	f7fe f9e6 	bl	8005176 <__retarget_lock_acquire_recursive>
 8006daa:	89ab      	ldrh	r3, [r5, #12]
 8006dac:	071b      	lsls	r3, r3, #28
 8006dae:	d501      	bpl.n	8006db4 <_vfiprintf_r+0x34>
 8006db0:	692b      	ldr	r3, [r5, #16]
 8006db2:	b99b      	cbnz	r3, 8006ddc <_vfiprintf_r+0x5c>
 8006db4:	4629      	mov	r1, r5
 8006db6:	4630      	mov	r0, r6
 8006db8:	f000 f93a 	bl	8007030 <__swsetup_r>
 8006dbc:	b170      	cbz	r0, 8006ddc <_vfiprintf_r+0x5c>
 8006dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dc0:	07dc      	lsls	r4, r3, #31
 8006dc2:	d504      	bpl.n	8006dce <_vfiprintf_r+0x4e>
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc8:	b01d      	add	sp, #116	; 0x74
 8006dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dce:	89ab      	ldrh	r3, [r5, #12]
 8006dd0:	0598      	lsls	r0, r3, #22
 8006dd2:	d4f7      	bmi.n	8006dc4 <_vfiprintf_r+0x44>
 8006dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dd6:	f7fe f9cf 	bl	8005178 <__retarget_lock_release_recursive>
 8006dda:	e7f3      	b.n	8006dc4 <_vfiprintf_r+0x44>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	9309      	str	r3, [sp, #36]	; 0x24
 8006de0:	2320      	movs	r3, #32
 8006de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dea:	2330      	movs	r3, #48	; 0x30
 8006dec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006fa0 <_vfiprintf_r+0x220>
 8006df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006df4:	f04f 0901 	mov.w	r9, #1
 8006df8:	4623      	mov	r3, r4
 8006dfa:	469a      	mov	sl, r3
 8006dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e00:	b10a      	cbz	r2, 8006e06 <_vfiprintf_r+0x86>
 8006e02:	2a25      	cmp	r2, #37	; 0x25
 8006e04:	d1f9      	bne.n	8006dfa <_vfiprintf_r+0x7a>
 8006e06:	ebba 0b04 	subs.w	fp, sl, r4
 8006e0a:	d00b      	beq.n	8006e24 <_vfiprintf_r+0xa4>
 8006e0c:	465b      	mov	r3, fp
 8006e0e:	4622      	mov	r2, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	4630      	mov	r0, r6
 8006e14:	f7ff ffa2 	bl	8006d5c <__sfputs_r>
 8006e18:	3001      	adds	r0, #1
 8006e1a:	f000 80a9 	beq.w	8006f70 <_vfiprintf_r+0x1f0>
 8006e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e20:	445a      	add	r2, fp
 8006e22:	9209      	str	r2, [sp, #36]	; 0x24
 8006e24:	f89a 3000 	ldrb.w	r3, [sl]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 80a1 	beq.w	8006f70 <_vfiprintf_r+0x1f0>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f04f 32ff 	mov.w	r2, #4294967295
 8006e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e38:	f10a 0a01 	add.w	sl, sl, #1
 8006e3c:	9304      	str	r3, [sp, #16]
 8006e3e:	9307      	str	r3, [sp, #28]
 8006e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e44:	931a      	str	r3, [sp, #104]	; 0x68
 8006e46:	4654      	mov	r4, sl
 8006e48:	2205      	movs	r2, #5
 8006e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4e:	4854      	ldr	r0, [pc, #336]	; (8006fa0 <_vfiprintf_r+0x220>)
 8006e50:	f7f9 f9c6 	bl	80001e0 <memchr>
 8006e54:	9a04      	ldr	r2, [sp, #16]
 8006e56:	b9d8      	cbnz	r0, 8006e90 <_vfiprintf_r+0x110>
 8006e58:	06d1      	lsls	r1, r2, #27
 8006e5a:	bf44      	itt	mi
 8006e5c:	2320      	movmi	r3, #32
 8006e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e62:	0713      	lsls	r3, r2, #28
 8006e64:	bf44      	itt	mi
 8006e66:	232b      	movmi	r3, #43	; 0x2b
 8006e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e70:	2b2a      	cmp	r3, #42	; 0x2a
 8006e72:	d015      	beq.n	8006ea0 <_vfiprintf_r+0x120>
 8006e74:	9a07      	ldr	r2, [sp, #28]
 8006e76:	4654      	mov	r4, sl
 8006e78:	2000      	movs	r0, #0
 8006e7a:	f04f 0c0a 	mov.w	ip, #10
 8006e7e:	4621      	mov	r1, r4
 8006e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e84:	3b30      	subs	r3, #48	; 0x30
 8006e86:	2b09      	cmp	r3, #9
 8006e88:	d94d      	bls.n	8006f26 <_vfiprintf_r+0x1a6>
 8006e8a:	b1b0      	cbz	r0, 8006eba <_vfiprintf_r+0x13a>
 8006e8c:	9207      	str	r2, [sp, #28]
 8006e8e:	e014      	b.n	8006eba <_vfiprintf_r+0x13a>
 8006e90:	eba0 0308 	sub.w	r3, r0, r8
 8006e94:	fa09 f303 	lsl.w	r3, r9, r3
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	9304      	str	r3, [sp, #16]
 8006e9c:	46a2      	mov	sl, r4
 8006e9e:	e7d2      	b.n	8006e46 <_vfiprintf_r+0xc6>
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	1d19      	adds	r1, r3, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	9103      	str	r1, [sp, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bfbb      	ittet	lt
 8006eac:	425b      	neglt	r3, r3
 8006eae:	f042 0202 	orrlt.w	r2, r2, #2
 8006eb2:	9307      	strge	r3, [sp, #28]
 8006eb4:	9307      	strlt	r3, [sp, #28]
 8006eb6:	bfb8      	it	lt
 8006eb8:	9204      	strlt	r2, [sp, #16]
 8006eba:	7823      	ldrb	r3, [r4, #0]
 8006ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ebe:	d10c      	bne.n	8006eda <_vfiprintf_r+0x15a>
 8006ec0:	7863      	ldrb	r3, [r4, #1]
 8006ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec4:	d134      	bne.n	8006f30 <_vfiprintf_r+0x1b0>
 8006ec6:	9b03      	ldr	r3, [sp, #12]
 8006ec8:	1d1a      	adds	r2, r3, #4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	9203      	str	r2, [sp, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	bfb8      	it	lt
 8006ed2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ed6:	3402      	adds	r4, #2
 8006ed8:	9305      	str	r3, [sp, #20]
 8006eda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006fb0 <_vfiprintf_r+0x230>
 8006ede:	7821      	ldrb	r1, [r4, #0]
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	f7f9 f97c 	bl	80001e0 <memchr>
 8006ee8:	b138      	cbz	r0, 8006efa <_vfiprintf_r+0x17a>
 8006eea:	9b04      	ldr	r3, [sp, #16]
 8006eec:	eba0 000a 	sub.w	r0, r0, sl
 8006ef0:	2240      	movs	r2, #64	; 0x40
 8006ef2:	4082      	lsls	r2, r0
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	3401      	adds	r4, #1
 8006ef8:	9304      	str	r3, [sp, #16]
 8006efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006efe:	4829      	ldr	r0, [pc, #164]	; (8006fa4 <_vfiprintf_r+0x224>)
 8006f00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f04:	2206      	movs	r2, #6
 8006f06:	f7f9 f96b 	bl	80001e0 <memchr>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d03f      	beq.n	8006f8e <_vfiprintf_r+0x20e>
 8006f0e:	4b26      	ldr	r3, [pc, #152]	; (8006fa8 <_vfiprintf_r+0x228>)
 8006f10:	bb1b      	cbnz	r3, 8006f5a <_vfiprintf_r+0x1da>
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	3307      	adds	r3, #7
 8006f16:	f023 0307 	bic.w	r3, r3, #7
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	9303      	str	r3, [sp, #12]
 8006f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f20:	443b      	add	r3, r7
 8006f22:	9309      	str	r3, [sp, #36]	; 0x24
 8006f24:	e768      	b.n	8006df8 <_vfiprintf_r+0x78>
 8006f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	e7a6      	b.n	8006e7e <_vfiprintf_r+0xfe>
 8006f30:	2300      	movs	r3, #0
 8006f32:	3401      	adds	r4, #1
 8006f34:	9305      	str	r3, [sp, #20]
 8006f36:	4619      	mov	r1, r3
 8006f38:	f04f 0c0a 	mov.w	ip, #10
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f42:	3a30      	subs	r2, #48	; 0x30
 8006f44:	2a09      	cmp	r2, #9
 8006f46:	d903      	bls.n	8006f50 <_vfiprintf_r+0x1d0>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0c6      	beq.n	8006eda <_vfiprintf_r+0x15a>
 8006f4c:	9105      	str	r1, [sp, #20]
 8006f4e:	e7c4      	b.n	8006eda <_vfiprintf_r+0x15a>
 8006f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f54:	4604      	mov	r4, r0
 8006f56:	2301      	movs	r3, #1
 8006f58:	e7f0      	b.n	8006f3c <_vfiprintf_r+0x1bc>
 8006f5a:	ab03      	add	r3, sp, #12
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	462a      	mov	r2, r5
 8006f60:	4b12      	ldr	r3, [pc, #72]	; (8006fac <_vfiprintf_r+0x22c>)
 8006f62:	a904      	add	r1, sp, #16
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7fd fb9d 	bl	80046a4 <_printf_float>
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	1c78      	adds	r0, r7, #1
 8006f6e:	d1d6      	bne.n	8006f1e <_vfiprintf_r+0x19e>
 8006f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f72:	07d9      	lsls	r1, r3, #31
 8006f74:	d405      	bmi.n	8006f82 <_vfiprintf_r+0x202>
 8006f76:	89ab      	ldrh	r3, [r5, #12]
 8006f78:	059a      	lsls	r2, r3, #22
 8006f7a:	d402      	bmi.n	8006f82 <_vfiprintf_r+0x202>
 8006f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f7e:	f7fe f8fb 	bl	8005178 <__retarget_lock_release_recursive>
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	065b      	lsls	r3, r3, #25
 8006f86:	f53f af1d 	bmi.w	8006dc4 <_vfiprintf_r+0x44>
 8006f8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f8c:	e71c      	b.n	8006dc8 <_vfiprintf_r+0x48>
 8006f8e:	ab03      	add	r3, sp, #12
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	462a      	mov	r2, r5
 8006f94:	4b05      	ldr	r3, [pc, #20]	; (8006fac <_vfiprintf_r+0x22c>)
 8006f96:	a904      	add	r1, sp, #16
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f7fd fe27 	bl	8004bec <_printf_i>
 8006f9e:	e7e4      	b.n	8006f6a <_vfiprintf_r+0x1ea>
 8006fa0:	080074f4 	.word	0x080074f4
 8006fa4:	080074fe 	.word	0x080074fe
 8006fa8:	080046a5 	.word	0x080046a5
 8006fac:	08006d5d 	.word	0x08006d5d
 8006fb0:	080074fa 	.word	0x080074fa

08006fb4 <__swbuf_r>:
 8006fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb6:	460e      	mov	r6, r1
 8006fb8:	4614      	mov	r4, r2
 8006fba:	4605      	mov	r5, r0
 8006fbc:	b118      	cbz	r0, 8006fc6 <__swbuf_r+0x12>
 8006fbe:	6a03      	ldr	r3, [r0, #32]
 8006fc0:	b90b      	cbnz	r3, 8006fc6 <__swbuf_r+0x12>
 8006fc2:	f7fd ffc1 	bl	8004f48 <__sinit>
 8006fc6:	69a3      	ldr	r3, [r4, #24]
 8006fc8:	60a3      	str	r3, [r4, #8]
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	071a      	lsls	r2, r3, #28
 8006fce:	d525      	bpl.n	800701c <__swbuf_r+0x68>
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	b31b      	cbz	r3, 800701c <__swbuf_r+0x68>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	6922      	ldr	r2, [r4, #16]
 8006fd8:	1a98      	subs	r0, r3, r2
 8006fda:	6963      	ldr	r3, [r4, #20]
 8006fdc:	b2f6      	uxtb	r6, r6
 8006fde:	4283      	cmp	r3, r0
 8006fe0:	4637      	mov	r7, r6
 8006fe2:	dc04      	bgt.n	8006fee <__swbuf_r+0x3a>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f7ff fd9e 	bl	8006b28 <_fflush_r>
 8006fec:	b9e0      	cbnz	r0, 8007028 <__swbuf_r+0x74>
 8006fee:	68a3      	ldr	r3, [r4, #8]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	60a3      	str	r3, [r4, #8]
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	6022      	str	r2, [r4, #0]
 8006ffa:	701e      	strb	r6, [r3, #0]
 8006ffc:	6962      	ldr	r2, [r4, #20]
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	429a      	cmp	r2, r3
 8007002:	d004      	beq.n	800700e <__swbuf_r+0x5a>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	07db      	lsls	r3, r3, #31
 8007008:	d506      	bpl.n	8007018 <__swbuf_r+0x64>
 800700a:	2e0a      	cmp	r6, #10
 800700c:	d104      	bne.n	8007018 <__swbuf_r+0x64>
 800700e:	4621      	mov	r1, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f7ff fd89 	bl	8006b28 <_fflush_r>
 8007016:	b938      	cbnz	r0, 8007028 <__swbuf_r+0x74>
 8007018:	4638      	mov	r0, r7
 800701a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800701c:	4621      	mov	r1, r4
 800701e:	4628      	mov	r0, r5
 8007020:	f000 f806 	bl	8007030 <__swsetup_r>
 8007024:	2800      	cmp	r0, #0
 8007026:	d0d5      	beq.n	8006fd4 <__swbuf_r+0x20>
 8007028:	f04f 37ff 	mov.w	r7, #4294967295
 800702c:	e7f4      	b.n	8007018 <__swbuf_r+0x64>
	...

08007030 <__swsetup_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4b2a      	ldr	r3, [pc, #168]	; (80070dc <__swsetup_r+0xac>)
 8007034:	4605      	mov	r5, r0
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	460c      	mov	r4, r1
 800703a:	b118      	cbz	r0, 8007044 <__swsetup_r+0x14>
 800703c:	6a03      	ldr	r3, [r0, #32]
 800703e:	b90b      	cbnz	r3, 8007044 <__swsetup_r+0x14>
 8007040:	f7fd ff82 	bl	8004f48 <__sinit>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800704a:	0718      	lsls	r0, r3, #28
 800704c:	d422      	bmi.n	8007094 <__swsetup_r+0x64>
 800704e:	06d9      	lsls	r1, r3, #27
 8007050:	d407      	bmi.n	8007062 <__swsetup_r+0x32>
 8007052:	2309      	movs	r3, #9
 8007054:	602b      	str	r3, [r5, #0]
 8007056:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	e034      	b.n	80070cc <__swsetup_r+0x9c>
 8007062:	0758      	lsls	r0, r3, #29
 8007064:	d512      	bpl.n	800708c <__swsetup_r+0x5c>
 8007066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007068:	b141      	cbz	r1, 800707c <__swsetup_r+0x4c>
 800706a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800706e:	4299      	cmp	r1, r3
 8007070:	d002      	beq.n	8007078 <__swsetup_r+0x48>
 8007072:	4628      	mov	r0, r5
 8007074:	f7fe fefe 	bl	8005e74 <_free_r>
 8007078:	2300      	movs	r3, #0
 800707a:	6363      	str	r3, [r4, #52]	; 0x34
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007082:	81a3      	strh	r3, [r4, #12]
 8007084:	2300      	movs	r3, #0
 8007086:	6063      	str	r3, [r4, #4]
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	6023      	str	r3, [r4, #0]
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	f043 0308 	orr.w	r3, r3, #8
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	6923      	ldr	r3, [r4, #16]
 8007096:	b94b      	cbnz	r3, 80070ac <__swsetup_r+0x7c>
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800709e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a2:	d003      	beq.n	80070ac <__swsetup_r+0x7c>
 80070a4:	4621      	mov	r1, r4
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 f884 	bl	80071b4 <__smakebuf_r>
 80070ac:	89a0      	ldrh	r0, [r4, #12]
 80070ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070b2:	f010 0301 	ands.w	r3, r0, #1
 80070b6:	d00a      	beq.n	80070ce <__swsetup_r+0x9e>
 80070b8:	2300      	movs	r3, #0
 80070ba:	60a3      	str	r3, [r4, #8]
 80070bc:	6963      	ldr	r3, [r4, #20]
 80070be:	425b      	negs	r3, r3
 80070c0:	61a3      	str	r3, [r4, #24]
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	b943      	cbnz	r3, 80070d8 <__swsetup_r+0xa8>
 80070c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070ca:	d1c4      	bne.n	8007056 <__swsetup_r+0x26>
 80070cc:	bd38      	pop	{r3, r4, r5, pc}
 80070ce:	0781      	lsls	r1, r0, #30
 80070d0:	bf58      	it	pl
 80070d2:	6963      	ldrpl	r3, [r4, #20]
 80070d4:	60a3      	str	r3, [r4, #8]
 80070d6:	e7f4      	b.n	80070c2 <__swsetup_r+0x92>
 80070d8:	2000      	movs	r0, #0
 80070da:	e7f7      	b.n	80070cc <__swsetup_r+0x9c>
 80070dc:	20000064 	.word	0x20000064

080070e0 <_raise_r>:
 80070e0:	291f      	cmp	r1, #31
 80070e2:	b538      	push	{r3, r4, r5, lr}
 80070e4:	4604      	mov	r4, r0
 80070e6:	460d      	mov	r5, r1
 80070e8:	d904      	bls.n	80070f4 <_raise_r+0x14>
 80070ea:	2316      	movs	r3, #22
 80070ec:	6003      	str	r3, [r0, #0]
 80070ee:	f04f 30ff 	mov.w	r0, #4294967295
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80070f6:	b112      	cbz	r2, 80070fe <_raise_r+0x1e>
 80070f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070fc:	b94b      	cbnz	r3, 8007112 <_raise_r+0x32>
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 f830 	bl	8007164 <_getpid_r>
 8007104:	462a      	mov	r2, r5
 8007106:	4601      	mov	r1, r0
 8007108:	4620      	mov	r0, r4
 800710a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800710e:	f000 b817 	b.w	8007140 <_kill_r>
 8007112:	2b01      	cmp	r3, #1
 8007114:	d00a      	beq.n	800712c <_raise_r+0x4c>
 8007116:	1c59      	adds	r1, r3, #1
 8007118:	d103      	bne.n	8007122 <_raise_r+0x42>
 800711a:	2316      	movs	r3, #22
 800711c:	6003      	str	r3, [r0, #0]
 800711e:	2001      	movs	r0, #1
 8007120:	e7e7      	b.n	80070f2 <_raise_r+0x12>
 8007122:	2400      	movs	r4, #0
 8007124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007128:	4628      	mov	r0, r5
 800712a:	4798      	blx	r3
 800712c:	2000      	movs	r0, #0
 800712e:	e7e0      	b.n	80070f2 <_raise_r+0x12>

08007130 <raise>:
 8007130:	4b02      	ldr	r3, [pc, #8]	; (800713c <raise+0xc>)
 8007132:	4601      	mov	r1, r0
 8007134:	6818      	ldr	r0, [r3, #0]
 8007136:	f7ff bfd3 	b.w	80070e0 <_raise_r>
 800713a:	bf00      	nop
 800713c:	20000064 	.word	0x20000064

08007140 <_kill_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4d07      	ldr	r5, [pc, #28]	; (8007160 <_kill_r+0x20>)
 8007144:	2300      	movs	r3, #0
 8007146:	4604      	mov	r4, r0
 8007148:	4608      	mov	r0, r1
 800714a:	4611      	mov	r1, r2
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	f7f9 ffed 	bl	800112c <_kill>
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	d102      	bne.n	800715c <_kill_r+0x1c>
 8007156:	682b      	ldr	r3, [r5, #0]
 8007158:	b103      	cbz	r3, 800715c <_kill_r+0x1c>
 800715a:	6023      	str	r3, [r4, #0]
 800715c:	bd38      	pop	{r3, r4, r5, pc}
 800715e:	bf00      	nop
 8007160:	20000410 	.word	0x20000410

08007164 <_getpid_r>:
 8007164:	f7f9 bfda 	b.w	800111c <_getpid>

08007168 <__swhatbuf_r>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	460c      	mov	r4, r1
 800716c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007170:	2900      	cmp	r1, #0
 8007172:	b096      	sub	sp, #88	; 0x58
 8007174:	4615      	mov	r5, r2
 8007176:	461e      	mov	r6, r3
 8007178:	da0d      	bge.n	8007196 <__swhatbuf_r+0x2e>
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007180:	f04f 0100 	mov.w	r1, #0
 8007184:	bf0c      	ite	eq
 8007186:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800718a:	2340      	movne	r3, #64	; 0x40
 800718c:	2000      	movs	r0, #0
 800718e:	6031      	str	r1, [r6, #0]
 8007190:	602b      	str	r3, [r5, #0]
 8007192:	b016      	add	sp, #88	; 0x58
 8007194:	bd70      	pop	{r4, r5, r6, pc}
 8007196:	466a      	mov	r2, sp
 8007198:	f000 f848 	bl	800722c <_fstat_r>
 800719c:	2800      	cmp	r0, #0
 800719e:	dbec      	blt.n	800717a <__swhatbuf_r+0x12>
 80071a0:	9901      	ldr	r1, [sp, #4]
 80071a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80071a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80071aa:	4259      	negs	r1, r3
 80071ac:	4159      	adcs	r1, r3
 80071ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071b2:	e7eb      	b.n	800718c <__swhatbuf_r+0x24>

080071b4 <__smakebuf_r>:
 80071b4:	898b      	ldrh	r3, [r1, #12]
 80071b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071b8:	079d      	lsls	r5, r3, #30
 80071ba:	4606      	mov	r6, r0
 80071bc:	460c      	mov	r4, r1
 80071be:	d507      	bpl.n	80071d0 <__smakebuf_r+0x1c>
 80071c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	6123      	str	r3, [r4, #16]
 80071c8:	2301      	movs	r3, #1
 80071ca:	6163      	str	r3, [r4, #20]
 80071cc:	b002      	add	sp, #8
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	ab01      	add	r3, sp, #4
 80071d2:	466a      	mov	r2, sp
 80071d4:	f7ff ffc8 	bl	8007168 <__swhatbuf_r>
 80071d8:	9900      	ldr	r1, [sp, #0]
 80071da:	4605      	mov	r5, r0
 80071dc:	4630      	mov	r0, r6
 80071de:	f7fe febd 	bl	8005f5c <_malloc_r>
 80071e2:	b948      	cbnz	r0, 80071f8 <__smakebuf_r+0x44>
 80071e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e8:	059a      	lsls	r2, r3, #22
 80071ea:	d4ef      	bmi.n	80071cc <__smakebuf_r+0x18>
 80071ec:	f023 0303 	bic.w	r3, r3, #3
 80071f0:	f043 0302 	orr.w	r3, r3, #2
 80071f4:	81a3      	strh	r3, [r4, #12]
 80071f6:	e7e3      	b.n	80071c0 <__smakebuf_r+0xc>
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	6020      	str	r0, [r4, #0]
 80071fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	9b00      	ldr	r3, [sp, #0]
 8007204:	6163      	str	r3, [r4, #20]
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	6120      	str	r0, [r4, #16]
 800720a:	b15b      	cbz	r3, 8007224 <__smakebuf_r+0x70>
 800720c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007210:	4630      	mov	r0, r6
 8007212:	f000 f81d 	bl	8007250 <_isatty_r>
 8007216:	b128      	cbz	r0, 8007224 <__smakebuf_r+0x70>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	f043 0301 	orr.w	r3, r3, #1
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	431d      	orrs	r5, r3
 8007228:	81a5      	strh	r5, [r4, #12]
 800722a:	e7cf      	b.n	80071cc <__smakebuf_r+0x18>

0800722c <_fstat_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4d07      	ldr	r5, [pc, #28]	; (800724c <_fstat_r+0x20>)
 8007230:	2300      	movs	r3, #0
 8007232:	4604      	mov	r4, r0
 8007234:	4608      	mov	r0, r1
 8007236:	4611      	mov	r1, r2
 8007238:	602b      	str	r3, [r5, #0]
 800723a:	f7f9 ffd6 	bl	80011ea <_fstat>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	d102      	bne.n	8007248 <_fstat_r+0x1c>
 8007242:	682b      	ldr	r3, [r5, #0]
 8007244:	b103      	cbz	r3, 8007248 <_fstat_r+0x1c>
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	bd38      	pop	{r3, r4, r5, pc}
 800724a:	bf00      	nop
 800724c:	20000410 	.word	0x20000410

08007250 <_isatty_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4d06      	ldr	r5, [pc, #24]	; (800726c <_isatty_r+0x1c>)
 8007254:	2300      	movs	r3, #0
 8007256:	4604      	mov	r4, r0
 8007258:	4608      	mov	r0, r1
 800725a:	602b      	str	r3, [r5, #0]
 800725c:	f7f9 ffd5 	bl	800120a <_isatty>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d102      	bne.n	800726a <_isatty_r+0x1a>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	b103      	cbz	r3, 800726a <_isatty_r+0x1a>
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	20000410 	.word	0x20000410

08007270 <_init>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	bf00      	nop
 8007274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007276:	bc08      	pop	{r3}
 8007278:	469e      	mov	lr, r3
 800727a:	4770      	bx	lr

0800727c <_fini>:
 800727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727e:	bf00      	nop
 8007280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007282:	bc08      	pop	{r3}
 8007284:	469e      	mov	lr, r3
 8007286:	4770      	bx	lr
